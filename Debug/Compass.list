
Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08009c90  08009c90  0000ac90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a208  0800a208  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a208  0800a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a210  0800a210  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a214  0800a214  0000b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a218  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e0  2**0
                  CONTENTS
 10 .bss          000005bc  200001e0  200001e0  0000c1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  0000c1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010440  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3c  00000000  00000000  0001c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b01  00000000  00000000  0001ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023782  00000000  00000000  00020a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011df8  00000000  00000000  00044193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d48f2  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a87d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f78  00000000  00000000  0012a8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  0012f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c78 	.word	0x08009c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009c78 	.word	0x08009c78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <LiquidCrystal_I2C_Init>:
#include "LiquidCrystal_I2C.h"

void LiquidCrystal_I2C_Init(LiquidCrystal_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t cols, uint8_t rows) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71bb      	strb	r3, [r7, #6]
    lcd->hi2c = hi2c;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
    lcd->Address = address << 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	711a      	strb	r2, [r3, #4]
    lcd->Cols = cols;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	715a      	strb	r2, [r3, #5]
    lcd->Rows = rows;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	7e3a      	ldrb	r2, [r7, #24]
 8000f88:	719a      	strb	r2, [r3, #6]
    lcd->BacklightVal = LCD_BACKLIGHT;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	721a      	strb	r2, [r3, #8]
    if (rows > 1) {
 8000f96:	7e3b      	ldrb	r3, [r7, #24]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d906      	bls.n	8000faa <LiquidCrystal_I2C_Init+0x52>
        lcd->DisplayFunction |= LCD_2LINE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	721a      	strb	r2, [r3, #8]
    }
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LiquidCrystal_I2C_Begin>:

void LiquidCrystal_I2C_Begin(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70bb      	strb	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
    lcd->NumLines = rows;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	78ba      	ldrb	r2, [r7, #2]
 8000fd4:	72da      	strb	r2, [r3, #11]
    lcd->DisplayFunction |= charsize;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a1a      	ldrb	r2, [r3, #8]
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	721a      	strb	r2, [r3, #8]

    HAL_Delay(50); // Wait for >40ms
 8000fe4:	2032      	movs	r0, #50	@ 0x32
 8000fe6:	f001 fc67 	bl	80028b8 <HAL_Delay>

    LiquidCrystal_I2C_ExpanderWrite(lcd, lcd->BacklightVal);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	79db      	ldrb	r3, [r3, #7]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8f0 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffa:	f001 fc5d 	bl	80028b8 <HAL_Delay>

    // Initialization sequence
    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000ffe:	2130      	movs	r1, #48	@ 0x30
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8d4 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001006:	2005      	movs	r0, #5
 8001008:	f001 fc56 	bl	80028b8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800100c:	2130      	movs	r1, #48	@ 0x30
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8cd 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001014:	2005      	movs	r0, #5
 8001016:	f001 fc4f 	bl	80028b8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800101a:	2130      	movs	r1, #48	@ 0x30
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f8c6 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 fc48 	bl	80028b8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x02 << 4); // Finally, set to 4-bit interface
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8bf 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>

    LiquidCrystal_I2C_Command(lcd, LCD_FUNCTIONSET | lcd->DisplayFunction);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f883 	bl	8001148 <LiquidCrystal_I2C_Command>

    lcd->DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2204      	movs	r2, #4
 8001046:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Display(lcd);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f822 	bl	8001092 <LiquidCrystal_I2C_Display>

    LiquidCrystal_I2C_Clear(lcd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f810 	bl	8001074 <LiquidCrystal_I2C_Clear>

    lcd->DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	729a      	strb	r2, [r3, #10]
    LiquidCrystal_I2C_Command(lcd, LCD_ENTRYMODESET | lcd->DisplayMode);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f86e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LiquidCrystal_I2C_Clear>:

void LiquidCrystal_I2C_Clear(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    LiquidCrystal_I2C_Command(lcd, LCD_CLEARDISPLAY);
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f862 	bl	8001148 <LiquidCrystal_I2C_Command>
    HAL_Delay(2);
 8001084:	2002      	movs	r0, #2
 8001086:	f001 fc17 	bl	80028b8 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LiquidCrystal_I2C_Display>:
void LiquidCrystal_I2C_NoDisplay(LiquidCrystal_I2C_HandleTypeDef *lcd) {
    lcd->DisplayControl &= ~LCD_DISPLAYON;
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void LiquidCrystal_I2C_Display(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
    lcd->DisplayControl |= LCD_DISPLAYON;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a5b      	ldrb	r3, [r3, #9]
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a5b      	ldrb	r3, [r3, #9]
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f847 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LiquidCrystal_I2C_SetCursor>:
    for (int i = 0; i < 8; i++) {
        LiquidCrystal_I2C_Send(lcd, charmap[i], Rs);
    }
}

void LiquidCrystal_I2C_SetCursor(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <LiquidCrystal_I2C_SetCursor+0x50>)
 80010d6:	60fb      	str	r3, [r7, #12]
    if (row > lcd->NumLines) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7adb      	ldrb	r3, [r3, #11]
 80010dc:	78ba      	ldrb	r2, [r7, #2]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d903      	bls.n	80010ea <LiquidCrystal_I2C_SetCursor+0x26>
        row = lcd->NumLines - 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7adb      	ldrb	r3, [r3, #11]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	70bb      	strb	r3, [r7, #2]
    }
    LiquidCrystal_I2C_Command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	3310      	adds	r3, #16
 80010ee:	443b      	add	r3, r7
 80010f0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f81e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	54144000 	.word	0x54144000

08001118 <LiquidCrystal_I2C_Print>:

void LiquidCrystal_I2C_Print(LiquidCrystal_I2C_HandleTypeDef *lcd, const char *str) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001122:	e008      	b.n	8001136 <LiquidCrystal_I2C_Print+0x1e>
        LiquidCrystal_I2C_Send(lcd, *str++, Rs);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	603a      	str	r2, [r7, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f819 	bl	8001168 <LiquidCrystal_I2C_Send>
    while (*str) {
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <LiquidCrystal_I2C_Print+0xc>
    }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LiquidCrystal_I2C_Command>:

void LiquidCrystal_I2C_Command(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_Send(lcd, value, 0);
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f804 	bl	8001168 <LiquidCrystal_I2C_Send>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <LiquidCrystal_I2C_Send>:

void LiquidCrystal_I2C_Send(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value, uint8_t mode) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
 8001174:	4613      	mov	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    uint8_t highnib = value & 0xf0;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f023 030f 	bic.w	r3, r3, #15
 800117e:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xf0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	73bb      	strb	r3, [r7, #14]
    LiquidCrystal_I2C_Write4Bits(lcd, (highnib) | mode);
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	78bb      	ldrb	r3, [r7, #2]
 800118a:	4313      	orrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f80c 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    LiquidCrystal_I2C_Write4Bits(lcd, (lownib) | mode);
 8001196:	7bba      	ldrb	r2, [r7, #14]
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f804 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LiquidCrystal_I2C_Write4Bits>:

void LiquidCrystal_I2C_Write4Bits(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, value);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f809 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    LiquidCrystal_I2C_PulseEnable(lcd, value);
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f821 	bl	8001210 <LiquidCrystal_I2C_PulseEnable>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LiquidCrystal_I2C_ExpanderWrite>:

void LiquidCrystal_I2C_ExpanderWrite(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af02      	add	r7, sp, #8
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
    uint8_t data_t[1];
    data_t[0] = _data | lcd->BacklightVal;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	79da      	ldrb	r2, [r3, #7]
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->Address, data_t, 1, 1000);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f107 020c 	add.w	r2, r7, #12
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	f003 fcd0 	bl	8004ba8 <HAL_I2C_Master_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <LiquidCrystal_I2C_PulseEnable>:

void LiquidCrystal_I2C_PulseEnable(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data | En);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffd5 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f001 fb43 	bl	80028b8 <HAL_Delay>
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data & ~En);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffca 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f001 fb38 	bl	80028b8 <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bno055_writeData>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	733b      	strb	r3, [r7, #12]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2302      	movs	r3, #2
 8001274:	2150      	movs	r1, #80	@ 0x50
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <bno055_writeData+0x44>)
 8001278:	f003 fc96 	bl	8004ba8 <HAL_I2C_Master_Transmit>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <bno055_writeData+0x3a>
        Error_Handler("BNO055 write failed", 1);
 8001282:	2101      	movs	r1, #1
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <bno055_writeData+0x48>)
 8001286:	f000 fe85 	bl	8001f94 <Error_Handler>
    }
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001fc 	.word	0x200001fc
 8001298:	08009c90 	.word	0x08009c90

0800129c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80012ac:	1dfa      	adds	r2, r7, #7
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	2150      	movs	r1, #80	@ 0x50
 80012b8:	480f      	ldr	r0, [pc, #60]	@ (80012f8 <bno055_readData+0x5c>)
 80012ba:	f003 fc75 	bl	8004ba8 <HAL_I2C_Master_Transmit>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <bno055_readData+0x30>
        Error_Handler("BNO055 read address failed", 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <bno055_readData+0x60>)
 80012c8:	f000 fe64 	bl	8001f94 <Error_Handler>
    }
    if (HAL_I2C_Master_Receive(&i2c, BNO055_I2C_ADDR << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	2150      	movs	r1, #80	@ 0x50
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <bno055_readData+0x5c>)
 80012dc:	f003 fd62 	bl	8004da4 <HAL_I2C_Master_Receive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <bno055_readData+0x52>
        Error_Handler("BNO055 read data failed", 1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <bno055_readData+0x64>)
 80012ea:	f000 fe53 	bl	8001f94 <Error_Handler>
    }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001fc 	.word	0x200001fc
 80012fc:	08009ca4 	.word	0x08009ca4
 8001300:	08009cc0 	.word	0x08009cc0

08001304 <bno055_delay>:

void bno055_delay(int time) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fad2 	bl	80028b8 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4619      	mov	r1, r3
 800132a:	2007      	movs	r0, #7
 800132c:	f7ff ff90 	bl	8001250 <bno055_writeData>
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <bno055_getOperationMode>:

bno055_opmode_t bno055_getOperationMode() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	203d      	movs	r0, #61	@ 0x3d
 8001346:	f7ff ffa9 	bl	800129c <bno055_readData>
  return mode;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4619      	mov	r1, r3
 8001362:	203d      	movs	r0, #61	@ 0x3d
 8001364:	f7ff ff74 	bl	8001250 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800136e:	2013      	movs	r0, #19
 8001370:	f7ff ffc8 	bl	8001304 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001374:	e002      	b.n	800137c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001376:	2007      	movs	r0, #7
 8001378:	f7ff ffc4 	bl	8001304 <bno055_delay>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ffe3 	bl	8001354 <bno055_setOperationMode>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}

08001392 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001396:	200c      	movs	r0, #12
 8001398:	f7ff ffdc 	bl	8001354 <bno055_setOperationMode>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80013a4:	2120      	movs	r1, #32
 80013a6:	203f      	movs	r0, #63	@ 0x3f
 80013a8:	f7ff ff52 	bl	8001250 <bno055_writeData>
  bno055_delay(700);
 80013ac:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80013b0:	f7ff ffa8 	bl	8001304 <bno055_delay>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <bno055_getTemp>:

int8_t bno055_getTemp() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ffac 	bl	800131c <bno055_setPage>
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	2034      	movs	r0, #52	@ 0x34
 80013cc:	f7ff ff66 	bl	800129c <bno055_readData>
  return t;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	b25b      	sxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <bno055_setup>:

void bno055_setup() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  bno055_reset();
 80013e2:	f7ff ffdd 	bl	80013a0 <bno055_reset>

  uint8_t id = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff53 	bl	800129c <bno055_readData>
  if (id != BNO055_ID) {
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80013fa:	d004      	beq.n	8001406 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4619      	mov	r1, r3
 8001400:	4809      	ldr	r0, [pc, #36]	@ (8001428 <bno055_setup+0x4c>)
 8001402:	f006 f931 	bl	8007668 <iprintf>
  }
  bno055_setPage(0);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff88 	bl	800131c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800140c:	2100      	movs	r1, #0
 800140e:	203f      	movs	r0, #63	@ 0x3f
 8001410:	f7ff ff1e 	bl	8001250 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001414:	f7ff ffb6 	bl	8001384 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff ff73 	bl	8001304 <bno055_delay>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	08009cd8 	.word	0x08009cd8

0800142c <bno055_setCalibrationData>:
  bno055_setOperationMode(operationMode);

  return calData;
}

void bno055_setCalibrationData(bno055_calibration_data_t calData) {
 800142c:	b084      	sub	sp, #16
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	f107 0c20 	add.w	ip, r7, #32
 8001438:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t buffer[22];
  bno055_opmode_t operationMode = bno055_getOperationMode();
 800143c:	f7ff ff7c 	bl	8001338 <bno055_getOperationMode>
 8001440:	4603      	mov	r3, r0
 8001442:	75bb      	strb	r3, [r7, #22]
  bno055_setOperationModeConfig();
 8001444:	f7ff ff9e 	bl	8001384 <bno055_setOperationModeConfig>
  bno055_setPage(0);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ff67 	bl	800131c <bno055_setPage>

  // Assumes litle endian processor
  memcpy(buffer, &calData.offset.accel, 6);
 800144e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001452:	463b      	mov	r3, r7
 8001454:	2206      	movs	r2, #6
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fa1f 	bl	800789a <memcpy>
  memcpy(buffer + 6, &calData.offset.mag, 6);
 800145c:	463b      	mov	r3, r7
 800145e:	3306      	adds	r3, #6
 8001460:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8001464:	2206      	movs	r2, #6
 8001466:	4618      	mov	r0, r3
 8001468:	f006 fa17 	bl	800789a <memcpy>
  memcpy(buffer + 12, &calData.offset.gyro, 6);
 800146c:	463b      	mov	r3, r7
 800146e:	330c      	adds	r3, #12
 8001470:	2206      	movs	r2, #6
 8001472:	f107 0120 	add.w	r1, r7, #32
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fa0f 	bl	800789a <memcpy>
  memcpy(buffer + 18, &calData.radius.accel, 2);
 800147c:	463b      	mov	r3, r7
 800147e:	3312      	adds	r3, #18
 8001480:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001482:	801a      	strh	r2, [r3, #0]
  memcpy(buffer + 20, &calData.radius.mag, 2);
 8001484:	463b      	mov	r3, r7
 8001486:	3314      	adds	r3, #20
 8001488:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800148a:	801a      	strh	r2, [r3, #0]

  for (uint8_t i=0; i < 22; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	75fb      	strb	r3, [r7, #23]
 8001490:	e00e      	b.n	80014b0 <bno055_setCalibrationData+0x84>
    // TODO: create multibytes write
    bno055_writeData(BNO055_ACC_OFFSET_X_LSB+i, buffer[i]);
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	3355      	adds	r3, #85	@ 0x55
 8001496:	b2da      	uxtb	r2, r3
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	3318      	adds	r3, #24
 800149c:	443b      	add	r3, r7
 800149e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fed3 	bl	8001250 <bno055_writeData>
  for (uint8_t i=0; i < 22; i++) {
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3301      	adds	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b15      	cmp	r3, #21
 80014b4:	d9ed      	bls.n	8001492 <bno055_setCalibrationData+0x66>
  }

  bno055_setOperationMode(operationMode);
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff4b 	bl	8001354 <bno055_setOperationMode>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014c8:	b004      	add	sp, #16
 80014ca:	4770      	bx	lr

080014cc <bno055_getVector>:

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d0:	b09e      	sub	sp, #120	@ 0x78
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ff1e 	bl	800131c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80014e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d108      	bne.n	80014fa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80014e8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014f0:	2208      	movs	r2, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fed2 	bl	800129c <bno055_readData>
 80014f8:	e007      	b.n	800150a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80014fa:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80014fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001502:	2206      	movs	r2, #6
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fec9 	bl	800129c <bno055_readData>

  double scale = 1;
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <bno055_getVector+0x270>)
 8001510:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001518:	2b0e      	cmp	r3, #14
 800151a:	d109      	bne.n	8001530 <bno055_getVector+0x64>
    scale = magScale;
 800151c:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <bno055_getVector+0x274>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffff 	bl	8000524 <__aeabi_ui2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800152e:	e03e      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001534:	2b08      	cmp	r3, #8
 8001536:	d007      	beq.n	8001548 <bno055_getVector+0x7c>
 8001538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800153c:	2b28      	cmp	r3, #40	@ 0x28
 800153e:	d003      	beq.n	8001548 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001544:	2b2e      	cmp	r3, #46	@ 0x2e
 8001546:	d109      	bne.n	800155c <bno055_getVector+0x90>
    scale = accelScale;
 8001548:	4b7e      	ldr	r3, [pc, #504]	@ (8001744 <bno055_getVector+0x278>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffe9 	bl	8000524 <__aeabi_ui2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800155a:	e028      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800155c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001560:	2b14      	cmp	r3, #20
 8001562:	d109      	bne.n	8001578 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001564:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <bno055_getVector+0x27c>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffdb 	bl	8000524 <__aeabi_ui2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001576:	e01a      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800157c:	2b1a      	cmp	r3, #26
 800157e:	d109      	bne.n	8001594 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001580:	4b72      	ldr	r3, [pc, #456]	@ (800174c <bno055_getVector+0x280>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffcd 	bl	8000524 <__aeabi_ui2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001592:	e00c      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001598:	2b20      	cmp	r3, #32
 800159a:	d108      	bne.n	80015ae <bno055_getVector+0xe2>
    scale = quaScale;
 800159c:	4b6c      	ldr	r3, [pc, #432]	@ (8001750 <bno055_getVector+0x284>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_ui2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b2:	2220      	movs	r2, #32
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 f8df 	bl	800777a <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d150      	bne.n	8001666 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015c4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffb4 	bl	8000544 <__aeabi_i2d>
 80015dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015e0:	f7ff f944 	bl	800086c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80015ec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa0 	bl	8000544 <__aeabi_i2d>
 8001604:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001608:	f7ff f930 	bl	800086c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001614:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8c 	bl	8000544 <__aeabi_i2d>
 800162c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001630:	f7ff f91c 	bl	800086c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800163c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff78 	bl	8000544 <__aeabi_i2d>
 8001654:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001658:	f7ff f908 	bl	800086c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001664:	e03b      	b.n	80016de <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001666:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff63 	bl	8000544 <__aeabi_i2d>
 800167e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001682:	f7ff f8f3 	bl	800086c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800168e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff4f 	bl	8000544 <__aeabi_i2d>
 80016a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016aa:	f7ff f8df 	bl	800086c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3b 	bl	8000544 <__aeabi_i2d>
 80016ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016d2:	f7ff f8cb 	bl	800086c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 80016de:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016e2:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80016e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016f6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80016fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001702:	ec49 8b14 	vmov	d4, r8, r9
 8001706:	ec45 4b15 	vmov	d5, r4, r5
 800170a:	ec41 0b16 	vmov	d6, r0, r1
 800170e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001712:	eeb0 0a44 	vmov.f32	s0, s8
 8001716:	eef0 0a64 	vmov.f32	s1, s9
 800171a:	eeb0 1a45 	vmov.f32	s2, s10
 800171e:	eef0 1a65 	vmov.f32	s3, s11
 8001722:	eeb0 2a46 	vmov.f32	s4, s12
 8001726:	eef0 2a66 	vmov.f32	s5, s13
 800172a:	eeb0 3a47 	vmov.f32	s6, s14
 800172e:	eef0 3a67 	vmov.f32	s7, s15
 8001732:	3778      	adds	r7, #120	@ 0x78
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	3ff00000 	.word	0x3ff00000
 8001740:	20000006 	.word	0x20000006
 8001744:	20000000 	.word	0x20000000
 8001748:	20000002 	.word	0x20000002
 800174c:	20000004 	.word	0x20000004
 8001750:	20000008 	.word	0x20000008

08001754 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001758:	b090      	sub	sp, #64	@ 0x40
 800175a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 800175c:	2008      	movs	r0, #8
 800175e:	f7ff feb5 	bl	80014cc <bno055_getVector>
 8001762:	eeb0 4a40 	vmov.f32	s8, s0
 8001766:	eef0 4a60 	vmov.f32	s9, s1
 800176a:	eeb0 5a41 	vmov.f32	s10, s2
 800176e:	eef0 5a61 	vmov.f32	s11, s3
 8001772:	eeb0 6a42 	vmov.f32	s12, s4
 8001776:	eef0 6a62 	vmov.f32	s13, s5
 800177a:	eeb0 7a43 	vmov.f32	s14, s6
 800177e:	eef0 7a63 	vmov.f32	s15, s7
 8001782:	ed87 4b08 	vstr	d4, [r7, #32]
 8001786:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800178a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800178e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001792:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001796:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800179a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800179e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017a2:	ec49 8b14 	vmov	d4, r8, r9
 80017a6:	ec45 4b15 	vmov	d5, r4, r5
 80017aa:	ec41 0b16 	vmov	d6, r0, r1
 80017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80017b2:	eeb0 0a44 	vmov.f32	s0, s8
 80017b6:	eef0 0a64 	vmov.f32	s1, s9
 80017ba:	eeb0 1a45 	vmov.f32	s2, s10
 80017be:	eef0 1a65 	vmov.f32	s3, s11
 80017c2:	eeb0 2a46 	vmov.f32	s4, s12
 80017c6:	eef0 2a66 	vmov.f32	s5, s13
 80017ca:	eeb0 3a47 	vmov.f32	s6, s14
 80017ce:	eef0 3a67 	vmov.f32	s7, s15
 80017d2:	3740      	adds	r7, #64	@ 0x40
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080017da <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 80017da:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017de:	b090      	sub	sp, #64	@ 0x40
 80017e0:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 80017e2:	200e      	movs	r0, #14
 80017e4:	f7ff fe72 	bl	80014cc <bno055_getVector>
 80017e8:	eeb0 4a40 	vmov.f32	s8, s0
 80017ec:	eef0 4a60 	vmov.f32	s9, s1
 80017f0:	eeb0 5a41 	vmov.f32	s10, s2
 80017f4:	eef0 5a61 	vmov.f32	s11, s3
 80017f8:	eeb0 6a42 	vmov.f32	s12, s4
 80017fc:	eef0 6a62 	vmov.f32	s13, s5
 8001800:	eeb0 7a43 	vmov.f32	s14, s6
 8001804:	eef0 7a63 	vmov.f32	s15, s7
 8001808:	ed87 4b08 	vstr	d4, [r7, #32]
 800180c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001810:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001814:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800181c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001820:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001828:	ec49 8b14 	vmov	d4, r8, r9
 800182c:	ec45 4b15 	vmov	d5, r4, r5
 8001830:	ec41 0b16 	vmov	d6, r0, r1
 8001834:	ec43 2b17 	vmov	d7, r2, r3
}
 8001838:	eeb0 0a44 	vmov.f32	s0, s8
 800183c:	eef0 0a64 	vmov.f32	s1, s9
 8001840:	eeb0 1a45 	vmov.f32	s2, s10
 8001844:	eef0 1a65 	vmov.f32	s3, s11
 8001848:	eeb0 2a46 	vmov.f32	s4, s12
 800184c:	eef0 2a66 	vmov.f32	s5, s13
 8001850:	eeb0 3a47 	vmov.f32	s6, s14
 8001854:	eef0 3a67 	vmov.f32	s7, s15
 8001858:	3740      	adds	r7, #64	@ 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001860 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001864:	b090      	sub	sp, #64	@ 0x40
 8001866:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001868:	2014      	movs	r0, #20
 800186a:	f7ff fe2f 	bl	80014cc <bno055_getVector>
 800186e:	eeb0 4a40 	vmov.f32	s8, s0
 8001872:	eef0 4a60 	vmov.f32	s9, s1
 8001876:	eeb0 5a41 	vmov.f32	s10, s2
 800187a:	eef0 5a61 	vmov.f32	s11, s3
 800187e:	eeb0 6a42 	vmov.f32	s12, s4
 8001882:	eef0 6a62 	vmov.f32	s13, s5
 8001886:	eeb0 7a43 	vmov.f32	s14, s6
 800188a:	eef0 7a63 	vmov.f32	s15, s7
 800188e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001892:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001896:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800189a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800189e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80018a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018ae:	ec49 8b14 	vmov	d4, r8, r9
 80018b2:	ec45 4b15 	vmov	d5, r4, r5
 80018b6:	ec41 0b16 	vmov	d6, r0, r1
 80018ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80018be:	eeb0 0a44 	vmov.f32	s0, s8
 80018c2:	eef0 0a64 	vmov.f32	s1, s9
 80018c6:	eeb0 1a45 	vmov.f32	s2, s10
 80018ca:	eef0 1a65 	vmov.f32	s3, s11
 80018ce:	eeb0 2a46 	vmov.f32	s4, s12
 80018d2:	eef0 2a66 	vmov.f32	s5, s13
 80018d6:	eeb0 3a47 	vmov.f32	s6, s14
 80018da:	eef0 3a67 	vmov.f32	s7, s15
 80018de:	3740      	adds	r7, #64	@ 0x40
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018e6 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80018e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ea:	b090      	sub	sp, #64	@ 0x40
 80018ec:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80018ee:	201a      	movs	r0, #26
 80018f0:	f7ff fdec 	bl	80014cc <bno055_getVector>
 80018f4:	eeb0 4a40 	vmov.f32	s8, s0
 80018f8:	eef0 4a60 	vmov.f32	s9, s1
 80018fc:	eeb0 5a41 	vmov.f32	s10, s2
 8001900:	eef0 5a61 	vmov.f32	s11, s3
 8001904:	eeb0 6a42 	vmov.f32	s12, s4
 8001908:	eef0 6a62 	vmov.f32	s13, s5
 800190c:	eeb0 7a43 	vmov.f32	s14, s6
 8001910:	eef0 7a63 	vmov.f32	s15, s7
 8001914:	ed87 4b08 	vstr	d4, [r7, #32]
 8001918:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800191c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001920:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001928:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800192c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001934:	ec49 8b14 	vmov	d4, r8, r9
 8001938:	ec45 4b15 	vmov	d5, r4, r5
 800193c:	ec41 0b16 	vmov	d6, r0, r1
 8001940:	ec43 2b17 	vmov	d7, r2, r3
}
 8001944:	eeb0 0a44 	vmov.f32	s0, s8
 8001948:	eef0 0a64 	vmov.f32	s1, s9
 800194c:	eeb0 1a45 	vmov.f32	s2, s10
 8001950:	eef0 1a65 	vmov.f32	s3, s11
 8001954:	eeb0 2a46 	vmov.f32	s4, s12
 8001958:	eef0 2a66 	vmov.f32	s5, s13
 800195c:	eeb0 3a47 	vmov.f32	s6, s14
 8001960:	eef0 3a67 	vmov.f32	s7, s15
 8001964:	3740      	adds	r7, #64	@ 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800196c <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 800196c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001970:	b090      	sub	sp, #64	@ 0x40
 8001972:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001974:	2028      	movs	r0, #40	@ 0x28
 8001976:	f7ff fda9 	bl	80014cc <bno055_getVector>
 800197a:	eeb0 4a40 	vmov.f32	s8, s0
 800197e:	eef0 4a60 	vmov.f32	s9, s1
 8001982:	eeb0 5a41 	vmov.f32	s10, s2
 8001986:	eef0 5a61 	vmov.f32	s11, s3
 800198a:	eeb0 6a42 	vmov.f32	s12, s4
 800198e:	eef0 6a62 	vmov.f32	s13, s5
 8001992:	eeb0 7a43 	vmov.f32	s14, s6
 8001996:	eef0 7a63 	vmov.f32	s15, s7
 800199a:	ed87 4b08 	vstr	d4, [r7, #32]
 800199e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80019a2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80019a6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80019aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80019b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019ba:	ec49 8b14 	vmov	d4, r8, r9
 80019be:	ec45 4b15 	vmov	d5, r4, r5
 80019c2:	ec41 0b16 	vmov	d6, r0, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ca:	eeb0 0a44 	vmov.f32	s0, s8
 80019ce:	eef0 0a64 	vmov.f32	s1, s9
 80019d2:	eeb0 1a45 	vmov.f32	s2, s10
 80019d6:	eef0 1a65 	vmov.f32	s3, s11
 80019da:	eeb0 2a46 	vmov.f32	s4, s12
 80019de:	eef0 2a66 	vmov.f32	s5, s13
 80019e2:	eeb0 3a47 	vmov.f32	s6, s14
 80019e6:	eef0 3a67 	vmov.f32	s7, s15
 80019ea:	3740      	adds	r7, #64	@ 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019f2 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 80019f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019f6:	b090      	sub	sp, #64	@ 0x40
 80019f8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 80019fa:	202e      	movs	r0, #46	@ 0x2e
 80019fc:	f7ff fd66 	bl	80014cc <bno055_getVector>
 8001a00:	eeb0 4a40 	vmov.f32	s8, s0
 8001a04:	eef0 4a60 	vmov.f32	s9, s1
 8001a08:	eeb0 5a41 	vmov.f32	s10, s2
 8001a0c:	eef0 5a61 	vmov.f32	s11, s3
 8001a10:	eeb0 6a42 	vmov.f32	s12, s4
 8001a14:	eef0 6a62 	vmov.f32	s13, s5
 8001a18:	eeb0 7a43 	vmov.f32	s14, s6
 8001a1c:	eef0 7a63 	vmov.f32	s15, s7
 8001a20:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a24:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001a28:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001a2c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a34:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001a38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a40:	ec49 8b14 	vmov	d4, r8, r9
 8001a44:	ec45 4b15 	vmov	d5, r4, r5
 8001a48:	ec41 0b16 	vmov	d6, r0, r1
 8001a4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a50:	eeb0 0a44 	vmov.f32	s0, s8
 8001a54:	eef0 0a64 	vmov.f32	s1, s9
 8001a58:	eeb0 1a45 	vmov.f32	s2, s10
 8001a5c:	eef0 1a65 	vmov.f32	s3, s11
 8001a60:	eeb0 2a46 	vmov.f32	s4, s12
 8001a64:	eef0 2a66 	vmov.f32	s5, s13
 8001a68:	eeb0 3a47 	vmov.f32	s6, s14
 8001a6c:	eef0 3a67 	vmov.f32	s7, s15
 8001a70:	3740      	adds	r7, #64	@ 0x40
 8001a72:	46bd      	mov	sp, r7
 8001a74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a78 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorQuaternion() {
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b090      	sub	sp, #64	@ 0x40
 8001a7e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001a80:	2020      	movs	r0, #32
 8001a82:	f7ff fd23 	bl	80014cc <bno055_getVector>
 8001a86:	eeb0 4a40 	vmov.f32	s8, s0
 8001a8a:	eef0 4a60 	vmov.f32	s9, s1
 8001a8e:	eeb0 5a41 	vmov.f32	s10, s2
 8001a92:	eef0 5a61 	vmov.f32	s11, s3
 8001a96:	eeb0 6a42 	vmov.f32	s12, s4
 8001a9a:	eef0 6a62 	vmov.f32	s13, s5
 8001a9e:	eeb0 7a43 	vmov.f32	s14, s6
 8001aa2:	eef0 7a63 	vmov.f32	s15, s7
 8001aa6:	ed87 4b08 	vstr	d4, [r7, #32]
 8001aaa:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001aae:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001ab2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001ab6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aba:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001abe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ac2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ac6:	ec49 8b14 	vmov	d4, r8, r9
 8001aca:	ec45 4b15 	vmov	d5, r4, r5
 8001ace:	ec41 0b16 	vmov	d6, r0, r1
 8001ad2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ad6:	eeb0 0a44 	vmov.f32	s0, s8
 8001ada:	eef0 0a64 	vmov.f32	s1, s9
 8001ade:	eeb0 1a45 	vmov.f32	s2, s10
 8001ae2:	eef0 1a65 	vmov.f32	s3, s11
 8001ae6:	eeb0 2a46 	vmov.f32	s4, s12
 8001aea:	eef0 2a66 	vmov.f32	s5, s13
 8001aee:	eeb0 3a47 	vmov.f32	s6, s14
 8001af2:	eef0 3a67 	vmov.f32	s7, s15
 8001af6:	3740      	adds	r7, #64	@ 0x40
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001b00 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b04:	f3bf 8f4f 	dsb	sy
}
 8001b08:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <__NVIC_SystemReset+0x24>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b12:	4904      	ldr	r1, [pc, #16]	@ (8001b24 <__NVIC_SystemReset+0x24>)
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__NVIC_SystemReset+0x28>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1a:	f3bf 8f4f 	dsb	sy
}
 8001b1e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <__NVIC_SystemReset+0x20>
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	05fa0004 	.word	0x05fa0004
 8001b2c:	00000000 	.word	0x00000000

08001b30 <main>:
float calculateHeading(bno055_vector_t mag);

I2C_HandleTypeDef i2c;
LiquidCrystal_I2C_HandleTypeDef lcd, lcd2;

int main(void) {
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b0ca      	sub	sp, #296	@ 0x128
 8001b34:	af04      	add	r7, sp, #16
    HAL_Init();
 8001b36:	f000 fe4d 	bl	80027d4 <HAL_Init>
    SystemClock_Config();
 8001b3a:	f000 fc07 	bl	800234c <SystemClock_Config>
    MX_GPIO_Init();
 8001b3e:	f000 fbd5 	bl	80022ec <MX_GPIO_Init>
    MX_I2C1_Init();
 8001b42:	f000 fba1 	bl	8002288 <MX_I2C1_Init>

    // Initialize LCD1 at 0x27
    LiquidCrystal_I2C_Init(&lcd, &i2c, 0x27, 20, 4);
 8001b46:	2304      	movs	r3, #4
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	2227      	movs	r2, #39	@ 0x27
 8001b4e:	4986      	ldr	r1, [pc, #536]	@ (8001d68 <main+0x238>)
 8001b50:	4886      	ldr	r0, [pc, #536]	@ (8001d6c <main+0x23c>)
 8001b52:	f7ff fa01 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd, 20, 4, LCD_5x8DOTS);
 8001b56:	2300      	movs	r3, #0
 8001b58:	2204      	movs	r2, #4
 8001b5a:	2114      	movs	r1, #20
 8001b5c:	4883      	ldr	r0, [pc, #524]	@ (8001d6c <main+0x23c>)
 8001b5e:	f7ff fa2a 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize LCD2 at 0x20
    LiquidCrystal_I2C_Init(&lcd2, &i2c, 0x20, 20, 4);
 8001b62:	2304      	movs	r3, #4
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2314      	movs	r3, #20
 8001b68:	2220      	movs	r2, #32
 8001b6a:	497f      	ldr	r1, [pc, #508]	@ (8001d68 <main+0x238>)
 8001b6c:	4880      	ldr	r0, [pc, #512]	@ (8001d70 <main+0x240>)
 8001b6e:	f7ff f9f3 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd2, 20, 4, LCD_5x8DOTS);
 8001b72:	2300      	movs	r3, #0
 8001b74:	2204      	movs	r2, #4
 8001b76:	2114      	movs	r1, #20
 8001b78:	487d      	ldr	r0, [pc, #500]	@ (8001d70 <main+0x240>)
 8001b7a:	f7ff fa1c 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize BNO055
    bno055_setup();
 8001b7e:	f7ff fc2d 	bl	80013dc <bno055_setup>
    hardcodeCalibrationData();
 8001b82:	f000 fa35 	bl	8001ff0 <hardcodeCalibrationData>
    bno055_setOperationModeNDOF();
 8001b86:	f7ff fc04 	bl	8001392 <bno055_setOperationModeNDOF>

    char buffer[20];
    bno055_vector_t accel, mag, gyro, euler, quaternion, linear_accel, gravity;
    int8_t temp_raw;
    float temperature_f, prev_temperature_f = 0.0;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    float displayed_acceleration = 0.0;
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    float heading, previous_heading = -1.0;
 8001b9a:	4b76      	ldr	r3, [pc, #472]	@ (8001d74 <main+0x244>)
 8001b9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    const char* direction;
    const char* previousDirection = "";
 8001ba0:	4b75      	ldr	r3, [pc, #468]	@ (8001d78 <main+0x248>)
 8001ba2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    while (1) {

        // Get Sensor Data
        accel = bno055_getVectorAccelerometer();
 8001ba6:	f7ff fdd5 	bl	8001754 <bno055_getVectorAccelerometer>
 8001baa:	eeb0 4a40 	vmov.f32	s8, s0
 8001bae:	eef0 4a60 	vmov.f32	s9, s1
 8001bb2:	eeb0 5a41 	vmov.f32	s10, s2
 8001bb6:	eef0 5a61 	vmov.f32	s11, s3
 8001bba:	eeb0 6a42 	vmov.f32	s12, s4
 8001bbe:	eef0 6a62 	vmov.f32	s13, s5
 8001bc2:	eeb0 7a43 	vmov.f32	s14, s6
 8001bc6:	eef0 7a63 	vmov.f32	s15, s7
 8001bca:	ed87 4b30 	vstr	d4, [r7, #192]	@ 0xc0
 8001bce:	ed87 5b32 	vstr	d5, [r7, #200]	@ 0xc8
 8001bd2:	ed87 6b34 	vstr	d6, [r7, #208]	@ 0xd0
 8001bd6:	ed87 7b36 	vstr	d7, [r7, #216]	@ 0xd8
        mag = bno055_getVectorMagnetometer();
 8001bda:	f7ff fdfe 	bl	80017da <bno055_getVectorMagnetometer>
 8001bde:	eeb0 4a40 	vmov.f32	s8, s0
 8001be2:	eef0 4a60 	vmov.f32	s9, s1
 8001be6:	eeb0 5a41 	vmov.f32	s10, s2
 8001bea:	eef0 5a61 	vmov.f32	s11, s3
 8001bee:	eeb0 6a42 	vmov.f32	s12, s4
 8001bf2:	eef0 6a62 	vmov.f32	s13, s5
 8001bf6:	eeb0 7a43 	vmov.f32	s14, s6
 8001bfa:	eef0 7a63 	vmov.f32	s15, s7
 8001bfe:	ed87 4b28 	vstr	d4, [r7, #160]	@ 0xa0
 8001c02:	ed87 5b2a 	vstr	d5, [r7, #168]	@ 0xa8
 8001c06:	ed87 6b2c 	vstr	d6, [r7, #176]	@ 0xb0
 8001c0a:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8
        gyro = bno055_getVectorGyroscope();
 8001c0e:	f7ff fe27 	bl	8001860 <bno055_getVectorGyroscope>
 8001c12:	eeb0 4a40 	vmov.f32	s8, s0
 8001c16:	eef0 4a60 	vmov.f32	s9, s1
 8001c1a:	eeb0 5a41 	vmov.f32	s10, s2
 8001c1e:	eef0 5a61 	vmov.f32	s11, s3
 8001c22:	eeb0 6a42 	vmov.f32	s12, s4
 8001c26:	eef0 6a62 	vmov.f32	s13, s5
 8001c2a:	eeb0 7a43 	vmov.f32	s14, s6
 8001c2e:	eef0 7a63 	vmov.f32	s15, s7
 8001c32:	ed87 4b20 	vstr	d4, [r7, #128]	@ 0x80
 8001c36:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8001c3a:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8001c3e:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98
        euler = bno055_getVectorEuler();
 8001c42:	f7ff fe50 	bl	80018e6 <bno055_getVectorEuler>
 8001c46:	eeb0 4a40 	vmov.f32	s8, s0
 8001c4a:	eef0 4a60 	vmov.f32	s9, s1
 8001c4e:	eeb0 5a41 	vmov.f32	s10, s2
 8001c52:	eef0 5a61 	vmov.f32	s11, s3
 8001c56:	eeb0 6a42 	vmov.f32	s12, s4
 8001c5a:	eef0 6a62 	vmov.f32	s13, s5
 8001c5e:	eeb0 7a43 	vmov.f32	s14, s6
 8001c62:	eef0 7a63 	vmov.f32	s15, s7
 8001c66:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
 8001c6a:	ed87 5b1a 	vstr	d5, [r7, #104]	@ 0x68
 8001c6e:	ed87 6b1c 	vstr	d6, [r7, #112]	@ 0x70
 8001c72:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
        quaternion = bno055_getVectorQuaternion();
 8001c76:	f7ff feff 	bl	8001a78 <bno055_getVectorQuaternion>
 8001c7a:	eeb0 4a40 	vmov.f32	s8, s0
 8001c7e:	eef0 4a60 	vmov.f32	s9, s1
 8001c82:	eeb0 5a41 	vmov.f32	s10, s2
 8001c86:	eef0 5a61 	vmov.f32	s11, s3
 8001c8a:	eeb0 6a42 	vmov.f32	s12, s4
 8001c8e:	eef0 6a62 	vmov.f32	s13, s5
 8001c92:	eeb0 7a43 	vmov.f32	s14, s6
 8001c96:	eef0 7a63 	vmov.f32	s15, s7
 8001c9a:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8001c9e:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8001ca2:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8001ca6:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
        linear_accel = bno055_getVectorLinearAccel();
 8001caa:	f7ff fe5f 	bl	800196c <bno055_getVectorLinearAccel>
 8001cae:	eeb0 4a40 	vmov.f32	s8, s0
 8001cb2:	eef0 4a60 	vmov.f32	s9, s1
 8001cb6:	eeb0 5a41 	vmov.f32	s10, s2
 8001cba:	eef0 5a61 	vmov.f32	s11, s3
 8001cbe:	eeb0 6a42 	vmov.f32	s12, s4
 8001cc2:	eef0 6a62 	vmov.f32	s13, s5
 8001cc6:	eeb0 7a43 	vmov.f32	s14, s6
 8001cca:	eef0 7a63 	vmov.f32	s15, s7
 8001cce:	ed87 4b08 	vstr	d4, [r7, #32]
 8001cd2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001cd6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001cda:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        gravity = bno055_getVectorGravity();
 8001cde:	f7ff fe88 	bl	80019f2 <bno055_getVectorGravity>
 8001ce2:	eeb0 4a40 	vmov.f32	s8, s0
 8001ce6:	eef0 4a60 	vmov.f32	s9, s1
 8001cea:	eeb0 5a41 	vmov.f32	s10, s2
 8001cee:	eef0 5a61 	vmov.f32	s11, s3
 8001cf2:	eeb0 6a42 	vmov.f32	s12, s4
 8001cf6:	eef0 6a62 	vmov.f32	s13, s5
 8001cfa:	eeb0 7a43 	vmov.f32	s14, s6
 8001cfe:	eef0 7a63 	vmov.f32	s15, s7
 8001d02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d0a:	ed83 4b00 	vstr	d4, [r3]
 8001d0e:	ed83 5b02 	vstr	d5, [r3, #8]
 8001d12:	ed83 6b04 	vstr	d6, [r3, #16]
 8001d16:	ed83 7b06 	vstr	d7, [r3, #24]
        temp_raw = bno055_getTemp();
 8001d1a:	f7ff fb4d 	bl	80013b8 <bno055_getTemp>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

        // If acceleration change is greater than threshold then display it
        if (fabs(linear_accel.y) > ACCEL_CHANGE_THRESHOLD) {
 8001d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d28:	4614      	mov	r4, r2
 8001d2a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d60 <main+0x230>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fefe 	bl	8000b38 <__aeabi_dcmpgt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01c      	beq.n	8001d7c <main+0x24c>
            displayed_acceleration = fabs(linear_accel.y);
 8001d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff3d 	bl	8000bc8 <__aeabi_d2f>
 8001d4e:	ee07 0a90 	vmov	s15, r0
 8001d52:	eef0 7ae7 	vabs.f32	s15, s15
 8001d56:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
 8001d5a:	e031      	b.n	8001dc0 <main+0x290>
 8001d5c:	f3af 8000 	nop.w
 8001d60:	33333333 	.word	0x33333333
 8001d64:	3fc33333 	.word	0x3fc33333
 8001d68:	200001fc 	.word	0x200001fc
 8001d6c:	20000250 	.word	0x20000250
 8001d70:	2000025c 	.word	0x2000025c
 8001d74:	bf800000 	.word	0xbf800000
 8001d78:	08009d14 	.word	0x08009d14
        } else {
            // Slow down rate
            displayed_acceleration *= DECAY_FACTOR;
 8001d7c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001d80:	f7fe fbf2 	bl	8000568 <__aeabi_f2d>
 8001d84:	a37f      	add	r3, pc, #508	@ (adr r3, 8001f84 <main+0x454>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fc45 	bl	8000618 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff17 	bl	8000bc8 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            if (displayed_acceleration < 0.3) {
 8001da0:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001da4:	f7fe fbe0 	bl	8000568 <__aeabi_f2d>
 8001da8:	a378      	add	r3, pc, #480	@ (adr r3, 8001f8c <main+0x45c>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fea5 	bl	8000afc <__aeabi_dcmplt>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <main+0x290>
                displayed_acceleration = 0.0;
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            }
        }

        // Display Acceleration
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	486a      	ldr	r0, [pc, #424]	@ (8001f70 <main+0x440>)
 8001dc6:	f7ff f97d 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, sizeof(buffer), "Speed: %.1f", displayed_acceleration);
 8001dca:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001dce:	f7fe fbcb 	bl	8000568 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8001dda:	e9cd 2300 	strd	r2, r3, [sp]
 8001dde:	4a65      	ldr	r2, [pc, #404]	@ (8001f74 <main+0x444>)
 8001de0:	2114      	movs	r1, #20
 8001de2:	f005 fc53 	bl	800768c <sniprintf>
        LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001de6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4860      	ldr	r0, [pc, #384]	@ (8001f70 <main+0x440>)
 8001dee:	f7ff f993 	bl	8001118 <LiquidCrystal_I2C_Print>

        // Convert Temperature from C to F
        temperature_f = convertToFahrenheit(temp_raw);
 8001df2:	f997 3103 	ldrsb.w	r3, [r7, #259]	@ 0x103
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f92a 	bl	8002050 <convertToFahrenheit>
 8001dfc:	ed87 0a3f 	vstr	s0, [r7, #252]	@ 0xfc

        // Update temperature if change is greater than threshold
        if (fabs(temperature_f - prev_temperature_f) > TEMP_CHANGE_THRESHOLD) {
 8001e00:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8001e04:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8001e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e10:	ee17 0a90 	vmov	r0, s15
 8001e14:	f7fe fba8 	bl	8000568 <__aeabi_f2d>
 8001e18:	a353      	add	r3, pc, #332	@ (adr r3, 8001f68 <main+0x438>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fe8b 	bl	8000b38 <__aeabi_dcmpgt>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01e      	beq.n	8001e66 <main+0x336>
            prev_temperature_f = temperature_f;
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e2c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 1);
 8001e30:	2201      	movs	r2, #1
 8001e32:	2100      	movs	r1, #0
 8001e34:	484e      	ldr	r0, [pc, #312]	@ (8001f70 <main+0x440>)
 8001e36:	f7ff f945 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Temp: %.1f %cF", temperature_f, 223); //223 is char for degrees
 8001e3a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8001e3e:	f7fe fb93 	bl	8000568 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8001e4a:	21df      	movs	r1, #223	@ 0xdf
 8001e4c:	9102      	str	r1, [sp, #8]
 8001e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e52:	4a49      	ldr	r2, [pc, #292]	@ (8001f78 <main+0x448>)
 8001e54:	2114      	movs	r1, #20
 8001e56:	f005 fc19 	bl	800768c <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001e5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4843      	ldr	r0, [pc, #268]	@ (8001f70 <main+0x440>)
 8001e62:	f7ff f959 	bl	8001118 <LiquidCrystal_I2C_Print>
        }

        // Calculate direction using magnetometer and display it
        heading = calculateHeading(mag);
 8001e66:	ed97 4b28 	vldr	d4, [r7, #160]	@ 0xa0
 8001e6a:	ed97 5b2a 	vldr	d5, [r7, #168]	@ 0xa8
 8001e6e:	ed97 6b2c 	vldr	d6, [r7, #176]	@ 0xb0
 8001e72:	ed97 7b2e 	vldr	d7, [r7, #184]	@ 0xb8
 8001e76:	eeb0 0a44 	vmov.f32	s0, s8
 8001e7a:	eef0 0a64 	vmov.f32	s1, s9
 8001e7e:	eeb0 1a45 	vmov.f32	s2, s10
 8001e82:	eef0 1a65 	vmov.f32	s3, s11
 8001e86:	eeb0 2a46 	vmov.f32	s4, s12
 8001e8a:	eef0 2a66 	vmov.f32	s5, s13
 8001e8e:	eeb0 3a47 	vmov.f32	s6, s14
 8001e92:	eef0 3a67 	vmov.f32	s7, s15
 8001e96:	f000 f993 	bl	80021c0 <calculateHeading>
 8001e9a:	ed87 0a43 	vstr	s0, [r7, #268]	@ 0x10c
        if (heading == -0.0) heading = 0.0;
 8001e9e:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	d103      	bne.n	8001eb4 <main+0x384>
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        direction = getCompassDirection(heading);
 8001eb4:	ed97 0a43 	vldr	s0, [r7, #268]	@ 0x10c
 8001eb8:	f000 f900 	bl	80020bc <getCompassDirection>
 8001ebc:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

        // Update direction if it changes
        if (strcmp(direction, previousDirection) != 0) {
 8001ec0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001ec4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001ec8:	f7fe f982 	bl	80001d0 <strcmp>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <main+0x3d0>
            previousDirection = direction;
 8001ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ed6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 2);
 8001eda:	2202      	movs	r2, #2
 8001edc:	2100      	movs	r1, #0
 8001ede:	4824      	ldr	r0, [pc, #144]	@ (8001f70 <main+0x440>)
 8001ee0:	f7ff f8f0 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Heading: %s          ", direction);
 8001ee4:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8001ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <main+0x44c>)
 8001eee:	2114      	movs	r1, #20
 8001ef0:	f005 fbcc 	bl	800768c <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001ef4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <main+0x440>)
 8001efc:	f7ff f90c 	bl	8001118 <LiquidCrystal_I2C_Print>
        }

        // Update angle if change is greater than threshold
        if (fabs(heading - previous_heading) >= DEGREE_CHANGE_THRESHOLD) {
 8001f00:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 8001f04:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0c:	eef0 7ae7 	vabs.f32	s15, s15
 8001f10:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	db1e      	blt.n	8001f5c <main+0x42c>
            previous_heading = heading;
 8001f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 3);
 8001f26:	2203      	movs	r2, #3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <main+0x440>)
 8001f2c:	f7ff f8ca 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Degrees: %.f%c    ", heading, 223); //223 is char for degrees
 8001f30:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001f34:	f7fe fb18 	bl	8000568 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8001f40:	21df      	movs	r1, #223	@ 0xdf
 8001f42:	9102      	str	r1, [sp, #8]
 8001f44:	e9cd 2300 	strd	r2, r3, [sp]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <main+0x450>)
 8001f4a:	2114      	movs	r1, #20
 8001f4c:	f005 fb9e 	bl	800768c <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001f50:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4806      	ldr	r0, [pc, #24]	@ (8001f70 <main+0x440>)
 8001f58:	f7ff f8de 	bl	8001118 <LiquidCrystal_I2C_Print>
        }

        HAL_Delay(300);
 8001f5c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f60:	f000 fcaa 	bl	80028b8 <HAL_Delay>
        accel = bno055_getVectorAccelerometer();
 8001f64:	e61f      	b.n	8001ba6 <main+0x76>
 8001f66:	bf00      	nop
 8001f68:	9999999a 	.word	0x9999999a
 8001f6c:	3fb99999 	.word	0x3fb99999
 8001f70:	2000025c 	.word	0x2000025c
 8001f74:	08009d18 	.word	0x08009d18
 8001f78:	08009d24 	.word	0x08009d24
 8001f7c:	08009d34 	.word	0x08009d34
 8001f80:	08009d4c 	.word	0x08009d4c
 8001f84:	66666666 	.word	0x66666666
 8001f88:	3fe66666 	.word	0x3fe66666
 8001f8c:	33333333 	.word	0x33333333
 8001f90:	3fd33333 	.word	0x3fd33333

08001f94 <Error_Handler>:
    }
}

void Error_Handler(char *errorMessage, int lcdNumber) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    if (lcdNumber == 1) {
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <Error_Handler+0x2a>
        LiquidCrystal_I2C_Clear(&lcd);
 8001fa4:	4810      	ldr	r0, [pc, #64]	@ (8001fe8 <Error_Handler+0x54>)
 8001fa6:	f7ff f865 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	480e      	ldr	r0, [pc, #56]	@ (8001fe8 <Error_Handler+0x54>)
 8001fb0:	f7ff f888 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd, errorMessage);
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <Error_Handler+0x54>)
 8001fb8:	f7ff f8ae 	bl	8001118 <LiquidCrystal_I2C_Print>
 8001fbc:	e00e      	b.n	8001fdc <Error_Handler+0x48>
    } else if (lcdNumber == 2) {
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d10b      	bne.n	8001fdc <Error_Handler+0x48>
        LiquidCrystal_I2C_Clear(&lcd2);
 8001fc4:	4809      	ldr	r0, [pc, #36]	@ (8001fec <Error_Handler+0x58>)
 8001fc6:	f7ff f855 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4807      	ldr	r0, [pc, #28]	@ (8001fec <Error_Handler+0x58>)
 8001fd0:	f7ff f878 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd2, errorMessage);
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <Error_Handler+0x58>)
 8001fd8:	f7ff f89e 	bl	8001118 <LiquidCrystal_I2C_Print>
    }
    HAL_Delay(2000);
 8001fdc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fe0:	f000 fc6a 	bl	80028b8 <HAL_Delay>
    NVIC_SystemReset();
 8001fe4:	f7ff fd8c 	bl	8001b00 <__NVIC_SystemReset>
 8001fe8:	20000250 	.word	0x20000250
 8001fec:	2000025c 	.word	0x2000025c

08001ff0 <hardcodeCalibrationData>:
}

// Data after calibrating the IMU in current environment
// bno055Calibrate.c can be used to retrieve new calibration
void hardcodeCalibrationData() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
    bno055_calibration_data_t calData;

    calData.offset.accel.x = -29;
 8001ff6:	f64f 73e3 	movw	r3, #65507	@ 0xffe3
 8001ffa:	81bb      	strh	r3, [r7, #12]
    calData.offset.accel.y = -16;
 8001ffc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002000:	81fb      	strh	r3, [r7, #14]
    calData.offset.accel.z = -31;
 8002002:	f64f 73e1 	movw	r3, #65505	@ 0xffe1
 8002006:	823b      	strh	r3, [r7, #16]
    calData.offset.mag.x = 79;
 8002008:	234f      	movs	r3, #79	@ 0x4f
 800200a:	80fb      	strh	r3, [r7, #6]
    calData.offset.mag.y = -150;
 800200c:	f64f 736a 	movw	r3, #65386	@ 0xff6a
 8002010:	813b      	strh	r3, [r7, #8]
    calData.offset.mag.z = 80;
 8002012:	2350      	movs	r3, #80	@ 0x50
 8002014:	817b      	strh	r3, [r7, #10]
    calData.offset.gyro.x = -2;
 8002016:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800201a:	803b      	strh	r3, [r7, #0]
    calData.offset.gyro.y = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	807b      	strh	r3, [r7, #2]
    calData.offset.gyro.z = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	80bb      	strh	r3, [r7, #4]
    calData.radius.accel = 1000;
 8002024:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002028:	82bb      	strh	r3, [r7, #20]
    calData.radius.mag = 814;
 800202a:	f240 332e 	movw	r3, #814	@ 0x32e
 800202e:	827b      	strh	r3, [r7, #18]

    bno055_setCalibrationData(calData);
 8002030:	466b      	mov	r3, sp
 8002032:	f107 0210 	add.w	r2, r7, #16
 8002036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800203a:	6018      	str	r0, [r3, #0]
 800203c:	3304      	adds	r3, #4
 800203e:	8019      	strh	r1, [r3, #0]
 8002040:	463b      	mov	r3, r7
 8002042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002044:	f7ff f9f2 	bl	800142c <bno055_setCalibrationData>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <convertToFahrenheit>:

//From Celsius to Fahrenheit
float convertToFahrenheit(int8_t temp_c) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    return (temp_c * 9.0 / 5.0) + 32.0;
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fa70 	bl	8000544 <__aeabi_i2d>
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <convertToFahrenheit+0x60>)
 800206a:	f7fe fad5 	bl	8000618 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <convertToFahrenheit+0x64>)
 800207c:	f7fe fbf6 	bl	800086c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <convertToFahrenheit+0x68>)
 800208e:	f7fe f90d 	bl	80002ac <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd95 	bl	8000bc8 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	ee07 3a90 	vmov	s15, r3
}
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40220000 	.word	0x40220000
 80020b4:	40140000 	.word	0x40140000
 80020b8:	40400000 	.word	0x40400000

080020bc <getCompassDirection>:

// Retrieve Direction
const char* getCompassDirection(float heading) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	ed87 0a01 	vstr	s0, [r7, #4]
    if ((heading >= 337.5) || (heading < 22.5)) {
 80020c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ca:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002180 <getCompassDirection+0xc4>
 80020ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	da08      	bge.n	80020ea <getCompassDirection+0x2e>
 80020d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020dc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002184 <getCompassDirection+0xc8>
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d501      	bpl.n	80020ee <getCompassDirection+0x32>
        return "North";
 80020ea:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <getCompassDirection+0xcc>)
 80020ec:	e042      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 67.5) {
 80020ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800218c <getCompassDirection+0xd0>
 80020f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d501      	bpl.n	8002104 <getCompassDirection+0x48>
        return "NorthEast";
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <getCompassDirection+0xd4>)
 8002102:	e037      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 112.5) {
 8002104:	edd7 7a01 	vldr	s15, [r7, #4]
 8002108:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002194 <getCompassDirection+0xd8>
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	d501      	bpl.n	800211a <getCompassDirection+0x5e>
        return "East";
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <getCompassDirection+0xdc>)
 8002118:	e02c      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 157.5) {
 800211a:	edd7 7a01 	vldr	s15, [r7, #4]
 800211e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800219c <getCompassDirection+0xe0>
 8002122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	d501      	bpl.n	8002130 <getCompassDirection+0x74>
        return "SouthEast";
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <getCompassDirection+0xe4>)
 800212e:	e021      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 202.5) {
 8002130:	edd7 7a01 	vldr	s15, [r7, #4]
 8002134:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80021a4 <getCompassDirection+0xe8>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d501      	bpl.n	8002146 <getCompassDirection+0x8a>
        return "South";
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <getCompassDirection+0xec>)
 8002144:	e016      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 247.5) {
 8002146:	edd7 7a01 	vldr	s15, [r7, #4]
 800214a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80021ac <getCompassDirection+0xf0>
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d501      	bpl.n	800215c <getCompassDirection+0xa0>
        return "SouthWest";
 8002158:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <getCompassDirection+0xf4>)
 800215a:	e00b      	b.n	8002174 <getCompassDirection+0xb8>
    } else if (heading < 292.5) {
 800215c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002160:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80021b4 <getCompassDirection+0xf8>
 8002164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	d501      	bpl.n	8002172 <getCompassDirection+0xb6>
        return "West";
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <getCompassDirection+0xfc>)
 8002170:	e000      	b.n	8002174 <getCompassDirection+0xb8>
    } else {
        return "NorthWest";
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <getCompassDirection+0x100>)
    }
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	43a8c000 	.word	0x43a8c000
 8002184:	41b40000 	.word	0x41b40000
 8002188:	08009d60 	.word	0x08009d60
 800218c:	42870000 	.word	0x42870000
 8002190:	08009d68 	.word	0x08009d68
 8002194:	42e10000 	.word	0x42e10000
 8002198:	08009d74 	.word	0x08009d74
 800219c:	431d8000 	.word	0x431d8000
 80021a0:	08009d7c 	.word	0x08009d7c
 80021a4:	434a8000 	.word	0x434a8000
 80021a8:	08009d88 	.word	0x08009d88
 80021ac:	43778000 	.word	0x43778000
 80021b0:	08009d90 	.word	0x08009d90
 80021b4:	43924000 	.word	0x43924000
 80021b8:	08009d9c 	.word	0x08009d9c
 80021bc:	08009da4 	.word	0x08009da4

080021c0 <calculateHeading>:

// Calculate heading angle in degrees from magnetometer
float calculateHeading(bno055_vector_t mag) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	@ 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	eeb0 4a40 	vmov.f32	s8, s0
 80021ca:	eef0 4a60 	vmov.f32	s9, s1
 80021ce:	eeb0 5a41 	vmov.f32	s10, s2
 80021d2:	eef0 5a61 	vmov.f32	s11, s3
 80021d6:	eeb0 6a42 	vmov.f32	s12, s4
 80021da:	eef0 6a62 	vmov.f32	s13, s5
 80021de:	eeb0 7a43 	vmov.f32	s14, s6
 80021e2:	eef0 7a63 	vmov.f32	s15, s7
 80021e6:	ed87 4b00 	vstr	d4, [r7]
 80021ea:	ed87 5b02 	vstr	d5, [r7, #8]
 80021ee:	ed87 6b04 	vstr	d6, [r7, #16]
 80021f2:	ed87 7b06 	vstr	d7, [r7, #24]

    // Since IMU is turned 90 deg to the right we adjust
    float heading = atan2(-mag.x, mag.y) * 180 / M_PI;
 80021f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021fa:	4610      	mov	r0, r2
 80021fc:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8002200:	ed97 7b04 	vldr	d7, [r7, #16]
 8002204:	eeb0 1a47 	vmov.f32	s2, s14
 8002208:	eef0 1a67 	vmov.f32	s3, s15
 800220c:	ec41 0b10 	vmov	d0, r0, r1
 8002210:	f007 fac8 	bl	80097a4 <atan2>
 8002214:	ec51 0b10 	vmov	r0, r1, d0
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <calculateHeading+0xc0>)
 800221e:	f7fe f9fb 	bl	8000618 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	a313      	add	r3, pc, #76	@ (adr r3, 8002278 <calculateHeading+0xb8>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe fb1c 	bl	800086c <__aeabi_ddiv>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fcc4 	bl	8000bc8 <__aeabi_d2f>
 8002240:	4603      	mov	r3, r0
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
    if (heading < 0) {
 8002244:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	d507      	bpl.n	8002262 <calculateHeading+0xa2>
        heading += 360;
 8002252:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002256:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002284 <calculateHeading+0xc4>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    return heading;
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	ee07 3a90 	vmov	s15, r3
}
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	54442d18 	.word	0x54442d18
 800227c:	400921fb 	.word	0x400921fb
 8002280:	40668000 	.word	0x40668000
 8002284:	43b40000 	.word	0x43b40000

08002288 <MX_I2C1_Init>:

// I2C Configuration
static void MX_I2C1_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    i2c.Instance = I2C1;
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <MX_I2C1_Init+0x54>)
 800228e:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <MX_I2C1_Init+0x58>)
 8002290:	601a      	str	r2, [r3, #0]
    i2c.Init.ClockSpeed = 100000;
 8002292:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <MX_I2C1_Init+0x54>)
 8002294:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <MX_I2C1_Init+0x5c>)
 8002296:	605a      	str	r2, [r3, #4]
    i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002298:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <MX_I2C1_Init+0x54>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    i2c.Init.OwnAddress1 = 0;
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022aa:	611a      	str	r2, [r3, #16]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2 = 0;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&i2c) != HAL_OK) {
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <MX_I2C1_Init+0x54>)
 80022c6:	f002 fb2b 	bl	8004920 <HAL_I2C_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <MX_I2C1_Init+0x50>
        Error_Handler("I2C Initialization Failed", 1);
 80022d0:	2101      	movs	r1, #1
 80022d2:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <MX_I2C1_Init+0x60>)
 80022d4:	f7ff fe5e 	bl	8001f94 <Error_Handler>
    }
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200001fc 	.word	0x200001fc
 80022e0:	40005400 	.word	0x40005400
 80022e4:	000186a0 	.word	0x000186a0
 80022e8:	08009db0 	.word	0x08009db0

080022ec <MX_GPIO_Init>:

// SCL = PB6 and SDA = PB7 configurations
static void MX_GPIO_Init(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_GPIO_Init+0x58>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <MX_GPIO_Init+0x58>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <MX_GPIO_Init+0x58>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800231c:	23c0      	movs	r3, #192	@ 0xc0
 800231e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002320:	2312      	movs	r3, #18
 8002322:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002328:	2302      	movs	r3, #2
 800232a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800232c:	2304      	movs	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4804      	ldr	r0, [pc, #16]	@ (8002348 <MX_GPIO_Init+0x5c>)
 8002336:	f000 fbc9 	bl	8002acc <HAL_GPIO_Init>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400

0800234c <SystemClock_Config>:

// Sys Clock Configurations
void SystemClock_Config(void) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	@ 0x48
 8002350:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0318 	add.w	r3, r7, #24
 8002356:	2230      	movs	r2, #48	@ 0x30
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f005 fa0d 	bl	800777a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <SystemClock_Config+0xb4>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a22      	ldr	r2, [pc, #136]	@ (8002400 <SystemClock_Config+0xb4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <SystemClock_Config+0xb4>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002392:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002394:	2302      	movs	r3, #2
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002398:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 800239e:	2308      	movs	r3, #8
 80023a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 80023a2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80023ac:	2307      	movs	r3, #7
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 faad 	bl	8005914 <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <SystemClock_Config+0x7c>
        Error_Handler("RCC Oscillator Configuration Failed", 2);
 80023c0:	2102      	movs	r1, #2
 80023c2:	4810      	ldr	r0, [pc, #64]	@ (8002404 <SystemClock_Config+0xb8>)
 80023c4:	f7ff fde6 	bl	8001f94 <Error_Handler>
    }
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023c8:	230f      	movs	r3, #15
 80023ca:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023cc:	2302      	movs	r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023d8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023de:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2105      	movs	r1, #5
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fd0d 	bl	8005e04 <HAL_RCC_ClockConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <SystemClock_Config+0xac>
        Error_Handler("RCC Clock Configuration Failed", 2);
 80023f0:	2102      	movs	r1, #2
 80023f2:	4805      	ldr	r0, [pc, #20]	@ (8002408 <SystemClock_Config+0xbc>)
 80023f4:	f7ff fdce 	bl	8001f94 <Error_Handler>
    }
}
 80023f8:	bf00      	nop
 80023fa:	3748      	adds	r7, #72	@ 0x48
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08009dcc 	.word	0x08009dcc
 8002408:	08009df0 	.word	0x08009df0

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	@ (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800244a:	2007      	movs	r0, #7
 800244c:	f000 fb0a 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a21      	ldr	r2, [pc, #132]	@ (8002500 <HAL_I2C_MspInit+0xa4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d13b      	bne.n	80024f6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800249a:	2340      	movs	r3, #64	@ 0x40
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249e:	2312      	movs	r3, #18
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024aa:	2304      	movs	r3, #4
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4814      	ldr	r0, [pc, #80]	@ (8002508 <HAL_I2C_MspInit+0xac>)
 80024b6:	f000 fb09 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024be:	2312      	movs	r3, #18
 80024c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ca:	2304      	movs	r3, #4
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	480c      	ldr	r0, [pc, #48]	@ (8002508 <HAL_I2C_MspInit+0xac>)
 80024d6:	f000 faf9 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 80024e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_I2C_MspInit+0xa8>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40005400 	.word	0x40005400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020400 	.word	0x40020400

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <NMI_Handler+0x4>

08002514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <MemManage_Handler+0x4>

08002524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <UsageFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f000 f989 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <OTG_FS_IRQHandler+0x10>)
 8002572:	f000 fc47 	bl	8002e04 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000270 	.word	0x20000270

08002580 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <ITM_SendChar+0x48>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0e      	ldr	r2, [pc, #56]	@ (80025c8 <ITM_SendChar+0x48>)
 8002590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002594:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <ITM_SendChar+0x4c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <ITM_SendChar+0x4c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80025a2:	bf00      	nop
 80025a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f8      	beq.n	80025a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80025b2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000edfc 	.word	0xe000edfc
 80025cc:	e0000e00 	.word	0xe0000e00

080025d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return 1;
 80025d4:	2301      	movs	r3, #1
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_kill>:

int _kill(int pid, int sig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ea:	f005 f929 	bl	8007840 <__errno>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2216      	movs	r2, #22
 80025f2:	601a      	str	r2, [r3, #0]
  return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_exit>:

void _exit (int status)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ffe7 	bl	80025e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002612:	bf00      	nop
 8002614:	e7fd      	b.n	8002612 <_exit+0x12>

08002616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e00a      	b.n	800263e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002628:	f3af 8000 	nop.w
 800262c:	4601      	mov	r1, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	60ba      	str	r2, [r7, #8]
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbf0      	blt.n	8002628 <_read+0x12>
  }

  return len;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e009      	b.n	8002676 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff88 	bl	8002580 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf1      	blt.n	8002662 <_write+0x12>
  }
  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_close>:

int _close(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_isatty>:

int _isatty(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <_sbrk+0x5c>)
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <_sbrk+0x60>)
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <_sbrk+0x64>)
 800270e:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <_sbrk+0x68>)
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d207      	bcs.n	8002730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002720:	f005 f88e 	bl	8007840 <__errno>
 8002724:	4603      	mov	r3, r0
 8002726:	220c      	movs	r2, #12
 8002728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	e009      	b.n	8002744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <_sbrk+0x64>)
 8002740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20020000 	.word	0x20020000
 8002750:	00000400 	.word	0x00000400
 8002754:	20000268 	.word	0x20000268
 8002758:	200007a0 	.word	0x200007a0

0800275c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <SystemInit+0x20>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <SystemInit+0x20>)
 8002768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002784:	f7ff ffea 	bl	800275c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800278a:	490d      	ldr	r1, [pc, #52]	@ (80027c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a0:	4c0a      	ldr	r4, [pc, #40]	@ (80027cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f005 f84d 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff f9bd 	bl	8001b30 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027c4:	0800a218 	.word	0x0800a218
  ldr r2, =_sbss
 80027c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027cc:	2000079c 	.word	0x2000079c

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <HAL_Init+0x40>)
 80027de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <HAL_Init+0x40>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_Init+0x40>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 f931 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f808 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002808:	f7ff fe00 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_InitTick+0x54>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_InitTick+0x58>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f93b 	bl	8002ab2 <HAL_SYSTICK_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00e      	b.n	8002864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d80a      	bhi.n	8002862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f000 f911 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4a06      	ldr	r2, [pc, #24]	@ (8002874 <HAL_InitTick+0x5c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2000000c 	.word	0x2000000c
 8002870:	20000014 	.word	0x20000014
 8002874:	20000010 	.word	0x20000010

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000014 	.word	0x20000014
 800289c:	2000026c 	.word	0x2000026c

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000026c 	.word	0x2000026c

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000014 	.word	0x20000014

08002900 <__NVIC_SetPriorityGrouping>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_SetPriority>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff47 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff5c 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffb0 	bl	8002a20 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e16b      	b.n	8002dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 815a 	bne.w	8002dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d005      	beq.n	8002b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d130      	bne.n	8002b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b54:	2201      	movs	r2, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 0201 	and.w	r2, r3, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d017      	beq.n	8002bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b4 	beq.w	8002dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b60      	ldr	r3, [pc, #384]	@ (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ddc <HAL_GPIO_Init+0x310>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	@ (8002de0 <HAL_GPIO_Init+0x314>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	@ (8002de4 <HAL_GPIO_Init+0x318>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	@ (8002de8 <HAL_GPIO_Init+0x31c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <HAL_GPIO_Init+0x320>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002df0 <HAL_GPIO_Init+0x324>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x328>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	@ (8002ddc <HAL_GPIO_Init+0x310>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a32      	ldr	r2, [pc, #200]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <HAL_GPIO_Init+0x334>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae90 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40021c00 	.word	0x40021c00
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fb0c 	bl	8006438 <USB_GetMode>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 80fb 	bne.w	800301e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 facf 	bl	80063d0 <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80f1 	beq.w	800301c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fac6 	bl	80063d0 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e4e:	d104      	bne.n	8002e5a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fab6 	bl	80063d0 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e6e:	d104      	bne.n	8002e7a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 faa6 	bl	80063d0 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e8e:	d104      	bne.n	8002e9a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fa96 	bl	80063d0 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d103      	bne.n	8002eb6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fa88 	bl	80063d0 <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eca:	d120      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ed4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	6938      	ldr	r0, [r7, #16]
 8002eea:	f003 f9b9 	bl	8006260 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002eee:	6938      	ldr	r0, [r7, #16]
 8002ef0:	f003 f9e8 	bl	80062c4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7a5b      	ldrb	r3, [r3, #9]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d105      	bne.n	8002f08 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 faa6 	bl	8006454 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f003 fd5e 	bl	80069ca <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fa5c 	bl	80063d0 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f22:	d102      	bne.n	8002f2a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 fc87 	bl	8004838 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fa4e 	bl	80063d0 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d106      	bne.n	8002f4c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f003 fd27 	bl	8006992 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fa3d 	bl	80063d0 <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f60:	d139      	bne.n	8002fd6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fab1 	bl	80064ce <USB_HC_ReadInterrupt>
 8002f6c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e025      	b.n	8002fc0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9e:	d106      	bne.n	8002fae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f859 	bl	800305e <HCD_HC_IN_IRQHandler>
 8002fac:	e005      	b.n	8002fba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 febb 	bl	8003d30 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	795b      	ldrb	r3, [r3, #5]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d3d3      	bcc.n	8002f74 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 f9f8 	bl	80063d0 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d101      	bne.n	8002fee <HAL_HCD_IRQHandler+0x1ea>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_HCD_IRQHandler+0x1ec>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d014      	beq.n	800301e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0210 	bic.w	r2, r2, #16
 8003002:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 fb38 	bl	800467a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0210 	orr.w	r2, r2, #16
 8003018:	619a      	str	r2, [r3, #24]
 800301a:	e000      	b.n	800301e <HAL_HCD_IRQHandler+0x21a>
      return;
 800301c:	bf00      	nop
    }
  }
}
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_HCD_Stop+0x16>
 8003036:	2302      	movs	r3, #2
 8003038:	e00d      	b.n	8003056 <HAL_HCD_Stop+0x32>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fb72 	bl	8006730 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f003 f9ba 	bl	80063f6 <USB_ReadChInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d11a      	bne.n	80030c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2304      	movs	r3, #4
 800309c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	334d      	adds	r3, #77	@ 0x4d
 80030ae:	2207      	movs	r2, #7
 80030b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fa18 	bl	80064f0 <USB_HC_Halt>
 80030c0:	e09e      	b.n	8003200 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 f993 	bl	80063f6 <USB_ReadChInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030da:	d11b      	bne.n	8003114 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334d      	adds	r3, #77	@ 0x4d
 8003100:	2208      	movs	r2, #8
 8003102:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f003 f9ef 	bl	80064f0 <USB_HC_Halt>
 8003112:	e075      	b.n	8003200 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f003 f96a 	bl	80063f6 <USB_ReadChInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11a      	bne.n	8003162 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	2308      	movs	r3, #8
 800313c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334d      	adds	r3, #77	@ 0x4d
 800314e:	2206      	movs	r2, #6
 8003150:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f003 f9c8 	bl	80064f0 <USB_HC_Halt>
 8003160:	e04e      	b.n	8003200 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f003 f943 	bl	80063f6 <USB_ReadChInterrupts>
 8003170:	4603      	mov	r3, r0
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317a:	d11b      	bne.n	80031b4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800318e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	334d      	adds	r3, #77	@ 0x4d
 80031a0:	2209      	movs	r2, #9
 80031a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 f99f 	bl	80064f0 <USB_HC_Halt>
 80031b2:	e025      	b.n	8003200 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 f91a 	bl	80063f6 <USB_ReadChInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d119      	bne.n	8003200 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334d      	adds	r3, #77	@ 0x4d
 80031ee:	2207      	movs	r2, #7
 80031f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 f978 	bl	80064f0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f003 f8f4 	bl	80063f6 <USB_ReadChInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d112      	bne.n	8003240 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 f964 	bl	80064f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800323a:	6093      	str	r3, [r2, #8]
 800323c:	f000 bd75 	b.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f8d4 	bl	80063f6 <USB_ReadChInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	f040 8128 	bne.w	80034aa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	2320      	movs	r3, #32
 800326a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	331b      	adds	r3, #27
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d119      	bne.n	80032b6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	331b      	adds	r3, #27
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	799b      	ldrb	r3, [r3, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01b      	beq.n	80032f6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3330      	adds	r3, #48	@ 0x30
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	1ac9      	subs	r1, r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4403      	add	r3, r0
 80032f2:	3338      	adds	r3, #56	@ 0x38
 80032f4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334d      	adds	r3, #77	@ 0x4d
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3344      	adds	r3, #68	@ 0x44
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2301      	movs	r3, #1
 800332e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3326      	adds	r3, #38	@ 0x26
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3326      	adds	r3, #38	@ 0x26
 8003356:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003358:	2b02      	cmp	r3, #2
 800335a:	d110      	bne.n	800337e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f003 f8c3 	bl	80064f0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2310      	movs	r3, #16
 800337a:	6093      	str	r3, [r2, #8]
 800337c:	e03d      	b.n	80033fa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3326      	adds	r3, #38	@ 0x26
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d00a      	beq.n	80033aa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3326      	adds	r3, #38	@ 0x26
 80033a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d127      	bne.n	80033fa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	@ 0x4c
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334c      	adds	r3, #76	@ 0x4c
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f003 faf6 	bl	80069e6 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	799b      	ldrb	r3, [r3, #6]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d13b      	bne.n	800347a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3338      	adds	r3, #56	@ 0x38
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4403      	add	r3, r0
 8003422:	3328      	adds	r3, #40	@ 0x28
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	440b      	add	r3, r1
 8003428:	1e59      	subs	r1, r3, #1
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	3328      	adds	r3, #40	@ 0x28
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8470 	beq.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	333c      	adds	r3, #60	@ 0x3c
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	333c      	adds	r3, #60	@ 0x3c
 8003472:	4602      	mov	r2, r0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	f000 bc58 	b.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	333c      	adds	r3, #60	@ 0x3c
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2d8      	uxtb	r0, r3
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	333c      	adds	r3, #60	@ 0x3c
 80034a2:	4602      	mov	r2, r0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	f000 bc40 	b.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 ff9f 	bl	80063f6 <USB_ReadChInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d131      	bne.n	8003526 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2320      	movs	r3, #32
 80034d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	331a      	adds	r3, #26
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 841f 	bne.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	331b      	adds	r3, #27
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	2203      	movs	r2, #3
 8003512:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f002 ffe7 	bl	80064f0 <USB_HC_Halt>
 8003522:	f000 bc02 	b.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f002 ff61 	bl	80063f6 <USB_ReadChInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 8305 	bne.w	8003b4a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2302      	movs	r3, #2
 8003550:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	334d      	adds	r3, #77	@ 0x4d
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d114      	bne.n	8003592 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	334d      	adds	r3, #77	@ 0x4d
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334c      	adds	r3, #76	@ 0x4c
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e2cc      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	334d      	adds	r3, #77	@ 0x4d
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d114      	bne.n	80035d2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334d      	adds	r3, #77	@ 0x4d
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334c      	adds	r3, #76	@ 0x4c
 80035cc:	2205      	movs	r2, #5
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e2ac      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	334d      	adds	r3, #77	@ 0x4d
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d00b      	beq.n	8003600 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	f040 80a6 	bne.w	800374c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334d      	adds	r3, #77	@ 0x4d
 8003610:	2202      	movs	r2, #2
 8003612:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3344      	adds	r3, #68	@ 0x44
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1c59      	adds	r1, r3, #1
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4403      	add	r3, r0
 8003634:	3344      	adds	r3, #68	@ 0x44
 8003636:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3344      	adds	r3, #68	@ 0x44
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d943      	bls.n	80036d6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3344      	adds	r3, #68	@ 0x44
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	331a      	adds	r3, #26
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d123      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	331b      	adds	r3, #27
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	331c      	adds	r3, #28
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	0151      	lsls	r1, r2, #5
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	440a      	add	r2, r1
 80036b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036be:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334c      	adds	r3, #76	@ 0x4c
 80036d0:	2204      	movs	r2, #4
 80036d2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036d4:	e229      	b.n	8003b2a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	334c      	adds	r3, #76	@ 0x4c
 80036e6:	2202      	movs	r2, #2
 80036e8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3326      	adds	r3, #38	@ 0x26
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3326      	adds	r3, #38	@ 0x26
 8003710:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003712:	2b02      	cmp	r3, #2
 8003714:	f040 8209 	bne.w	8003b2a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800372e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003736:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	461a      	mov	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800374a:	e1ee      	b.n	8003b2a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	@ 0x4d
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b05      	cmp	r3, #5
 8003760:	f040 80c8 	bne.w	80038f4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	331b      	adds	r3, #27
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	f040 81ce 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3326      	adds	r3, #38	@ 0x26
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d16b      	bne.n	800387e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3348      	adds	r3, #72	@ 0x48
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1c59      	adds	r1, r3, #1
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4403      	add	r3, r0
 80037c6:	3348      	adds	r3, #72	@ 0x48
 80037c8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3348      	adds	r3, #72	@ 0x48
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d943      	bls.n	8003868 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3348      	adds	r3, #72	@ 0x48
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	331b      	adds	r3, #27
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3344      	adds	r3, #68	@ 0x44
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d809      	bhi.n	8003832 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	331c      	adds	r3, #28
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	440a      	add	r2, r1
 8003848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800384c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003850:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	334c      	adds	r3, #76	@ 0x4c
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e014      	b.n	8003892 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	@ 0x4c
 8003878:	2202      	movs	r2, #2
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e009      	b.n	8003892 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	334c      	adds	r3, #76	@ 0x4c
 800388e:	2202      	movs	r2, #2
 8003890:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3326      	adds	r3, #38	@ 0x26
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	@ 0x26
 80038b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	f040 8136 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e11b      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334d      	adds	r3, #77	@ 0x4d
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b03      	cmp	r3, #3
 8003908:	f040 8081 	bne.w	8003a0e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	334d      	adds	r3, #77	@ 0x4d
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	331b      	adds	r3, #27
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	f040 80fa 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	334c      	adds	r3, #76	@ 0x4c
 8003948:	2202      	movs	r2, #2
 800394a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800396a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	440a      	add	r2, r1
 8003982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a6:	f023 0320 	bic.w	r3, r3, #32
 80039aa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3326      	adds	r3, #38	@ 0x26
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3326      	adds	r3, #38	@ 0x26
 80039d2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 80a9 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039f0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039f8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e08e      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334d      	adds	r3, #77	@ 0x4d
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d143      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334c      	adds	r3, #76	@ 0x4c
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3326      	adds	r3, #38	@ 0x26
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3326      	adds	r3, #38	@ 0x26
 8003a72:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d159      	bne.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a8e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a96:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e03f      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d126      	bne.n	8003b10 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	334d      	adds	r3, #77	@ 0x4d
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3344      	adds	r3, #68	@ 0x44
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1c59      	adds	r1, r3, #1
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4403      	add	r3, r0
 8003af6:	3344      	adds	r3, #68	@ 0x44
 8003af8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	334c      	adds	r3, #76	@ 0x4c
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e00d      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f000 8100 	beq.w	8003d28 <HCD_HC_IN_IRQHandler+0xcca>
 8003b28:	e000      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	@ 0x4c
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f002 ff4f 	bl	80069e6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b48:	e0ef      	b.n	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 fc4f 	bl	80063f6 <USB_ReadChInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5e:	2b40      	cmp	r3, #64	@ 0x40
 8003b60:	d12f      	bne.n	8003bc2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2340      	movs	r3, #64	@ 0x40
 8003b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334d      	adds	r3, #77	@ 0x4d
 8003b84:	2205      	movs	r2, #5
 8003b86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	331a      	adds	r3, #26
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3344      	adds	r3, #68	@ 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f002 fc98 	bl	80064f0 <USB_HC_Halt>
 8003bc0:	e0b3      	b.n	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 fc13 	bl	80063f6 <USB_ReadChInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	f040 80a7 	bne.w	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3326      	adds	r3, #38	@ 0x26
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d11b      	bne.n	8003c2a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3344      	adds	r3, #68	@ 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	334d      	adds	r3, #77	@ 0x4d
 8003c16:	2204      	movs	r2, #4
 8003c18:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fc64 	bl	80064f0 <USB_HC_Halt>
 8003c28:	e03f      	b.n	8003caa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3326      	adds	r3, #38	@ 0x26
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3326      	adds	r3, #38	@ 0x26
 8003c50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d129      	bne.n	8003caa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3344      	adds	r3, #68	@ 0x44
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	799b      	ldrb	r3, [r3, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HCD_HC_IN_IRQHandler+0xc2a>
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	331b      	adds	r3, #27
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d110      	bne.n	8003caa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334d      	adds	r3, #77	@ 0x4d
 8003c98:	2204      	movs	r2, #4
 8003c9a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fc23 	bl	80064f0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331b      	adds	r3, #27
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d129      	bne.n	8003d14 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	331b      	adds	r3, #27
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	0151      	lsls	r1, r2, #5
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	440a      	add	r2, r1
 8003cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d0e:	f043 0320 	orr.w	r3, r3, #32
 8003d12:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d20:	461a      	mov	r2, r3
 8003d22:	2310      	movs	r3, #16
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	e000      	b.n	8003d2a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d28:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f002 fb51 	bl	80063f6 <USB_ReadChInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d11b      	bne.n	8003d96 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	334d      	adds	r3, #77	@ 0x4d
 8003d80:	2207      	movs	r2, #7
 8003d82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fbaf 	bl	80064f0 <USB_HC_Halt>
 8003d92:	f000 bc6f 	b.w	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fb29 	bl	80063f6 <USB_ReadChInterrupts>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 8082 	bne.w	8003eb4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3319      	adds	r3, #25
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d124      	bne.n	8003e22 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	3319      	adds	r3, #25
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334c      	adds	r3, #76	@ 0x4c
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334d      	adds	r3, #77	@ 0x4d
 8003e10:	2203      	movs	r2, #3
 8003e12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fb67 	bl	80064f0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	331a      	adds	r3, #26
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 841d 	bne.w	8004674 <HCD_HC_OUT_IRQHandler+0x944>
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	331b      	adds	r3, #27
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 8411 	bne.w	8004674 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3326      	adds	r3, #38	@ 0x26
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d009      	beq.n	8003e7c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	331b      	adds	r3, #27
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	@ 0x4d
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 fb29 	bl	80064f0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3344      	adds	r3, #68	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e3df      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 fa9a 	bl	80063f6 <USB_ReadChInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ecc:	d111      	bne.n	8003ef2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eda:	461a      	mov	r2, r3
 8003edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ee0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fb00 	bl	80064f0 <USB_HC_Halt>
 8003ef0:	e3c0      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f002 fa7b 	bl	80063f6 <USB_ReadChInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d168      	bne.n	8003fdc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3344      	adds	r3, #68	@ 0x44
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 fa65 	bl	80063f6 <USB_ReadChInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d112      	bne.n	8003f5c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3319      	adds	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f56:	461a      	mov	r2, r3
 8003f58:	2340      	movs	r3, #64	@ 0x40
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	331b      	adds	r3, #27
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d019      	beq.n	8003fa6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	331b      	adds	r3, #27
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334d      	adds	r3, #77	@ 0x4d
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f002 fa8b 	bl	80064f0 <USB_HC_Halt>
 8003fda:	e34b      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f002 fa06 	bl	80063f6 <USB_ReadChInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d139      	bne.n	8004068 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	334d      	adds	r3, #77	@ 0x4d
 8004004:	2205      	movs	r2, #5
 8004006:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	331a      	adds	r3, #26
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3319      	adds	r3, #25
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3344      	adds	r3, #68	@ 0x44
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f002 fa4e 	bl	80064f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2340      	movs	r3, #64	@ 0x40
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e305      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f002 f9c0 	bl	80063f6 <USB_ReadChInterrupts>
 8004076:	4603      	mov	r3, r0
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b08      	cmp	r3, #8
 800407e:	d11a      	bne.n	80040b6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408c:	461a      	mov	r2, r3
 800408e:	2308      	movs	r3, #8
 8004090:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	334d      	adds	r3, #77	@ 0x4d
 80040a2:	2206      	movs	r2, #6
 80040a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 fa1e 	bl	80064f0 <USB_HC_Halt>
 80040b4:	e2de      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f999 	bl	80063f6 <USB_ReadChInterrupts>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d144      	bne.n	8004158 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	3344      	adds	r3, #68	@ 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	2204      	movs	r2, #4
 80040f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3319      	adds	r3, #25
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d114      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3318      	adds	r3, #24
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3319      	adds	r3, #25
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f002 f9d6 	bl	80064f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2310      	movs	r3, #16
 8004154:	6093      	str	r3, [r2, #8]
 8004156:	e28d      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f002 f948 	bl	80063f6 <USB_ReadChInterrupts>
 8004166:	4603      	mov	r3, r0
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b80      	cmp	r3, #128	@ 0x80
 800416e:	d169      	bne.n	8004244 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	799b      	ldrb	r3, [r3, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	334d      	adds	r3, #77	@ 0x4d
 8004188:	2207      	movs	r2, #7
 800418a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f002 f9ab 	bl	80064f0 <USB_HC_Halt>
 800419a:	e049      	b.n	8004230 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3344      	adds	r3, #68	@ 0x44
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c59      	adds	r1, r3, #1
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4403      	add	r3, r0
 80041bc:	3344      	adds	r3, #68	@ 0x44
 80041be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	3344      	adds	r3, #68	@ 0x44
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d922      	bls.n	800421c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3344      	adds	r3, #68	@ 0x44
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334c      	adds	r3, #76	@ 0x4c
 80041fa:	2204      	movs	r2, #4
 80041fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	334c      	adds	r3, #76	@ 0x4c
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f002 fbe6 	bl	80069e6 <HAL_HCD_HC_NotifyURBChange_Callback>
 800421a:	e009      	b.n	8004230 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334c      	adds	r3, #76	@ 0x4c
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423c:	461a      	mov	r2, r3
 800423e:	2380      	movs	r3, #128	@ 0x80
 8004240:	6093      	str	r3, [r2, #8]
 8004242:	e217      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f002 f8d2 	bl	80063f6 <USB_ReadChInterrupts>
 8004252:	4603      	mov	r3, r0
 8004254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425c:	d11b      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334d      	adds	r3, #77	@ 0x4d
 800426e:	2209      	movs	r2, #9
 8004270:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f002 f938 	bl	80064f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	e1ee      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f002 f8a9 	bl	80063f6 <USB_ReadChInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	f040 81df 	bne.w	800466e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042bc:	461a      	mov	r2, r3
 80042be:	2302      	movs	r3, #2
 80042c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	334d      	adds	r3, #77	@ 0x4d
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f040 8093 	bne.w	8004400 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	334d      	adds	r3, #77	@ 0x4d
 80042ea:	2202      	movs	r2, #2
 80042ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	334c      	adds	r3, #76	@ 0x4c
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3326      	adds	r3, #38	@ 0x26
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d00b      	beq.n	8004330 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	3326      	adds	r3, #38	@ 0x26
 8004328:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800432a:	2b03      	cmp	r3, #3
 800432c:	f040 8190 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	799b      	ldrb	r3, [r3, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d115      	bne.n	8004364 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	333d      	adds	r3, #61	@ 0x3d
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	f083 0301 	eor.w	r3, r3, #1
 8004350:	b2d8      	uxtb	r0, r3
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	333d      	adds	r3, #61	@ 0x3d
 8004360:	4602      	mov	r2, r0
 8004362:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	799b      	ldrb	r3, [r3, #6]
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 8171 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3334      	adds	r3, #52	@ 0x34
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8165 	beq.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3334      	adds	r3, #52	@ 0x34
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	3328      	adds	r3, #40	@ 0x28
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	440b      	add	r3, r1
 80043ac:	1e59      	subs	r1, r3, #1
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4403      	add	r3, r0
 80043bc:	3328      	adds	r3, #40	@ 0x28
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 813f 	beq.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	333d      	adds	r3, #61	@ 0x3d
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2d8      	uxtb	r0, r3
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	333d      	adds	r3, #61	@ 0x3d
 80043fa:	4602      	mov	r2, r0
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e127      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	334d      	adds	r3, #77	@ 0x4d
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d120      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	334d      	adds	r3, #77	@ 0x4d
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	331b      	adds	r3, #27
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8107 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	334c      	adds	r3, #76	@ 0x4c
 8004452:	2202      	movs	r2, #2
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e0fb      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334d      	adds	r3, #77	@ 0x4d
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b04      	cmp	r3, #4
 800446c:	d13a      	bne.n	80044e4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	334d      	adds	r3, #77	@ 0x4d
 800447e:	2202      	movs	r2, #2
 8004480:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	334c      	adds	r3, #76	@ 0x4c
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	331b      	adds	r3, #27
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 80d1 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	331b      	adds	r3, #27
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e0:	6053      	str	r3, [r2, #4]
 80044e2:	e0b5      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334d      	adds	r3, #77	@ 0x4d
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d114      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	334d      	adds	r3, #77	@ 0x4d
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	334c      	adds	r3, #76	@ 0x4c
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e095      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	334d      	adds	r3, #77	@ 0x4d
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b06      	cmp	r3, #6
 8004538:	d114      	bne.n	8004564 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	334d      	adds	r3, #77	@ 0x4d
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	334c      	adds	r3, #76	@ 0x4c
 800455e:	2205      	movs	r2, #5
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e075      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	334d      	adds	r3, #77	@ 0x4d
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b07      	cmp	r3, #7
 8004578:	d00a      	beq.n	8004590 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	334d      	adds	r3, #77	@ 0x4d
 800458a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800458c:	2b09      	cmp	r3, #9
 800458e:	d170      	bne.n	8004672 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	334d      	adds	r3, #77	@ 0x4d
 80045a0:	2202      	movs	r2, #2
 80045a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3344      	adds	r3, #68	@ 0x44
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	1c59      	adds	r1, r3, #1
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4403      	add	r3, r0
 80045c4:	3344      	adds	r3, #68	@ 0x44
 80045c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3344      	adds	r3, #68	@ 0x44
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d914      	bls.n	8004608 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3344      	adds	r3, #68	@ 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334c      	adds	r3, #76	@ 0x4c
 8004602:	2204      	movs	r2, #4
 8004604:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004606:	e022      	b.n	800464e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	334c      	adds	r3, #76	@ 0x4c
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004632:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800463a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004648:	461a      	mov	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800464e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	@ 0x4c
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f002 f9bd 	bl	80069e6 <HAL_HCD_HC_NotifyURBChange_Callback>
 800466c:	e002      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004672:	bf00      	nop
  }
}
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08a      	sub	sp, #40	@ 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	0c5b      	lsrs	r3, r3, #17
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d004      	beq.n	80046c0 <HCD_RXQLVL_IRQHandler+0x46>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	f000 80b6 	beq.w	800482a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046be:	e0b7      	b.n	8004830 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80b3 	beq.w	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	332c      	adds	r3, #44	@ 0x2c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80a7 	beq.w	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3338      	adds	r3, #56	@ 0x38
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	18d1      	adds	r1, r2, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4403      	add	r3, r0
 8004704:	3334      	adds	r3, #52	@ 0x34
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4299      	cmp	r1, r3
 800470a:	f200 8083 	bhi.w	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	332c      	adds	r3, #44	@ 0x2c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	b292      	uxth	r2, r2
 8004728:	4619      	mov	r1, r3
 800472a:	f001 fdf9 	bl	8006320 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4613      	mov	r3, r2
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	332c      	adds	r3, #44	@ 0x2c
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	18d1      	adds	r1, r2, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4403      	add	r3, r0
 8004752:	332c      	adds	r3, #44	@ 0x2c
 8004754:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	3338      	adds	r3, #56	@ 0x38
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	18d1      	adds	r1, r2, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4403      	add	r3, r0
 800477a:	3338      	adds	r3, #56	@ 0x38
 800477c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	0cdb      	lsrs	r3, r3, #19
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3328      	adds	r3, #40	@ 0x28
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d13f      	bne.n	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d03c      	beq.n	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	333c      	adds	r3, #60	@ 0x3c
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f083 0301 	eor.w	r3, r3, #1
 80047fc:	b2d8      	uxtb	r0, r3
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	333c      	adds	r3, #60	@ 0x3c
 800480e:	4602      	mov	r2, r0
 8004810:	701a      	strb	r2, [r3, #0]
      break;
 8004812:	e00c      	b.n	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	334c      	adds	r3, #76	@ 0x4c
 8004824:	2204      	movs	r2, #4
 8004826:	701a      	strb	r2, [r3, #0]
      break;
 8004828:	e001      	b.n	800482e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800482e:	bf00      	nop
  }
}
 8004830:	bf00      	nop
 8004832:	3728      	adds	r7, #40	@ 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004864:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b02      	cmp	r3, #2
 800486e:	d10b      	bne.n	8004888 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d102      	bne.n	8004880 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f002 f897 	bl	80069ae <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d132      	bne.n	80048f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d126      	bne.n	80048f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7a5b      	ldrb	r3, [r3, #9]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d113      	bne.n	80048d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80048b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048b6:	d106      	bne.n	80048c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fdc8 	bl	8006454 <USB_InitFSLSPClkSel>
 80048c4:	e011      	b.n	80048ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fdc1 	bl	8006454 <USB_InitFSLSPClkSel>
 80048d2:	e00a      	b.n	80048ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	79db      	ldrb	r3, [r3, #7]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d106      	bne.n	80048ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048e2:	461a      	mov	r2, r3
 80048e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80048e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f002 f889 	bl	8006a02 <HAL_HCD_PortEnabled_Callback>
 80048f0:	e002      	b.n	80048f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f002 f893 	bl	8006a1e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d103      	bne.n	800490a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f043 0320 	orr.w	r3, r3, #32
 8004908:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e12b      	b.n	8004b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd fd88 	bl	800245c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	@ 0x24
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004984:	f001 fc36 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8004988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a81      	ldr	r2, [pc, #516]	@ (8004b94 <HAL_I2C_Init+0x274>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d807      	bhi.n	80049a4 <HAL_I2C_Init+0x84>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a80      	ldr	r2, [pc, #512]	@ (8004b98 <HAL_I2C_Init+0x278>)
 8004998:	4293      	cmp	r3, r2
 800499a:	bf94      	ite	ls
 800499c:	2301      	movls	r3, #1
 800499e:	2300      	movhi	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e006      	b.n	80049b2 <HAL_I2C_Init+0x92>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a7d      	ldr	r2, [pc, #500]	@ (8004b9c <HAL_I2C_Init+0x27c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	bf94      	ite	ls
 80049ac:	2301      	movls	r3, #1
 80049ae:	2300      	movhi	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0e7      	b.n	8004b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a78      	ldr	r2, [pc, #480]	@ (8004ba0 <HAL_I2C_Init+0x280>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0c9b      	lsrs	r3, r3, #18
 80049c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b94 <HAL_I2C_Init+0x274>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d802      	bhi.n	80049f4 <HAL_I2C_Init+0xd4>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3301      	adds	r3, #1
 80049f2:	e009      	b.n	8004a08 <HAL_I2C_Init+0xe8>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	4a69      	ldr	r2, [pc, #420]	@ (8004ba4 <HAL_I2C_Init+0x284>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	3301      	adds	r3, #1
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	495c      	ldr	r1, [pc, #368]	@ (8004b94 <HAL_I2C_Init+0x274>)
 8004a24:	428b      	cmp	r3, r1
 8004a26:	d819      	bhi.n	8004a5c <HAL_I2C_Init+0x13c>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e59      	subs	r1, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a36:	1c59      	adds	r1, r3, #1
 8004a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_I2C_Init+0x138>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e59      	subs	r1, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	e051      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e04f      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <HAL_I2C_Init+0x168>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	440b      	add	r3, r1
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e012      	b.n	8004aae <HAL_I2C_Init+0x18e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	0099      	lsls	r1, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x196>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e022      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10e      	bne.n	8004adc <HAL_I2C_Init+0x1bc>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1e58      	subs	r0, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6859      	ldr	r1, [r3, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	440b      	add	r3, r1
 8004acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ada:	e00f      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e58      	subs	r0, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	0099      	lsls	r1, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	6809      	ldr	r1, [r1, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6911      	ldr	r1, [r2, #16]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	000186a0 	.word	0x000186a0
 8004b98:	001e847f 	.word	0x001e847f
 8004b9c:	003d08ff 	.word	0x003d08ff
 8004ba0:	431bde83 	.word	0x431bde83
 8004ba4:	10624dd3 	.word	0x10624dd3

08004ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	817b      	strh	r3, [r7, #10]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bbc:	f7fd fe70 	bl	80028a0 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80e0 	bne.w	8004d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2319      	movs	r3, #25
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4970      	ldr	r1, [pc, #448]	@ (8004d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fc64 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	e0d3      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_I2C_Master_Transmit+0x50>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0cc      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d007      	beq.n	8004c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	893a      	ldrh	r2, [r7, #8]
 8004c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a50      	ldr	r2, [pc, #320]	@ (8004da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c60:	8979      	ldrh	r1, [r7, #10]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 face 	bl	8005208 <I2C_MasterRequestWrite>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e08d      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c8c:	e066      	b.n	8004d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	6a39      	ldr	r1, [r7, #32]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fd22 	bl	80056dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d107      	bne.n	8004cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e06b      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d11b      	bne.n	8004d30 <HAL_I2C_Master_Transmit+0x188>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d017      	beq.n	8004d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	6a39      	ldr	r1, [r7, #32]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fd19 	bl	800576c <I2C_WaitOnBTFFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d107      	bne.n	8004d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e01a      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d194      	bne.n	8004c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	00100002 	.word	0x00100002
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08c      	sub	sp, #48	@ 0x30
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	461a      	mov	r2, r3
 8004db0:	460b      	mov	r3, r1
 8004db2:	817b      	strh	r3, [r7, #10]
 8004db4:	4613      	mov	r3, r2
 8004db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db8:	f7fd fd72 	bl	80028a0 <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	f040 8217 	bne.w	80051fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2319      	movs	r3, #25
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	497c      	ldr	r1, [pc, #496]	@ (8004fc8 <HAL_I2C_Master_Receive+0x224>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fb66 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	e20a      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_I2C_Master_Receive+0x50>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e203      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d007      	beq.n	8004e1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2222      	movs	r2, #34	@ 0x22
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2210      	movs	r2, #16
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	893a      	ldrh	r2, [r7, #8]
 8004e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a5c      	ldr	r2, [pc, #368]	@ (8004fcc <HAL_I2C_Master_Receive+0x228>)
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e5c:	8979      	ldrh	r1, [r7, #10]
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa52 	bl	800530c <I2C_MasterRequestRead>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1c4      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e198      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e178      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d11b      	bne.n	8004f22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	e158      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f48:	e144      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	f200 80f1 	bhi.w	8005136 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d123      	bne.n	8004fa4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fc4b 	bl	80057fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e145      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fa2:	e117      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d14e      	bne.n	800504a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4906      	ldr	r1, [pc, #24]	@ (8004fd0 <HAL_I2C_Master_Receive+0x22c>)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa76 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e11a      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
 8004fc6:	bf00      	nop
 8004fc8:	00100002 	.word	0x00100002
 8004fcc:	ffff0000 	.word	0xffff0000
 8004fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005048:	e0c4      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	496c      	ldr	r1, [pc, #432]	@ (8005204 <HAL_I2C_Master_Receive+0x460>)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fa27 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cb      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	2200      	movs	r2, #0
 80050ae:	4955      	ldr	r1, [pc, #340]	@ (8005204 <HAL_I2C_Master_Receive+0x460>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f9f9 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e09d      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005134:	e04e      	b.n	80051d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fb5e 	bl	80057fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e058      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b04      	cmp	r3, #4
 8005188:	d124      	bne.n	80051d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f aeb6 	bne.w	8004f4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3728      	adds	r7, #40	@ 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010004 	.word	0x00010004

08005208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	460b      	mov	r3, r1
 8005216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d006      	beq.n	8005232 <I2C_MasterRequestWrite+0x2a>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d003      	beq.n	8005232 <I2C_MasterRequestWrite+0x2a>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005230:	d108      	bne.n	8005244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e00b      	b.n	800525c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005248:	2b12      	cmp	r3, #18
 800524a:	d107      	bne.n	800525c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800525a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f91d 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005282:	d103      	bne.n	800528c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800528a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e035      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005298:	d108      	bne.n	80052ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	e01b      	b.n	80052e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	11db      	asrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0306 	and.w	r3, r3, #6
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f063 030f 	orn	r3, r3, #15
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	490e      	ldr	r1, [pc, #56]	@ (8005304 <I2C_MasterRequestWrite+0xfc>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f966 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e010      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4907      	ldr	r1, [pc, #28]	@ (8005308 <I2C_MasterRequestWrite+0x100>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f956 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00010008 	.word	0x00010008
 8005308:	00010002 	.word	0x00010002

0800530c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	460b      	mov	r3, r1
 800531a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005330:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d006      	beq.n	8005346 <I2C_MasterRequestRead+0x3a>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d003      	beq.n	8005346 <I2C_MasterRequestRead+0x3a>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005344:	d108      	bne.n	8005358 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e00b      	b.n	8005370 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	2b11      	cmp	r3, #17
 800535e:	d107      	bne.n	8005370 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800536e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f893 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005396:	d103      	bne.n	80053a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e079      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ac:	d108      	bne.n	80053c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	e05f      	b.n	8005480 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	11db      	asrs	r3, r3, #7
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0306 	and.w	r3, r3, #6
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f063 030f 	orn	r3, r3, #15
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4930      	ldr	r1, [pc, #192]	@ (80054a0 <I2C_MasterRequestRead+0x194>)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f8dc 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e054      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4929      	ldr	r1, [pc, #164]	@ (80054a4 <I2C_MasterRequestRead+0x198>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8cc 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e044      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f831 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800545a:	d103      	bne.n	8005464 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005462:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e017      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	11db      	asrs	r3, r3, #7
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f063 030e 	orn	r3, r3, #14
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4907      	ldr	r1, [pc, #28]	@ (80054a4 <I2C_MasterRequestRead+0x198>)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f888 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	00010008 	.word	0x00010008
 80054a4:	00010002 	.word	0x00010002

080054a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b8:	e048      	b.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d044      	beq.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fd f9ed 	bl	80028a0 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d139      	bne.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10d      	bne.n	80054fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	43da      	mvns	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	e00c      	b.n	8005518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	43da      	mvns	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	429a      	cmp	r2, r3
 800551c:	d116      	bne.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e023      	b.n	8005594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10d      	bne.n	8005572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	43da      	mvns	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	e00c      	b.n	800558c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	43da      	mvns	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	429a      	cmp	r2, r3
 8005590:	d093      	beq.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055aa:	e071      	b.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ba:	d123      	bne.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	f043 0204 	orr.w	r2, r3, #4
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e067      	b.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d041      	beq.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560c:	f7fd f948 	bl	80028a0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d136      	bne.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10c      	bne.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	e00b      	b.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	43da      	mvns	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e021      	b.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10c      	bne.n	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	43da      	mvns	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e00b      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	43da      	mvns	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4013      	ands	r3, r2
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f af6d 	bne.w	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e8:	e034      	b.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f8e3 	bl	80058b6 <I2C_IsAcknowledgeFailed>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e034      	b.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d028      	beq.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fd f8cd 	bl	80028a0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11d      	bne.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005722:	2b80      	cmp	r3, #128	@ 0x80
 8005724:	d016      	beq.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b80      	cmp	r3, #128	@ 0x80
 8005760:	d1c3      	bne.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005778:	e034      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f89b 	bl	80058b6 <I2C_IsAcknowledgeFailed>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e034      	b.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d028      	beq.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005792:	f7fd f885 	bl	80028a0 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11d      	bne.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d016      	beq.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e007      	b.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d1c3      	bne.n	800577a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005808:	e049      	b.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d119      	bne.n	800584c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e030      	b.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fd f828 	bl	80028a0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11d      	bne.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d016      	beq.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e007      	b.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d1ae      	bne.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058cc:	d11b      	bne.n	8005906 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e267      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d075      	beq.n	8005a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005932:	4b88      	ldr	r3, [pc, #544]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d00c      	beq.n	8005958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b85      	ldr	r3, [pc, #532]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005946:	2b08      	cmp	r3, #8
 8005948:	d112      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b82      	ldr	r3, [pc, #520]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005956:	d10b      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	4b7e      	ldr	r3, [pc, #504]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x108>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d157      	bne.n	8005a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e242      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x74>
 800597a:	4b76      	ldr	r3, [pc, #472]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a75      	ldr	r2, [pc, #468]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e01d      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x98>
 8005992:	4b70      	ldr	r3, [pc, #448]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6f      	ldr	r2, [pc, #444]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e00b      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 80059ac:	4b69      	ldr	r3, [pc, #420]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b66      	ldr	r3, [pc, #408]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc ff68 	bl	80028a0 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc ff64 	bl	80028a0 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	@ 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e207      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0xc0>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc ff54 	bl	80028a0 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fc ff50 	bl	80028a0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	@ 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1f3      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	4b51      	ldr	r3, [pc, #324]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0xe8>
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d063      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b47      	ldr	r3, [pc, #284]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d11c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b44      	ldr	r3, [pc, #272]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1c7      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a66:	4b3b      	ldr	r3, [pc, #236]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4937      	ldr	r1, [pc, #220]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7a:	e03a      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d020      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a84:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fc ff09 	bl	80028a0 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a92:	f7fc ff05 	bl	80028a0 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e1a8      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4925      	ldr	r1, [pc, #148]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
 8005ac4:	e015      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac6:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fc fee8 	bl	80028a0 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fee4 	bl	80028a0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e187      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b06:	4b15      	ldr	r3, [pc, #84]	@ (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fec8 	bl	80028a0 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b14:	f7fc fec4 	bl	80028a0 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e167      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x200>
 8005b32:	e01b      	b.n	8005b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b34:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fc feb1 	bl	80028a0 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fc fead 	bl	80028a0 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d907      	bls.n	8005b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e150      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470000 	.word	0x42470000
 8005b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	4b88      	ldr	r3, [pc, #544]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8097 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b7e:	4b81      	ldr	r3, [pc, #516]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	4a7c      	ldr	r2, [pc, #496]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005baa:	4b77      	ldr	r3, [pc, #476]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d118      	bne.n	8005be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb6:	4b74      	ldr	r3, [pc, #464]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc2:	f7fc fe6d 	bl	80028a0 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7fc fe69 	bl	80028a0 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e10c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <HAL_RCC_OscConfig+0x2ea>
 8005bf0:	4b64      	ldr	r3, [pc, #400]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf4:	4a63      	ldr	r2, [pc, #396]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfc:	e01c      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x30c>
 8005c06:	4b5f      	ldr	r3, [pc, #380]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0304 	orr.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	4b5c      	ldr	r3, [pc, #368]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	4a5b      	ldr	r2, [pc, #364]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005c20:	4b58      	ldr	r3, [pc, #352]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a57      	ldr	r2, [pc, #348]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2c:	4b55      	ldr	r3, [pc, #340]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	4a54      	ldr	r2, [pc, #336]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0304 	bic.w	r3, r3, #4
 8005c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fc fe2e 	bl	80028a0 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc fe2a 	bl	80028a0 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0cb      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	4b49      	ldr	r3, [pc, #292]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RCC_OscConfig+0x334>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7fc fe18 	bl	80028a0 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fc fe14 	bl	80028a0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0b5      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9c:	4b39      	ldr	r3, [pc, #228]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	4a38      	ldr	r2, [pc, #224]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a1 	beq.w	8005df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb2:	4b34      	ldr	r3, [pc, #208]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d05c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d141      	bne.n	8005d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fde8 	bl	80028a0 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fde4 	bl	80028a0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e087      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	491b      	ldr	r1, [pc, #108]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fc fdbd 	bl	80028a0 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fc fdb9 	bl	80028a0 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e05c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	4b11      	ldr	r3, [pc, #68]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x416>
 8005d48:	e054      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc fda6 	bl	80028a0 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc fda2 	bl	80028a0 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e045      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x444>
 8005d76:	e03d      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e038      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <HAL_RCC_OscConfig+0x4ec>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d028      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d121      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11a      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d111      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800

08005e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0cc      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b68      	ldr	r3, [pc, #416]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90c      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b65      	ldr	r3, [pc, #404]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a52      	ldr	r2, [pc, #328]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e067      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b37      	ldr	r3, [pc, #220]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4934      	ldr	r1, [pc, #208]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fc fcd4 	bl	80028a0 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fc fcd0 	bl	80028a0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e04f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d20c      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b22      	ldr	r3, [pc, #136]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f821 	bl	8005fd0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490a      	ldr	r1, [pc, #40]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc fc34 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	08009e10 	.word	0x08009e10
 8005fc8:	2000000c 	.word	0x2000000c
 8005fcc:	20000010 	.word	0x20000010

08005fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b094      	sub	sp, #80	@ 0x50
 8005fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe8:	4b79      	ldr	r3, [pc, #484]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d00d      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	f200 80e1 	bhi.w	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x34>
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d003      	beq.n	800600a <HAL_RCC_GetSysClockFreq+0x3a>
 8006002:	e0db      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006004:	4b73      	ldr	r3, [pc, #460]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006006:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006008:	e0db      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600a:	4b73      	ldr	r3, [pc, #460]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800600c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800600e:	e0d8      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006010:	4b6f      	ldr	r3, [pc, #444]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601a:	4b6d      	ldr	r3, [pc, #436]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d063      	beq.n	80060ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006026:	4b6a      	ldr	r3, [pc, #424]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	099b      	lsrs	r3, r3, #6
 800602c:	2200      	movs	r2, #0
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006030:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	633b      	str	r3, [r7, #48]	@ 0x30
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f04f 0000 	mov.w	r0, #0
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006054:	0150      	lsls	r0, r2, #5
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4621      	mov	r1, r4
 800605c:	1a51      	subs	r1, r2, r1
 800605e:	6139      	str	r1, [r7, #16]
 8006060:	4629      	mov	r1, r5
 8006062:	eb63 0301 	sbc.w	r3, r3, r1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006074:	4659      	mov	r1, fp
 8006076:	018b      	lsls	r3, r1, #6
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800607e:	4651      	mov	r1, sl
 8006080:	018a      	lsls	r2, r1, #6
 8006082:	4651      	mov	r1, sl
 8006084:	ebb2 0801 	subs.w	r8, r2, r1
 8006088:	4659      	mov	r1, fp
 800608a:	eb63 0901 	sbc.w	r9, r3, r1
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	eb18 0303 	adds.w	r3, r8, r3
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	462b      	mov	r3, r5
 80060b0:	eb49 0303 	adc.w	r3, r9, r3
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060c2:	4629      	mov	r1, r5
 80060c4:	024b      	lsls	r3, r1, #9
 80060c6:	4621      	mov	r1, r4
 80060c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060cc:	4621      	mov	r1, r4
 80060ce:	024a      	lsls	r2, r1, #9
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d6:	2200      	movs	r2, #0
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060e0:	f7fa fdc2 	bl	8000c68 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ec:	e058      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b38      	ldr	r3, [pc, #224]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	2200      	movs	r2, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	4611      	mov	r1, r2
 80060fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611a:	0150      	lsls	r0, r2, #5
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4641      	mov	r1, r8
 8006122:	ebb2 0a01 	subs.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb63 0b01 	sbc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800613c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006140:	ebb2 040a 	subs.w	r4, r2, sl
 8006144:	eb63 050b 	sbc.w	r5, r3, fp
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	00eb      	lsls	r3, r5, #3
 8006152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006156:	00e2      	lsls	r2, r4, #3
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	4643      	mov	r3, r8
 800615e:	18e3      	adds	r3, r4, r3
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	464b      	mov	r3, r9
 8006164:	eb45 0303 	adc.w	r3, r5, r3
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006176:	4629      	mov	r1, r5
 8006178:	028b      	lsls	r3, r1, #10
 800617a:	4621      	mov	r1, r4
 800617c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006180:	4621      	mov	r1, r4
 8006182:	028a      	lsls	r2, r1, #10
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618a:	2200      	movs	r2, #0
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006194:	f7fa fd68 	bl	8000c68 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	3301      	adds	r3, #1
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80061b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3750      	adds	r7, #80	@ 0x50
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	00f42400 	.word	0x00f42400
 80061d8:	007a1200 	.word	0x007a1200

080061dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e2:	681b      	ldr	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	2000000c 	.word	0x2000000c

080061f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061f8:	f7ff fff0 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4903      	ldr	r1, [pc, #12]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40023800 	.word	0x40023800
 8006218:	08009e20 	.word	0x08009e20

0800621c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3301      	adds	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800627a:	d901      	bls.n	8006280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e01b      	b.n	80062b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	daf2      	bge.n	800626e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	019b      	lsls	r3, r3, #6
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062a4:	d901      	bls.n	80062aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e006      	b.n	80062b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d0f0      	beq.n	8006298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062dc:	d901      	bls.n	80062e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e018      	b.n	8006314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	daf2      	bge.n	80062d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2210      	movs	r2, #16
 80062f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006300:	d901      	bls.n	8006306 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e006      	b.n	8006314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b10      	cmp	r3, #16
 8006310:	d0f0      	beq.n	80062f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006320:	b480      	push	{r7}
 8006322:	b08b      	sub	sp, #44	@ 0x2c
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	b29b      	uxth	r3, r3
 800633c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	e014      	b.n	8006376 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	601a      	str	r2, [r3, #0]
    pDest++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	3301      	adds	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	3301      	adds	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	3301      	adds	r3, #1
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3e6      	bcc.n	800634c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800637e:	8bfb      	ldrh	r3, [r7, #30]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800638e:	461a      	mov	r2, r3
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	701a      	strb	r2, [r3, #0]
      i++;
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	3301      	adds	r3, #1
 80063ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063b6:	8bfb      	ldrh	r3, [r7, #30]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063bc:	8bfb      	ldrh	r3, [r7, #30]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ea      	bne.n	8006398 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	372c      	adds	r7, #44	@ 0x2c
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642a:	68bb      	ldr	r3, [r7, #8]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0301 	and.w	r3, r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800648c:	4313      	orrs	r3, r2
 800648e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d107      	bne.n	80064a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800649c:	461a      	mov	r2, r3
 800649e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e00c      	b.n	80064c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d107      	bne.n	80064bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064b2:	461a      	mov	r2, r3
 80064b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80064b8:	6053      	str	r3, [r2, #4]
 80064ba:	e001      	b.n	80064c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	b29b      	uxth	r3, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	@ 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	0c9b      	lsrs	r3, r3, #18
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	0fdb      	lsrs	r3, r3, #31
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	0fdb      	lsrs	r3, r3, #31
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d10d      	bne.n	8006572 <USB_HC_Halt+0x82>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <USB_HC_Halt+0x82>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d002      	beq.n	800656e <USB_HC_Halt+0x7e>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d101      	bne.n	8006572 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e0d8      	b.n	8006724 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <USB_HC_Halt+0x8e>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d173      	bne.n	8006666 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800659c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d14a      	bne.n	8006640 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d133      	bne.n	800661e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006602:	d82e      	bhi.n	8006662 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800661a:	d0ec      	beq.n	80065f6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800661c:	e081      	b.n	8006722 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800663c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800663e:	e070      	b.n	8006722 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800665e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006660:	e05f      	b.n	8006722 <USB_HC_Halt+0x232>
            break;
 8006662:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006664:	e05d      	b.n	8006722 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	440a      	add	r2, r1
 800667c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006684:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d133      	bne.n	80066fe <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066d4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3301      	adds	r3, #1
 80066da:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066e2:	d81d      	bhi.n	8006720 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066fa:	d0ec      	beq.n	80066d6 <USB_HC_Halt+0x1e6>
 80066fc:	e011      	b.n	8006722 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	440a      	add	r2, r1
 8006714:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006718:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e000      	b.n	8006722 <USB_HC_Halt+0x232>
          break;
 8006720:	bf00      	nop
    }
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3724      	adds	r7, #36	@ 0x24
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fd7a 	bl	800623e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674a:	2110      	movs	r1, #16
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fd87 	bl	8006260 <USB_FlushTxFifo>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fdb1 	bl	80062c4 <USB_FlushRxFifo>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e01f      	b.n	80067b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006788:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006790:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006798:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a6:	461a      	mov	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b0f      	cmp	r3, #15
 80067b6:	d9dc      	bls.n	8006772 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e034      	b.n	8006828 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f2:	461a      	mov	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006804:	d80c      	bhi.n	8006820 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800681c:	d0ec      	beq.n	80067f8 <USB_StopHost+0xc8>
 800681e:	e000      	b.n	8006822 <USB_StopHost+0xf2>
        break;
 8006820:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	3301      	adds	r3, #1
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d9c7      	bls.n	80067be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fce9 	bl	800621c <USB_EnableGlobalInt>

  return ret;
 800684a:	7ffb      	ldrb	r3, [r7, #31]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f804 	bl	8006878 <USBH_HandleSof>
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b0b      	cmp	r3, #11
 8006888:	d10a      	bne.n	80068a0 <USBH_HandleSof+0x28>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
  }
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80068b8:	bf00      	nop
}
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80068d4:	bf00      	nop
}
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f883 	bl	8006a3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f80b 	bl	8006956 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	795b      	ldrb	r3, [r3, #5]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f805 	bl	8006956 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	2b0f      	cmp	r3, #15
 8006966:	d80d      	bhi.n	8006984 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	33e0      	adds	r3, #224	@ 0xe0
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	33e0      	adds	r3, #224	@ 0xe0
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ff57 	bl	8006854 <USBH_LL_IncTimer>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff8f 	bl	80068e0 <USBH_LL_Connect>
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff98 	bl	800690e <USBH_LL_Disconnect>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
 80069f2:	4613      	mov	r3, r2
 80069f4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff49 	bl	80068a8 <USBH_LL_PortEnabled>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff ff49 	bl	80068c4 <USBH_LL_PortDisabled>
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fc fae7 	bl	8003024 <HAL_HCD_Stop>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f807 	bl	8006a70 <USBH_Get_USB_Status>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d817      	bhi.n	8006ab4 <USBH_Get_USB_Status+0x44>
 8006a84:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <USBH_Get_USB_Status+0x1c>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aa3 	.word	0x08006aa3
 8006a94:	08006aa9 	.word	0x08006aa9
 8006a98:	08006aaf 	.word	0x08006aaf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa0:	e00b      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa6:	e008      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006aac:	e005      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab2:	e002      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab8:	bf00      	nop
  }
  return usb_status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <malloc>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	@ (8006ad4 <malloc+0xc>)
 8006aca:	4601      	mov	r1, r0
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	f000 b825 	b.w	8006b1c <_malloc_r>
 8006ad2:	bf00      	nop
 8006ad4:	20000024 	.word	0x20000024

08006ad8 <sbrk_aligned>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	4e0f      	ldr	r6, [pc, #60]	@ (8006b18 <sbrk_aligned+0x40>)
 8006adc:	460c      	mov	r4, r1
 8006ade:	6831      	ldr	r1, [r6, #0]
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	b911      	cbnz	r1, 8006aea <sbrk_aligned+0x12>
 8006ae4:	f000 fe8a 	bl	80077fc <_sbrk_r>
 8006ae8:	6030      	str	r0, [r6, #0]
 8006aea:	4621      	mov	r1, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fe85 	bl	80077fc <_sbrk_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d103      	bne.n	8006afe <sbrk_aligned+0x26>
 8006af6:	f04f 34ff 	mov.w	r4, #4294967295
 8006afa:	4620      	mov	r0, r4
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	1cc4      	adds	r4, r0, #3
 8006b00:	f024 0403 	bic.w	r4, r4, #3
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d0f8      	beq.n	8006afa <sbrk_aligned+0x22>
 8006b08:	1a21      	subs	r1, r4, r0
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fe76 	bl	80077fc <_sbrk_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d1f2      	bne.n	8006afa <sbrk_aligned+0x22>
 8006b14:	e7ef      	b.n	8006af6 <sbrk_aligned+0x1e>
 8006b16:	bf00      	nop
 8006b18:	20000650 	.word	0x20000650

08006b1c <_malloc_r>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	1ccd      	adds	r5, r1, #3
 8006b22:	f025 0503 	bic.w	r5, r5, #3
 8006b26:	3508      	adds	r5, #8
 8006b28:	2d0c      	cmp	r5, #12
 8006b2a:	bf38      	it	cc
 8006b2c:	250c      	movcc	r5, #12
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	4606      	mov	r6, r0
 8006b32:	db01      	blt.n	8006b38 <_malloc_r+0x1c>
 8006b34:	42a9      	cmp	r1, r5
 8006b36:	d904      	bls.n	8006b42 <_malloc_r+0x26>
 8006b38:	230c      	movs	r3, #12
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c18 <_malloc_r+0xfc>
 8006b46:	f000 f869 	bl	8006c1c <__malloc_lock>
 8006b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4e:	461c      	mov	r4, r3
 8006b50:	bb44      	cbnz	r4, 8006ba4 <_malloc_r+0x88>
 8006b52:	4629      	mov	r1, r5
 8006b54:	4630      	mov	r0, r6
 8006b56:	f7ff ffbf 	bl	8006ad8 <sbrk_aligned>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	d158      	bne.n	8006c12 <_malloc_r+0xf6>
 8006b60:	f8d8 4000 	ldr.w	r4, [r8]
 8006b64:	4627      	mov	r7, r4
 8006b66:	2f00      	cmp	r7, #0
 8006b68:	d143      	bne.n	8006bf2 <_malloc_r+0xd6>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	d04b      	beq.n	8006c06 <_malloc_r+0xea>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	4639      	mov	r1, r7
 8006b72:	4630      	mov	r0, r6
 8006b74:	eb04 0903 	add.w	r9, r4, r3
 8006b78:	f000 fe40 	bl	80077fc <_sbrk_r>
 8006b7c:	4581      	cmp	r9, r0
 8006b7e:	d142      	bne.n	8006c06 <_malloc_r+0xea>
 8006b80:	6821      	ldr	r1, [r4, #0]
 8006b82:	1a6d      	subs	r5, r5, r1
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ffa6 	bl	8006ad8 <sbrk_aligned>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d03a      	beq.n	8006c06 <_malloc_r+0xea>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	442b      	add	r3, r5
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	f8d8 3000 	ldr.w	r3, [r8]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	bb62      	cbnz	r2, 8006bf8 <_malloc_r+0xdc>
 8006b9e:	f8c8 7000 	str.w	r7, [r8]
 8006ba2:	e00f      	b.n	8006bc4 <_malloc_r+0xa8>
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	1b52      	subs	r2, r2, r5
 8006ba8:	d420      	bmi.n	8006bec <_malloc_r+0xd0>
 8006baa:	2a0b      	cmp	r2, #11
 8006bac:	d917      	bls.n	8006bde <_malloc_r+0xc2>
 8006bae:	1961      	adds	r1, r4, r5
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	6059      	strne	r1, [r3, #4]
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	bf08      	it	eq
 8006bbc:	f8c8 1000 	streq.w	r1, [r8]
 8006bc0:	5162      	str	r2, [r4, r5]
 8006bc2:	604b      	str	r3, [r1, #4]
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f000 f82f 	bl	8006c28 <__malloc_unlock>
 8006bca:	f104 000b 	add.w	r0, r4, #11
 8006bce:	1d23      	adds	r3, r4, #4
 8006bd0:	f020 0007 	bic.w	r0, r0, #7
 8006bd4:	1ac2      	subs	r2, r0, r3
 8006bd6:	bf1c      	itt	ne
 8006bd8:	1a1b      	subne	r3, r3, r0
 8006bda:	50a3      	strne	r3, [r4, r2]
 8006bdc:	e7af      	b.n	8006b3e <_malloc_r+0x22>
 8006bde:	6862      	ldr	r2, [r4, #4]
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	bf0c      	ite	eq
 8006be4:	f8c8 2000 	streq.w	r2, [r8]
 8006be8:	605a      	strne	r2, [r3, #4]
 8006bea:	e7eb      	b.n	8006bc4 <_malloc_r+0xa8>
 8006bec:	4623      	mov	r3, r4
 8006bee:	6864      	ldr	r4, [r4, #4]
 8006bf0:	e7ae      	b.n	8006b50 <_malloc_r+0x34>
 8006bf2:	463c      	mov	r4, r7
 8006bf4:	687f      	ldr	r7, [r7, #4]
 8006bf6:	e7b6      	b.n	8006b66 <_malloc_r+0x4a>
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d1fb      	bne.n	8006bf8 <_malloc_r+0xdc>
 8006c00:	2300      	movs	r3, #0
 8006c02:	6053      	str	r3, [r2, #4]
 8006c04:	e7de      	b.n	8006bc4 <_malloc_r+0xa8>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f80c 	bl	8006c28 <__malloc_unlock>
 8006c10:	e794      	b.n	8006b3c <_malloc_r+0x20>
 8006c12:	6005      	str	r5, [r0, #0]
 8006c14:	e7d6      	b.n	8006bc4 <_malloc_r+0xa8>
 8006c16:	bf00      	nop
 8006c18:	20000654 	.word	0x20000654

08006c1c <__malloc_lock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__malloc_lock+0x8>)
 8006c1e:	f000 be3a 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000798 	.word	0x20000798

08006c28 <__malloc_unlock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_unlock+0x8>)
 8006c2a:	f000 be35 	b.w	8007898 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000798 	.word	0x20000798

08006c34 <__cvt>:
 8006c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	ec57 6b10 	vmov	r6, r7, d0
 8006c3c:	2f00      	cmp	r7, #0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4619      	mov	r1, r3
 8006c42:	463b      	mov	r3, r7
 8006c44:	bfbb      	ittet	lt
 8006c46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c4a:	461f      	movlt	r7, r3
 8006c4c:	2300      	movge	r3, #0
 8006c4e:	232d      	movlt	r3, #45	@ 0x2d
 8006c50:	700b      	strb	r3, [r1, #0]
 8006c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c58:	4691      	mov	r9, r2
 8006c5a:	f023 0820 	bic.w	r8, r3, #32
 8006c5e:	bfbc      	itt	lt
 8006c60:	4632      	movlt	r2, r6
 8006c62:	4616      	movlt	r6, r2
 8006c64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c68:	d005      	beq.n	8006c76 <__cvt+0x42>
 8006c6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c6e:	d100      	bne.n	8006c72 <__cvt+0x3e>
 8006c70:	3401      	adds	r4, #1
 8006c72:	2102      	movs	r1, #2
 8006c74:	e000      	b.n	8006c78 <__cvt+0x44>
 8006c76:	2103      	movs	r1, #3
 8006c78:	ab03      	add	r3, sp, #12
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	ab02      	add	r3, sp, #8
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	ec47 6b10 	vmov	d0, r6, r7
 8006c84:	4653      	mov	r3, sl
 8006c86:	4622      	mov	r2, r4
 8006c88:	f000 fe9e 	bl	80079c8 <_dtoa_r>
 8006c8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c90:	4605      	mov	r5, r0
 8006c92:	d119      	bne.n	8006cc8 <__cvt+0x94>
 8006c94:	f019 0f01 	tst.w	r9, #1
 8006c98:	d00e      	beq.n	8006cb8 <__cvt+0x84>
 8006c9a:	eb00 0904 	add.w	r9, r0, r4
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 ff1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006caa:	b108      	cbz	r0, 8006cb0 <__cvt+0x7c>
 8006cac:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cb0:	2230      	movs	r2, #48	@ 0x30
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	454b      	cmp	r3, r9
 8006cb6:	d31e      	bcc.n	8006cf6 <__cvt+0xc2>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cbc:	1b5b      	subs	r3, r3, r5
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	b004      	add	sp, #16
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ccc:	eb00 0904 	add.w	r9, r0, r4
 8006cd0:	d1e5      	bne.n	8006c9e <__cvt+0x6a>
 8006cd2:	7803      	ldrb	r3, [r0, #0]
 8006cd4:	2b30      	cmp	r3, #48	@ 0x30
 8006cd6:	d10a      	bne.n	8006cee <__cvt+0xba>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ce4:	b918      	cbnz	r0, 8006cee <__cvt+0xba>
 8006ce6:	f1c4 0401 	rsb	r4, r4, #1
 8006cea:	f8ca 4000 	str.w	r4, [sl]
 8006cee:	f8da 3000 	ldr.w	r3, [sl]
 8006cf2:	4499      	add	r9, r3
 8006cf4:	e7d3      	b.n	8006c9e <__cvt+0x6a>
 8006cf6:	1c59      	adds	r1, r3, #1
 8006cf8:	9103      	str	r1, [sp, #12]
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	e7d9      	b.n	8006cb2 <__cvt+0x7e>

08006cfe <__exponent>:
 8006cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d00:	2900      	cmp	r1, #0
 8006d02:	bfba      	itte	lt
 8006d04:	4249      	neglt	r1, r1
 8006d06:	232d      	movlt	r3, #45	@ 0x2d
 8006d08:	232b      	movge	r3, #43	@ 0x2b
 8006d0a:	2909      	cmp	r1, #9
 8006d0c:	7002      	strb	r2, [r0, #0]
 8006d0e:	7043      	strb	r3, [r0, #1]
 8006d10:	dd29      	ble.n	8006d66 <__exponent+0x68>
 8006d12:	f10d 0307 	add.w	r3, sp, #7
 8006d16:	461d      	mov	r5, r3
 8006d18:	270a      	movs	r7, #10
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d20:	fb07 1416 	mls	r4, r7, r6, r1
 8006d24:	3430      	adds	r4, #48	@ 0x30
 8006d26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	2c63      	cmp	r4, #99	@ 0x63
 8006d2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d32:	4631      	mov	r1, r6
 8006d34:	dcf1      	bgt.n	8006d1a <__exponent+0x1c>
 8006d36:	3130      	adds	r1, #48	@ 0x30
 8006d38:	1e94      	subs	r4, r2, #2
 8006d3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d3e:	1c41      	adds	r1, r0, #1
 8006d40:	4623      	mov	r3, r4
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	d30a      	bcc.n	8006d5c <__exponent+0x5e>
 8006d46:	f10d 0309 	add.w	r3, sp, #9
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	42ac      	cmp	r4, r5
 8006d4e:	bf88      	it	hi
 8006d50:	2300      	movhi	r3, #0
 8006d52:	3302      	adds	r3, #2
 8006d54:	4403      	add	r3, r0
 8006d56:	1a18      	subs	r0, r3, r0
 8006d58:	b003      	add	sp, #12
 8006d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d64:	e7ed      	b.n	8006d42 <__exponent+0x44>
 8006d66:	2330      	movs	r3, #48	@ 0x30
 8006d68:	3130      	adds	r1, #48	@ 0x30
 8006d6a:	7083      	strb	r3, [r0, #2]
 8006d6c:	70c1      	strb	r1, [r0, #3]
 8006d6e:	1d03      	adds	r3, r0, #4
 8006d70:	e7f1      	b.n	8006d56 <__exponent+0x58>
	...

08006d74 <_printf_float>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	b08d      	sub	sp, #52	@ 0x34
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d80:	4616      	mov	r6, r2
 8006d82:	461f      	mov	r7, r3
 8006d84:	4605      	mov	r5, r0
 8006d86:	f000 fd01 	bl	800778c <_localeconv_r>
 8006d8a:	6803      	ldr	r3, [r0, #0]
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7f9 fa7e 	bl	8000290 <strlen>
 8006d94:	2300      	movs	r3, #0
 8006d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d98:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9c:	9005      	str	r0, [sp, #20]
 8006d9e:	3307      	adds	r3, #7
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	f103 0208 	add.w	r2, r3, #8
 8006da8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006dac:	f8d4 b000 	ldr.w	fp, [r4]
 8006db0:	f8c8 2000 	str.w	r2, [r8]
 8006db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006db8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dca:	4b9c      	ldr	r3, [pc, #624]	@ (800703c <_printf_float+0x2c8>)
 8006dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd0:	f7f9 febc 	bl	8000b4c <__aeabi_dcmpun>
 8006dd4:	bb70      	cbnz	r0, 8006e34 <_printf_float+0xc0>
 8006dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dda:	4b98      	ldr	r3, [pc, #608]	@ (800703c <_printf_float+0x2c8>)
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	f7f9 fe96 	bl	8000b10 <__aeabi_dcmple>
 8006de4:	bb30      	cbnz	r0, 8006e34 <_printf_float+0xc0>
 8006de6:	2200      	movs	r2, #0
 8006de8:	2300      	movs	r3, #0
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fe85 	bl	8000afc <__aeabi_dcmplt>
 8006df2:	b110      	cbz	r0, 8006dfa <_printf_float+0x86>
 8006df4:	232d      	movs	r3, #45	@ 0x2d
 8006df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfa:	4a91      	ldr	r2, [pc, #580]	@ (8007040 <_printf_float+0x2cc>)
 8006dfc:	4b91      	ldr	r3, [pc, #580]	@ (8007044 <_printf_float+0x2d0>)
 8006dfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e02:	bf94      	ite	ls
 8006e04:	4690      	movls	r8, r2
 8006e06:	4698      	movhi	r8, r3
 8006e08:	2303      	movs	r3, #3
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	f02b 0304 	bic.w	r3, fp, #4
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	f04f 0900 	mov.w	r9, #0
 8006e16:	9700      	str	r7, [sp, #0]
 8006e18:	4633      	mov	r3, r6
 8006e1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 f9d2 	bl	80071c8 <_printf_common>
 8006e24:	3001      	adds	r0, #1
 8006e26:	f040 808d 	bne.w	8006f44 <_printf_float+0x1d0>
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	b00d      	add	sp, #52	@ 0x34
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 fe86 	bl	8000b4c <__aeabi_dcmpun>
 8006e40:	b140      	cbz	r0, 8006e54 <_printf_float+0xe0>
 8006e42:	464b      	mov	r3, r9
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfbc      	itt	lt
 8006e48:	232d      	movlt	r3, #45	@ 0x2d
 8006e4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007048 <_printf_float+0x2d4>)
 8006e50:	4b7e      	ldr	r3, [pc, #504]	@ (800704c <_printf_float+0x2d8>)
 8006e52:	e7d4      	b.n	8006dfe <_printf_float+0x8a>
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e5a:	9206      	str	r2, [sp, #24]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	d13b      	bne.n	8006ed8 <_printf_float+0x164>
 8006e60:	2306      	movs	r3, #6
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e68:	2300      	movs	r3, #0
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e74:	ab09      	add	r3, sp, #36	@ 0x24
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	6861      	ldr	r1, [r4, #4]
 8006e7a:	ec49 8b10 	vmov	d0, r8, r9
 8006e7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e82:	4628      	mov	r0, r5
 8006e84:	f7ff fed6 	bl	8006c34 <__cvt>
 8006e88:	9b06      	ldr	r3, [sp, #24]
 8006e8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e8c:	2b47      	cmp	r3, #71	@ 0x47
 8006e8e:	4680      	mov	r8, r0
 8006e90:	d129      	bne.n	8006ee6 <_printf_float+0x172>
 8006e92:	1cc8      	adds	r0, r1, #3
 8006e94:	db02      	blt.n	8006e9c <_printf_float+0x128>
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	4299      	cmp	r1, r3
 8006e9a:	dd41      	ble.n	8006f20 <_printf_float+0x1ac>
 8006e9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ea0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ea4:	3901      	subs	r1, #1
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006eac:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eae:	f7ff ff26 	bl	8006cfe <__exponent>
 8006eb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006eb4:	1813      	adds	r3, r2, r0
 8006eb6:	2a01      	cmp	r2, #1
 8006eb8:	4681      	mov	r9, r0
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	dc02      	bgt.n	8006ec4 <_printf_float+0x150>
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	07d2      	lsls	r2, r2, #31
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_float+0x154>
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0a2      	beq.n	8006e16 <_printf_float+0xa2>
 8006ed0:	232d      	movs	r3, #45	@ 0x2d
 8006ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed6:	e79e      	b.n	8006e16 <_printf_float+0xa2>
 8006ed8:	9a06      	ldr	r2, [sp, #24]
 8006eda:	2a47      	cmp	r2, #71	@ 0x47
 8006edc:	d1c2      	bne.n	8006e64 <_printf_float+0xf0>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1c0      	bne.n	8006e64 <_printf_float+0xf0>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e7bd      	b.n	8006e62 <_printf_float+0xee>
 8006ee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eea:	d9db      	bls.n	8006ea4 <_printf_float+0x130>
 8006eec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ef0:	d118      	bne.n	8006f24 <_printf_float+0x1b0>
 8006ef2:	2900      	cmp	r1, #0
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	dd0b      	ble.n	8006f10 <_printf_float+0x19c>
 8006ef8:	6121      	str	r1, [r4, #16]
 8006efa:	b913      	cbnz	r3, 8006f02 <_printf_float+0x18e>
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	07d0      	lsls	r0, r2, #31
 8006f00:	d502      	bpl.n	8006f08 <_printf_float+0x194>
 8006f02:	3301      	adds	r3, #1
 8006f04:	440b      	add	r3, r1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	e7db      	b.n	8006ec8 <_printf_float+0x154>
 8006f10:	b913      	cbnz	r3, 8006f18 <_printf_float+0x1a4>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	07d2      	lsls	r2, r2, #31
 8006f16:	d501      	bpl.n	8006f1c <_printf_float+0x1a8>
 8006f18:	3302      	adds	r3, #2
 8006f1a:	e7f4      	b.n	8006f06 <_printf_float+0x192>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e7f2      	b.n	8006f06 <_printf_float+0x192>
 8006f20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f26:	4299      	cmp	r1, r3
 8006f28:	db05      	blt.n	8006f36 <_printf_float+0x1c2>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	6121      	str	r1, [r4, #16]
 8006f2e:	07d8      	lsls	r0, r3, #31
 8006f30:	d5ea      	bpl.n	8006f08 <_printf_float+0x194>
 8006f32:	1c4b      	adds	r3, r1, #1
 8006f34:	e7e7      	b.n	8006f06 <_printf_float+0x192>
 8006f36:	2900      	cmp	r1, #0
 8006f38:	bfd4      	ite	le
 8006f3a:	f1c1 0202 	rsble	r2, r1, #2
 8006f3e:	2201      	movgt	r2, #1
 8006f40:	4413      	add	r3, r2
 8006f42:	e7e0      	b.n	8006f06 <_printf_float+0x192>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	055a      	lsls	r2, r3, #21
 8006f48:	d407      	bmi.n	8006f5a <_printf_float+0x1e6>
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	d12b      	bne.n	8006fb0 <_printf_float+0x23c>
 8006f58:	e767      	b.n	8006e2a <_printf_float+0xb6>
 8006f5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f5e:	f240 80dd 	bls.w	800711c <_printf_float+0x3a8>
 8006f62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f7f9 fdbd 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d033      	beq.n	8006fda <_printf_float+0x266>
 8006f72:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <_printf_float+0x2dc>)
 8006f74:	2301      	movs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f43f af54 	beq.w	8006e2a <_printf_float+0xb6>
 8006f82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f86:	4543      	cmp	r3, r8
 8006f88:	db02      	blt.n	8006f90 <_printf_float+0x21c>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	07d8      	lsls	r0, r3, #31
 8006f8e:	d50f      	bpl.n	8006fb0 <_printf_float+0x23c>
 8006f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f af45 	beq.w	8006e2a <_printf_float+0xb6>
 8006fa0:	f04f 0900 	mov.w	r9, #0
 8006fa4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fa8:	f104 0a1a 	add.w	sl, r4, #26
 8006fac:	45c8      	cmp	r8, r9
 8006fae:	dc09      	bgt.n	8006fc4 <_printf_float+0x250>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	079b      	lsls	r3, r3, #30
 8006fb4:	f100 8103 	bmi.w	80071be <_printf_float+0x44a>
 8006fb8:	68e0      	ldr	r0, [r4, #12]
 8006fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbc:	4298      	cmp	r0, r3
 8006fbe:	bfb8      	it	lt
 8006fc0:	4618      	movlt	r0, r3
 8006fc2:	e734      	b.n	8006e2e <_printf_float+0xba>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f af2b 	beq.w	8006e2a <_printf_float+0xb6>
 8006fd4:	f109 0901 	add.w	r9, r9, #1
 8006fd8:	e7e8      	b.n	8006fac <_printf_float+0x238>
 8006fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dc39      	bgt.n	8007054 <_printf_float+0x2e0>
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8007050 <_printf_float+0x2dc>)
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f af1d 	beq.w	8006e2a <_printf_float+0xb6>
 8006ff0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ff4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ff8:	d102      	bne.n	8007000 <_printf_float+0x28c>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	07d9      	lsls	r1, r3, #31
 8006ffe:	d5d7      	bpl.n	8006fb0 <_printf_float+0x23c>
 8007000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af0d 	beq.w	8006e2a <_printf_float+0xb6>
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	f104 0b1a 	add.w	fp, r4, #26
 8007018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800701a:	425b      	negs	r3, r3
 800701c:	4553      	cmp	r3, sl
 800701e:	dc01      	bgt.n	8007024 <_printf_float+0x2b0>
 8007020:	464b      	mov	r3, r9
 8007022:	e793      	b.n	8006f4c <_printf_float+0x1d8>
 8007024:	2301      	movs	r3, #1
 8007026:	465a      	mov	r2, fp
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f aefb 	beq.w	8006e2a <_printf_float+0xb6>
 8007034:	f10a 0a01 	add.w	sl, sl, #1
 8007038:	e7ee      	b.n	8007018 <_printf_float+0x2a4>
 800703a:	bf00      	nop
 800703c:	7fefffff 	.word	0x7fefffff
 8007040:	08009e28 	.word	0x08009e28
 8007044:	08009e2c 	.word	0x08009e2c
 8007048:	08009e30 	.word	0x08009e30
 800704c:	08009e34 	.word	0x08009e34
 8007050:	08009e38 	.word	0x08009e38
 8007054:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007056:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800705a:	4553      	cmp	r3, sl
 800705c:	bfa8      	it	ge
 800705e:	4653      	movge	r3, sl
 8007060:	2b00      	cmp	r3, #0
 8007062:	4699      	mov	r9, r3
 8007064:	dc36      	bgt.n	80070d4 <_printf_float+0x360>
 8007066:	f04f 0b00 	mov.w	fp, #0
 800706a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800706e:	f104 021a 	add.w	r2, r4, #26
 8007072:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007074:	9306      	str	r3, [sp, #24]
 8007076:	eba3 0309 	sub.w	r3, r3, r9
 800707a:	455b      	cmp	r3, fp
 800707c:	dc31      	bgt.n	80070e2 <_printf_float+0x36e>
 800707e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007080:	459a      	cmp	sl, r3
 8007082:	dc3a      	bgt.n	80070fa <_printf_float+0x386>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	07da      	lsls	r2, r3, #31
 8007088:	d437      	bmi.n	80070fa <_printf_float+0x386>
 800708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708c:	ebaa 0903 	sub.w	r9, sl, r3
 8007090:	9b06      	ldr	r3, [sp, #24]
 8007092:	ebaa 0303 	sub.w	r3, sl, r3
 8007096:	4599      	cmp	r9, r3
 8007098:	bfa8      	it	ge
 800709a:	4699      	movge	r9, r3
 800709c:	f1b9 0f00 	cmp.w	r9, #0
 80070a0:	dc33      	bgt.n	800710a <_printf_float+0x396>
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070aa:	f104 0b1a 	add.w	fp, r4, #26
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	ebaa 0303 	sub.w	r3, sl, r3
 80070b4:	eba3 0309 	sub.w	r3, r3, r9
 80070b8:	4543      	cmp	r3, r8
 80070ba:	f77f af79 	ble.w	8006fb0 <_printf_float+0x23c>
 80070be:	2301      	movs	r3, #1
 80070c0:	465a      	mov	r2, fp
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f aeae 	beq.w	8006e2a <_printf_float+0xb6>
 80070ce:	f108 0801 	add.w	r8, r8, #1
 80070d2:	e7ec      	b.n	80070ae <_printf_float+0x33a>
 80070d4:	4642      	mov	r2, r8
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	d1c2      	bne.n	8007066 <_printf_float+0x2f2>
 80070e0:	e6a3      	b.n	8006e2a <_printf_float+0xb6>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	9206      	str	r2, [sp, #24]
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f ae9c 	beq.w	8006e2a <_printf_float+0xb6>
 80070f2:	9a06      	ldr	r2, [sp, #24]
 80070f4:	f10b 0b01 	add.w	fp, fp, #1
 80070f8:	e7bb      	b.n	8007072 <_printf_float+0x2fe>
 80070fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	d1c0      	bne.n	800708a <_printf_float+0x316>
 8007108:	e68f      	b.n	8006e2a <_printf_float+0xb6>
 800710a:	9a06      	ldr	r2, [sp, #24]
 800710c:	464b      	mov	r3, r9
 800710e:	4442      	add	r2, r8
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	d1c3      	bne.n	80070a2 <_printf_float+0x32e>
 800711a:	e686      	b.n	8006e2a <_printf_float+0xb6>
 800711c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007120:	f1ba 0f01 	cmp.w	sl, #1
 8007124:	dc01      	bgt.n	800712a <_printf_float+0x3b6>
 8007126:	07db      	lsls	r3, r3, #31
 8007128:	d536      	bpl.n	8007198 <_printf_float+0x424>
 800712a:	2301      	movs	r3, #1
 800712c:	4642      	mov	r2, r8
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae78 	beq.w	8006e2a <_printf_float+0xb6>
 800713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f ae70 	beq.w	8006e2a <_printf_float+0xb6>
 800714a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007156:	f7f9 fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800715a:	b9c0      	cbnz	r0, 800718e <_printf_float+0x41a>
 800715c:	4653      	mov	r3, sl
 800715e:	f108 0201 	add.w	r2, r8, #1
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	d10c      	bne.n	8007186 <_printf_float+0x412>
 800716c:	e65d      	b.n	8006e2a <_printf_float+0xb6>
 800716e:	2301      	movs	r3, #1
 8007170:	465a      	mov	r2, fp
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f ae56 	beq.w	8006e2a <_printf_float+0xb6>
 800717e:	f108 0801 	add.w	r8, r8, #1
 8007182:	45d0      	cmp	r8, sl
 8007184:	dbf3      	blt.n	800716e <_printf_float+0x3fa>
 8007186:	464b      	mov	r3, r9
 8007188:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800718c:	e6df      	b.n	8006f4e <_printf_float+0x1da>
 800718e:	f04f 0800 	mov.w	r8, #0
 8007192:	f104 0b1a 	add.w	fp, r4, #26
 8007196:	e7f4      	b.n	8007182 <_printf_float+0x40e>
 8007198:	2301      	movs	r3, #1
 800719a:	4642      	mov	r2, r8
 800719c:	e7e1      	b.n	8007162 <_printf_float+0x3ee>
 800719e:	2301      	movs	r3, #1
 80071a0:	464a      	mov	r2, r9
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f ae3e 	beq.w	8006e2a <_printf_float+0xb6>
 80071ae:	f108 0801 	add.w	r8, r8, #1
 80071b2:	68e3      	ldr	r3, [r4, #12]
 80071b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071b6:	1a5b      	subs	r3, r3, r1
 80071b8:	4543      	cmp	r3, r8
 80071ba:	dcf0      	bgt.n	800719e <_printf_float+0x42a>
 80071bc:	e6fc      	b.n	8006fb8 <_printf_float+0x244>
 80071be:	f04f 0800 	mov.w	r8, #0
 80071c2:	f104 0919 	add.w	r9, r4, #25
 80071c6:	e7f4      	b.n	80071b2 <_printf_float+0x43e>

080071c8 <_printf_common>:
 80071c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	4616      	mov	r6, r2
 80071ce:	4698      	mov	r8, r3
 80071d0:	688a      	ldr	r2, [r1, #8]
 80071d2:	690b      	ldr	r3, [r1, #16]
 80071d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071d8:	4293      	cmp	r3, r2
 80071da:	bfb8      	it	lt
 80071dc:	4613      	movlt	r3, r2
 80071de:	6033      	str	r3, [r6, #0]
 80071e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071e4:	4607      	mov	r7, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	b10a      	cbz	r2, 80071ee <_printf_common+0x26>
 80071ea:	3301      	adds	r3, #1
 80071ec:	6033      	str	r3, [r6, #0]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	0699      	lsls	r1, r3, #26
 80071f2:	bf42      	ittt	mi
 80071f4:	6833      	ldrmi	r3, [r6, #0]
 80071f6:	3302      	addmi	r3, #2
 80071f8:	6033      	strmi	r3, [r6, #0]
 80071fa:	6825      	ldr	r5, [r4, #0]
 80071fc:	f015 0506 	ands.w	r5, r5, #6
 8007200:	d106      	bne.n	8007210 <_printf_common+0x48>
 8007202:	f104 0a19 	add.w	sl, r4, #25
 8007206:	68e3      	ldr	r3, [r4, #12]
 8007208:	6832      	ldr	r2, [r6, #0]
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	42ab      	cmp	r3, r5
 800720e:	dc26      	bgt.n	800725e <_printf_common+0x96>
 8007210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	3b00      	subs	r3, #0
 8007218:	bf18      	it	ne
 800721a:	2301      	movne	r3, #1
 800721c:	0692      	lsls	r2, r2, #26
 800721e:	d42b      	bmi.n	8007278 <_printf_common+0xb0>
 8007220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007224:	4641      	mov	r1, r8
 8007226:	4638      	mov	r0, r7
 8007228:	47c8      	blx	r9
 800722a:	3001      	adds	r0, #1
 800722c:	d01e      	beq.n	800726c <_printf_common+0xa4>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	6922      	ldr	r2, [r4, #16]
 8007232:	f003 0306 	and.w	r3, r3, #6
 8007236:	2b04      	cmp	r3, #4
 8007238:	bf02      	ittt	eq
 800723a:	68e5      	ldreq	r5, [r4, #12]
 800723c:	6833      	ldreq	r3, [r6, #0]
 800723e:	1aed      	subeq	r5, r5, r3
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	bf0c      	ite	eq
 8007244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007248:	2500      	movne	r5, #0
 800724a:	4293      	cmp	r3, r2
 800724c:	bfc4      	itt	gt
 800724e:	1a9b      	subgt	r3, r3, r2
 8007250:	18ed      	addgt	r5, r5, r3
 8007252:	2600      	movs	r6, #0
 8007254:	341a      	adds	r4, #26
 8007256:	42b5      	cmp	r5, r6
 8007258:	d11a      	bne.n	8007290 <_printf_common+0xc8>
 800725a:	2000      	movs	r0, #0
 800725c:	e008      	b.n	8007270 <_printf_common+0xa8>
 800725e:	2301      	movs	r3, #1
 8007260:	4652      	mov	r2, sl
 8007262:	4641      	mov	r1, r8
 8007264:	4638      	mov	r0, r7
 8007266:	47c8      	blx	r9
 8007268:	3001      	adds	r0, #1
 800726a:	d103      	bne.n	8007274 <_printf_common+0xac>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007274:	3501      	adds	r5, #1
 8007276:	e7c6      	b.n	8007206 <_printf_common+0x3e>
 8007278:	18e1      	adds	r1, r4, r3
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	2030      	movs	r0, #48	@ 0x30
 800727e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007282:	4422      	add	r2, r4
 8007284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800728c:	3302      	adds	r3, #2
 800728e:	e7c7      	b.n	8007220 <_printf_common+0x58>
 8007290:	2301      	movs	r3, #1
 8007292:	4622      	mov	r2, r4
 8007294:	4641      	mov	r1, r8
 8007296:	4638      	mov	r0, r7
 8007298:	47c8      	blx	r9
 800729a:	3001      	adds	r0, #1
 800729c:	d0e6      	beq.n	800726c <_printf_common+0xa4>
 800729e:	3601      	adds	r6, #1
 80072a0:	e7d9      	b.n	8007256 <_printf_common+0x8e>
	...

080072a4 <_printf_i>:
 80072a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a8:	7e0f      	ldrb	r7, [r1, #24]
 80072aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072ac:	2f78      	cmp	r7, #120	@ 0x78
 80072ae:	4691      	mov	r9, r2
 80072b0:	4680      	mov	r8, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	469a      	mov	sl, r3
 80072b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072ba:	d807      	bhi.n	80072cc <_printf_i+0x28>
 80072bc:	2f62      	cmp	r7, #98	@ 0x62
 80072be:	d80a      	bhi.n	80072d6 <_printf_i+0x32>
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	f000 80d2 	beq.w	800746a <_printf_i+0x1c6>
 80072c6:	2f58      	cmp	r7, #88	@ 0x58
 80072c8:	f000 80b9 	beq.w	800743e <_printf_i+0x19a>
 80072cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072d4:	e03a      	b.n	800734c <_printf_i+0xa8>
 80072d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072da:	2b15      	cmp	r3, #21
 80072dc:	d8f6      	bhi.n	80072cc <_printf_i+0x28>
 80072de:	a101      	add	r1, pc, #4	@ (adr r1, 80072e4 <_printf_i+0x40>)
 80072e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072e4:	0800733d 	.word	0x0800733d
 80072e8:	08007351 	.word	0x08007351
 80072ec:	080072cd 	.word	0x080072cd
 80072f0:	080072cd 	.word	0x080072cd
 80072f4:	080072cd 	.word	0x080072cd
 80072f8:	080072cd 	.word	0x080072cd
 80072fc:	08007351 	.word	0x08007351
 8007300:	080072cd 	.word	0x080072cd
 8007304:	080072cd 	.word	0x080072cd
 8007308:	080072cd 	.word	0x080072cd
 800730c:	080072cd 	.word	0x080072cd
 8007310:	08007451 	.word	0x08007451
 8007314:	0800737b 	.word	0x0800737b
 8007318:	0800740b 	.word	0x0800740b
 800731c:	080072cd 	.word	0x080072cd
 8007320:	080072cd 	.word	0x080072cd
 8007324:	08007473 	.word	0x08007473
 8007328:	080072cd 	.word	0x080072cd
 800732c:	0800737b 	.word	0x0800737b
 8007330:	080072cd 	.word	0x080072cd
 8007334:	080072cd 	.word	0x080072cd
 8007338:	08007413 	.word	0x08007413
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6032      	str	r2, [r6, #0]
 8007344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800734c:	2301      	movs	r3, #1
 800734e:	e09d      	b.n	800748c <_printf_i+0x1e8>
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	1d19      	adds	r1, r3, #4
 8007356:	6031      	str	r1, [r6, #0]
 8007358:	0606      	lsls	r6, r0, #24
 800735a:	d501      	bpl.n	8007360 <_printf_i+0xbc>
 800735c:	681d      	ldr	r5, [r3, #0]
 800735e:	e003      	b.n	8007368 <_printf_i+0xc4>
 8007360:	0645      	lsls	r5, r0, #25
 8007362:	d5fb      	bpl.n	800735c <_printf_i+0xb8>
 8007364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007368:	2d00      	cmp	r5, #0
 800736a:	da03      	bge.n	8007374 <_printf_i+0xd0>
 800736c:	232d      	movs	r3, #45	@ 0x2d
 800736e:	426d      	negs	r5, r5
 8007370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007374:	4859      	ldr	r0, [pc, #356]	@ (80074dc <_printf_i+0x238>)
 8007376:	230a      	movs	r3, #10
 8007378:	e011      	b.n	800739e <_printf_i+0xfa>
 800737a:	6821      	ldr	r1, [r4, #0]
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	0608      	lsls	r0, r1, #24
 8007380:	f853 5b04 	ldr.w	r5, [r3], #4
 8007384:	d402      	bmi.n	800738c <_printf_i+0xe8>
 8007386:	0649      	lsls	r1, r1, #25
 8007388:	bf48      	it	mi
 800738a:	b2ad      	uxthmi	r5, r5
 800738c:	2f6f      	cmp	r7, #111	@ 0x6f
 800738e:	4853      	ldr	r0, [pc, #332]	@ (80074dc <_printf_i+0x238>)
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	bf14      	ite	ne
 8007394:	230a      	movne	r3, #10
 8007396:	2308      	moveq	r3, #8
 8007398:	2100      	movs	r1, #0
 800739a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800739e:	6866      	ldr	r6, [r4, #4]
 80073a0:	60a6      	str	r6, [r4, #8]
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	bfa2      	ittt	ge
 80073a6:	6821      	ldrge	r1, [r4, #0]
 80073a8:	f021 0104 	bicge.w	r1, r1, #4
 80073ac:	6021      	strge	r1, [r4, #0]
 80073ae:	b90d      	cbnz	r5, 80073b4 <_printf_i+0x110>
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	d04b      	beq.n	800744c <_printf_i+0x1a8>
 80073b4:	4616      	mov	r6, r2
 80073b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ba:	fb03 5711 	mls	r7, r3, r1, r5
 80073be:	5dc7      	ldrb	r7, [r0, r7]
 80073c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073c4:	462f      	mov	r7, r5
 80073c6:	42bb      	cmp	r3, r7
 80073c8:	460d      	mov	r5, r1
 80073ca:	d9f4      	bls.n	80073b6 <_printf_i+0x112>
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d10b      	bne.n	80073e8 <_printf_i+0x144>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07df      	lsls	r7, r3, #31
 80073d4:	d508      	bpl.n	80073e8 <_printf_i+0x144>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	4299      	cmp	r1, r3
 80073dc:	bfde      	ittt	le
 80073de:	2330      	movle	r3, #48	@ 0x30
 80073e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073e8:	1b92      	subs	r2, r2, r6
 80073ea:	6122      	str	r2, [r4, #16]
 80073ec:	f8cd a000 	str.w	sl, [sp]
 80073f0:	464b      	mov	r3, r9
 80073f2:	aa03      	add	r2, sp, #12
 80073f4:	4621      	mov	r1, r4
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7ff fee6 	bl	80071c8 <_printf_common>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d14a      	bne.n	8007496 <_printf_i+0x1f2>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b004      	add	sp, #16
 8007406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	4833      	ldr	r0, [pc, #204]	@ (80074e0 <_printf_i+0x23c>)
 8007414:	2778      	movs	r7, #120	@ 0x78
 8007416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6831      	ldr	r1, [r6, #0]
 800741e:	061f      	lsls	r7, r3, #24
 8007420:	f851 5b04 	ldr.w	r5, [r1], #4
 8007424:	d402      	bmi.n	800742c <_printf_i+0x188>
 8007426:	065f      	lsls	r7, r3, #25
 8007428:	bf48      	it	mi
 800742a:	b2ad      	uxthmi	r5, r5
 800742c:	6031      	str	r1, [r6, #0]
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	bf44      	itt	mi
 8007432:	f043 0320 	orrmi.w	r3, r3, #32
 8007436:	6023      	strmi	r3, [r4, #0]
 8007438:	b11d      	cbz	r5, 8007442 <_printf_i+0x19e>
 800743a:	2310      	movs	r3, #16
 800743c:	e7ac      	b.n	8007398 <_printf_i+0xf4>
 800743e:	4827      	ldr	r0, [pc, #156]	@ (80074dc <_printf_i+0x238>)
 8007440:	e7e9      	b.n	8007416 <_printf_i+0x172>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f023 0320 	bic.w	r3, r3, #32
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	e7f6      	b.n	800743a <_printf_i+0x196>
 800744c:	4616      	mov	r6, r2
 800744e:	e7bd      	b.n	80073cc <_printf_i+0x128>
 8007450:	6833      	ldr	r3, [r6, #0]
 8007452:	6825      	ldr	r5, [r4, #0]
 8007454:	6961      	ldr	r1, [r4, #20]
 8007456:	1d18      	adds	r0, r3, #4
 8007458:	6030      	str	r0, [r6, #0]
 800745a:	062e      	lsls	r6, r5, #24
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	d501      	bpl.n	8007464 <_printf_i+0x1c0>
 8007460:	6019      	str	r1, [r3, #0]
 8007462:	e002      	b.n	800746a <_printf_i+0x1c6>
 8007464:	0668      	lsls	r0, r5, #25
 8007466:	d5fb      	bpl.n	8007460 <_printf_i+0x1bc>
 8007468:	8019      	strh	r1, [r3, #0]
 800746a:	2300      	movs	r3, #0
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	4616      	mov	r6, r2
 8007470:	e7bc      	b.n	80073ec <_printf_i+0x148>
 8007472:	6833      	ldr	r3, [r6, #0]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	6032      	str	r2, [r6, #0]
 8007478:	681e      	ldr	r6, [r3, #0]
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	2100      	movs	r1, #0
 800747e:	4630      	mov	r0, r6
 8007480:	f7f8 feb6 	bl	80001f0 <memchr>
 8007484:	b108      	cbz	r0, 800748a <_printf_i+0x1e6>
 8007486:	1b80      	subs	r0, r0, r6
 8007488:	6060      	str	r0, [r4, #4]
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	2300      	movs	r3, #0
 8007490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007494:	e7aa      	b.n	80073ec <_printf_i+0x148>
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	4632      	mov	r2, r6
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d0ad      	beq.n	8007400 <_printf_i+0x15c>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	079b      	lsls	r3, r3, #30
 80074a8:	d413      	bmi.n	80074d2 <_printf_i+0x22e>
 80074aa:	68e0      	ldr	r0, [r4, #12]
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	4298      	cmp	r0, r3
 80074b0:	bfb8      	it	lt
 80074b2:	4618      	movlt	r0, r3
 80074b4:	e7a6      	b.n	8007404 <_printf_i+0x160>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4632      	mov	r2, r6
 80074ba:	4649      	mov	r1, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	47d0      	blx	sl
 80074c0:	3001      	adds	r0, #1
 80074c2:	d09d      	beq.n	8007400 <_printf_i+0x15c>
 80074c4:	3501      	adds	r5, #1
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	9903      	ldr	r1, [sp, #12]
 80074ca:	1a5b      	subs	r3, r3, r1
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dcf2      	bgt.n	80074b6 <_printf_i+0x212>
 80074d0:	e7eb      	b.n	80074aa <_printf_i+0x206>
 80074d2:	2500      	movs	r5, #0
 80074d4:	f104 0619 	add.w	r6, r4, #25
 80074d8:	e7f5      	b.n	80074c6 <_printf_i+0x222>
 80074da:	bf00      	nop
 80074dc:	08009e3a 	.word	0x08009e3a
 80074e0:	08009e4b 	.word	0x08009e4b

080074e4 <std>:
 80074e4:	2300      	movs	r3, #0
 80074e6:	b510      	push	{r4, lr}
 80074e8:	4604      	mov	r4, r0
 80074ea:	e9c0 3300 	strd	r3, r3, [r0]
 80074ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074f2:	6083      	str	r3, [r0, #8]
 80074f4:	8181      	strh	r1, [r0, #12]
 80074f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80074f8:	81c2      	strh	r2, [r0, #14]
 80074fa:	6183      	str	r3, [r0, #24]
 80074fc:	4619      	mov	r1, r3
 80074fe:	2208      	movs	r2, #8
 8007500:	305c      	adds	r0, #92	@ 0x5c
 8007502:	f000 f93a 	bl	800777a <memset>
 8007506:	4b0d      	ldr	r3, [pc, #52]	@ (800753c <std+0x58>)
 8007508:	6263      	str	r3, [r4, #36]	@ 0x24
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <std+0x5c>)
 800750c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <std+0x60>)
 8007510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007512:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <std+0x64>)
 8007514:	6323      	str	r3, [r4, #48]	@ 0x30
 8007516:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <std+0x68>)
 8007518:	6224      	str	r4, [r4, #32]
 800751a:	429c      	cmp	r4, r3
 800751c:	d006      	beq.n	800752c <std+0x48>
 800751e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007522:	4294      	cmp	r4, r2
 8007524:	d002      	beq.n	800752c <std+0x48>
 8007526:	33d0      	adds	r3, #208	@ 0xd0
 8007528:	429c      	cmp	r4, r3
 800752a:	d105      	bne.n	8007538 <std+0x54>
 800752c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f000 b9ae 	b.w	8007894 <__retarget_lock_init_recursive>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	080076f5 	.word	0x080076f5
 8007540:	08007717 	.word	0x08007717
 8007544:	0800774f 	.word	0x0800774f
 8007548:	08007773 	.word	0x08007773
 800754c:	20000658 	.word	0x20000658

08007550 <stdio_exit_handler>:
 8007550:	4a02      	ldr	r2, [pc, #8]	@ (800755c <stdio_exit_handler+0xc>)
 8007552:	4903      	ldr	r1, [pc, #12]	@ (8007560 <stdio_exit_handler+0x10>)
 8007554:	4803      	ldr	r0, [pc, #12]	@ (8007564 <stdio_exit_handler+0x14>)
 8007556:	f000 b869 	b.w	800762c <_fwalk_sglue>
 800755a:	bf00      	nop
 800755c:	20000018 	.word	0x20000018
 8007560:	08009325 	.word	0x08009325
 8007564:	20000028 	.word	0x20000028

08007568 <cleanup_stdio>:
 8007568:	6841      	ldr	r1, [r0, #4]
 800756a:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <cleanup_stdio+0x34>)
 800756c:	4299      	cmp	r1, r3
 800756e:	b510      	push	{r4, lr}
 8007570:	4604      	mov	r4, r0
 8007572:	d001      	beq.n	8007578 <cleanup_stdio+0x10>
 8007574:	f001 fed6 	bl	8009324 <_fflush_r>
 8007578:	68a1      	ldr	r1, [r4, #8]
 800757a:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <cleanup_stdio+0x38>)
 800757c:	4299      	cmp	r1, r3
 800757e:	d002      	beq.n	8007586 <cleanup_stdio+0x1e>
 8007580:	4620      	mov	r0, r4
 8007582:	f001 fecf 	bl	8009324 <_fflush_r>
 8007586:	68e1      	ldr	r1, [r4, #12]
 8007588:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <cleanup_stdio+0x3c>)
 800758a:	4299      	cmp	r1, r3
 800758c:	d004      	beq.n	8007598 <cleanup_stdio+0x30>
 800758e:	4620      	mov	r0, r4
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	f001 bec6 	b.w	8009324 <_fflush_r>
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	20000658 	.word	0x20000658
 80075a0:	200006c0 	.word	0x200006c0
 80075a4:	20000728 	.word	0x20000728

080075a8 <global_stdio_init.part.0>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <global_stdio_init.part.0+0x30>)
 80075ac:	4c0b      	ldr	r4, [pc, #44]	@ (80075dc <global_stdio_init.part.0+0x34>)
 80075ae:	4a0c      	ldr	r2, [pc, #48]	@ (80075e0 <global_stdio_init.part.0+0x38>)
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	4620      	mov	r0, r4
 80075b4:	2200      	movs	r2, #0
 80075b6:	2104      	movs	r1, #4
 80075b8:	f7ff ff94 	bl	80074e4 <std>
 80075bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075c0:	2201      	movs	r2, #1
 80075c2:	2109      	movs	r1, #9
 80075c4:	f7ff ff8e 	bl	80074e4 <std>
 80075c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075cc:	2202      	movs	r2, #2
 80075ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d2:	2112      	movs	r1, #18
 80075d4:	f7ff bf86 	b.w	80074e4 <std>
 80075d8:	20000790 	.word	0x20000790
 80075dc:	20000658 	.word	0x20000658
 80075e0:	08007551 	.word	0x08007551

080075e4 <__sfp_lock_acquire>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__sfp_lock_acquire+0x8>)
 80075e6:	f000 b956 	b.w	8007896 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20000799 	.word	0x20000799

080075f0 <__sfp_lock_release>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__sfp_lock_release+0x8>)
 80075f2:	f000 b951 	b.w	8007898 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000799 	.word	0x20000799

080075fc <__sinit>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	4604      	mov	r4, r0
 8007600:	f7ff fff0 	bl	80075e4 <__sfp_lock_acquire>
 8007604:	6a23      	ldr	r3, [r4, #32]
 8007606:	b11b      	cbz	r3, 8007610 <__sinit+0x14>
 8007608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760c:	f7ff bff0 	b.w	80075f0 <__sfp_lock_release>
 8007610:	4b04      	ldr	r3, [pc, #16]	@ (8007624 <__sinit+0x28>)
 8007612:	6223      	str	r3, [r4, #32]
 8007614:	4b04      	ldr	r3, [pc, #16]	@ (8007628 <__sinit+0x2c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f5      	bne.n	8007608 <__sinit+0xc>
 800761c:	f7ff ffc4 	bl	80075a8 <global_stdio_init.part.0>
 8007620:	e7f2      	b.n	8007608 <__sinit+0xc>
 8007622:	bf00      	nop
 8007624:	08007569 	.word	0x08007569
 8007628:	20000790 	.word	0x20000790

0800762c <_fwalk_sglue>:
 800762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007630:	4607      	mov	r7, r0
 8007632:	4688      	mov	r8, r1
 8007634:	4614      	mov	r4, r2
 8007636:	2600      	movs	r6, #0
 8007638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800763c:	f1b9 0901 	subs.w	r9, r9, #1
 8007640:	d505      	bpl.n	800764e <_fwalk_sglue+0x22>
 8007642:	6824      	ldr	r4, [r4, #0]
 8007644:	2c00      	cmp	r4, #0
 8007646:	d1f7      	bne.n	8007638 <_fwalk_sglue+0xc>
 8007648:	4630      	mov	r0, r6
 800764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d907      	bls.n	8007664 <_fwalk_sglue+0x38>
 8007654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007658:	3301      	adds	r3, #1
 800765a:	d003      	beq.n	8007664 <_fwalk_sglue+0x38>
 800765c:	4629      	mov	r1, r5
 800765e:	4638      	mov	r0, r7
 8007660:	47c0      	blx	r8
 8007662:	4306      	orrs	r6, r0
 8007664:	3568      	adds	r5, #104	@ 0x68
 8007666:	e7e9      	b.n	800763c <_fwalk_sglue+0x10>

08007668 <iprintf>:
 8007668:	b40f      	push	{r0, r1, r2, r3}
 800766a:	b507      	push	{r0, r1, r2, lr}
 800766c:	4906      	ldr	r1, [pc, #24]	@ (8007688 <iprintf+0x20>)
 800766e:	ab04      	add	r3, sp, #16
 8007670:	6808      	ldr	r0, [r1, #0]
 8007672:	f853 2b04 	ldr.w	r2, [r3], #4
 8007676:	6881      	ldr	r1, [r0, #8]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	f001 fcb7 	bl	8008fec <_vfiprintf_r>
 800767e:	b003      	add	sp, #12
 8007680:	f85d eb04 	ldr.w	lr, [sp], #4
 8007684:	b004      	add	sp, #16
 8007686:	4770      	bx	lr
 8007688:	20000024 	.word	0x20000024

0800768c <sniprintf>:
 800768c:	b40c      	push	{r2, r3}
 800768e:	b530      	push	{r4, r5, lr}
 8007690:	4b17      	ldr	r3, [pc, #92]	@ (80076f0 <sniprintf+0x64>)
 8007692:	1e0c      	subs	r4, r1, #0
 8007694:	681d      	ldr	r5, [r3, #0]
 8007696:	b09d      	sub	sp, #116	@ 0x74
 8007698:	da08      	bge.n	80076ac <sniprintf+0x20>
 800769a:	238b      	movs	r3, #139	@ 0x8b
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	b01d      	add	sp, #116	@ 0x74
 80076a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076a8:	b002      	add	sp, #8
 80076aa:	4770      	bx	lr
 80076ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076b4:	bf14      	ite	ne
 80076b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076ba:	4623      	moveq	r3, r4
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076c4:	9002      	str	r0, [sp, #8]
 80076c6:	9006      	str	r0, [sp, #24]
 80076c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076ce:	ab21      	add	r3, sp, #132	@ 0x84
 80076d0:	a902      	add	r1, sp, #8
 80076d2:	4628      	mov	r0, r5
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	f001 fb63 	bl	8008da0 <_svfiprintf_r>
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	bfbc      	itt	lt
 80076de:	238b      	movlt	r3, #139	@ 0x8b
 80076e0:	602b      	strlt	r3, [r5, #0]
 80076e2:	2c00      	cmp	r4, #0
 80076e4:	d0dd      	beq.n	80076a2 <sniprintf+0x16>
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e7d9      	b.n	80076a2 <sniprintf+0x16>
 80076ee:	bf00      	nop
 80076f0:	20000024 	.word	0x20000024

080076f4 <__sread>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	f000 f86c 	bl	80077d8 <_read_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	bfab      	itete	ge
 8007704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007706:	89a3      	ldrhlt	r3, [r4, #12]
 8007708:	181b      	addge	r3, r3, r0
 800770a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800770e:	bfac      	ite	ge
 8007710:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007712:	81a3      	strhlt	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__swrite>:
 8007716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	461f      	mov	r7, r3
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	05db      	lsls	r3, r3, #23
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4616      	mov	r6, r2
 8007726:	d505      	bpl.n	8007734 <__swrite+0x1e>
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f000 f840 	bl	80077b4 <_lseek_r>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	4632      	mov	r2, r6
 8007742:	463b      	mov	r3, r7
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	f000 b867 	b.w	800781c <_write_r>

0800774e <__sseek>:
 800774e:	b510      	push	{r4, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007756:	f000 f82d 	bl	80077b4 <_lseek_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	bf15      	itete	ne
 8007760:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800776a:	81a3      	strheq	r3, [r4, #12]
 800776c:	bf18      	it	ne
 800776e:	81a3      	strhne	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__sclose>:
 8007772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007776:	f000 b80d 	b.w	8007794 <_close_r>

0800777a <memset>:
 800777a:	4402      	add	r2, r0
 800777c:	4603      	mov	r3, r0
 800777e:	4293      	cmp	r3, r2
 8007780:	d100      	bne.n	8007784 <memset+0xa>
 8007782:	4770      	bx	lr
 8007784:	f803 1b01 	strb.w	r1, [r3], #1
 8007788:	e7f9      	b.n	800777e <memset+0x4>
	...

0800778c <_localeconv_r>:
 800778c:	4800      	ldr	r0, [pc, #0]	@ (8007790 <_localeconv_r+0x4>)
 800778e:	4770      	bx	lr
 8007790:	20000164 	.word	0x20000164

08007794 <_close_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d06      	ldr	r5, [pc, #24]	@ (80077b0 <_close_r+0x1c>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	f7fa ff72 	bl	8002688 <_close>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_close_r+0x1a>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_close_r+0x1a>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	20000794 	.word	0x20000794

080077b4 <_lseek_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	@ (80077d4 <_lseek_r+0x20>)
 80077b8:	4604      	mov	r4, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	4611      	mov	r1, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7fa ff87 	bl	80026d6 <_lseek>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_lseek_r+0x1e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_lseek_r+0x1e>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	20000794 	.word	0x20000794

080077d8 <_read_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	@ (80077f8 <_read_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7fa ff15 	bl	8002616 <_read>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_read_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_read_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000794 	.word	0x20000794

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	@ (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fa ff72 	bl	80026f0 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000794 	.word	0x20000794

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	@ (800783c <_write_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa ff10 	bl	8002650 <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000794 	.word	0x20000794

08007840 <__errno>:
 8007840:	4b01      	ldr	r3, [pc, #4]	@ (8007848 <__errno+0x8>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000024 	.word	0x20000024

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4d0d      	ldr	r5, [pc, #52]	@ (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	@ (8007888 <__libc_init_array+0x3c>)
 8007852:	1b64      	subs	r4, r4, r5
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2600      	movs	r6, #0
 8007858:	42a6      	cmp	r6, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4d0b      	ldr	r5, [pc, #44]	@ (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	@ (8007890 <__libc_init_array+0x44>)
 8007860:	f002 fa0a 	bl	8009c78 <_init>
 8007864:	1b64      	subs	r4, r4, r5
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2600      	movs	r6, #0
 800786a:	42a6      	cmp	r6, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f855 3b04 	ldr.w	r3, [r5], #4
 8007874:	4798      	blx	r3
 8007876:	3601      	adds	r6, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f855 3b04 	ldr.w	r3, [r5], #4
 800787e:	4798      	blx	r3
 8007880:	3601      	adds	r6, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	0800a210 	.word	0x0800a210
 8007888:	0800a210 	.word	0x0800a210
 800788c:	0800a210 	.word	0x0800a210
 8007890:	0800a214 	.word	0x0800a214

08007894 <__retarget_lock_init_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_acquire_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_release_recursive>:
 8007898:	4770      	bx	lr

0800789a <memcpy>:
 800789a:	440a      	add	r2, r1
 800789c:	4291      	cmp	r1, r2
 800789e:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a2:	d100      	bne.n	80078a6 <memcpy+0xc>
 80078a4:	4770      	bx	lr
 80078a6:	b510      	push	{r4, lr}
 80078a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b0:	4291      	cmp	r1, r2
 80078b2:	d1f9      	bne.n	80078a8 <memcpy+0xe>
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <quorem>:
 80078b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ba:	6903      	ldr	r3, [r0, #16]
 80078bc:	690c      	ldr	r4, [r1, #16]
 80078be:	42a3      	cmp	r3, r4
 80078c0:	4607      	mov	r7, r0
 80078c2:	db7e      	blt.n	80079c2 <quorem+0x10c>
 80078c4:	3c01      	subs	r4, #1
 80078c6:	f101 0814 	add.w	r8, r1, #20
 80078ca:	00a3      	lsls	r3, r4, #2
 80078cc:	f100 0514 	add.w	r5, r0, #20
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078e0:	3301      	adds	r3, #1
 80078e2:	429a      	cmp	r2, r3
 80078e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80078ec:	d32e      	bcc.n	800794c <quorem+0x96>
 80078ee:	f04f 0a00 	mov.w	sl, #0
 80078f2:	46c4      	mov	ip, r8
 80078f4:	46ae      	mov	lr, r5
 80078f6:	46d3      	mov	fp, sl
 80078f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078fc:	b298      	uxth	r0, r3
 80078fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007902:	0c02      	lsrs	r2, r0, #16
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	fb06 2303 	mla	r3, r6, r3, r2
 800790a:	f8de 2000 	ldr.w	r2, [lr]
 800790e:	b280      	uxth	r0, r0
 8007910:	b292      	uxth	r2, r2
 8007912:	1a12      	subs	r2, r2, r0
 8007914:	445a      	add	r2, fp
 8007916:	f8de 0000 	ldr.w	r0, [lr]
 800791a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800791e:	b29b      	uxth	r3, r3
 8007920:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007924:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007928:	b292      	uxth	r2, r2
 800792a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800792e:	45e1      	cmp	r9, ip
 8007930:	f84e 2b04 	str.w	r2, [lr], #4
 8007934:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007938:	d2de      	bcs.n	80078f8 <quorem+0x42>
 800793a:	9b00      	ldr	r3, [sp, #0]
 800793c:	58eb      	ldr	r3, [r5, r3]
 800793e:	b92b      	cbnz	r3, 800794c <quorem+0x96>
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	3b04      	subs	r3, #4
 8007944:	429d      	cmp	r5, r3
 8007946:	461a      	mov	r2, r3
 8007948:	d32f      	bcc.n	80079aa <quorem+0xf4>
 800794a:	613c      	str	r4, [r7, #16]
 800794c:	4638      	mov	r0, r7
 800794e:	f001 f8c3 	bl	8008ad8 <__mcmp>
 8007952:	2800      	cmp	r0, #0
 8007954:	db25      	blt.n	80079a2 <quorem+0xec>
 8007956:	4629      	mov	r1, r5
 8007958:	2000      	movs	r0, #0
 800795a:	f858 2b04 	ldr.w	r2, [r8], #4
 800795e:	f8d1 c000 	ldr.w	ip, [r1]
 8007962:	fa1f fe82 	uxth.w	lr, r2
 8007966:	fa1f f38c 	uxth.w	r3, ip
 800796a:	eba3 030e 	sub.w	r3, r3, lr
 800796e:	4403      	add	r3, r0
 8007970:	0c12      	lsrs	r2, r2, #16
 8007972:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007976:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800797a:	b29b      	uxth	r3, r3
 800797c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007980:	45c1      	cmp	r9, r8
 8007982:	f841 3b04 	str.w	r3, [r1], #4
 8007986:	ea4f 4022 	mov.w	r0, r2, asr #16
 800798a:	d2e6      	bcs.n	800795a <quorem+0xa4>
 800798c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007994:	b922      	cbnz	r2, 80079a0 <quorem+0xea>
 8007996:	3b04      	subs	r3, #4
 8007998:	429d      	cmp	r5, r3
 800799a:	461a      	mov	r2, r3
 800799c:	d30b      	bcc.n	80079b6 <quorem+0x100>
 800799e:	613c      	str	r4, [r7, #16]
 80079a0:	3601      	adds	r6, #1
 80079a2:	4630      	mov	r0, r6
 80079a4:	b003      	add	sp, #12
 80079a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079aa:	6812      	ldr	r2, [r2, #0]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d1cb      	bne.n	800794a <quorem+0x94>
 80079b2:	3c01      	subs	r4, #1
 80079b4:	e7c6      	b.n	8007944 <quorem+0x8e>
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d1ef      	bne.n	800799e <quorem+0xe8>
 80079be:	3c01      	subs	r4, #1
 80079c0:	e7ea      	b.n	8007998 <quorem+0xe2>
 80079c2:	2000      	movs	r0, #0
 80079c4:	e7ee      	b.n	80079a4 <quorem+0xee>
	...

080079c8 <_dtoa_r>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	69c7      	ldr	r7, [r0, #28]
 80079ce:	b099      	sub	sp, #100	@ 0x64
 80079d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079d4:	ec55 4b10 	vmov	r4, r5, d0
 80079d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80079da:	9109      	str	r1, [sp, #36]	@ 0x24
 80079dc:	4683      	mov	fp, r0
 80079de:	920e      	str	r2, [sp, #56]	@ 0x38
 80079e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079e2:	b97f      	cbnz	r7, 8007a04 <_dtoa_r+0x3c>
 80079e4:	2010      	movs	r0, #16
 80079e6:	f7ff f86f 	bl	8006ac8 <malloc>
 80079ea:	4602      	mov	r2, r0
 80079ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80079f0:	b920      	cbnz	r0, 80079fc <_dtoa_r+0x34>
 80079f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007c90 <_dtoa_r+0x2c8>)
 80079f4:	21ef      	movs	r1, #239	@ 0xef
 80079f6:	48a7      	ldr	r0, [pc, #668]	@ (8007c94 <_dtoa_r+0x2cc>)
 80079f8:	f001 fd6a 	bl	80094d0 <__assert_func>
 80079fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a00:	6007      	str	r7, [r0, #0]
 8007a02:	60c7      	str	r7, [r0, #12]
 8007a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	b159      	cbz	r1, 8007a24 <_dtoa_r+0x5c>
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	604a      	str	r2, [r1, #4]
 8007a10:	2301      	movs	r3, #1
 8007a12:	4093      	lsls	r3, r2
 8007a14:	608b      	str	r3, [r1, #8]
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 fe24 	bl	8008664 <_Bfree>
 8007a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	1e2b      	subs	r3, r5, #0
 8007a26:	bfb9      	ittee	lt
 8007a28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a2c:	9303      	strlt	r3, [sp, #12]
 8007a2e:	2300      	movge	r3, #0
 8007a30:	6033      	strge	r3, [r6, #0]
 8007a32:	9f03      	ldr	r7, [sp, #12]
 8007a34:	4b98      	ldr	r3, [pc, #608]	@ (8007c98 <_dtoa_r+0x2d0>)
 8007a36:	bfbc      	itt	lt
 8007a38:	2201      	movlt	r2, #1
 8007a3a:	6032      	strlt	r2, [r6, #0]
 8007a3c:	43bb      	bics	r3, r7
 8007a3e:	d112      	bne.n	8007a66 <_dtoa_r+0x9e>
 8007a40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a4c:	4323      	orrs	r3, r4
 8007a4e:	f000 854d 	beq.w	80084ec <_dtoa_r+0xb24>
 8007a52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007cac <_dtoa_r+0x2e4>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 854f 	beq.w	80084fc <_dtoa_r+0xb34>
 8007a5e:	f10a 0303 	add.w	r3, sl, #3
 8007a62:	f000 bd49 	b.w	80084f8 <_dtoa_r+0xb30>
 8007a66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	ec51 0b17 	vmov	r0, r1, d7
 8007a70:	2300      	movs	r3, #0
 8007a72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007a76:	f7f9 f837 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a7a:	4680      	mov	r8, r0
 8007a7c:	b158      	cbz	r0, 8007a96 <_dtoa_r+0xce>
 8007a7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a80:	2301      	movs	r3, #1
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a86:	b113      	cbz	r3, 8007a8e <_dtoa_r+0xc6>
 8007a88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a8a:	4b84      	ldr	r3, [pc, #528]	@ (8007c9c <_dtoa_r+0x2d4>)
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007cb0 <_dtoa_r+0x2e8>
 8007a92:	f000 bd33 	b.w	80084fc <_dtoa_r+0xb34>
 8007a96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a9a:	aa16      	add	r2, sp, #88	@ 0x58
 8007a9c:	a917      	add	r1, sp, #92	@ 0x5c
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f001 f8ca 	bl	8008c38 <__d2b>
 8007aa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	d077      	beq.n	8007b9e <_dtoa_r+0x1d6>
 8007aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ab0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007abc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ac0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ac4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ac8:	4619      	mov	r1, r3
 8007aca:	2200      	movs	r2, #0
 8007acc:	4b74      	ldr	r3, [pc, #464]	@ (8007ca0 <_dtoa_r+0x2d8>)
 8007ace:	f7f8 fbeb 	bl	80002a8 <__aeabi_dsub>
 8007ad2:	a369      	add	r3, pc, #420	@ (adr r3, 8007c78 <_dtoa_r+0x2b0>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fd9e 	bl	8000618 <__aeabi_dmul>
 8007adc:	a368      	add	r3, pc, #416	@ (adr r3, 8007c80 <_dtoa_r+0x2b8>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f7f8 fbe3 	bl	80002ac <__adddf3>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4630      	mov	r0, r6
 8007aea:	460d      	mov	r5, r1
 8007aec:	f7f8 fd2a 	bl	8000544 <__aeabi_i2d>
 8007af0:	a365      	add	r3, pc, #404	@ (adr r3, 8007c88 <_dtoa_r+0x2c0>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fd8f 	bl	8000618 <__aeabi_dmul>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fbd3 	bl	80002ac <__adddf3>
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	f7f9 f835 	bl	8000b78 <__aeabi_d2iz>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4607      	mov	r7, r0
 8007b12:	2300      	movs	r3, #0
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fff0 	bl	8000afc <__aeabi_dcmplt>
 8007b1c:	b140      	cbz	r0, 8007b30 <_dtoa_r+0x168>
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f7f8 fd10 	bl	8000544 <__aeabi_i2d>
 8007b24:	4622      	mov	r2, r4
 8007b26:	462b      	mov	r3, r5
 8007b28:	f7f8 ffde 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b2c:	b900      	cbnz	r0, 8007b30 <_dtoa_r+0x168>
 8007b2e:	3f01      	subs	r7, #1
 8007b30:	2f16      	cmp	r7, #22
 8007b32:	d851      	bhi.n	8007bd8 <_dtoa_r+0x210>
 8007b34:	4b5b      	ldr	r3, [pc, #364]	@ (8007ca4 <_dtoa_r+0x2dc>)
 8007b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b42:	f7f8 ffdb 	bl	8000afc <__aeabi_dcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d048      	beq.n	8007bdc <_dtoa_r+0x214>
 8007b4a:	3f01      	subs	r7, #1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b52:	1b9b      	subs	r3, r3, r6
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	bf44      	itt	mi
 8007b58:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b5c:	2300      	movmi	r3, #0
 8007b5e:	9208      	str	r2, [sp, #32]
 8007b60:	bf54      	ite	pl
 8007b62:	f04f 0800 	movpl.w	r8, #0
 8007b66:	9308      	strmi	r3, [sp, #32]
 8007b68:	2f00      	cmp	r7, #0
 8007b6a:	db39      	blt.n	8007be0 <_dtoa_r+0x218>
 8007b6c:	9b08      	ldr	r3, [sp, #32]
 8007b6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007b70:	443b      	add	r3, r7
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	2300      	movs	r3, #0
 8007b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	d864      	bhi.n	8007c48 <_dtoa_r+0x280>
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	bfc4      	itt	gt
 8007b82:	3b04      	subgt	r3, #4
 8007b84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b88:	f1a3 0302 	sub.w	r3, r3, #2
 8007b8c:	bfcc      	ite	gt
 8007b8e:	2400      	movgt	r4, #0
 8007b90:	2401      	movle	r4, #1
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d863      	bhi.n	8007c5e <_dtoa_r+0x296>
 8007b96:	e8df f003 	tbb	[pc, r3]
 8007b9a:	372a      	.short	0x372a
 8007b9c:	5535      	.short	0x5535
 8007b9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ba2:	441e      	add	r6, r3
 8007ba4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	bfc1      	itttt	gt
 8007bac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bb0:	409f      	lslgt	r7, r3
 8007bb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bba:	bfd6      	itet	le
 8007bbc:	f1c3 0320 	rsble	r3, r3, #32
 8007bc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bc4:	fa04 f003 	lslle.w	r0, r4, r3
 8007bc8:	f7f8 fcac 	bl	8000524 <__aeabi_ui2d>
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bd2:	3e01      	subs	r6, #1
 8007bd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007bd6:	e777      	b.n	8007ac8 <_dtoa_r+0x100>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e7b8      	b.n	8007b4e <_dtoa_r+0x186>
 8007bdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007bde:	e7b7      	b.n	8007b50 <_dtoa_r+0x188>
 8007be0:	427b      	negs	r3, r7
 8007be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be4:	2300      	movs	r3, #0
 8007be6:	eba8 0807 	sub.w	r8, r8, r7
 8007bea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bec:	e7c4      	b.n	8007b78 <_dtoa_r+0x1b0>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc35      	bgt.n	8007c64 <_dtoa_r+0x29c>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	9307      	str	r3, [sp, #28]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c02:	e00b      	b.n	8007c1c <_dtoa_r+0x254>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e7f3      	b.n	8007bf0 <_dtoa_r+0x228>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	9307      	str	r3, [sp, #28]
 8007c18:	bfb8      	it	lt
 8007c1a:	2301      	movlt	r3, #1
 8007c1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c20:	2100      	movs	r1, #0
 8007c22:	2204      	movs	r2, #4
 8007c24:	f102 0514 	add.w	r5, r2, #20
 8007c28:	429d      	cmp	r5, r3
 8007c2a:	d91f      	bls.n	8007c6c <_dtoa_r+0x2a4>
 8007c2c:	6041      	str	r1, [r0, #4]
 8007c2e:	4658      	mov	r0, fp
 8007c30:	f000 fcd8 	bl	80085e4 <_Balloc>
 8007c34:	4682      	mov	sl, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d13c      	bne.n	8007cb4 <_dtoa_r+0x2ec>
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ca8 <_dtoa_r+0x2e0>)
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c42:	e6d8      	b.n	80079f6 <_dtoa_r+0x2e>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e7e0      	b.n	8007c0a <_dtoa_r+0x242>
 8007c48:	2401      	movs	r4, #1
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c50:	f04f 33ff 	mov.w	r3, #4294967295
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2312      	movs	r3, #18
 8007c5c:	e7d0      	b.n	8007c00 <_dtoa_r+0x238>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c62:	e7f5      	b.n	8007c50 <_dtoa_r+0x288>
 8007c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	e7d7      	b.n	8007c1c <_dtoa_r+0x254>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	0052      	lsls	r2, r2, #1
 8007c70:	e7d8      	b.n	8007c24 <_dtoa_r+0x25c>
 8007c72:	bf00      	nop
 8007c74:	f3af 8000 	nop.w
 8007c78:	636f4361 	.word	0x636f4361
 8007c7c:	3fd287a7 	.word	0x3fd287a7
 8007c80:	8b60c8b3 	.word	0x8b60c8b3
 8007c84:	3fc68a28 	.word	0x3fc68a28
 8007c88:	509f79fb 	.word	0x509f79fb
 8007c8c:	3fd34413 	.word	0x3fd34413
 8007c90:	08009e69 	.word	0x08009e69
 8007c94:	08009e80 	.word	0x08009e80
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	08009e39 	.word	0x08009e39
 8007ca0:	3ff80000 	.word	0x3ff80000
 8007ca4:	08009f78 	.word	0x08009f78
 8007ca8:	08009ed8 	.word	0x08009ed8
 8007cac:	08009e65 	.word	0x08009e65
 8007cb0:	08009e38 	.word	0x08009e38
 8007cb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cb8:	6018      	str	r0, [r3, #0]
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	2b0e      	cmp	r3, #14
 8007cbe:	f200 80a4 	bhi.w	8007e0a <_dtoa_r+0x442>
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	f000 80a1 	beq.w	8007e0a <_dtoa_r+0x442>
 8007cc8:	2f00      	cmp	r7, #0
 8007cca:	dd33      	ble.n	8007d34 <_dtoa_r+0x36c>
 8007ccc:	4bad      	ldr	r3, [pc, #692]	@ (8007f84 <_dtoa_r+0x5bc>)
 8007cce:	f007 020f 	and.w	r2, r7, #15
 8007cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cd6:	ed93 7b00 	vldr	d7, [r3]
 8007cda:	05f8      	lsls	r0, r7, #23
 8007cdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ce0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ce4:	d516      	bpl.n	8007d14 <_dtoa_r+0x34c>
 8007ce6:	4ba8      	ldr	r3, [pc, #672]	@ (8007f88 <_dtoa_r+0x5c0>)
 8007ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cf0:	f7f8 fdbc 	bl	800086c <__aeabi_ddiv>
 8007cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf8:	f004 040f 	and.w	r4, r4, #15
 8007cfc:	2603      	movs	r6, #3
 8007cfe:	4da2      	ldr	r5, [pc, #648]	@ (8007f88 <_dtoa_r+0x5c0>)
 8007d00:	b954      	cbnz	r4, 8007d18 <_dtoa_r+0x350>
 8007d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0a:	f7f8 fdaf 	bl	800086c <__aeabi_ddiv>
 8007d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d12:	e028      	b.n	8007d66 <_dtoa_r+0x39e>
 8007d14:	2602      	movs	r6, #2
 8007d16:	e7f2      	b.n	8007cfe <_dtoa_r+0x336>
 8007d18:	07e1      	lsls	r1, r4, #31
 8007d1a:	d508      	bpl.n	8007d2e <_dtoa_r+0x366>
 8007d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d24:	f7f8 fc78 	bl	8000618 <__aeabi_dmul>
 8007d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	1064      	asrs	r4, r4, #1
 8007d30:	3508      	adds	r5, #8
 8007d32:	e7e5      	b.n	8007d00 <_dtoa_r+0x338>
 8007d34:	f000 80d2 	beq.w	8007edc <_dtoa_r+0x514>
 8007d38:	427c      	negs	r4, r7
 8007d3a:	4b92      	ldr	r3, [pc, #584]	@ (8007f84 <_dtoa_r+0x5bc>)
 8007d3c:	4d92      	ldr	r5, [pc, #584]	@ (8007f88 <_dtoa_r+0x5c0>)
 8007d3e:	f004 020f 	and.w	r2, r4, #15
 8007d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d4e:	f7f8 fc63 	bl	8000618 <__aeabi_dmul>
 8007d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d56:	1124      	asrs	r4, r4, #4
 8007d58:	2300      	movs	r3, #0
 8007d5a:	2602      	movs	r6, #2
 8007d5c:	2c00      	cmp	r4, #0
 8007d5e:	f040 80b2 	bne.w	8007ec6 <_dtoa_r+0x4fe>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1d3      	bne.n	8007d0e <_dtoa_r+0x346>
 8007d66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80b7 	beq.w	8007ee0 <_dtoa_r+0x518>
 8007d72:	4b86      	ldr	r3, [pc, #536]	@ (8007f8c <_dtoa_r+0x5c4>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 febf 	bl	8000afc <__aeabi_dcmplt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f000 80ae 	beq.w	8007ee0 <_dtoa_r+0x518>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80aa 	beq.w	8007ee0 <_dtoa_r+0x518>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dd37      	ble.n	8007e02 <_dtoa_r+0x43a>
 8007d92:	1e7b      	subs	r3, r7, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	4620      	mov	r0, r4
 8007d98:	4b7d      	ldr	r3, [pc, #500]	@ (8007f90 <_dtoa_r+0x5c8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fc3b 	bl	8000618 <__aeabi_dmul>
 8007da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da6:	9c00      	ldr	r4, [sp, #0]
 8007da8:	3601      	adds	r6, #1
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7f8 fbca 	bl	8000544 <__aeabi_i2d>
 8007db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db4:	f7f8 fc30 	bl	8000618 <__aeabi_dmul>
 8007db8:	4b76      	ldr	r3, [pc, #472]	@ (8007f94 <_dtoa_r+0x5cc>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f7f8 fa76 	bl	80002ac <__adddf3>
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dc6:	2c00      	cmp	r4, #0
 8007dc8:	f040 808d 	bne.w	8007ee6 <_dtoa_r+0x51e>
 8007dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd0:	4b71      	ldr	r3, [pc, #452]	@ (8007f98 <_dtoa_r+0x5d0>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f7f8 fa68 	bl	80002a8 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007de0:	462a      	mov	r2, r5
 8007de2:	4633      	mov	r3, r6
 8007de4:	f7f8 fea8 	bl	8000b38 <__aeabi_dcmpgt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f040 828b 	bne.w	8008304 <_dtoa_r+0x93c>
 8007dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df2:	462a      	mov	r2, r5
 8007df4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007df8:	f7f8 fe80 	bl	8000afc <__aeabi_dcmplt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f040 8128 	bne.w	8008052 <_dtoa_r+0x68a>
 8007e02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f2c0 815a 	blt.w	80080c6 <_dtoa_r+0x6fe>
 8007e12:	2f0e      	cmp	r7, #14
 8007e14:	f300 8157 	bgt.w	80080c6 <_dtoa_r+0x6fe>
 8007e18:	4b5a      	ldr	r3, [pc, #360]	@ (8007f84 <_dtoa_r+0x5bc>)
 8007e1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e1e:	ed93 7b00 	vldr	d7, [r3]
 8007e22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	ed8d 7b00 	vstr	d7, [sp]
 8007e2a:	da03      	bge.n	8007e34 <_dtoa_r+0x46c>
 8007e2c:	9b07      	ldr	r3, [sp, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f340 8101 	ble.w	8008036 <_dtoa_r+0x66e>
 8007e34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e38:	4656      	mov	r6, sl
 8007e3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7f8 fd13 	bl	800086c <__aeabi_ddiv>
 8007e46:	f7f8 fe97 	bl	8000b78 <__aeabi_d2iz>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	f7f8 fb7a 	bl	8000544 <__aeabi_i2d>
 8007e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e54:	f7f8 fbe0 	bl	8000618 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e64:	f7f8 fa20 	bl	80002a8 <__aeabi_dsub>
 8007e68:	f806 4b01 	strb.w	r4, [r6], #1
 8007e6c:	9d07      	ldr	r5, [sp, #28]
 8007e6e:	eba6 040a 	sub.w	r4, r6, sl
 8007e72:	42a5      	cmp	r5, r4
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	f040 8117 	bne.w	80080aa <_dtoa_r+0x6e2>
 8007e7c:	f7f8 fa16 	bl	80002ac <__adddf3>
 8007e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e84:	4604      	mov	r4, r0
 8007e86:	460d      	mov	r5, r1
 8007e88:	f7f8 fe56 	bl	8000b38 <__aeabi_dcmpgt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f040 80f9 	bne.w	8008084 <_dtoa_r+0x6bc>
 8007e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 fe25 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e9e:	b118      	cbz	r0, 8007ea8 <_dtoa_r+0x4e0>
 8007ea0:	f018 0f01 	tst.w	r8, #1
 8007ea4:	f040 80ee 	bne.w	8008084 <_dtoa_r+0x6bc>
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	4658      	mov	r0, fp
 8007eac:	f000 fbda 	bl	8008664 <_Bfree>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	7033      	strb	r3, [r6, #0]
 8007eb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007eb6:	3701      	adds	r7, #1
 8007eb8:	601f      	str	r7, [r3, #0]
 8007eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 831d 	beq.w	80084fc <_dtoa_r+0xb34>
 8007ec2:	601e      	str	r6, [r3, #0]
 8007ec4:	e31a      	b.n	80084fc <_dtoa_r+0xb34>
 8007ec6:	07e2      	lsls	r2, r4, #31
 8007ec8:	d505      	bpl.n	8007ed6 <_dtoa_r+0x50e>
 8007eca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ece:	f7f8 fba3 	bl	8000618 <__aeabi_dmul>
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	1064      	asrs	r4, r4, #1
 8007ed8:	3508      	adds	r5, #8
 8007eda:	e73f      	b.n	8007d5c <_dtoa_r+0x394>
 8007edc:	2602      	movs	r6, #2
 8007ede:	e742      	b.n	8007d66 <_dtoa_r+0x39e>
 8007ee0:	9c07      	ldr	r4, [sp, #28]
 8007ee2:	9704      	str	r7, [sp, #16]
 8007ee4:	e761      	b.n	8007daa <_dtoa_r+0x3e2>
 8007ee6:	4b27      	ldr	r3, [pc, #156]	@ (8007f84 <_dtoa_r+0x5bc>)
 8007ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ef2:	4454      	add	r4, sl
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d053      	beq.n	8007fa0 <_dtoa_r+0x5d8>
 8007ef8:	4928      	ldr	r1, [pc, #160]	@ (8007f9c <_dtoa_r+0x5d4>)
 8007efa:	2000      	movs	r0, #0
 8007efc:	f7f8 fcb6 	bl	800086c <__aeabi_ddiv>
 8007f00:	4633      	mov	r3, r6
 8007f02:	462a      	mov	r2, r5
 8007f04:	f7f8 f9d0 	bl	80002a8 <__aeabi_dsub>
 8007f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f0c:	4656      	mov	r6, sl
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	f7f8 fe31 	bl	8000b78 <__aeabi_d2iz>
 8007f16:	4605      	mov	r5, r0
 8007f18:	f7f8 fb14 	bl	8000544 <__aeabi_i2d>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f24:	f7f8 f9c0 	bl	80002a8 <__aeabi_dsub>
 8007f28:	3530      	adds	r5, #48	@ 0x30
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f32:	f806 5b01 	strb.w	r5, [r6], #1
 8007f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f3a:	f7f8 fddf 	bl	8000afc <__aeabi_dcmplt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d171      	bne.n	8008026 <_dtoa_r+0x65e>
 8007f42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f46:	4911      	ldr	r1, [pc, #68]	@ (8007f8c <_dtoa_r+0x5c4>)
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f7f8 f9ad 	bl	80002a8 <__aeabi_dsub>
 8007f4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f52:	f7f8 fdd3 	bl	8000afc <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f040 8095 	bne.w	8008086 <_dtoa_r+0x6be>
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	f43f af50 	beq.w	8007e02 <_dtoa_r+0x43a>
 8007f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f66:	4b0a      	ldr	r3, [pc, #40]	@ (8007f90 <_dtoa_r+0x5c8>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f7f8 fb55 	bl	8000618 <__aeabi_dmul>
 8007f6e:	4b08      	ldr	r3, [pc, #32]	@ (8007f90 <_dtoa_r+0x5c8>)
 8007f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f74:	2200      	movs	r2, #0
 8007f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7a:	f7f8 fb4d 	bl	8000618 <__aeabi_dmul>
 8007f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f82:	e7c4      	b.n	8007f0e <_dtoa_r+0x546>
 8007f84:	08009f78 	.word	0x08009f78
 8007f88:	08009f50 	.word	0x08009f50
 8007f8c:	3ff00000 	.word	0x3ff00000
 8007f90:	40240000 	.word	0x40240000
 8007f94:	401c0000 	.word	0x401c0000
 8007f98:	40140000 	.word	0x40140000
 8007f9c:	3fe00000 	.word	0x3fe00000
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7f8 fb38 	bl	8000618 <__aeabi_dmul>
 8007fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fac:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fae:	4656      	mov	r6, sl
 8007fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb4:	f7f8 fde0 	bl	8000b78 <__aeabi_d2iz>
 8007fb8:	4605      	mov	r5, r0
 8007fba:	f7f8 fac3 	bl	8000544 <__aeabi_i2d>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc6:	f7f8 f96f 	bl	80002a8 <__aeabi_dsub>
 8007fca:	3530      	adds	r5, #48	@ 0x30
 8007fcc:	f806 5b01 	strb.w	r5, [r6], #1
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	42a6      	cmp	r6, r4
 8007fd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	d124      	bne.n	800802a <_dtoa_r+0x662>
 8007fe0:	4bac      	ldr	r3, [pc, #688]	@ (8008294 <_dtoa_r+0x8cc>)
 8007fe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fe6:	f7f8 f961 	bl	80002ac <__adddf3>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff2:	f7f8 fda1 	bl	8000b38 <__aeabi_dcmpgt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d145      	bne.n	8008086 <_dtoa_r+0x6be>
 8007ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ffe:	49a5      	ldr	r1, [pc, #660]	@ (8008294 <_dtoa_r+0x8cc>)
 8008000:	2000      	movs	r0, #0
 8008002:	f7f8 f951 	bl	80002a8 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800e:	f7f8 fd75 	bl	8000afc <__aeabi_dcmplt>
 8008012:	2800      	cmp	r0, #0
 8008014:	f43f aef5 	beq.w	8007e02 <_dtoa_r+0x43a>
 8008018:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800801a:	1e73      	subs	r3, r6, #1
 800801c:	9315      	str	r3, [sp, #84]	@ 0x54
 800801e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008022:	2b30      	cmp	r3, #48	@ 0x30
 8008024:	d0f8      	beq.n	8008018 <_dtoa_r+0x650>
 8008026:	9f04      	ldr	r7, [sp, #16]
 8008028:	e73e      	b.n	8007ea8 <_dtoa_r+0x4e0>
 800802a:	4b9b      	ldr	r3, [pc, #620]	@ (8008298 <_dtoa_r+0x8d0>)
 800802c:	f7f8 faf4 	bl	8000618 <__aeabi_dmul>
 8008030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008034:	e7bc      	b.n	8007fb0 <_dtoa_r+0x5e8>
 8008036:	d10c      	bne.n	8008052 <_dtoa_r+0x68a>
 8008038:	4b98      	ldr	r3, [pc, #608]	@ (800829c <_dtoa_r+0x8d4>)
 800803a:	2200      	movs	r2, #0
 800803c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008040:	f7f8 faea 	bl	8000618 <__aeabi_dmul>
 8008044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008048:	f7f8 fd6c 	bl	8000b24 <__aeabi_dcmpge>
 800804c:	2800      	cmp	r0, #0
 800804e:	f000 8157 	beq.w	8008300 <_dtoa_r+0x938>
 8008052:	2400      	movs	r4, #0
 8008054:	4625      	mov	r5, r4
 8008056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008058:	43db      	mvns	r3, r3
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	4656      	mov	r6, sl
 800805e:	2700      	movs	r7, #0
 8008060:	4621      	mov	r1, r4
 8008062:	4658      	mov	r0, fp
 8008064:	f000 fafe 	bl	8008664 <_Bfree>
 8008068:	2d00      	cmp	r5, #0
 800806a:	d0dc      	beq.n	8008026 <_dtoa_r+0x65e>
 800806c:	b12f      	cbz	r7, 800807a <_dtoa_r+0x6b2>
 800806e:	42af      	cmp	r7, r5
 8008070:	d003      	beq.n	800807a <_dtoa_r+0x6b2>
 8008072:	4639      	mov	r1, r7
 8008074:	4658      	mov	r0, fp
 8008076:	f000 faf5 	bl	8008664 <_Bfree>
 800807a:	4629      	mov	r1, r5
 800807c:	4658      	mov	r0, fp
 800807e:	f000 faf1 	bl	8008664 <_Bfree>
 8008082:	e7d0      	b.n	8008026 <_dtoa_r+0x65e>
 8008084:	9704      	str	r7, [sp, #16]
 8008086:	4633      	mov	r3, r6
 8008088:	461e      	mov	r6, r3
 800808a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800808e:	2a39      	cmp	r2, #57	@ 0x39
 8008090:	d107      	bne.n	80080a2 <_dtoa_r+0x6da>
 8008092:	459a      	cmp	sl, r3
 8008094:	d1f8      	bne.n	8008088 <_dtoa_r+0x6c0>
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	3201      	adds	r2, #1
 800809a:	9204      	str	r2, [sp, #16]
 800809c:	2230      	movs	r2, #48	@ 0x30
 800809e:	f88a 2000 	strb.w	r2, [sl]
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	3201      	adds	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e7bd      	b.n	8008026 <_dtoa_r+0x65e>
 80080aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008298 <_dtoa_r+0x8d0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	f7f8 fab3 	bl	8000618 <__aeabi_dmul>
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	f7f8 fd15 	bl	8000ae8 <__aeabi_dcmpeq>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f43f aebb 	beq.w	8007e3a <_dtoa_r+0x472>
 80080c4:	e6f0      	b.n	8007ea8 <_dtoa_r+0x4e0>
 80080c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	f000 80db 	beq.w	8008284 <_dtoa_r+0x8bc>
 80080ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d0:	2a01      	cmp	r2, #1
 80080d2:	f300 80bf 	bgt.w	8008254 <_dtoa_r+0x88c>
 80080d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80080d8:	2a00      	cmp	r2, #0
 80080da:	f000 80b7 	beq.w	800824c <_dtoa_r+0x884>
 80080de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080e4:	4646      	mov	r6, r8
 80080e6:	9a08      	ldr	r2, [sp, #32]
 80080e8:	2101      	movs	r1, #1
 80080ea:	441a      	add	r2, r3
 80080ec:	4658      	mov	r0, fp
 80080ee:	4498      	add	r8, r3
 80080f0:	9208      	str	r2, [sp, #32]
 80080f2:	f000 fb6b 	bl	80087cc <__i2b>
 80080f6:	4605      	mov	r5, r0
 80080f8:	b15e      	cbz	r6, 8008112 <_dtoa_r+0x74a>
 80080fa:	9b08      	ldr	r3, [sp, #32]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd08      	ble.n	8008112 <_dtoa_r+0x74a>
 8008100:	42b3      	cmp	r3, r6
 8008102:	9a08      	ldr	r2, [sp, #32]
 8008104:	bfa8      	it	ge
 8008106:	4633      	movge	r3, r6
 8008108:	eba8 0803 	sub.w	r8, r8, r3
 800810c:	1af6      	subs	r6, r6, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	9308      	str	r3, [sp, #32]
 8008112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008114:	b1f3      	cbz	r3, 8008154 <_dtoa_r+0x78c>
 8008116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80b7 	beq.w	800828c <_dtoa_r+0x8c4>
 800811e:	b18c      	cbz	r4, 8008144 <_dtoa_r+0x77c>
 8008120:	4629      	mov	r1, r5
 8008122:	4622      	mov	r2, r4
 8008124:	4658      	mov	r0, fp
 8008126:	f000 fc11 	bl	800894c <__pow5mult>
 800812a:	464a      	mov	r2, r9
 800812c:	4601      	mov	r1, r0
 800812e:	4605      	mov	r5, r0
 8008130:	4658      	mov	r0, fp
 8008132:	f000 fb61 	bl	80087f8 <__multiply>
 8008136:	4649      	mov	r1, r9
 8008138:	9004      	str	r0, [sp, #16]
 800813a:	4658      	mov	r0, fp
 800813c:	f000 fa92 	bl	8008664 <_Bfree>
 8008140:	9b04      	ldr	r3, [sp, #16]
 8008142:	4699      	mov	r9, r3
 8008144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008146:	1b1a      	subs	r2, r3, r4
 8008148:	d004      	beq.n	8008154 <_dtoa_r+0x78c>
 800814a:	4649      	mov	r1, r9
 800814c:	4658      	mov	r0, fp
 800814e:	f000 fbfd 	bl	800894c <__pow5mult>
 8008152:	4681      	mov	r9, r0
 8008154:	2101      	movs	r1, #1
 8008156:	4658      	mov	r0, fp
 8008158:	f000 fb38 	bl	80087cc <__i2b>
 800815c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800815e:	4604      	mov	r4, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 81cf 	beq.w	8008504 <_dtoa_r+0xb3c>
 8008166:	461a      	mov	r2, r3
 8008168:	4601      	mov	r1, r0
 800816a:	4658      	mov	r0, fp
 800816c:	f000 fbee 	bl	800894c <__pow5mult>
 8008170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008172:	2b01      	cmp	r3, #1
 8008174:	4604      	mov	r4, r0
 8008176:	f300 8095 	bgt.w	80082a4 <_dtoa_r+0x8dc>
 800817a:	9b02      	ldr	r3, [sp, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 8087 	bne.w	8008290 <_dtoa_r+0x8c8>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 8089 	bne.w	80082a0 <_dtoa_r+0x8d8>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008194:	0d1b      	lsrs	r3, r3, #20
 8008196:	051b      	lsls	r3, r3, #20
 8008198:	b12b      	cbz	r3, 80081a6 <_dtoa_r+0x7de>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	3301      	adds	r3, #1
 800819e:	9308      	str	r3, [sp, #32]
 80081a0:	f108 0801 	add.w	r8, r8, #1
 80081a4:	2301      	movs	r3, #1
 80081a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 81b0 	beq.w	8008510 <_dtoa_r+0xb48>
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081b6:	6918      	ldr	r0, [r3, #16]
 80081b8:	f000 fabc 	bl	8008734 <__hi0bits>
 80081bc:	f1c0 0020 	rsb	r0, r0, #32
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	4418      	add	r0, r3
 80081c4:	f010 001f 	ands.w	r0, r0, #31
 80081c8:	d077      	beq.n	80082ba <_dtoa_r+0x8f2>
 80081ca:	f1c0 0320 	rsb	r3, r0, #32
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	dd6b      	ble.n	80082aa <_dtoa_r+0x8e2>
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	f1c0 001c 	rsb	r0, r0, #28
 80081d8:	4403      	add	r3, r0
 80081da:	4480      	add	r8, r0
 80081dc:	4406      	add	r6, r0
 80081de:	9308      	str	r3, [sp, #32]
 80081e0:	f1b8 0f00 	cmp.w	r8, #0
 80081e4:	dd05      	ble.n	80081f2 <_dtoa_r+0x82a>
 80081e6:	4649      	mov	r1, r9
 80081e8:	4642      	mov	r2, r8
 80081ea:	4658      	mov	r0, fp
 80081ec:	f000 fc08 	bl	8008a00 <__lshift>
 80081f0:	4681      	mov	r9, r0
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd05      	ble.n	8008204 <_dtoa_r+0x83c>
 80081f8:	4621      	mov	r1, r4
 80081fa:	461a      	mov	r2, r3
 80081fc:	4658      	mov	r0, fp
 80081fe:	f000 fbff 	bl	8008a00 <__lshift>
 8008202:	4604      	mov	r4, r0
 8008204:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008206:	2b00      	cmp	r3, #0
 8008208:	d059      	beq.n	80082be <_dtoa_r+0x8f6>
 800820a:	4621      	mov	r1, r4
 800820c:	4648      	mov	r0, r9
 800820e:	f000 fc63 	bl	8008ad8 <__mcmp>
 8008212:	2800      	cmp	r0, #0
 8008214:	da53      	bge.n	80082be <_dtoa_r+0x8f6>
 8008216:	1e7b      	subs	r3, r7, #1
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	4649      	mov	r1, r9
 800821c:	2300      	movs	r3, #0
 800821e:	220a      	movs	r2, #10
 8008220:	4658      	mov	r0, fp
 8008222:	f000 fa41 	bl	80086a8 <__multadd>
 8008226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008228:	4681      	mov	r9, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8172 	beq.w	8008514 <_dtoa_r+0xb4c>
 8008230:	2300      	movs	r3, #0
 8008232:	4629      	mov	r1, r5
 8008234:	220a      	movs	r2, #10
 8008236:	4658      	mov	r0, fp
 8008238:	f000 fa36 	bl	80086a8 <__multadd>
 800823c:	9b00      	ldr	r3, [sp, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	4605      	mov	r5, r0
 8008242:	dc67      	bgt.n	8008314 <_dtoa_r+0x94c>
 8008244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008246:	2b02      	cmp	r3, #2
 8008248:	dc41      	bgt.n	80082ce <_dtoa_r+0x906>
 800824a:	e063      	b.n	8008314 <_dtoa_r+0x94c>
 800824c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800824e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008252:	e746      	b.n	80080e2 <_dtoa_r+0x71a>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	1e5c      	subs	r4, r3, #1
 8008258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825a:	42a3      	cmp	r3, r4
 800825c:	bfbf      	itttt	lt
 800825e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008260:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008262:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008264:	1ae3      	sublt	r3, r4, r3
 8008266:	bfb4      	ite	lt
 8008268:	18d2      	addlt	r2, r2, r3
 800826a:	1b1c      	subge	r4, r3, r4
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	bfbc      	itt	lt
 8008270:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008272:	2400      	movlt	r4, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	bfb5      	itete	lt
 8008278:	eba8 0603 	sublt.w	r6, r8, r3
 800827c:	9b07      	ldrge	r3, [sp, #28]
 800827e:	2300      	movlt	r3, #0
 8008280:	4646      	movge	r6, r8
 8008282:	e730      	b.n	80080e6 <_dtoa_r+0x71e>
 8008284:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008286:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008288:	4646      	mov	r6, r8
 800828a:	e735      	b.n	80080f8 <_dtoa_r+0x730>
 800828c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800828e:	e75c      	b.n	800814a <_dtoa_r+0x782>
 8008290:	2300      	movs	r3, #0
 8008292:	e788      	b.n	80081a6 <_dtoa_r+0x7de>
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	40240000 	.word	0x40240000
 800829c:	40140000 	.word	0x40140000
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	e780      	b.n	80081a6 <_dtoa_r+0x7de>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a8:	e782      	b.n	80081b0 <_dtoa_r+0x7e8>
 80082aa:	d099      	beq.n	80081e0 <_dtoa_r+0x818>
 80082ac:	9a08      	ldr	r2, [sp, #32]
 80082ae:	331c      	adds	r3, #28
 80082b0:	441a      	add	r2, r3
 80082b2:	4498      	add	r8, r3
 80082b4:	441e      	add	r6, r3
 80082b6:	9208      	str	r2, [sp, #32]
 80082b8:	e792      	b.n	80081e0 <_dtoa_r+0x818>
 80082ba:	4603      	mov	r3, r0
 80082bc:	e7f6      	b.n	80082ac <_dtoa_r+0x8e4>
 80082be:	9b07      	ldr	r3, [sp, #28]
 80082c0:	9704      	str	r7, [sp, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dc20      	bgt.n	8008308 <_dtoa_r+0x940>
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	dd1e      	ble.n	800830c <_dtoa_r+0x944>
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f47f aec0 	bne.w	8008056 <_dtoa_r+0x68e>
 80082d6:	4621      	mov	r1, r4
 80082d8:	2205      	movs	r2, #5
 80082da:	4658      	mov	r0, fp
 80082dc:	f000 f9e4 	bl	80086a8 <__multadd>
 80082e0:	4601      	mov	r1, r0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4648      	mov	r0, r9
 80082e6:	f000 fbf7 	bl	8008ad8 <__mcmp>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	f77f aeb3 	ble.w	8008056 <_dtoa_r+0x68e>
 80082f0:	4656      	mov	r6, sl
 80082f2:	2331      	movs	r3, #49	@ 0x31
 80082f4:	f806 3b01 	strb.w	r3, [r6], #1
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	3301      	adds	r3, #1
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	e6ae      	b.n	800805e <_dtoa_r+0x696>
 8008300:	9c07      	ldr	r4, [sp, #28]
 8008302:	9704      	str	r7, [sp, #16]
 8008304:	4625      	mov	r5, r4
 8008306:	e7f3      	b.n	80082f0 <_dtoa_r+0x928>
 8008308:	9b07      	ldr	r3, [sp, #28]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8104 	beq.w	800851c <_dtoa_r+0xb54>
 8008314:	2e00      	cmp	r6, #0
 8008316:	dd05      	ble.n	8008324 <_dtoa_r+0x95c>
 8008318:	4629      	mov	r1, r5
 800831a:	4632      	mov	r2, r6
 800831c:	4658      	mov	r0, fp
 800831e:	f000 fb6f 	bl	8008a00 <__lshift>
 8008322:	4605      	mov	r5, r0
 8008324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	d05a      	beq.n	80083e0 <_dtoa_r+0xa18>
 800832a:	6869      	ldr	r1, [r5, #4]
 800832c:	4658      	mov	r0, fp
 800832e:	f000 f959 	bl	80085e4 <_Balloc>
 8008332:	4606      	mov	r6, r0
 8008334:	b928      	cbnz	r0, 8008342 <_dtoa_r+0x97a>
 8008336:	4b84      	ldr	r3, [pc, #528]	@ (8008548 <_dtoa_r+0xb80>)
 8008338:	4602      	mov	r2, r0
 800833a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800833e:	f7ff bb5a 	b.w	80079f6 <_dtoa_r+0x2e>
 8008342:	692a      	ldr	r2, [r5, #16]
 8008344:	3202      	adds	r2, #2
 8008346:	0092      	lsls	r2, r2, #2
 8008348:	f105 010c 	add.w	r1, r5, #12
 800834c:	300c      	adds	r0, #12
 800834e:	f7ff faa4 	bl	800789a <memcpy>
 8008352:	2201      	movs	r2, #1
 8008354:	4631      	mov	r1, r6
 8008356:	4658      	mov	r0, fp
 8008358:	f000 fb52 	bl	8008a00 <__lshift>
 800835c:	f10a 0301 	add.w	r3, sl, #1
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	4453      	add	r3, sl
 8008366:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	462f      	mov	r7, r5
 8008370:	930a      	str	r3, [sp, #40]	@ 0x28
 8008372:	4605      	mov	r5, r0
 8008374:	9b07      	ldr	r3, [sp, #28]
 8008376:	4621      	mov	r1, r4
 8008378:	3b01      	subs	r3, #1
 800837a:	4648      	mov	r0, r9
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	f7ff fa9a 	bl	80078b6 <quorem>
 8008382:	4639      	mov	r1, r7
 8008384:	9002      	str	r0, [sp, #8]
 8008386:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800838a:	4648      	mov	r0, r9
 800838c:	f000 fba4 	bl	8008ad8 <__mcmp>
 8008390:	462a      	mov	r2, r5
 8008392:	9008      	str	r0, [sp, #32]
 8008394:	4621      	mov	r1, r4
 8008396:	4658      	mov	r0, fp
 8008398:	f000 fbba 	bl	8008b10 <__mdiff>
 800839c:	68c2      	ldr	r2, [r0, #12]
 800839e:	4606      	mov	r6, r0
 80083a0:	bb02      	cbnz	r2, 80083e4 <_dtoa_r+0xa1c>
 80083a2:	4601      	mov	r1, r0
 80083a4:	4648      	mov	r0, r9
 80083a6:	f000 fb97 	bl	8008ad8 <__mcmp>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4631      	mov	r1, r6
 80083ae:	4658      	mov	r0, fp
 80083b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083b2:	f000 f957 	bl	8008664 <_Bfree>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ba:	9e07      	ldr	r6, [sp, #28]
 80083bc:	ea43 0102 	orr.w	r1, r3, r2
 80083c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c2:	4319      	orrs	r1, r3
 80083c4:	d110      	bne.n	80083e8 <_dtoa_r+0xa20>
 80083c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083ca:	d029      	beq.n	8008420 <_dtoa_r+0xa58>
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dd02      	ble.n	80083d8 <_dtoa_r+0xa10>
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	f883 8000 	strb.w	r8, [r3]
 80083de:	e63f      	b.n	8008060 <_dtoa_r+0x698>
 80083e0:	4628      	mov	r0, r5
 80083e2:	e7bb      	b.n	800835c <_dtoa_r+0x994>
 80083e4:	2201      	movs	r2, #1
 80083e6:	e7e1      	b.n	80083ac <_dtoa_r+0x9e4>
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	db04      	blt.n	80083f8 <_dtoa_r+0xa30>
 80083ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083f0:	430b      	orrs	r3, r1
 80083f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083f4:	430b      	orrs	r3, r1
 80083f6:	d120      	bne.n	800843a <_dtoa_r+0xa72>
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	dded      	ble.n	80083d8 <_dtoa_r+0xa10>
 80083fc:	4649      	mov	r1, r9
 80083fe:	2201      	movs	r2, #1
 8008400:	4658      	mov	r0, fp
 8008402:	f000 fafd 	bl	8008a00 <__lshift>
 8008406:	4621      	mov	r1, r4
 8008408:	4681      	mov	r9, r0
 800840a:	f000 fb65 	bl	8008ad8 <__mcmp>
 800840e:	2800      	cmp	r0, #0
 8008410:	dc03      	bgt.n	800841a <_dtoa_r+0xa52>
 8008412:	d1e1      	bne.n	80083d8 <_dtoa_r+0xa10>
 8008414:	f018 0f01 	tst.w	r8, #1
 8008418:	d0de      	beq.n	80083d8 <_dtoa_r+0xa10>
 800841a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800841e:	d1d8      	bne.n	80083d2 <_dtoa_r+0xa0a>
 8008420:	9a00      	ldr	r2, [sp, #0]
 8008422:	2339      	movs	r3, #57	@ 0x39
 8008424:	7013      	strb	r3, [r2, #0]
 8008426:	4633      	mov	r3, r6
 8008428:	461e      	mov	r6, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008430:	2a39      	cmp	r2, #57	@ 0x39
 8008432:	d052      	beq.n	80084da <_dtoa_r+0xb12>
 8008434:	3201      	adds	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e612      	b.n	8008060 <_dtoa_r+0x698>
 800843a:	2a00      	cmp	r2, #0
 800843c:	dd07      	ble.n	800844e <_dtoa_r+0xa86>
 800843e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008442:	d0ed      	beq.n	8008420 <_dtoa_r+0xa58>
 8008444:	9a00      	ldr	r2, [sp, #0]
 8008446:	f108 0301 	add.w	r3, r8, #1
 800844a:	7013      	strb	r3, [r2, #0]
 800844c:	e608      	b.n	8008060 <_dtoa_r+0x698>
 800844e:	9b07      	ldr	r3, [sp, #28]
 8008450:	9a07      	ldr	r2, [sp, #28]
 8008452:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008458:	4293      	cmp	r3, r2
 800845a:	d028      	beq.n	80084ae <_dtoa_r+0xae6>
 800845c:	4649      	mov	r1, r9
 800845e:	2300      	movs	r3, #0
 8008460:	220a      	movs	r2, #10
 8008462:	4658      	mov	r0, fp
 8008464:	f000 f920 	bl	80086a8 <__multadd>
 8008468:	42af      	cmp	r7, r5
 800846a:	4681      	mov	r9, r0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	f04f 020a 	mov.w	r2, #10
 8008474:	4639      	mov	r1, r7
 8008476:	4658      	mov	r0, fp
 8008478:	d107      	bne.n	800848a <_dtoa_r+0xac2>
 800847a:	f000 f915 	bl	80086a8 <__multadd>
 800847e:	4607      	mov	r7, r0
 8008480:	4605      	mov	r5, r0
 8008482:	9b07      	ldr	r3, [sp, #28]
 8008484:	3301      	adds	r3, #1
 8008486:	9307      	str	r3, [sp, #28]
 8008488:	e774      	b.n	8008374 <_dtoa_r+0x9ac>
 800848a:	f000 f90d 	bl	80086a8 <__multadd>
 800848e:	4629      	mov	r1, r5
 8008490:	4607      	mov	r7, r0
 8008492:	2300      	movs	r3, #0
 8008494:	220a      	movs	r2, #10
 8008496:	4658      	mov	r0, fp
 8008498:	f000 f906 	bl	80086a8 <__multadd>
 800849c:	4605      	mov	r5, r0
 800849e:	e7f0      	b.n	8008482 <_dtoa_r+0xaba>
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfcc      	ite	gt
 80084a6:	461e      	movgt	r6, r3
 80084a8:	2601      	movle	r6, #1
 80084aa:	4456      	add	r6, sl
 80084ac:	2700      	movs	r7, #0
 80084ae:	4649      	mov	r1, r9
 80084b0:	2201      	movs	r2, #1
 80084b2:	4658      	mov	r0, fp
 80084b4:	f000 faa4 	bl	8008a00 <__lshift>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4681      	mov	r9, r0
 80084bc:	f000 fb0c 	bl	8008ad8 <__mcmp>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	dcb0      	bgt.n	8008426 <_dtoa_r+0xa5e>
 80084c4:	d102      	bne.n	80084cc <_dtoa_r+0xb04>
 80084c6:	f018 0f01 	tst.w	r8, #1
 80084ca:	d1ac      	bne.n	8008426 <_dtoa_r+0xa5e>
 80084cc:	4633      	mov	r3, r6
 80084ce:	461e      	mov	r6, r3
 80084d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084d4:	2a30      	cmp	r2, #48	@ 0x30
 80084d6:	d0fa      	beq.n	80084ce <_dtoa_r+0xb06>
 80084d8:	e5c2      	b.n	8008060 <_dtoa_r+0x698>
 80084da:	459a      	cmp	sl, r3
 80084dc:	d1a4      	bne.n	8008428 <_dtoa_r+0xa60>
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	3301      	adds	r3, #1
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	2331      	movs	r3, #49	@ 0x31
 80084e6:	f88a 3000 	strb.w	r3, [sl]
 80084ea:	e5b9      	b.n	8008060 <_dtoa_r+0x698>
 80084ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800854c <_dtoa_r+0xb84>
 80084f2:	b11b      	cbz	r3, 80084fc <_dtoa_r+0xb34>
 80084f4:	f10a 0308 	add.w	r3, sl, #8
 80084f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	4650      	mov	r0, sl
 80084fe:	b019      	add	sp, #100	@ 0x64
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008506:	2b01      	cmp	r3, #1
 8008508:	f77f ae37 	ble.w	800817a <_dtoa_r+0x7b2>
 800850c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800850e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008510:	2001      	movs	r0, #1
 8008512:	e655      	b.n	80081c0 <_dtoa_r+0x7f8>
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f77f aed6 	ble.w	80082c8 <_dtoa_r+0x900>
 800851c:	4656      	mov	r6, sl
 800851e:	4621      	mov	r1, r4
 8008520:	4648      	mov	r0, r9
 8008522:	f7ff f9c8 	bl	80078b6 <quorem>
 8008526:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800852a:	f806 8b01 	strb.w	r8, [r6], #1
 800852e:	9b00      	ldr	r3, [sp, #0]
 8008530:	eba6 020a 	sub.w	r2, r6, sl
 8008534:	4293      	cmp	r3, r2
 8008536:	ddb3      	ble.n	80084a0 <_dtoa_r+0xad8>
 8008538:	4649      	mov	r1, r9
 800853a:	2300      	movs	r3, #0
 800853c:	220a      	movs	r2, #10
 800853e:	4658      	mov	r0, fp
 8008540:	f000 f8b2 	bl	80086a8 <__multadd>
 8008544:	4681      	mov	r9, r0
 8008546:	e7ea      	b.n	800851e <_dtoa_r+0xb56>
 8008548:	08009ed8 	.word	0x08009ed8
 800854c:	08009e5c 	.word	0x08009e5c

08008550 <_free_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d041      	beq.n	80085dc <_free_r+0x8c>
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f0c      	subs	r4, r1, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	18e4      	addlt	r4, r4, r3
 8008564:	f7fe fb5a 	bl	8006c1c <__malloc_lock>
 8008568:	4a1d      	ldr	r2, [pc, #116]	@ (80085e0 <_free_r+0x90>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	b933      	cbnz	r3, 800857c <_free_r+0x2c>
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6014      	str	r4, [r2, #0]
 8008572:	4628      	mov	r0, r5
 8008574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008578:	f7fe bb56 	b.w	8006c28 <__malloc_unlock>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x42>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	1821      	adds	r1, r4, r0
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1809      	addeq	r1, r1, r0
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	e7ed      	b.n	800856e <_free_r+0x1e>
 8008592:	461a      	mov	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b10b      	cbz	r3, 800859c <_free_r+0x4c>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d9fa      	bls.n	8008592 <_free_r+0x42>
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1850      	adds	r0, r2, r1
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d10b      	bne.n	80085bc <_free_r+0x6c>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	4401      	add	r1, r0
 80085a8:	1850      	adds	r0, r2, r1
 80085aa:	4283      	cmp	r3, r0
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	d1e0      	bne.n	8008572 <_free_r+0x22>
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	6053      	str	r3, [r2, #4]
 80085b6:	4408      	add	r0, r1
 80085b8:	6010      	str	r0, [r2, #0]
 80085ba:	e7da      	b.n	8008572 <_free_r+0x22>
 80085bc:	d902      	bls.n	80085c4 <_free_r+0x74>
 80085be:	230c      	movs	r3, #12
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	e7d6      	b.n	8008572 <_free_r+0x22>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	1821      	adds	r1, r4, r0
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf04      	itt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	bf04      	itt	eq
 80085d4:	1809      	addeq	r1, r1, r0
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	6054      	str	r4, [r2, #4]
 80085da:	e7ca      	b.n	8008572 <_free_r+0x22>
 80085dc:	bd38      	pop	{r3, r4, r5, pc}
 80085de:	bf00      	nop
 80085e0:	20000654 	.word	0x20000654

080085e4 <_Balloc>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	69c6      	ldr	r6, [r0, #28]
 80085e8:	4604      	mov	r4, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	b976      	cbnz	r6, 800860c <_Balloc+0x28>
 80085ee:	2010      	movs	r0, #16
 80085f0:	f7fe fa6a 	bl	8006ac8 <malloc>
 80085f4:	4602      	mov	r2, r0
 80085f6:	61e0      	str	r0, [r4, #28]
 80085f8:	b920      	cbnz	r0, 8008604 <_Balloc+0x20>
 80085fa:	4b18      	ldr	r3, [pc, #96]	@ (800865c <_Balloc+0x78>)
 80085fc:	4818      	ldr	r0, [pc, #96]	@ (8008660 <_Balloc+0x7c>)
 80085fe:	216b      	movs	r1, #107	@ 0x6b
 8008600:	f000 ff66 	bl	80094d0 <__assert_func>
 8008604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008608:	6006      	str	r6, [r0, #0]
 800860a:	60c6      	str	r6, [r0, #12]
 800860c:	69e6      	ldr	r6, [r4, #28]
 800860e:	68f3      	ldr	r3, [r6, #12]
 8008610:	b183      	cbz	r3, 8008634 <_Balloc+0x50>
 8008612:	69e3      	ldr	r3, [r4, #28]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800861a:	b9b8      	cbnz	r0, 800864c <_Balloc+0x68>
 800861c:	2101      	movs	r1, #1
 800861e:	fa01 f605 	lsl.w	r6, r1, r5
 8008622:	1d72      	adds	r2, r6, #5
 8008624:	0092      	lsls	r2, r2, #2
 8008626:	4620      	mov	r0, r4
 8008628:	f000 ff70 	bl	800950c <_calloc_r>
 800862c:	b160      	cbz	r0, 8008648 <_Balloc+0x64>
 800862e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008632:	e00e      	b.n	8008652 <_Balloc+0x6e>
 8008634:	2221      	movs	r2, #33	@ 0x21
 8008636:	2104      	movs	r1, #4
 8008638:	4620      	mov	r0, r4
 800863a:	f000 ff67 	bl	800950c <_calloc_r>
 800863e:	69e3      	ldr	r3, [r4, #28]
 8008640:	60f0      	str	r0, [r6, #12]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e4      	bne.n	8008612 <_Balloc+0x2e>
 8008648:	2000      	movs	r0, #0
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	6802      	ldr	r2, [r0, #0]
 800864e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008652:	2300      	movs	r3, #0
 8008654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008658:	e7f7      	b.n	800864a <_Balloc+0x66>
 800865a:	bf00      	nop
 800865c:	08009e69 	.word	0x08009e69
 8008660:	08009ee9 	.word	0x08009ee9

08008664 <_Bfree>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	69c6      	ldr	r6, [r0, #28]
 8008668:	4605      	mov	r5, r0
 800866a:	460c      	mov	r4, r1
 800866c:	b976      	cbnz	r6, 800868c <_Bfree+0x28>
 800866e:	2010      	movs	r0, #16
 8008670:	f7fe fa2a 	bl	8006ac8 <malloc>
 8008674:	4602      	mov	r2, r0
 8008676:	61e8      	str	r0, [r5, #28]
 8008678:	b920      	cbnz	r0, 8008684 <_Bfree+0x20>
 800867a:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <_Bfree+0x3c>)
 800867c:	4809      	ldr	r0, [pc, #36]	@ (80086a4 <_Bfree+0x40>)
 800867e:	218f      	movs	r1, #143	@ 0x8f
 8008680:	f000 ff26 	bl	80094d0 <__assert_func>
 8008684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008688:	6006      	str	r6, [r0, #0]
 800868a:	60c6      	str	r6, [r0, #12]
 800868c:	b13c      	cbz	r4, 800869e <_Bfree+0x3a>
 800868e:	69eb      	ldr	r3, [r5, #28]
 8008690:	6862      	ldr	r2, [r4, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008698:	6021      	str	r1, [r4, #0]
 800869a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	08009e69 	.word	0x08009e69
 80086a4:	08009ee9 	.word	0x08009ee9

080086a8 <__multadd>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	690d      	ldr	r5, [r1, #16]
 80086ae:	4607      	mov	r7, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	461e      	mov	r6, r3
 80086b4:	f101 0c14 	add.w	ip, r1, #20
 80086b8:	2000      	movs	r0, #0
 80086ba:	f8dc 3000 	ldr.w	r3, [ip]
 80086be:	b299      	uxth	r1, r3
 80086c0:	fb02 6101 	mla	r1, r2, r1, r6
 80086c4:	0c1e      	lsrs	r6, r3, #16
 80086c6:	0c0b      	lsrs	r3, r1, #16
 80086c8:	fb02 3306 	mla	r3, r2, r6, r3
 80086cc:	b289      	uxth	r1, r1
 80086ce:	3001      	adds	r0, #1
 80086d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086d4:	4285      	cmp	r5, r0
 80086d6:	f84c 1b04 	str.w	r1, [ip], #4
 80086da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086de:	dcec      	bgt.n	80086ba <__multadd+0x12>
 80086e0:	b30e      	cbz	r6, 8008726 <__multadd+0x7e>
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc19      	bgt.n	800871c <__multadd+0x74>
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	4638      	mov	r0, r7
 80086ec:	3101      	adds	r1, #1
 80086ee:	f7ff ff79 	bl	80085e4 <_Balloc>
 80086f2:	4680      	mov	r8, r0
 80086f4:	b928      	cbnz	r0, 8008702 <__multadd+0x5a>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b0c      	ldr	r3, [pc, #48]	@ (800872c <__multadd+0x84>)
 80086fa:	480d      	ldr	r0, [pc, #52]	@ (8008730 <__multadd+0x88>)
 80086fc:	21ba      	movs	r1, #186	@ 0xba
 80086fe:	f000 fee7 	bl	80094d0 <__assert_func>
 8008702:	6922      	ldr	r2, [r4, #16]
 8008704:	3202      	adds	r2, #2
 8008706:	f104 010c 	add.w	r1, r4, #12
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	300c      	adds	r0, #12
 800870e:	f7ff f8c4 	bl	800789a <memcpy>
 8008712:	4621      	mov	r1, r4
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff ffa5 	bl	8008664 <_Bfree>
 800871a:	4644      	mov	r4, r8
 800871c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008720:	3501      	adds	r5, #1
 8008722:	615e      	str	r6, [r3, #20]
 8008724:	6125      	str	r5, [r4, #16]
 8008726:	4620      	mov	r0, r4
 8008728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872c:	08009ed8 	.word	0x08009ed8
 8008730:	08009ee9 	.word	0x08009ee9

08008734 <__hi0bits>:
 8008734:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008738:	4603      	mov	r3, r0
 800873a:	bf36      	itet	cc
 800873c:	0403      	lslcc	r3, r0, #16
 800873e:	2000      	movcs	r0, #0
 8008740:	2010      	movcc	r0, #16
 8008742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008746:	bf3c      	itt	cc
 8008748:	021b      	lslcc	r3, r3, #8
 800874a:	3008      	addcc	r0, #8
 800874c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008750:	bf3c      	itt	cc
 8008752:	011b      	lslcc	r3, r3, #4
 8008754:	3004      	addcc	r0, #4
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875a:	bf3c      	itt	cc
 800875c:	009b      	lslcc	r3, r3, #2
 800875e:	3002      	addcc	r0, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	db05      	blt.n	8008770 <__hi0bits+0x3c>
 8008764:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008768:	f100 0001 	add.w	r0, r0, #1
 800876c:	bf08      	it	eq
 800876e:	2020      	moveq	r0, #32
 8008770:	4770      	bx	lr

08008772 <__lo0bits>:
 8008772:	6803      	ldr	r3, [r0, #0]
 8008774:	4602      	mov	r2, r0
 8008776:	f013 0007 	ands.w	r0, r3, #7
 800877a:	d00b      	beq.n	8008794 <__lo0bits+0x22>
 800877c:	07d9      	lsls	r1, r3, #31
 800877e:	d421      	bmi.n	80087c4 <__lo0bits+0x52>
 8008780:	0798      	lsls	r0, r3, #30
 8008782:	bf49      	itett	mi
 8008784:	085b      	lsrmi	r3, r3, #1
 8008786:	089b      	lsrpl	r3, r3, #2
 8008788:	2001      	movmi	r0, #1
 800878a:	6013      	strmi	r3, [r2, #0]
 800878c:	bf5c      	itt	pl
 800878e:	6013      	strpl	r3, [r2, #0]
 8008790:	2002      	movpl	r0, #2
 8008792:	4770      	bx	lr
 8008794:	b299      	uxth	r1, r3
 8008796:	b909      	cbnz	r1, 800879c <__lo0bits+0x2a>
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	2010      	movs	r0, #16
 800879c:	b2d9      	uxtb	r1, r3
 800879e:	b909      	cbnz	r1, 80087a4 <__lo0bits+0x32>
 80087a0:	3008      	adds	r0, #8
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	0719      	lsls	r1, r3, #28
 80087a6:	bf04      	itt	eq
 80087a8:	091b      	lsreq	r3, r3, #4
 80087aa:	3004      	addeq	r0, #4
 80087ac:	0799      	lsls	r1, r3, #30
 80087ae:	bf04      	itt	eq
 80087b0:	089b      	lsreq	r3, r3, #2
 80087b2:	3002      	addeq	r0, #2
 80087b4:	07d9      	lsls	r1, r3, #31
 80087b6:	d403      	bmi.n	80087c0 <__lo0bits+0x4e>
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	f100 0001 	add.w	r0, r0, #1
 80087be:	d003      	beq.n	80087c8 <__lo0bits+0x56>
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4770      	bx	lr
 80087c4:	2000      	movs	r0, #0
 80087c6:	4770      	bx	lr
 80087c8:	2020      	movs	r0, #32
 80087ca:	4770      	bx	lr

080087cc <__i2b>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	2101      	movs	r1, #1
 80087d2:	f7ff ff07 	bl	80085e4 <_Balloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__i2b+0x1a>
 80087da:	4b05      	ldr	r3, [pc, #20]	@ (80087f0 <__i2b+0x24>)
 80087dc:	4805      	ldr	r0, [pc, #20]	@ (80087f4 <__i2b+0x28>)
 80087de:	f240 1145 	movw	r1, #325	@ 0x145
 80087e2:	f000 fe75 	bl	80094d0 <__assert_func>
 80087e6:	2301      	movs	r3, #1
 80087e8:	6144      	str	r4, [r0, #20]
 80087ea:	6103      	str	r3, [r0, #16]
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	08009ed8 	.word	0x08009ed8
 80087f4:	08009ee9 	.word	0x08009ee9

080087f8 <__multiply>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4614      	mov	r4, r2
 80087fe:	690a      	ldr	r2, [r1, #16]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	429a      	cmp	r2, r3
 8008804:	bfa8      	it	ge
 8008806:	4623      	movge	r3, r4
 8008808:	460f      	mov	r7, r1
 800880a:	bfa4      	itt	ge
 800880c:	460c      	movge	r4, r1
 800880e:	461f      	movge	r7, r3
 8008810:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008814:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	6861      	ldr	r1, [r4, #4]
 800881c:	eb0a 0609 	add.w	r6, sl, r9
 8008820:	42b3      	cmp	r3, r6
 8008822:	b085      	sub	sp, #20
 8008824:	bfb8      	it	lt
 8008826:	3101      	addlt	r1, #1
 8008828:	f7ff fedc 	bl	80085e4 <_Balloc>
 800882c:	b930      	cbnz	r0, 800883c <__multiply+0x44>
 800882e:	4602      	mov	r2, r0
 8008830:	4b44      	ldr	r3, [pc, #272]	@ (8008944 <__multiply+0x14c>)
 8008832:	4845      	ldr	r0, [pc, #276]	@ (8008948 <__multiply+0x150>)
 8008834:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008838:	f000 fe4a 	bl	80094d0 <__assert_func>
 800883c:	f100 0514 	add.w	r5, r0, #20
 8008840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008844:	462b      	mov	r3, r5
 8008846:	2200      	movs	r2, #0
 8008848:	4543      	cmp	r3, r8
 800884a:	d321      	bcc.n	8008890 <__multiply+0x98>
 800884c:	f107 0114 	add.w	r1, r7, #20
 8008850:	f104 0214 	add.w	r2, r4, #20
 8008854:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008858:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800885c:	9302      	str	r3, [sp, #8]
 800885e:	1b13      	subs	r3, r2, r4
 8008860:	3b15      	subs	r3, #21
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	3304      	adds	r3, #4
 8008868:	f104 0715 	add.w	r7, r4, #21
 800886c:	42ba      	cmp	r2, r7
 800886e:	bf38      	it	cc
 8008870:	2304      	movcc	r3, #4
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	9103      	str	r1, [sp, #12]
 8008878:	428b      	cmp	r3, r1
 800887a:	d80c      	bhi.n	8008896 <__multiply+0x9e>
 800887c:	2e00      	cmp	r6, #0
 800887e:	dd03      	ble.n	8008888 <__multiply+0x90>
 8008880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05b      	beq.n	8008940 <__multiply+0x148>
 8008888:	6106      	str	r6, [r0, #16]
 800888a:	b005      	add	sp, #20
 800888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008890:	f843 2b04 	str.w	r2, [r3], #4
 8008894:	e7d8      	b.n	8008848 <__multiply+0x50>
 8008896:	f8b1 a000 	ldrh.w	sl, [r1]
 800889a:	f1ba 0f00 	cmp.w	sl, #0
 800889e:	d024      	beq.n	80088ea <__multiply+0xf2>
 80088a0:	f104 0e14 	add.w	lr, r4, #20
 80088a4:	46a9      	mov	r9, r5
 80088a6:	f04f 0c00 	mov.w	ip, #0
 80088aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ae:	f8d9 3000 	ldr.w	r3, [r9]
 80088b2:	fa1f fb87 	uxth.w	fp, r7
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088c0:	f8d9 7000 	ldr.w	r7, [r9]
 80088c4:	4463      	add	r3, ip
 80088c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80088ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088d8:	4572      	cmp	r2, lr
 80088da:	f849 3b04 	str.w	r3, [r9], #4
 80088de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088e2:	d8e2      	bhi.n	80088aa <__multiply+0xb2>
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	f845 c003 	str.w	ip, [r5, r3]
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088f0:	3104      	adds	r1, #4
 80088f2:	f1b9 0f00 	cmp.w	r9, #0
 80088f6:	d021      	beq.n	800893c <__multiply+0x144>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	f104 0c14 	add.w	ip, r4, #20
 80088fe:	46ae      	mov	lr, r5
 8008900:	f04f 0a00 	mov.w	sl, #0
 8008904:	f8bc b000 	ldrh.w	fp, [ip]
 8008908:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800890c:	fb09 770b 	mla	r7, r9, fp, r7
 8008910:	4457      	add	r7, sl
 8008912:	b29b      	uxth	r3, r3
 8008914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008918:	f84e 3b04 	str.w	r3, [lr], #4
 800891c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008924:	f8be 3000 	ldrh.w	r3, [lr]
 8008928:	fb09 330a 	mla	r3, r9, sl, r3
 800892c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008930:	4562      	cmp	r2, ip
 8008932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008936:	d8e5      	bhi.n	8008904 <__multiply+0x10c>
 8008938:	9f01      	ldr	r7, [sp, #4]
 800893a:	51eb      	str	r3, [r5, r7]
 800893c:	3504      	adds	r5, #4
 800893e:	e799      	b.n	8008874 <__multiply+0x7c>
 8008940:	3e01      	subs	r6, #1
 8008942:	e79b      	b.n	800887c <__multiply+0x84>
 8008944:	08009ed8 	.word	0x08009ed8
 8008948:	08009ee9 	.word	0x08009ee9

0800894c <__pow5mult>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	4615      	mov	r5, r2
 8008952:	f012 0203 	ands.w	r2, r2, #3
 8008956:	4607      	mov	r7, r0
 8008958:	460e      	mov	r6, r1
 800895a:	d007      	beq.n	800896c <__pow5mult+0x20>
 800895c:	4c25      	ldr	r4, [pc, #148]	@ (80089f4 <__pow5mult+0xa8>)
 800895e:	3a01      	subs	r2, #1
 8008960:	2300      	movs	r3, #0
 8008962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008966:	f7ff fe9f 	bl	80086a8 <__multadd>
 800896a:	4606      	mov	r6, r0
 800896c:	10ad      	asrs	r5, r5, #2
 800896e:	d03d      	beq.n	80089ec <__pow5mult+0xa0>
 8008970:	69fc      	ldr	r4, [r7, #28]
 8008972:	b97c      	cbnz	r4, 8008994 <__pow5mult+0x48>
 8008974:	2010      	movs	r0, #16
 8008976:	f7fe f8a7 	bl	8006ac8 <malloc>
 800897a:	4602      	mov	r2, r0
 800897c:	61f8      	str	r0, [r7, #28]
 800897e:	b928      	cbnz	r0, 800898c <__pow5mult+0x40>
 8008980:	4b1d      	ldr	r3, [pc, #116]	@ (80089f8 <__pow5mult+0xac>)
 8008982:	481e      	ldr	r0, [pc, #120]	@ (80089fc <__pow5mult+0xb0>)
 8008984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008988:	f000 fda2 	bl	80094d0 <__assert_func>
 800898c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008990:	6004      	str	r4, [r0, #0]
 8008992:	60c4      	str	r4, [r0, #12]
 8008994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800899c:	b94c      	cbnz	r4, 80089b2 <__pow5mult+0x66>
 800899e:	f240 2171 	movw	r1, #625	@ 0x271
 80089a2:	4638      	mov	r0, r7
 80089a4:	f7ff ff12 	bl	80087cc <__i2b>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ae:	4604      	mov	r4, r0
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	f04f 0900 	mov.w	r9, #0
 80089b6:	07eb      	lsls	r3, r5, #31
 80089b8:	d50a      	bpl.n	80089d0 <__pow5mult+0x84>
 80089ba:	4631      	mov	r1, r6
 80089bc:	4622      	mov	r2, r4
 80089be:	4638      	mov	r0, r7
 80089c0:	f7ff ff1a 	bl	80087f8 <__multiply>
 80089c4:	4631      	mov	r1, r6
 80089c6:	4680      	mov	r8, r0
 80089c8:	4638      	mov	r0, r7
 80089ca:	f7ff fe4b 	bl	8008664 <_Bfree>
 80089ce:	4646      	mov	r6, r8
 80089d0:	106d      	asrs	r5, r5, #1
 80089d2:	d00b      	beq.n	80089ec <__pow5mult+0xa0>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	b938      	cbnz	r0, 80089e8 <__pow5mult+0x9c>
 80089d8:	4622      	mov	r2, r4
 80089da:	4621      	mov	r1, r4
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ff0b 	bl	80087f8 <__multiply>
 80089e2:	6020      	str	r0, [r4, #0]
 80089e4:	f8c0 9000 	str.w	r9, [r0]
 80089e8:	4604      	mov	r4, r0
 80089ea:	e7e4      	b.n	80089b6 <__pow5mult+0x6a>
 80089ec:	4630      	mov	r0, r6
 80089ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f2:	bf00      	nop
 80089f4:	08009f44 	.word	0x08009f44
 80089f8:	08009e69 	.word	0x08009e69
 80089fc:	08009ee9 	.word	0x08009ee9

08008a00 <__lshift>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	6849      	ldr	r1, [r1, #4]
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	4607      	mov	r7, r0
 8008a12:	4691      	mov	r9, r2
 8008a14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a18:	f108 0601 	add.w	r6, r8, #1
 8008a1c:	42b3      	cmp	r3, r6
 8008a1e:	db0b      	blt.n	8008a38 <__lshift+0x38>
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff fddf 	bl	80085e4 <_Balloc>
 8008a26:	4605      	mov	r5, r0
 8008a28:	b948      	cbnz	r0, 8008a3e <__lshift+0x3e>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b28      	ldr	r3, [pc, #160]	@ (8008ad0 <__lshift+0xd0>)
 8008a2e:	4829      	ldr	r0, [pc, #164]	@ (8008ad4 <__lshift+0xd4>)
 8008a30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a34:	f000 fd4c 	bl	80094d0 <__assert_func>
 8008a38:	3101      	adds	r1, #1
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	e7ee      	b.n	8008a1c <__lshift+0x1c>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f100 0114 	add.w	r1, r0, #20
 8008a44:	f100 0210 	add.w	r2, r0, #16
 8008a48:	4618      	mov	r0, r3
 8008a4a:	4553      	cmp	r3, sl
 8008a4c:	db33      	blt.n	8008ab6 <__lshift+0xb6>
 8008a4e:	6920      	ldr	r0, [r4, #16]
 8008a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a54:	f104 0314 	add.w	r3, r4, #20
 8008a58:	f019 091f 	ands.w	r9, r9, #31
 8008a5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a64:	d02b      	beq.n	8008abe <__lshift+0xbe>
 8008a66:	f1c9 0e20 	rsb	lr, r9, #32
 8008a6a:	468a      	mov	sl, r1
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	fa00 f009 	lsl.w	r0, r0, r9
 8008a74:	4310      	orrs	r0, r2
 8008a76:	f84a 0b04 	str.w	r0, [sl], #4
 8008a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7e:	459c      	cmp	ip, r3
 8008a80:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a84:	d8f3      	bhi.n	8008a6e <__lshift+0x6e>
 8008a86:	ebac 0304 	sub.w	r3, ip, r4
 8008a8a:	3b15      	subs	r3, #21
 8008a8c:	f023 0303 	bic.w	r3, r3, #3
 8008a90:	3304      	adds	r3, #4
 8008a92:	f104 0015 	add.w	r0, r4, #21
 8008a96:	4584      	cmp	ip, r0
 8008a98:	bf38      	it	cc
 8008a9a:	2304      	movcc	r3, #4
 8008a9c:	50ca      	str	r2, [r1, r3]
 8008a9e:	b10a      	cbz	r2, 8008aa4 <__lshift+0xa4>
 8008aa0:	f108 0602 	add.w	r6, r8, #2
 8008aa4:	3e01      	subs	r6, #1
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	612e      	str	r6, [r5, #16]
 8008aaa:	4621      	mov	r1, r4
 8008aac:	f7ff fdda 	bl	8008664 <_Bfree>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aba:	3301      	adds	r3, #1
 8008abc:	e7c5      	b.n	8008a4a <__lshift+0x4a>
 8008abe:	3904      	subs	r1, #4
 8008ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ac8:	459c      	cmp	ip, r3
 8008aca:	d8f9      	bhi.n	8008ac0 <__lshift+0xc0>
 8008acc:	e7ea      	b.n	8008aa4 <__lshift+0xa4>
 8008ace:	bf00      	nop
 8008ad0:	08009ed8 	.word	0x08009ed8
 8008ad4:	08009ee9 	.word	0x08009ee9

08008ad8 <__mcmp>:
 8008ad8:	690a      	ldr	r2, [r1, #16]
 8008ada:	4603      	mov	r3, r0
 8008adc:	6900      	ldr	r0, [r0, #16]
 8008ade:	1a80      	subs	r0, r0, r2
 8008ae0:	b530      	push	{r4, r5, lr}
 8008ae2:	d10e      	bne.n	8008b02 <__mcmp+0x2a>
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	3114      	adds	r1, #20
 8008ae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008aec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008af0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008af4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008af8:	4295      	cmp	r5, r2
 8008afa:	d003      	beq.n	8008b04 <__mcmp+0x2c>
 8008afc:	d205      	bcs.n	8008b0a <__mcmp+0x32>
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295
 8008b02:	bd30      	pop	{r4, r5, pc}
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d3f3      	bcc.n	8008af0 <__mcmp+0x18>
 8008b08:	e7fb      	b.n	8008b02 <__mcmp+0x2a>
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	e7f9      	b.n	8008b02 <__mcmp+0x2a>
	...

08008b10 <__mdiff>:
 8008b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	4689      	mov	r9, r1
 8008b16:	4606      	mov	r6, r0
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	f7ff ffdb 	bl	8008ad8 <__mcmp>
 8008b22:	1e05      	subs	r5, r0, #0
 8008b24:	d112      	bne.n	8008b4c <__mdiff+0x3c>
 8008b26:	4629      	mov	r1, r5
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff fd5b 	bl	80085e4 <_Balloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <__mdiff+0x2e>
 8008b32:	4b3f      	ldr	r3, [pc, #252]	@ (8008c30 <__mdiff+0x120>)
 8008b34:	f240 2137 	movw	r1, #567	@ 0x237
 8008b38:	483e      	ldr	r0, [pc, #248]	@ (8008c34 <__mdiff+0x124>)
 8008b3a:	f000 fcc9 	bl	80094d0 <__assert_func>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b44:	4610      	mov	r0, r2
 8008b46:	b003      	add	sp, #12
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	bfbc      	itt	lt
 8008b4e:	464b      	movlt	r3, r9
 8008b50:	46a1      	movlt	r9, r4
 8008b52:	4630      	mov	r0, r6
 8008b54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b58:	bfba      	itte	lt
 8008b5a:	461c      	movlt	r4, r3
 8008b5c:	2501      	movlt	r5, #1
 8008b5e:	2500      	movge	r5, #0
 8008b60:	f7ff fd40 	bl	80085e4 <_Balloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	b918      	cbnz	r0, 8008b70 <__mdiff+0x60>
 8008b68:	4b31      	ldr	r3, [pc, #196]	@ (8008c30 <__mdiff+0x120>)
 8008b6a:	f240 2145 	movw	r1, #581	@ 0x245
 8008b6e:	e7e3      	b.n	8008b38 <__mdiff+0x28>
 8008b70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b74:	6926      	ldr	r6, [r4, #16]
 8008b76:	60c5      	str	r5, [r0, #12]
 8008b78:	f109 0310 	add.w	r3, r9, #16
 8008b7c:	f109 0514 	add.w	r5, r9, #20
 8008b80:	f104 0e14 	add.w	lr, r4, #20
 8008b84:	f100 0b14 	add.w	fp, r0, #20
 8008b88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	46d9      	mov	r9, fp
 8008b94:	f04f 0c00 	mov.w	ip, #0
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	fa1f f38a 	uxth.w	r3, sl
 8008ba8:	4619      	mov	r1, r3
 8008baa:	b283      	uxth	r3, r0
 8008bac:	1acb      	subs	r3, r1, r3
 8008bae:	0c00      	lsrs	r0, r0, #16
 8008bb0:	4463      	add	r3, ip
 8008bb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bc0:	4576      	cmp	r6, lr
 8008bc2:	f849 3b04 	str.w	r3, [r9], #4
 8008bc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bca:	d8e5      	bhi.n	8008b98 <__mdiff+0x88>
 8008bcc:	1b33      	subs	r3, r6, r4
 8008bce:	3b15      	subs	r3, #21
 8008bd0:	f023 0303 	bic.w	r3, r3, #3
 8008bd4:	3415      	adds	r4, #21
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	42a6      	cmp	r6, r4
 8008bda:	bf38      	it	cc
 8008bdc:	2304      	movcc	r3, #4
 8008bde:	441d      	add	r5, r3
 8008be0:	445b      	add	r3, fp
 8008be2:	461e      	mov	r6, r3
 8008be4:	462c      	mov	r4, r5
 8008be6:	4544      	cmp	r4, r8
 8008be8:	d30e      	bcc.n	8008c08 <__mdiff+0xf8>
 8008bea:	f108 0103 	add.w	r1, r8, #3
 8008bee:	1b49      	subs	r1, r1, r5
 8008bf0:	f021 0103 	bic.w	r1, r1, #3
 8008bf4:	3d03      	subs	r5, #3
 8008bf6:	45a8      	cmp	r8, r5
 8008bf8:	bf38      	it	cc
 8008bfa:	2100      	movcc	r1, #0
 8008bfc:	440b      	add	r3, r1
 8008bfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c02:	b191      	cbz	r1, 8008c2a <__mdiff+0x11a>
 8008c04:	6117      	str	r7, [r2, #16]
 8008c06:	e79d      	b.n	8008b44 <__mdiff+0x34>
 8008c08:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c0c:	46e6      	mov	lr, ip
 8008c0e:	0c08      	lsrs	r0, r1, #16
 8008c10:	fa1c fc81 	uxtah	ip, ip, r1
 8008c14:	4471      	add	r1, lr
 8008c16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c1a:	b289      	uxth	r1, r1
 8008c1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c20:	f846 1b04 	str.w	r1, [r6], #4
 8008c24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c28:	e7dd      	b.n	8008be6 <__mdiff+0xd6>
 8008c2a:	3f01      	subs	r7, #1
 8008c2c:	e7e7      	b.n	8008bfe <__mdiff+0xee>
 8008c2e:	bf00      	nop
 8008c30:	08009ed8 	.word	0x08009ed8
 8008c34:	08009ee9 	.word	0x08009ee9

08008c38 <__d2b>:
 8008c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	2101      	movs	r1, #1
 8008c40:	ec59 8b10 	vmov	r8, r9, d0
 8008c44:	4616      	mov	r6, r2
 8008c46:	f7ff fccd 	bl	80085e4 <_Balloc>
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	b930      	cbnz	r0, 8008c5c <__d2b+0x24>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <__d2b+0xa8>)
 8008c52:	4824      	ldr	r0, [pc, #144]	@ (8008ce4 <__d2b+0xac>)
 8008c54:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c58:	f000 fc3a 	bl	80094d0 <__assert_func>
 8008c5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c64:	b10d      	cbz	r5, 8008c6a <__d2b+0x32>
 8008c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c70:	d023      	beq.n	8008cba <__d2b+0x82>
 8008c72:	4668      	mov	r0, sp
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	f7ff fd7c 	bl	8008772 <__lo0bits>
 8008c7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c7e:	b1d0      	cbz	r0, 8008cb6 <__d2b+0x7e>
 8008c80:	f1c0 0320 	rsb	r3, r0, #32
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	40c2      	lsrs	r2, r0
 8008c8c:	6163      	str	r3, [r4, #20]
 8008c8e:	9201      	str	r2, [sp, #4]
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	61a3      	str	r3, [r4, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	bf0c      	ite	eq
 8008c98:	2201      	moveq	r2, #1
 8008c9a:	2202      	movne	r2, #2
 8008c9c:	6122      	str	r2, [r4, #16]
 8008c9e:	b1a5      	cbz	r5, 8008cca <__d2b+0x92>
 8008ca0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ca4:	4405      	add	r5, r0
 8008ca6:	603d      	str	r5, [r7, #0]
 8008ca8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cac:	6030      	str	r0, [r6, #0]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	b003      	add	sp, #12
 8008cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb6:	6161      	str	r1, [r4, #20]
 8008cb8:	e7ea      	b.n	8008c90 <__d2b+0x58>
 8008cba:	a801      	add	r0, sp, #4
 8008cbc:	f7ff fd59 	bl	8008772 <__lo0bits>
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	6163      	str	r3, [r4, #20]
 8008cc4:	3020      	adds	r0, #32
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	e7e8      	b.n	8008c9c <__d2b+0x64>
 8008cca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cd2:	6038      	str	r0, [r7, #0]
 8008cd4:	6918      	ldr	r0, [r3, #16]
 8008cd6:	f7ff fd2d 	bl	8008734 <__hi0bits>
 8008cda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cde:	e7e5      	b.n	8008cac <__d2b+0x74>
 8008ce0:	08009ed8 	.word	0x08009ed8
 8008ce4:	08009ee9 	.word	0x08009ee9

08008ce8 <__ssputs_r>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	688e      	ldr	r6, [r1, #8]
 8008cee:	461f      	mov	r7, r3
 8008cf0:	42be      	cmp	r6, r7
 8008cf2:	680b      	ldr	r3, [r1, #0]
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	4690      	mov	r8, r2
 8008cfa:	d82d      	bhi.n	8008d58 <__ssputs_r+0x70>
 8008cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d04:	d026      	beq.n	8008d54 <__ssputs_r+0x6c>
 8008d06:	6965      	ldr	r5, [r4, #20]
 8008d08:	6909      	ldr	r1, [r1, #16]
 8008d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d0e:	eba3 0901 	sub.w	r9, r3, r1
 8008d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d16:	1c7b      	adds	r3, r7, #1
 8008d18:	444b      	add	r3, r9
 8008d1a:	106d      	asrs	r5, r5, #1
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	bf38      	it	cc
 8008d20:	461d      	movcc	r5, r3
 8008d22:	0553      	lsls	r3, r2, #21
 8008d24:	d527      	bpl.n	8008d76 <__ssputs_r+0x8e>
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7fd fef8 	bl	8006b1c <_malloc_r>
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	b360      	cbz	r0, 8008d8a <__ssputs_r+0xa2>
 8008d30:	6921      	ldr	r1, [r4, #16]
 8008d32:	464a      	mov	r2, r9
 8008d34:	f7fe fdb1 	bl	800789a <memcpy>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	6126      	str	r6, [r4, #16]
 8008d46:	6165      	str	r5, [r4, #20]
 8008d48:	444e      	add	r6, r9
 8008d4a:	eba5 0509 	sub.w	r5, r5, r9
 8008d4e:	6026      	str	r6, [r4, #0]
 8008d50:	60a5      	str	r5, [r4, #8]
 8008d52:	463e      	mov	r6, r7
 8008d54:	42be      	cmp	r6, r7
 8008d56:	d900      	bls.n	8008d5a <__ssputs_r+0x72>
 8008d58:	463e      	mov	r6, r7
 8008d5a:	6820      	ldr	r0, [r4, #0]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4641      	mov	r1, r8
 8008d60:	f000 fb9c 	bl	800949c <memmove>
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	1b9b      	subs	r3, r3, r6
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4433      	add	r3, r6
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	462a      	mov	r2, r5
 8008d78:	f000 fbee 	bl	8009558 <_realloc_r>
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d1e0      	bne.n	8008d44 <__ssputs_r+0x5c>
 8008d82:	6921      	ldr	r1, [r4, #16]
 8008d84:	4650      	mov	r0, sl
 8008d86:	f7ff fbe3 	bl	8008550 <_free_r>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	f8ca 3000 	str.w	r3, [sl]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e7e9      	b.n	8008d72 <__ssputs_r+0x8a>
	...

08008da0 <_svfiprintf_r>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	4698      	mov	r8, r3
 8008da6:	898b      	ldrh	r3, [r1, #12]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	b09d      	sub	sp, #116	@ 0x74
 8008dac:	4607      	mov	r7, r0
 8008dae:	460d      	mov	r5, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	d510      	bpl.n	8008dd6 <_svfiprintf_r+0x36>
 8008db4:	690b      	ldr	r3, [r1, #16]
 8008db6:	b973      	cbnz	r3, 8008dd6 <_svfiprintf_r+0x36>
 8008db8:	2140      	movs	r1, #64	@ 0x40
 8008dba:	f7fd feaf 	bl	8006b1c <_malloc_r>
 8008dbe:	6028      	str	r0, [r5, #0]
 8008dc0:	6128      	str	r0, [r5, #16]
 8008dc2:	b930      	cbnz	r0, 8008dd2 <_svfiprintf_r+0x32>
 8008dc4:	230c      	movs	r3, #12
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	b01d      	add	sp, #116	@ 0x74
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	2340      	movs	r3, #64	@ 0x40
 8008dd4:	616b      	str	r3, [r5, #20]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dda:	2320      	movs	r3, #32
 8008ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de4:	2330      	movs	r3, #48	@ 0x30
 8008de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f84 <_svfiprintf_r+0x1e4>
 8008dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dee:	f04f 0901 	mov.w	r9, #1
 8008df2:	4623      	mov	r3, r4
 8008df4:	469a      	mov	sl, r3
 8008df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfa:	b10a      	cbz	r2, 8008e00 <_svfiprintf_r+0x60>
 8008dfc:	2a25      	cmp	r2, #37	@ 0x25
 8008dfe:	d1f9      	bne.n	8008df4 <_svfiprintf_r+0x54>
 8008e00:	ebba 0b04 	subs.w	fp, sl, r4
 8008e04:	d00b      	beq.n	8008e1e <_svfiprintf_r+0x7e>
 8008e06:	465b      	mov	r3, fp
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ff6b 	bl	8008ce8 <__ssputs_r>
 8008e12:	3001      	adds	r0, #1
 8008e14:	f000 80a7 	beq.w	8008f66 <_svfiprintf_r+0x1c6>
 8008e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1a:	445a      	add	r2, fp
 8008e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 809f 	beq.w	8008f66 <_svfiprintf_r+0x1c6>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e32:	f10a 0a01 	add.w	sl, sl, #1
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	9307      	str	r3, [sp, #28]
 8008e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e40:	4654      	mov	r4, sl
 8008e42:	2205      	movs	r2, #5
 8008e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e48:	484e      	ldr	r0, [pc, #312]	@ (8008f84 <_svfiprintf_r+0x1e4>)
 8008e4a:	f7f7 f9d1 	bl	80001f0 <memchr>
 8008e4e:	9a04      	ldr	r2, [sp, #16]
 8008e50:	b9d8      	cbnz	r0, 8008e8a <_svfiprintf_r+0xea>
 8008e52:	06d0      	lsls	r0, r2, #27
 8008e54:	bf44      	itt	mi
 8008e56:	2320      	movmi	r3, #32
 8008e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5c:	0711      	lsls	r1, r2, #28
 8008e5e:	bf44      	itt	mi
 8008e60:	232b      	movmi	r3, #43	@ 0x2b
 8008e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e66:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6c:	d015      	beq.n	8008e9a <_svfiprintf_r+0xfa>
 8008e6e:	9a07      	ldr	r2, [sp, #28]
 8008e70:	4654      	mov	r4, sl
 8008e72:	2000      	movs	r0, #0
 8008e74:	f04f 0c0a 	mov.w	ip, #10
 8008e78:	4621      	mov	r1, r4
 8008e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7e:	3b30      	subs	r3, #48	@ 0x30
 8008e80:	2b09      	cmp	r3, #9
 8008e82:	d94b      	bls.n	8008f1c <_svfiprintf_r+0x17c>
 8008e84:	b1b0      	cbz	r0, 8008eb4 <_svfiprintf_r+0x114>
 8008e86:	9207      	str	r2, [sp, #28]
 8008e88:	e014      	b.n	8008eb4 <_svfiprintf_r+0x114>
 8008e8a:	eba0 0308 	sub.w	r3, r0, r8
 8008e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	46a2      	mov	sl, r4
 8008e98:	e7d2      	b.n	8008e40 <_svfiprintf_r+0xa0>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	1d19      	adds	r1, r3, #4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	9103      	str	r1, [sp, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bfbb      	ittet	lt
 8008ea6:	425b      	neglt	r3, r3
 8008ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8008eac:	9307      	strge	r3, [sp, #28]
 8008eae:	9307      	strlt	r3, [sp, #28]
 8008eb0:	bfb8      	it	lt
 8008eb2:	9204      	strlt	r2, [sp, #16]
 8008eb4:	7823      	ldrb	r3, [r4, #0]
 8008eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eb8:	d10a      	bne.n	8008ed0 <_svfiprintf_r+0x130>
 8008eba:	7863      	ldrb	r3, [r4, #1]
 8008ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ebe:	d132      	bne.n	8008f26 <_svfiprintf_r+0x186>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	9203      	str	r2, [sp, #12]
 8008ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ecc:	3402      	adds	r4, #2
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f94 <_svfiprintf_r+0x1f4>
 8008ed4:	7821      	ldrb	r1, [r4, #0]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	4650      	mov	r0, sl
 8008eda:	f7f7 f989 	bl	80001f0 <memchr>
 8008ede:	b138      	cbz	r0, 8008ef0 <_svfiprintf_r+0x150>
 8008ee0:	9b04      	ldr	r3, [sp, #16]
 8008ee2:	eba0 000a 	sub.w	r0, r0, sl
 8008ee6:	2240      	movs	r2, #64	@ 0x40
 8008ee8:	4082      	lsls	r2, r0
 8008eea:	4313      	orrs	r3, r2
 8008eec:	3401      	adds	r4, #1
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef4:	4824      	ldr	r0, [pc, #144]	@ (8008f88 <_svfiprintf_r+0x1e8>)
 8008ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008efa:	2206      	movs	r2, #6
 8008efc:	f7f7 f978 	bl	80001f0 <memchr>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d036      	beq.n	8008f72 <_svfiprintf_r+0x1d2>
 8008f04:	4b21      	ldr	r3, [pc, #132]	@ (8008f8c <_svfiprintf_r+0x1ec>)
 8008f06:	bb1b      	cbnz	r3, 8008f50 <_svfiprintf_r+0x1b0>
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	3307      	adds	r3, #7
 8008f0c:	f023 0307 	bic.w	r3, r3, #7
 8008f10:	3308      	adds	r3, #8
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f16:	4433      	add	r3, r6
 8008f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1a:	e76a      	b.n	8008df2 <_svfiprintf_r+0x52>
 8008f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f20:	460c      	mov	r4, r1
 8008f22:	2001      	movs	r0, #1
 8008f24:	e7a8      	b.n	8008e78 <_svfiprintf_r+0xd8>
 8008f26:	2300      	movs	r3, #0
 8008f28:	3401      	adds	r4, #1
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f04f 0c0a 	mov.w	ip, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f38:	3a30      	subs	r2, #48	@ 0x30
 8008f3a:	2a09      	cmp	r2, #9
 8008f3c:	d903      	bls.n	8008f46 <_svfiprintf_r+0x1a6>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0c6      	beq.n	8008ed0 <_svfiprintf_r+0x130>
 8008f42:	9105      	str	r1, [sp, #20]
 8008f44:	e7c4      	b.n	8008ed0 <_svfiprintf_r+0x130>
 8008f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e7f0      	b.n	8008f32 <_svfiprintf_r+0x192>
 8008f50:	ab03      	add	r3, sp, #12
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	462a      	mov	r2, r5
 8008f56:	4b0e      	ldr	r3, [pc, #56]	@ (8008f90 <_svfiprintf_r+0x1f0>)
 8008f58:	a904      	add	r1, sp, #16
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f7fd ff0a 	bl	8006d74 <_printf_float>
 8008f60:	1c42      	adds	r2, r0, #1
 8008f62:	4606      	mov	r6, r0
 8008f64:	d1d6      	bne.n	8008f14 <_svfiprintf_r+0x174>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	065b      	lsls	r3, r3, #25
 8008f6a:	f53f af2d 	bmi.w	8008dc8 <_svfiprintf_r+0x28>
 8008f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f70:	e72c      	b.n	8008dcc <_svfiprintf_r+0x2c>
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <_svfiprintf_r+0x1f0>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7fe f991 	bl	80072a4 <_printf_i>
 8008f82:	e7ed      	b.n	8008f60 <_svfiprintf_r+0x1c0>
 8008f84:	0800a040 	.word	0x0800a040
 8008f88:	0800a04a 	.word	0x0800a04a
 8008f8c:	08006d75 	.word	0x08006d75
 8008f90:	08008ce9 	.word	0x08008ce9
 8008f94:	0800a046 	.word	0x0800a046

08008f98 <__sfputc_r>:
 8008f98:	6893      	ldr	r3, [r2, #8]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	b410      	push	{r4}
 8008fa0:	6093      	str	r3, [r2, #8]
 8008fa2:	da08      	bge.n	8008fb6 <__sfputc_r+0x1e>
 8008fa4:	6994      	ldr	r4, [r2, #24]
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	db01      	blt.n	8008fae <__sfputc_r+0x16>
 8008faa:	290a      	cmp	r1, #10
 8008fac:	d103      	bne.n	8008fb6 <__sfputc_r+0x1e>
 8008fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb2:	f000 b9df 	b.w	8009374 <__swbuf_r>
 8008fb6:	6813      	ldr	r3, [r2, #0]
 8008fb8:	1c58      	adds	r0, r3, #1
 8008fba:	6010      	str	r0, [r2, #0]
 8008fbc:	7019      	strb	r1, [r3, #0]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <__sfputs_r>:
 8008fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc8:	4606      	mov	r6, r0
 8008fca:	460f      	mov	r7, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	18d5      	adds	r5, r2, r3
 8008fd0:	42ac      	cmp	r4, r5
 8008fd2:	d101      	bne.n	8008fd8 <__sfputs_r+0x12>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e007      	b.n	8008fe8 <__sfputs_r+0x22>
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	463a      	mov	r2, r7
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7ff ffda 	bl	8008f98 <__sfputc_r>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d1f3      	bne.n	8008fd0 <__sfputs_r+0xa>
 8008fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fec <_vfiprintf_r>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	b09d      	sub	sp, #116	@ 0x74
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	4698      	mov	r8, r3
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	b118      	cbz	r0, 8009004 <_vfiprintf_r+0x18>
 8008ffc:	6a03      	ldr	r3, [r0, #32]
 8008ffe:	b90b      	cbnz	r3, 8009004 <_vfiprintf_r+0x18>
 8009000:	f7fe fafc 	bl	80075fc <__sinit>
 8009004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x2a>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x2a>
 8009010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009012:	f7fe fc40 	bl	8007896 <__retarget_lock_acquire_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	071b      	lsls	r3, r3, #28
 800901a:	d501      	bpl.n	8009020 <_vfiprintf_r+0x34>
 800901c:	692b      	ldr	r3, [r5, #16]
 800901e:	b99b      	cbnz	r3, 8009048 <_vfiprintf_r+0x5c>
 8009020:	4629      	mov	r1, r5
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f9e4 	bl	80093f0 <__swsetup_r>
 8009028:	b170      	cbz	r0, 8009048 <_vfiprintf_r+0x5c>
 800902a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800902c:	07dc      	lsls	r4, r3, #31
 800902e:	d504      	bpl.n	800903a <_vfiprintf_r+0x4e>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b01d      	add	sp, #116	@ 0x74
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	0598      	lsls	r0, r3, #22
 800903e:	d4f7      	bmi.n	8009030 <_vfiprintf_r+0x44>
 8009040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009042:	f7fe fc29 	bl	8007898 <__retarget_lock_release_recursive>
 8009046:	e7f3      	b.n	8009030 <_vfiprintf_r+0x44>
 8009048:	2300      	movs	r3, #0
 800904a:	9309      	str	r3, [sp, #36]	@ 0x24
 800904c:	2320      	movs	r3, #32
 800904e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009052:	f8cd 800c 	str.w	r8, [sp, #12]
 8009056:	2330      	movs	r3, #48	@ 0x30
 8009058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009208 <_vfiprintf_r+0x21c>
 800905c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009060:	f04f 0901 	mov.w	r9, #1
 8009064:	4623      	mov	r3, r4
 8009066:	469a      	mov	sl, r3
 8009068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906c:	b10a      	cbz	r2, 8009072 <_vfiprintf_r+0x86>
 800906e:	2a25      	cmp	r2, #37	@ 0x25
 8009070:	d1f9      	bne.n	8009066 <_vfiprintf_r+0x7a>
 8009072:	ebba 0b04 	subs.w	fp, sl, r4
 8009076:	d00b      	beq.n	8009090 <_vfiprintf_r+0xa4>
 8009078:	465b      	mov	r3, fp
 800907a:	4622      	mov	r2, r4
 800907c:	4629      	mov	r1, r5
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ffa1 	bl	8008fc6 <__sfputs_r>
 8009084:	3001      	adds	r0, #1
 8009086:	f000 80a7 	beq.w	80091d8 <_vfiprintf_r+0x1ec>
 800908a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800908c:	445a      	add	r2, fp
 800908e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009090:	f89a 3000 	ldrb.w	r3, [sl]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 809f 	beq.w	80091d8 <_vfiprintf_r+0x1ec>
 800909a:	2300      	movs	r3, #0
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a4:	f10a 0a01 	add.w	sl, sl, #1
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80090b2:	4654      	mov	r4, sl
 80090b4:	2205      	movs	r2, #5
 80090b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ba:	4853      	ldr	r0, [pc, #332]	@ (8009208 <_vfiprintf_r+0x21c>)
 80090bc:	f7f7 f898 	bl	80001f0 <memchr>
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	b9d8      	cbnz	r0, 80090fc <_vfiprintf_r+0x110>
 80090c4:	06d1      	lsls	r1, r2, #27
 80090c6:	bf44      	itt	mi
 80090c8:	2320      	movmi	r3, #32
 80090ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ce:	0713      	lsls	r3, r2, #28
 80090d0:	bf44      	itt	mi
 80090d2:	232b      	movmi	r3, #43	@ 0x2b
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d8:	f89a 3000 	ldrb.w	r3, [sl]
 80090dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80090de:	d015      	beq.n	800910c <_vfiprintf_r+0x120>
 80090e0:	9a07      	ldr	r2, [sp, #28]
 80090e2:	4654      	mov	r4, sl
 80090e4:	2000      	movs	r0, #0
 80090e6:	f04f 0c0a 	mov.w	ip, #10
 80090ea:	4621      	mov	r1, r4
 80090ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f0:	3b30      	subs	r3, #48	@ 0x30
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	d94b      	bls.n	800918e <_vfiprintf_r+0x1a2>
 80090f6:	b1b0      	cbz	r0, 8009126 <_vfiprintf_r+0x13a>
 80090f8:	9207      	str	r2, [sp, #28]
 80090fa:	e014      	b.n	8009126 <_vfiprintf_r+0x13a>
 80090fc:	eba0 0308 	sub.w	r3, r0, r8
 8009100:	fa09 f303 	lsl.w	r3, r9, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	46a2      	mov	sl, r4
 800910a:	e7d2      	b.n	80090b2 <_vfiprintf_r+0xc6>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d19      	adds	r1, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9103      	str	r1, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfbb      	ittet	lt
 8009118:	425b      	neglt	r3, r3
 800911a:	f042 0202 	orrlt.w	r2, r2, #2
 800911e:	9307      	strge	r3, [sp, #28]
 8009120:	9307      	strlt	r3, [sp, #28]
 8009122:	bfb8      	it	lt
 8009124:	9204      	strlt	r2, [sp, #16]
 8009126:	7823      	ldrb	r3, [r4, #0]
 8009128:	2b2e      	cmp	r3, #46	@ 0x2e
 800912a:	d10a      	bne.n	8009142 <_vfiprintf_r+0x156>
 800912c:	7863      	ldrb	r3, [r4, #1]
 800912e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009130:	d132      	bne.n	8009198 <_vfiprintf_r+0x1ac>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d1a      	adds	r2, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9203      	str	r2, [sp, #12]
 800913a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800913e:	3402      	adds	r4, #2
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009218 <_vfiprintf_r+0x22c>
 8009146:	7821      	ldrb	r1, [r4, #0]
 8009148:	2203      	movs	r2, #3
 800914a:	4650      	mov	r0, sl
 800914c:	f7f7 f850 	bl	80001f0 <memchr>
 8009150:	b138      	cbz	r0, 8009162 <_vfiprintf_r+0x176>
 8009152:	9b04      	ldr	r3, [sp, #16]
 8009154:	eba0 000a 	sub.w	r0, r0, sl
 8009158:	2240      	movs	r2, #64	@ 0x40
 800915a:	4082      	lsls	r2, r0
 800915c:	4313      	orrs	r3, r2
 800915e:	3401      	adds	r4, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009166:	4829      	ldr	r0, [pc, #164]	@ (800920c <_vfiprintf_r+0x220>)
 8009168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800916c:	2206      	movs	r2, #6
 800916e:	f7f7 f83f 	bl	80001f0 <memchr>
 8009172:	2800      	cmp	r0, #0
 8009174:	d03f      	beq.n	80091f6 <_vfiprintf_r+0x20a>
 8009176:	4b26      	ldr	r3, [pc, #152]	@ (8009210 <_vfiprintf_r+0x224>)
 8009178:	bb1b      	cbnz	r3, 80091c2 <_vfiprintf_r+0x1d6>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	3307      	adds	r3, #7
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	3308      	adds	r3, #8
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009188:	443b      	add	r3, r7
 800918a:	9309      	str	r3, [sp, #36]	@ 0x24
 800918c:	e76a      	b.n	8009064 <_vfiprintf_r+0x78>
 800918e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009192:	460c      	mov	r4, r1
 8009194:	2001      	movs	r0, #1
 8009196:	e7a8      	b.n	80090ea <_vfiprintf_r+0xfe>
 8009198:	2300      	movs	r3, #0
 800919a:	3401      	adds	r4, #1
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	4619      	mov	r1, r3
 80091a0:	f04f 0c0a 	mov.w	ip, #10
 80091a4:	4620      	mov	r0, r4
 80091a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091aa:	3a30      	subs	r2, #48	@ 0x30
 80091ac:	2a09      	cmp	r2, #9
 80091ae:	d903      	bls.n	80091b8 <_vfiprintf_r+0x1cc>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0c6      	beq.n	8009142 <_vfiprintf_r+0x156>
 80091b4:	9105      	str	r1, [sp, #20]
 80091b6:	e7c4      	b.n	8009142 <_vfiprintf_r+0x156>
 80091b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091bc:	4604      	mov	r4, r0
 80091be:	2301      	movs	r3, #1
 80091c0:	e7f0      	b.n	80091a4 <_vfiprintf_r+0x1b8>
 80091c2:	ab03      	add	r3, sp, #12
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	462a      	mov	r2, r5
 80091c8:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <_vfiprintf_r+0x228>)
 80091ca:	a904      	add	r1, sp, #16
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7fd fdd1 	bl	8006d74 <_printf_float>
 80091d2:	4607      	mov	r7, r0
 80091d4:	1c78      	adds	r0, r7, #1
 80091d6:	d1d6      	bne.n	8009186 <_vfiprintf_r+0x19a>
 80091d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091da:	07d9      	lsls	r1, r3, #31
 80091dc:	d405      	bmi.n	80091ea <_vfiprintf_r+0x1fe>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	059a      	lsls	r2, r3, #22
 80091e2:	d402      	bmi.n	80091ea <_vfiprintf_r+0x1fe>
 80091e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091e6:	f7fe fb57 	bl	8007898 <__retarget_lock_release_recursive>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	065b      	lsls	r3, r3, #25
 80091ee:	f53f af1f 	bmi.w	8009030 <_vfiprintf_r+0x44>
 80091f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091f4:	e71e      	b.n	8009034 <_vfiprintf_r+0x48>
 80091f6:	ab03      	add	r3, sp, #12
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	462a      	mov	r2, r5
 80091fc:	4b05      	ldr	r3, [pc, #20]	@ (8009214 <_vfiprintf_r+0x228>)
 80091fe:	a904      	add	r1, sp, #16
 8009200:	4630      	mov	r0, r6
 8009202:	f7fe f84f 	bl	80072a4 <_printf_i>
 8009206:	e7e4      	b.n	80091d2 <_vfiprintf_r+0x1e6>
 8009208:	0800a040 	.word	0x0800a040
 800920c:	0800a04a 	.word	0x0800a04a
 8009210:	08006d75 	.word	0x08006d75
 8009214:	08008fc7 	.word	0x08008fc7
 8009218:	0800a046 	.word	0x0800a046

0800921c <__sflush_r>:
 800921c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	0716      	lsls	r6, r2, #28
 8009226:	4605      	mov	r5, r0
 8009228:	460c      	mov	r4, r1
 800922a:	d454      	bmi.n	80092d6 <__sflush_r+0xba>
 800922c:	684b      	ldr	r3, [r1, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dc02      	bgt.n	8009238 <__sflush_r+0x1c>
 8009232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	dd48      	ble.n	80092ca <__sflush_r+0xae>
 8009238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800923a:	2e00      	cmp	r6, #0
 800923c:	d045      	beq.n	80092ca <__sflush_r+0xae>
 800923e:	2300      	movs	r3, #0
 8009240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009244:	682f      	ldr	r7, [r5, #0]
 8009246:	6a21      	ldr	r1, [r4, #32]
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	d030      	beq.n	80092ae <__sflush_r+0x92>
 800924c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	0759      	lsls	r1, r3, #29
 8009252:	d505      	bpl.n	8009260 <__sflush_r+0x44>
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800925a:	b10b      	cbz	r3, 8009260 <__sflush_r+0x44>
 800925c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	2300      	movs	r3, #0
 8009262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009264:	6a21      	ldr	r1, [r4, #32]
 8009266:	4628      	mov	r0, r5
 8009268:	47b0      	blx	r6
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	d106      	bne.n	800927e <__sflush_r+0x62>
 8009270:	6829      	ldr	r1, [r5, #0]
 8009272:	291d      	cmp	r1, #29
 8009274:	d82b      	bhi.n	80092ce <__sflush_r+0xb2>
 8009276:	4a2a      	ldr	r2, [pc, #168]	@ (8009320 <__sflush_r+0x104>)
 8009278:	410a      	asrs	r2, r1
 800927a:	07d6      	lsls	r6, r2, #31
 800927c:	d427      	bmi.n	80092ce <__sflush_r+0xb2>
 800927e:	2200      	movs	r2, #0
 8009280:	6062      	str	r2, [r4, #4]
 8009282:	04d9      	lsls	r1, r3, #19
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	d504      	bpl.n	8009294 <__sflush_r+0x78>
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	d101      	bne.n	8009292 <__sflush_r+0x76>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b903      	cbnz	r3, 8009294 <__sflush_r+0x78>
 8009292:	6560      	str	r0, [r4, #84]	@ 0x54
 8009294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009296:	602f      	str	r7, [r5, #0]
 8009298:	b1b9      	cbz	r1, 80092ca <__sflush_r+0xae>
 800929a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800929e:	4299      	cmp	r1, r3
 80092a0:	d002      	beq.n	80092a8 <__sflush_r+0x8c>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7ff f954 	bl	8008550 <_free_r>
 80092a8:	2300      	movs	r3, #0
 80092aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ac:	e00d      	b.n	80092ca <__sflush_r+0xae>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	4602      	mov	r2, r0
 80092b6:	1c50      	adds	r0, r2, #1
 80092b8:	d1c9      	bne.n	800924e <__sflush_r+0x32>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0c6      	beq.n	800924e <__sflush_r+0x32>
 80092c0:	2b1d      	cmp	r3, #29
 80092c2:	d001      	beq.n	80092c8 <__sflush_r+0xac>
 80092c4:	2b16      	cmp	r3, #22
 80092c6:	d11e      	bne.n	8009306 <__sflush_r+0xea>
 80092c8:	602f      	str	r7, [r5, #0]
 80092ca:	2000      	movs	r0, #0
 80092cc:	e022      	b.n	8009314 <__sflush_r+0xf8>
 80092ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d2:	b21b      	sxth	r3, r3
 80092d4:	e01b      	b.n	800930e <__sflush_r+0xf2>
 80092d6:	690f      	ldr	r7, [r1, #16]
 80092d8:	2f00      	cmp	r7, #0
 80092da:	d0f6      	beq.n	80092ca <__sflush_r+0xae>
 80092dc:	0793      	lsls	r3, r2, #30
 80092de:	680e      	ldr	r6, [r1, #0]
 80092e0:	bf08      	it	eq
 80092e2:	694b      	ldreq	r3, [r1, #20]
 80092e4:	600f      	str	r7, [r1, #0]
 80092e6:	bf18      	it	ne
 80092e8:	2300      	movne	r3, #0
 80092ea:	eba6 0807 	sub.w	r8, r6, r7
 80092ee:	608b      	str	r3, [r1, #8]
 80092f0:	f1b8 0f00 	cmp.w	r8, #0
 80092f4:	dde9      	ble.n	80092ca <__sflush_r+0xae>
 80092f6:	6a21      	ldr	r1, [r4, #32]
 80092f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092fa:	4643      	mov	r3, r8
 80092fc:	463a      	mov	r2, r7
 80092fe:	4628      	mov	r0, r5
 8009300:	47b0      	blx	r6
 8009302:	2800      	cmp	r0, #0
 8009304:	dc08      	bgt.n	8009318 <__sflush_r+0xfc>
 8009306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	4407      	add	r7, r0
 800931a:	eba8 0800 	sub.w	r8, r8, r0
 800931e:	e7e7      	b.n	80092f0 <__sflush_r+0xd4>
 8009320:	dfbffffe 	.word	0xdfbffffe

08009324 <_fflush_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b913      	cbnz	r3, 8009334 <_fflush_r+0x10>
 800932e:	2500      	movs	r5, #0
 8009330:	4628      	mov	r0, r5
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	b118      	cbz	r0, 800933e <_fflush_r+0x1a>
 8009336:	6a03      	ldr	r3, [r0, #32]
 8009338:	b90b      	cbnz	r3, 800933e <_fflush_r+0x1a>
 800933a:	f7fe f95f 	bl	80075fc <__sinit>
 800933e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0f3      	beq.n	800932e <_fflush_r+0xa>
 8009346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009348:	07d0      	lsls	r0, r2, #31
 800934a:	d404      	bmi.n	8009356 <_fflush_r+0x32>
 800934c:	0599      	lsls	r1, r3, #22
 800934e:	d402      	bmi.n	8009356 <_fflush_r+0x32>
 8009350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009352:	f7fe faa0 	bl	8007896 <__retarget_lock_acquire_recursive>
 8009356:	4628      	mov	r0, r5
 8009358:	4621      	mov	r1, r4
 800935a:	f7ff ff5f 	bl	800921c <__sflush_r>
 800935e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009360:	07da      	lsls	r2, r3, #31
 8009362:	4605      	mov	r5, r0
 8009364:	d4e4      	bmi.n	8009330 <_fflush_r+0xc>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	059b      	lsls	r3, r3, #22
 800936a:	d4e1      	bmi.n	8009330 <_fflush_r+0xc>
 800936c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936e:	f7fe fa93 	bl	8007898 <__retarget_lock_release_recursive>
 8009372:	e7dd      	b.n	8009330 <_fflush_r+0xc>

08009374 <__swbuf_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4614      	mov	r4, r2
 800937a:	4605      	mov	r5, r0
 800937c:	b118      	cbz	r0, 8009386 <__swbuf_r+0x12>
 800937e:	6a03      	ldr	r3, [r0, #32]
 8009380:	b90b      	cbnz	r3, 8009386 <__swbuf_r+0x12>
 8009382:	f7fe f93b 	bl	80075fc <__sinit>
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	071a      	lsls	r2, r3, #28
 800938e:	d501      	bpl.n	8009394 <__swbuf_r+0x20>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	b943      	cbnz	r3, 80093a6 <__swbuf_r+0x32>
 8009394:	4621      	mov	r1, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 f82a 	bl	80093f0 <__swsetup_r>
 800939c:	b118      	cbz	r0, 80093a6 <__swbuf_r+0x32>
 800939e:	f04f 37ff 	mov.w	r7, #4294967295
 80093a2:	4638      	mov	r0, r7
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6922      	ldr	r2, [r4, #16]
 80093aa:	1a98      	subs	r0, r3, r2
 80093ac:	6963      	ldr	r3, [r4, #20]
 80093ae:	b2f6      	uxtb	r6, r6
 80093b0:	4283      	cmp	r3, r0
 80093b2:	4637      	mov	r7, r6
 80093b4:	dc05      	bgt.n	80093c2 <__swbuf_r+0x4e>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff ffb3 	bl	8009324 <_fflush_r>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1ed      	bne.n	800939e <__swbuf_r+0x2a>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	701e      	strb	r6, [r3, #0]
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d004      	beq.n	80093e2 <__swbuf_r+0x6e>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	07db      	lsls	r3, r3, #31
 80093dc:	d5e1      	bpl.n	80093a2 <__swbuf_r+0x2e>
 80093de:	2e0a      	cmp	r6, #10
 80093e0:	d1df      	bne.n	80093a2 <__swbuf_r+0x2e>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff ff9d 	bl	8009324 <_fflush_r>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d0d9      	beq.n	80093a2 <__swbuf_r+0x2e>
 80093ee:	e7d6      	b.n	800939e <__swbuf_r+0x2a>

080093f0 <__swsetup_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4b29      	ldr	r3, [pc, #164]	@ (8009498 <__swsetup_r+0xa8>)
 80093f4:	4605      	mov	r5, r0
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	460c      	mov	r4, r1
 80093fa:	b118      	cbz	r0, 8009404 <__swsetup_r+0x14>
 80093fc:	6a03      	ldr	r3, [r0, #32]
 80093fe:	b90b      	cbnz	r3, 8009404 <__swsetup_r+0x14>
 8009400:	f7fe f8fc 	bl	80075fc <__sinit>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d422      	bmi.n	8009452 <__swsetup_r+0x62>
 800940c:	06da      	lsls	r2, r3, #27
 800940e:	d407      	bmi.n	8009420 <__swsetup_r+0x30>
 8009410:	2209      	movs	r2, #9
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	f04f 30ff 	mov.w	r0, #4294967295
 800941e:	e033      	b.n	8009488 <__swsetup_r+0x98>
 8009420:	0758      	lsls	r0, r3, #29
 8009422:	d512      	bpl.n	800944a <__swsetup_r+0x5a>
 8009424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009426:	b141      	cbz	r1, 800943a <__swsetup_r+0x4a>
 8009428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <__swsetup_r+0x46>
 8009430:	4628      	mov	r0, r5
 8009432:	f7ff f88d 	bl	8008550 <_free_r>
 8009436:	2300      	movs	r3, #0
 8009438:	6363      	str	r3, [r4, #52]	@ 0x34
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	2300      	movs	r3, #0
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0308 	orr.w	r3, r3, #8
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b94b      	cbnz	r3, 800946a <__swsetup_r+0x7a>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d003      	beq.n	800946a <__swsetup_r+0x7a>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 f8eb 	bl	8009640 <__smakebuf_r>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f013 0201 	ands.w	r2, r3, #1
 8009472:	d00a      	beq.n	800948a <__swsetup_r+0x9a>
 8009474:	2200      	movs	r2, #0
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	6962      	ldr	r2, [r4, #20]
 800947a:	4252      	negs	r2, r2
 800947c:	61a2      	str	r2, [r4, #24]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	b942      	cbnz	r2, 8009494 <__swsetup_r+0xa4>
 8009482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009486:	d1c5      	bne.n	8009414 <__swsetup_r+0x24>
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	0799      	lsls	r1, r3, #30
 800948c:	bf58      	it	pl
 800948e:	6962      	ldrpl	r2, [r4, #20]
 8009490:	60a2      	str	r2, [r4, #8]
 8009492:	e7f4      	b.n	800947e <__swsetup_r+0x8e>
 8009494:	2000      	movs	r0, #0
 8009496:	e7f7      	b.n	8009488 <__swsetup_r+0x98>
 8009498:	20000024 	.word	0x20000024

0800949c <memmove>:
 800949c:	4288      	cmp	r0, r1
 800949e:	b510      	push	{r4, lr}
 80094a0:	eb01 0402 	add.w	r4, r1, r2
 80094a4:	d902      	bls.n	80094ac <memmove+0x10>
 80094a6:	4284      	cmp	r4, r0
 80094a8:	4623      	mov	r3, r4
 80094aa:	d807      	bhi.n	80094bc <memmove+0x20>
 80094ac:	1e43      	subs	r3, r0, #1
 80094ae:	42a1      	cmp	r1, r4
 80094b0:	d008      	beq.n	80094c4 <memmove+0x28>
 80094b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ba:	e7f8      	b.n	80094ae <memmove+0x12>
 80094bc:	4402      	add	r2, r0
 80094be:	4601      	mov	r1, r0
 80094c0:	428a      	cmp	r2, r1
 80094c2:	d100      	bne.n	80094c6 <memmove+0x2a>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ce:	e7f7      	b.n	80094c0 <memmove+0x24>

080094d0 <__assert_func>:
 80094d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094d2:	4614      	mov	r4, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <__assert_func+0x2c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4605      	mov	r5, r0
 80094dc:	68d8      	ldr	r0, [r3, #12]
 80094de:	b954      	cbnz	r4, 80094f6 <__assert_func+0x26>
 80094e0:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <__assert_func+0x30>)
 80094e2:	461c      	mov	r4, r3
 80094e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094e8:	9100      	str	r1, [sp, #0]
 80094ea:	462b      	mov	r3, r5
 80094ec:	4905      	ldr	r1, [pc, #20]	@ (8009504 <__assert_func+0x34>)
 80094ee:	f000 f86f 	bl	80095d0 <fiprintf>
 80094f2:	f000 f903 	bl	80096fc <abort>
 80094f6:	4b04      	ldr	r3, [pc, #16]	@ (8009508 <__assert_func+0x38>)
 80094f8:	e7f4      	b.n	80094e4 <__assert_func+0x14>
 80094fa:	bf00      	nop
 80094fc:	20000024 	.word	0x20000024
 8009500:	0800a096 	.word	0x0800a096
 8009504:	0800a068 	.word	0x0800a068
 8009508:	0800a05b 	.word	0x0800a05b

0800950c <_calloc_r>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	fba1 5402 	umull	r5, r4, r1, r2
 8009512:	b93c      	cbnz	r4, 8009524 <_calloc_r+0x18>
 8009514:	4629      	mov	r1, r5
 8009516:	f7fd fb01 	bl	8006b1c <_malloc_r>
 800951a:	4606      	mov	r6, r0
 800951c:	b928      	cbnz	r0, 800952a <_calloc_r+0x1e>
 800951e:	2600      	movs	r6, #0
 8009520:	4630      	mov	r0, r6
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	220c      	movs	r2, #12
 8009526:	6002      	str	r2, [r0, #0]
 8009528:	e7f9      	b.n	800951e <_calloc_r+0x12>
 800952a:	462a      	mov	r2, r5
 800952c:	4621      	mov	r1, r4
 800952e:	f7fe f924 	bl	800777a <memset>
 8009532:	e7f5      	b.n	8009520 <_calloc_r+0x14>

08009534 <__ascii_mbtowc>:
 8009534:	b082      	sub	sp, #8
 8009536:	b901      	cbnz	r1, 800953a <__ascii_mbtowc+0x6>
 8009538:	a901      	add	r1, sp, #4
 800953a:	b142      	cbz	r2, 800954e <__ascii_mbtowc+0x1a>
 800953c:	b14b      	cbz	r3, 8009552 <__ascii_mbtowc+0x1e>
 800953e:	7813      	ldrb	r3, [r2, #0]
 8009540:	600b      	str	r3, [r1, #0]
 8009542:	7812      	ldrb	r2, [r2, #0]
 8009544:	1e10      	subs	r0, r2, #0
 8009546:	bf18      	it	ne
 8009548:	2001      	movne	r0, #1
 800954a:	b002      	add	sp, #8
 800954c:	4770      	bx	lr
 800954e:	4610      	mov	r0, r2
 8009550:	e7fb      	b.n	800954a <__ascii_mbtowc+0x16>
 8009552:	f06f 0001 	mvn.w	r0, #1
 8009556:	e7f8      	b.n	800954a <__ascii_mbtowc+0x16>

08009558 <_realloc_r>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	4680      	mov	r8, r0
 800955e:	4615      	mov	r5, r2
 8009560:	460c      	mov	r4, r1
 8009562:	b921      	cbnz	r1, 800956e <_realloc_r+0x16>
 8009564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	4611      	mov	r1, r2
 800956a:	f7fd bad7 	b.w	8006b1c <_malloc_r>
 800956e:	b92a      	cbnz	r2, 800957c <_realloc_r+0x24>
 8009570:	f7fe ffee 	bl	8008550 <_free_r>
 8009574:	2400      	movs	r4, #0
 8009576:	4620      	mov	r0, r4
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	f000 f8c5 	bl	800970a <_malloc_usable_size_r>
 8009580:	4285      	cmp	r5, r0
 8009582:	4606      	mov	r6, r0
 8009584:	d802      	bhi.n	800958c <_realloc_r+0x34>
 8009586:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800958a:	d8f4      	bhi.n	8009576 <_realloc_r+0x1e>
 800958c:	4629      	mov	r1, r5
 800958e:	4640      	mov	r0, r8
 8009590:	f7fd fac4 	bl	8006b1c <_malloc_r>
 8009594:	4607      	mov	r7, r0
 8009596:	2800      	cmp	r0, #0
 8009598:	d0ec      	beq.n	8009574 <_realloc_r+0x1c>
 800959a:	42b5      	cmp	r5, r6
 800959c:	462a      	mov	r2, r5
 800959e:	4621      	mov	r1, r4
 80095a0:	bf28      	it	cs
 80095a2:	4632      	movcs	r2, r6
 80095a4:	f7fe f979 	bl	800789a <memcpy>
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7fe ffd0 	bl	8008550 <_free_r>
 80095b0:	463c      	mov	r4, r7
 80095b2:	e7e0      	b.n	8009576 <_realloc_r+0x1e>

080095b4 <__ascii_wctomb>:
 80095b4:	4603      	mov	r3, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	b141      	cbz	r1, 80095cc <__ascii_wctomb+0x18>
 80095ba:	2aff      	cmp	r2, #255	@ 0xff
 80095bc:	d904      	bls.n	80095c8 <__ascii_wctomb+0x14>
 80095be:	228a      	movs	r2, #138	@ 0x8a
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	f04f 30ff 	mov.w	r0, #4294967295
 80095c6:	4770      	bx	lr
 80095c8:	700a      	strb	r2, [r1, #0]
 80095ca:	2001      	movs	r0, #1
 80095cc:	4770      	bx	lr
	...

080095d0 <fiprintf>:
 80095d0:	b40e      	push	{r1, r2, r3}
 80095d2:	b503      	push	{r0, r1, lr}
 80095d4:	4601      	mov	r1, r0
 80095d6:	ab03      	add	r3, sp, #12
 80095d8:	4805      	ldr	r0, [pc, #20]	@ (80095f0 <fiprintf+0x20>)
 80095da:	f853 2b04 	ldr.w	r2, [r3], #4
 80095de:	6800      	ldr	r0, [r0, #0]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	f7ff fd03 	bl	8008fec <_vfiprintf_r>
 80095e6:	b002      	add	sp, #8
 80095e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ec:	b003      	add	sp, #12
 80095ee:	4770      	bx	lr
 80095f0:	20000024 	.word	0x20000024

080095f4 <__swhatbuf_r>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	b096      	sub	sp, #88	@ 0x58
 8009600:	4615      	mov	r5, r2
 8009602:	461e      	mov	r6, r3
 8009604:	da0d      	bge.n	8009622 <__swhatbuf_r+0x2e>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800960c:	f04f 0100 	mov.w	r1, #0
 8009610:	bf14      	ite	ne
 8009612:	2340      	movne	r3, #64	@ 0x40
 8009614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009618:	2000      	movs	r0, #0
 800961a:	6031      	str	r1, [r6, #0]
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	b016      	add	sp, #88	@ 0x58
 8009620:	bd70      	pop	{r4, r5, r6, pc}
 8009622:	466a      	mov	r2, sp
 8009624:	f000 f848 	bl	80096b8 <_fstat_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	dbec      	blt.n	8009606 <__swhatbuf_r+0x12>
 800962c:	9901      	ldr	r1, [sp, #4]
 800962e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009636:	4259      	negs	r1, r3
 8009638:	4159      	adcs	r1, r3
 800963a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800963e:	e7eb      	b.n	8009618 <__swhatbuf_r+0x24>

08009640 <__smakebuf_r>:
 8009640:	898b      	ldrh	r3, [r1, #12]
 8009642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009644:	079d      	lsls	r5, r3, #30
 8009646:	4606      	mov	r6, r0
 8009648:	460c      	mov	r4, r1
 800964a:	d507      	bpl.n	800965c <__smakebuf_r+0x1c>
 800964c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	6123      	str	r3, [r4, #16]
 8009654:	2301      	movs	r3, #1
 8009656:	6163      	str	r3, [r4, #20]
 8009658:	b003      	add	sp, #12
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965c:	ab01      	add	r3, sp, #4
 800965e:	466a      	mov	r2, sp
 8009660:	f7ff ffc8 	bl	80095f4 <__swhatbuf_r>
 8009664:	9f00      	ldr	r7, [sp, #0]
 8009666:	4605      	mov	r5, r0
 8009668:	4639      	mov	r1, r7
 800966a:	4630      	mov	r0, r6
 800966c:	f7fd fa56 	bl	8006b1c <_malloc_r>
 8009670:	b948      	cbnz	r0, 8009686 <__smakebuf_r+0x46>
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	059a      	lsls	r2, r3, #22
 8009678:	d4ee      	bmi.n	8009658 <__smakebuf_r+0x18>
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	e7e2      	b.n	800964c <__smakebuf_r+0xc>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	6020      	str	r0, [r4, #0]
 800968a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009696:	b15b      	cbz	r3, 80096b0 <__smakebuf_r+0x70>
 8009698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969c:	4630      	mov	r0, r6
 800969e:	f000 f81d 	bl	80096dc <_isatty_r>
 80096a2:	b128      	cbz	r0, 80096b0 <__smakebuf_r+0x70>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	431d      	orrs	r5, r3
 80096b4:	81a5      	strh	r5, [r4, #12]
 80096b6:	e7cf      	b.n	8009658 <__smakebuf_r+0x18>

080096b8 <_fstat_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d07      	ldr	r5, [pc, #28]	@ (80096d8 <_fstat_r+0x20>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	602b      	str	r3, [r5, #0]
 80096c6:	f7f8 ffeb 	bl	80026a0 <_fstat>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	d102      	bne.n	80096d4 <_fstat_r+0x1c>
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	b103      	cbz	r3, 80096d4 <_fstat_r+0x1c>
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	bf00      	nop
 80096d8:	20000794 	.word	0x20000794

080096dc <_isatty_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d06      	ldr	r5, [pc, #24]	@ (80096f8 <_isatty_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7f8 ffea 	bl	80026c0 <_isatty>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_isatty_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_isatty_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	20000794 	.word	0x20000794

080096fc <abort>:
 80096fc:	b508      	push	{r3, lr}
 80096fe:	2006      	movs	r0, #6
 8009700:	f000 f834 	bl	800976c <raise>
 8009704:	2001      	movs	r0, #1
 8009706:	f7f8 ff7b 	bl	8002600 <_exit>

0800970a <_malloc_usable_size_r>:
 800970a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970e:	1f18      	subs	r0, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	580b      	ldrlt	r3, [r1, r0]
 8009716:	18c0      	addlt	r0, r0, r3
 8009718:	4770      	bx	lr

0800971a <_raise_r>:
 800971a:	291f      	cmp	r1, #31
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4605      	mov	r5, r0
 8009720:	460c      	mov	r4, r1
 8009722:	d904      	bls.n	800972e <_raise_r+0x14>
 8009724:	2316      	movs	r3, #22
 8009726:	6003      	str	r3, [r0, #0]
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	bd38      	pop	{r3, r4, r5, pc}
 800972e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009730:	b112      	cbz	r2, 8009738 <_raise_r+0x1e>
 8009732:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009736:	b94b      	cbnz	r3, 800974c <_raise_r+0x32>
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f831 	bl	80097a0 <_getpid_r>
 800973e:	4622      	mov	r2, r4
 8009740:	4601      	mov	r1, r0
 8009742:	4628      	mov	r0, r5
 8009744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009748:	f000 b818 	b.w	800977c <_kill_r>
 800974c:	2b01      	cmp	r3, #1
 800974e:	d00a      	beq.n	8009766 <_raise_r+0x4c>
 8009750:	1c59      	adds	r1, r3, #1
 8009752:	d103      	bne.n	800975c <_raise_r+0x42>
 8009754:	2316      	movs	r3, #22
 8009756:	6003      	str	r3, [r0, #0]
 8009758:	2001      	movs	r0, #1
 800975a:	e7e7      	b.n	800972c <_raise_r+0x12>
 800975c:	2100      	movs	r1, #0
 800975e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009762:	4620      	mov	r0, r4
 8009764:	4798      	blx	r3
 8009766:	2000      	movs	r0, #0
 8009768:	e7e0      	b.n	800972c <_raise_r+0x12>
	...

0800976c <raise>:
 800976c:	4b02      	ldr	r3, [pc, #8]	@ (8009778 <raise+0xc>)
 800976e:	4601      	mov	r1, r0
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f7ff bfd2 	b.w	800971a <_raise_r>
 8009776:	bf00      	nop
 8009778:	20000024 	.word	0x20000024

0800977c <_kill_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	@ (800979c <_kill_r+0x20>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	f7f8 ff29 	bl	80025e0 <_kill>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d102      	bne.n	8009798 <_kill_r+0x1c>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b103      	cbz	r3, 8009798 <_kill_r+0x1c>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20000794 	.word	0x20000794

080097a0 <_getpid_r>:
 80097a0:	f7f8 bf16 	b.w	80025d0 <_getpid>

080097a4 <atan2>:
 80097a4:	f000 b800 	b.w	80097a8 <__ieee754_atan2>

080097a8 <__ieee754_atan2>:
 80097a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	ec57 6b11 	vmov	r6, r7, d1
 80097b0:	4273      	negs	r3, r6
 80097b2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009930 <__ieee754_atan2+0x188>
 80097b6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80097ba:	4333      	orrs	r3, r6
 80097bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80097c0:	4543      	cmp	r3, r8
 80097c2:	ec51 0b10 	vmov	r0, r1, d0
 80097c6:	4635      	mov	r5, r6
 80097c8:	d809      	bhi.n	80097de <__ieee754_atan2+0x36>
 80097ca:	4244      	negs	r4, r0
 80097cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80097d0:	4304      	orrs	r4, r0
 80097d2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80097d6:	4544      	cmp	r4, r8
 80097d8:	468e      	mov	lr, r1
 80097da:	4681      	mov	r9, r0
 80097dc:	d907      	bls.n	80097ee <__ieee754_atan2+0x46>
 80097de:	4632      	mov	r2, r6
 80097e0:	463b      	mov	r3, r7
 80097e2:	f7f6 fd63 	bl	80002ac <__adddf3>
 80097e6:	ec41 0b10 	vmov	d0, r0, r1
 80097ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80097f2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80097f6:	4334      	orrs	r4, r6
 80097f8:	d103      	bne.n	8009802 <__ieee754_atan2+0x5a>
 80097fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fe:	f000 b89b 	b.w	8009938 <atan>
 8009802:	17bc      	asrs	r4, r7, #30
 8009804:	f004 0402 	and.w	r4, r4, #2
 8009808:	ea53 0909 	orrs.w	r9, r3, r9
 800980c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009810:	d107      	bne.n	8009822 <__ieee754_atan2+0x7a>
 8009812:	2c02      	cmp	r4, #2
 8009814:	d05f      	beq.n	80098d6 <__ieee754_atan2+0x12e>
 8009816:	2c03      	cmp	r4, #3
 8009818:	d1e5      	bne.n	80097e6 <__ieee754_atan2+0x3e>
 800981a:	a141      	add	r1, pc, #260	@ (adr r1, 8009920 <__ieee754_atan2+0x178>)
 800981c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009820:	e7e1      	b.n	80097e6 <__ieee754_atan2+0x3e>
 8009822:	4315      	orrs	r5, r2
 8009824:	d106      	bne.n	8009834 <__ieee754_atan2+0x8c>
 8009826:	f1be 0f00 	cmp.w	lr, #0
 800982a:	da5f      	bge.n	80098ec <__ieee754_atan2+0x144>
 800982c:	a13e      	add	r1, pc, #248	@ (adr r1, 8009928 <__ieee754_atan2+0x180>)
 800982e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009832:	e7d8      	b.n	80097e6 <__ieee754_atan2+0x3e>
 8009834:	4542      	cmp	r2, r8
 8009836:	d10f      	bne.n	8009858 <__ieee754_atan2+0xb0>
 8009838:	4293      	cmp	r3, r2
 800983a:	f104 34ff 	add.w	r4, r4, #4294967295
 800983e:	d107      	bne.n	8009850 <__ieee754_atan2+0xa8>
 8009840:	2c02      	cmp	r4, #2
 8009842:	d84c      	bhi.n	80098de <__ieee754_atan2+0x136>
 8009844:	4b34      	ldr	r3, [pc, #208]	@ (8009918 <__ieee754_atan2+0x170>)
 8009846:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800984a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800984e:	e7ca      	b.n	80097e6 <__ieee754_atan2+0x3e>
 8009850:	2c02      	cmp	r4, #2
 8009852:	d848      	bhi.n	80098e6 <__ieee754_atan2+0x13e>
 8009854:	4b31      	ldr	r3, [pc, #196]	@ (800991c <__ieee754_atan2+0x174>)
 8009856:	e7f6      	b.n	8009846 <__ieee754_atan2+0x9e>
 8009858:	4543      	cmp	r3, r8
 800985a:	d0e4      	beq.n	8009826 <__ieee754_atan2+0x7e>
 800985c:	1a9b      	subs	r3, r3, r2
 800985e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009862:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009866:	da1e      	bge.n	80098a6 <__ieee754_atan2+0xfe>
 8009868:	2f00      	cmp	r7, #0
 800986a:	da01      	bge.n	8009870 <__ieee754_atan2+0xc8>
 800986c:	323c      	adds	r2, #60	@ 0x3c
 800986e:	db1e      	blt.n	80098ae <__ieee754_atan2+0x106>
 8009870:	4632      	mov	r2, r6
 8009872:	463b      	mov	r3, r7
 8009874:	f7f6 fffa 	bl	800086c <__aeabi_ddiv>
 8009878:	ec41 0b10 	vmov	d0, r0, r1
 800987c:	f000 f9f4 	bl	8009c68 <fabs>
 8009880:	f000 f85a 	bl	8009938 <atan>
 8009884:	ec51 0b10 	vmov	r0, r1, d0
 8009888:	2c01      	cmp	r4, #1
 800988a:	d013      	beq.n	80098b4 <__ieee754_atan2+0x10c>
 800988c:	2c02      	cmp	r4, #2
 800988e:	d015      	beq.n	80098bc <__ieee754_atan2+0x114>
 8009890:	2c00      	cmp	r4, #0
 8009892:	d0a8      	beq.n	80097e6 <__ieee754_atan2+0x3e>
 8009894:	a318      	add	r3, pc, #96	@ (adr r3, 80098f8 <__ieee754_atan2+0x150>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fd05 	bl	80002a8 <__aeabi_dsub>
 800989e:	a318      	add	r3, pc, #96	@ (adr r3, 8009900 <__ieee754_atan2+0x158>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	e014      	b.n	80098d0 <__ieee754_atan2+0x128>
 80098a6:	a118      	add	r1, pc, #96	@ (adr r1, 8009908 <__ieee754_atan2+0x160>)
 80098a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ac:	e7ec      	b.n	8009888 <__ieee754_atan2+0xe0>
 80098ae:	2000      	movs	r0, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	e7e9      	b.n	8009888 <__ieee754_atan2+0xe0>
 80098b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098b8:	4619      	mov	r1, r3
 80098ba:	e794      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80098f8 <__ieee754_atan2+0x150>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fcf1 	bl	80002a8 <__aeabi_dsub>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	a10d      	add	r1, pc, #52	@ (adr r1, 8009900 <__ieee754_atan2+0x158>)
 80098cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098d0:	f7f6 fcea 	bl	80002a8 <__aeabi_dsub>
 80098d4:	e787      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098d6:	a10a      	add	r1, pc, #40	@ (adr r1, 8009900 <__ieee754_atan2+0x158>)
 80098d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098dc:	e783      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098de:	a10c      	add	r1, pc, #48	@ (adr r1, 8009910 <__ieee754_atan2+0x168>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	e77f      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098e6:	2000      	movs	r0, #0
 80098e8:	2100      	movs	r1, #0
 80098ea:	e77c      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098ec:	a106      	add	r1, pc, #24	@ (adr r1, 8009908 <__ieee754_atan2+0x160>)
 80098ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f2:	e778      	b.n	80097e6 <__ieee754_atan2+0x3e>
 80098f4:	f3af 8000 	nop.w
 80098f8:	33145c07 	.word	0x33145c07
 80098fc:	3ca1a626 	.word	0x3ca1a626
 8009900:	54442d18 	.word	0x54442d18
 8009904:	400921fb 	.word	0x400921fb
 8009908:	54442d18 	.word	0x54442d18
 800990c:	3ff921fb 	.word	0x3ff921fb
 8009910:	54442d18 	.word	0x54442d18
 8009914:	3fe921fb 	.word	0x3fe921fb
 8009918:	0800a1b0 	.word	0x0800a1b0
 800991c:	0800a198 	.word	0x0800a198
 8009920:	54442d18 	.word	0x54442d18
 8009924:	c00921fb 	.word	0xc00921fb
 8009928:	54442d18 	.word	0x54442d18
 800992c:	bff921fb 	.word	0xbff921fb
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	00000000 	.word	0x00000000

08009938 <atan>:
 8009938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ec55 4b10 	vmov	r4, r5, d0
 8009940:	4bbf      	ldr	r3, [pc, #764]	@ (8009c40 <atan+0x308>)
 8009942:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009946:	429e      	cmp	r6, r3
 8009948:	46ab      	mov	fp, r5
 800994a:	d918      	bls.n	800997e <atan+0x46>
 800994c:	4bbd      	ldr	r3, [pc, #756]	@ (8009c44 <atan+0x30c>)
 800994e:	429e      	cmp	r6, r3
 8009950:	d801      	bhi.n	8009956 <atan+0x1e>
 8009952:	d109      	bne.n	8009968 <atan+0x30>
 8009954:	b144      	cbz	r4, 8009968 <atan+0x30>
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	4620      	mov	r0, r4
 800995c:	4629      	mov	r1, r5
 800995e:	f7f6 fca5 	bl	80002ac <__adddf3>
 8009962:	4604      	mov	r4, r0
 8009964:	460d      	mov	r5, r1
 8009966:	e006      	b.n	8009976 <atan+0x3e>
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	f340 812b 	ble.w	8009bc6 <atan+0x28e>
 8009970:	a597      	add	r5, pc, #604	@ (adr r5, 8009bd0 <atan+0x298>)
 8009972:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009976:	ec45 4b10 	vmov	d0, r4, r5
 800997a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	4bb2      	ldr	r3, [pc, #712]	@ (8009c48 <atan+0x310>)
 8009980:	429e      	cmp	r6, r3
 8009982:	d813      	bhi.n	80099ac <atan+0x74>
 8009984:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009988:	429e      	cmp	r6, r3
 800998a:	d80c      	bhi.n	80099a6 <atan+0x6e>
 800998c:	a392      	add	r3, pc, #584	@ (adr r3, 8009bd8 <atan+0x2a0>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f6 fc89 	bl	80002ac <__adddf3>
 800999a:	4bac      	ldr	r3, [pc, #688]	@ (8009c4c <atan+0x314>)
 800999c:	2200      	movs	r2, #0
 800999e:	f7f7 f8cb 	bl	8000b38 <__aeabi_dcmpgt>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d1e7      	bne.n	8009976 <atan+0x3e>
 80099a6:	f04f 3aff 	mov.w	sl, #4294967295
 80099aa:	e029      	b.n	8009a00 <atan+0xc8>
 80099ac:	f000 f95c 	bl	8009c68 <fabs>
 80099b0:	4ba7      	ldr	r3, [pc, #668]	@ (8009c50 <atan+0x318>)
 80099b2:	429e      	cmp	r6, r3
 80099b4:	ec55 4b10 	vmov	r4, r5, d0
 80099b8:	f200 80bc 	bhi.w	8009b34 <atan+0x1fc>
 80099bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80099c0:	429e      	cmp	r6, r3
 80099c2:	f200 809e 	bhi.w	8009b02 <atan+0x1ca>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fc6d 	bl	80002ac <__adddf3>
 80099d2:	4b9e      	ldr	r3, [pc, #632]	@ (8009c4c <atan+0x314>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	f7f6 fc67 	bl	80002a8 <__aeabi_dsub>
 80099da:	2200      	movs	r2, #0
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc60 	bl	80002ac <__adddf3>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f6 ff3a 	bl	800086c <__aeabi_ddiv>
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	4622      	mov	r2, r4
 8009a02:	462b      	mov	r3, r5
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fe06 	bl	8000618 <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4680      	mov	r8, r0
 8009a12:	4689      	mov	r9, r1
 8009a14:	f7f6 fe00 	bl	8000618 <__aeabi_dmul>
 8009a18:	a371      	add	r3, pc, #452	@ (adr r3, 8009be0 <atan+0x2a8>)
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460f      	mov	r7, r1
 8009a22:	f7f6 fdf9 	bl	8000618 <__aeabi_dmul>
 8009a26:	a370      	add	r3, pc, #448	@ (adr r3, 8009be8 <atan+0x2b0>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fc3e 	bl	80002ac <__adddf3>
 8009a30:	4632      	mov	r2, r6
 8009a32:	463b      	mov	r3, r7
 8009a34:	f7f6 fdf0 	bl	8000618 <__aeabi_dmul>
 8009a38:	a36d      	add	r3, pc, #436	@ (adr r3, 8009bf0 <atan+0x2b8>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fc35 	bl	80002ac <__adddf3>
 8009a42:	4632      	mov	r2, r6
 8009a44:	463b      	mov	r3, r7
 8009a46:	f7f6 fde7 	bl	8000618 <__aeabi_dmul>
 8009a4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009bf8 <atan+0x2c0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fc2c 	bl	80002ac <__adddf3>
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	f7f6 fdde 	bl	8000618 <__aeabi_dmul>
 8009a5c:	a368      	add	r3, pc, #416	@ (adr r3, 8009c00 <atan+0x2c8>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fc23 	bl	80002ac <__adddf3>
 8009a66:	4632      	mov	r2, r6
 8009a68:	463b      	mov	r3, r7
 8009a6a:	f7f6 fdd5 	bl	8000618 <__aeabi_dmul>
 8009a6e:	a366      	add	r3, pc, #408	@ (adr r3, 8009c08 <atan+0x2d0>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 fc1a 	bl	80002ac <__adddf3>
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	f7f6 fdcc 	bl	8000618 <__aeabi_dmul>
 8009a80:	a363      	add	r3, pc, #396	@ (adr r3, 8009c10 <atan+0x2d8>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	4680      	mov	r8, r0
 8009a88:	4689      	mov	r9, r1
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fdc3 	bl	8000618 <__aeabi_dmul>
 8009a92:	a361      	add	r3, pc, #388	@ (adr r3, 8009c18 <atan+0x2e0>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fc06 	bl	80002a8 <__aeabi_dsub>
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	463b      	mov	r3, r7
 8009aa0:	f7f6 fdba 	bl	8000618 <__aeabi_dmul>
 8009aa4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009c20 <atan+0x2e8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 fbfd 	bl	80002a8 <__aeabi_dsub>
 8009aae:	4632      	mov	r2, r6
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	f7f6 fdb1 	bl	8000618 <__aeabi_dmul>
 8009ab6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009c28 <atan+0x2f0>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fbf4 	bl	80002a8 <__aeabi_dsub>
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	f7f6 fda8 	bl	8000618 <__aeabi_dmul>
 8009ac8:	a359      	add	r3, pc, #356	@ (adr r3, 8009c30 <atan+0x2f8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 fbeb 	bl	80002a8 <__aeabi_dsub>
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	f7f6 fd9f 	bl	8000618 <__aeabi_dmul>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 fbe3 	bl	80002ac <__adddf3>
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	462b      	mov	r3, r5
 8009aea:	f7f6 fd95 	bl	8000618 <__aeabi_dmul>
 8009aee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	d148      	bne.n	8009b8a <atan+0x252>
 8009af8:	4620      	mov	r0, r4
 8009afa:	4629      	mov	r1, r5
 8009afc:	f7f6 fbd4 	bl	80002a8 <__aeabi_dsub>
 8009b00:	e72f      	b.n	8009962 <atan+0x2a>
 8009b02:	4b52      	ldr	r3, [pc, #328]	@ (8009c4c <atan+0x314>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 fbcd 	bl	80002a8 <__aeabi_dsub>
 8009b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009c4c <atan+0x314>)
 8009b10:	4606      	mov	r6, r0
 8009b12:	460f      	mov	r7, r1
 8009b14:	2200      	movs	r2, #0
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fbc7 	bl	80002ac <__adddf3>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fea1 	bl	800086c <__aeabi_ddiv>
 8009b2a:	f04f 0a01 	mov.w	sl, #1
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	e765      	b.n	8009a00 <atan+0xc8>
 8009b34:	4b47      	ldr	r3, [pc, #284]	@ (8009c54 <atan+0x31c>)
 8009b36:	429e      	cmp	r6, r3
 8009b38:	d21c      	bcs.n	8009b74 <atan+0x23c>
 8009b3a:	4b47      	ldr	r3, [pc, #284]	@ (8009c58 <atan+0x320>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f7f6 fbb1 	bl	80002a8 <__aeabi_dsub>
 8009b46:	4b44      	ldr	r3, [pc, #272]	@ (8009c58 <atan+0x320>)
 8009b48:	4606      	mov	r6, r0
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fd61 	bl	8000618 <__aeabi_dmul>
 8009b56:	4b3d      	ldr	r3, [pc, #244]	@ (8009c4c <atan+0x314>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fba7 	bl	80002ac <__adddf3>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 fe81 	bl	800086c <__aeabi_ddiv>
 8009b6a:	f04f 0a02 	mov.w	sl, #2
 8009b6e:	4604      	mov	r4, r0
 8009b70:	460d      	mov	r5, r1
 8009b72:	e745      	b.n	8009a00 <atan+0xc8>
 8009b74:	4622      	mov	r2, r4
 8009b76:	462b      	mov	r3, r5
 8009b78:	4938      	ldr	r1, [pc, #224]	@ (8009c5c <atan+0x324>)
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	f7f6 fe76 	bl	800086c <__aeabi_ddiv>
 8009b80:	f04f 0a03 	mov.w	sl, #3
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	e73a      	b.n	8009a00 <atan+0xc8>
 8009b8a:	4b35      	ldr	r3, [pc, #212]	@ (8009c60 <atan+0x328>)
 8009b8c:	4e35      	ldr	r6, [pc, #212]	@ (8009c64 <atan+0x32c>)
 8009b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fb87 	bl	80002a8 <__aeabi_dsub>
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	f7f6 fb83 	bl	80002a8 <__aeabi_dsub>
 8009ba2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bae:	f7f6 fb7b 	bl	80002a8 <__aeabi_dsub>
 8009bb2:	f1bb 0f00 	cmp.w	fp, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	f6bf aedc 	bge.w	8009976 <atan+0x3e>
 8009bbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bc2:	461d      	mov	r5, r3
 8009bc4:	e6d7      	b.n	8009976 <atan+0x3e>
 8009bc6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009c38 <atan+0x300>)
 8009bc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bcc:	e6d3      	b.n	8009976 <atan+0x3e>
 8009bce:	bf00      	nop
 8009bd0:	54442d18 	.word	0x54442d18
 8009bd4:	3ff921fb 	.word	0x3ff921fb
 8009bd8:	8800759c 	.word	0x8800759c
 8009bdc:	7e37e43c 	.word	0x7e37e43c
 8009be0:	e322da11 	.word	0xe322da11
 8009be4:	3f90ad3a 	.word	0x3f90ad3a
 8009be8:	24760deb 	.word	0x24760deb
 8009bec:	3fa97b4b 	.word	0x3fa97b4b
 8009bf0:	a0d03d51 	.word	0xa0d03d51
 8009bf4:	3fb10d66 	.word	0x3fb10d66
 8009bf8:	c54c206e 	.word	0xc54c206e
 8009bfc:	3fb745cd 	.word	0x3fb745cd
 8009c00:	920083ff 	.word	0x920083ff
 8009c04:	3fc24924 	.word	0x3fc24924
 8009c08:	5555550d 	.word	0x5555550d
 8009c0c:	3fd55555 	.word	0x3fd55555
 8009c10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c14:	bfa2b444 	.word	0xbfa2b444
 8009c18:	52defd9a 	.word	0x52defd9a
 8009c1c:	3fadde2d 	.word	0x3fadde2d
 8009c20:	af749a6d 	.word	0xaf749a6d
 8009c24:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c28:	fe231671 	.word	0xfe231671
 8009c2c:	3fbc71c6 	.word	0x3fbc71c6
 8009c30:	9998ebc4 	.word	0x9998ebc4
 8009c34:	3fc99999 	.word	0x3fc99999
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	bff921fb 	.word	0xbff921fb
 8009c40:	440fffff 	.word	0x440fffff
 8009c44:	7ff00000 	.word	0x7ff00000
 8009c48:	3fdbffff 	.word	0x3fdbffff
 8009c4c:	3ff00000 	.word	0x3ff00000
 8009c50:	3ff2ffff 	.word	0x3ff2ffff
 8009c54:	40038000 	.word	0x40038000
 8009c58:	3ff80000 	.word	0x3ff80000
 8009c5c:	bff00000 	.word	0xbff00000
 8009c60:	0800a1c8 	.word	0x0800a1c8
 8009c64:	0800a1e8 	.word	0x0800a1e8

08009c68 <fabs>:
 8009c68:	ec51 0b10 	vmov	r0, r1, d0
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009c72:	ec43 2b10 	vmov	d0, r2, r3
 8009c76:	4770      	bx	lr

08009c78 <_init>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr

08009c84 <_fini>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	bf00      	nop
 8009c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8a:	bc08      	pop	{r3}
 8009c8c:	469e      	mov	lr, r3
 8009c8e:	4770      	bx	lr
