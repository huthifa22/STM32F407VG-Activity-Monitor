
Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a02c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800a1c0  0800a1c0  0000b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  0000c244  2**0
                  CONTENTS
  4 .ARM          00000008  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a708  0800a708  0000c244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a70c  0800a70c  0000b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800a710  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c244  2**0
                  CONTENTS
 10 .bss          000005e4  20000244  20000244  0000c244  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000828  20000828  0000c244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f68e  00000000  00000000  0000c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000295b  00000000  00000000  0001b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0001e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000adb  00000000  00000000  0001f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237ff  00000000  00000000  0001fb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116a8  00000000  00000000  0004338a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce43f  00000000  00000000  00054a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122e71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005394  00000000  00000000  00122eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  00128248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1a4 	.word	0x0800a1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800a1a4 	.word	0x0800a1a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <LiquidCrystal_I2C_Init>:
#include "LiquidCrystal_I2C.h"

void LiquidCrystal_I2C_Init(LiquidCrystal_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t cols, uint8_t rows) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71bb      	strb	r3, [r7, #6]
    lcd->hi2c = hi2c;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
    lcd->Address = address << 1; // I2C address shifted for STM32
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	711a      	strb	r2, [r3, #4]
    lcd->Cols = cols;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	715a      	strb	r2, [r3, #5]
    lcd->Rows = rows;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	7e3a      	ldrb	r2, [r7, #24]
 8000f88:	719a      	strb	r2, [r3, #6]
    lcd->BacklightVal = LCD_BACKLIGHT;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	721a      	strb	r2, [r3, #8]
    if (rows > 1) {
 8000f96:	7e3b      	ldrb	r3, [r7, #24]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d906      	bls.n	8000faa <LiquidCrystal_I2C_Init+0x52>
        lcd->DisplayFunction |= LCD_2LINE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	721a      	strb	r2, [r3, #8]
    }
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LiquidCrystal_I2C_Begin>:

void LiquidCrystal_I2C_Begin(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70bb      	strb	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
    lcd->NumLines = rows;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	78ba      	ldrb	r2, [r7, #2]
 8000fd4:	72da      	strb	r2, [r3, #11]
    lcd->DisplayFunction |= charsize;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a1a      	ldrb	r2, [r3, #8]
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	721a      	strb	r2, [r3, #8]

    HAL_Delay(50); // Wait for >40ms
 8000fe4:	2032      	movs	r0, #50	@ 0x32
 8000fe6:	f000 ff79 	bl	8001edc <HAL_Delay>

    LiquidCrystal_I2C_ExpanderWrite(lcd, lcd->BacklightVal); // Reset expander and turn backlight on
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	79db      	ldrb	r3, [r3, #7]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8f0 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffa:	f000 ff6f 	bl	8001edc <HAL_Delay>

    // Initialization sequence
    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000ffe:	2130      	movs	r1, #48	@ 0x30
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8d4 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001006:	2005      	movs	r0, #5
 8001008:	f000 ff68 	bl	8001edc <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800100c:	2130      	movs	r1, #48	@ 0x30
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8cd 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001014:	2005      	movs	r0, #5
 8001016:	f000 ff61 	bl	8001edc <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800101a:	2130      	movs	r1, #48	@ 0x30
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f8c6 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 ff5a 	bl	8001edc <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x02 << 4); // Finally, set to 4-bit interface
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8bf 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>

    LiquidCrystal_I2C_Command(lcd, LCD_FUNCTIONSET | lcd->DisplayFunction);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f883 	bl	8001148 <LiquidCrystal_I2C_Command>

    lcd->DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2204      	movs	r2, #4
 8001046:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Display(lcd);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f822 	bl	8001092 <LiquidCrystal_I2C_Display>

    LiquidCrystal_I2C_Clear(lcd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f810 	bl	8001074 <LiquidCrystal_I2C_Clear>

    lcd->DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	729a      	strb	r2, [r3, #10]
    LiquidCrystal_I2C_Command(lcd, LCD_ENTRYMODESET | lcd->DisplayMode);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f86e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LiquidCrystal_I2C_Clear>:

void LiquidCrystal_I2C_Clear(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    LiquidCrystal_I2C_Command(lcd, LCD_CLEARDISPLAY);
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f862 	bl	8001148 <LiquidCrystal_I2C_Command>
    HAL_Delay(2);
 8001084:	2002      	movs	r0, #2
 8001086:	f000 ff29 	bl	8001edc <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LiquidCrystal_I2C_Display>:
void LiquidCrystal_I2C_NoDisplay(LiquidCrystal_I2C_HandleTypeDef *lcd) {
    lcd->DisplayControl &= ~LCD_DISPLAYON;
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void LiquidCrystal_I2C_Display(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
    lcd->DisplayControl |= LCD_DISPLAYON;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a5b      	ldrb	r3, [r3, #9]
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a5b      	ldrb	r3, [r3, #9]
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f847 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LiquidCrystal_I2C_SetCursor>:
    for (int i = 0; i < 8; i++) {
        LiquidCrystal_I2C_Send(lcd, charmap[i], Rs);
    }
}

void LiquidCrystal_I2C_SetCursor(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <LiquidCrystal_I2C_SetCursor+0x50>)
 80010d6:	60fb      	str	r3, [r7, #12]
    if (row > lcd->NumLines) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7adb      	ldrb	r3, [r3, #11]
 80010dc:	78ba      	ldrb	r2, [r7, #2]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d903      	bls.n	80010ea <LiquidCrystal_I2C_SetCursor+0x26>
        row = lcd->NumLines - 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7adb      	ldrb	r3, [r3, #11]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	70bb      	strb	r3, [r7, #2]
    }
    LiquidCrystal_I2C_Command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	3310      	adds	r3, #16
 80010ee:	443b      	add	r3, r7
 80010f0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f81e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	54144000 	.word	0x54144000

08001118 <LiquidCrystal_I2C_Print>:

void LiquidCrystal_I2C_Print(LiquidCrystal_I2C_HandleTypeDef *lcd, const char *str) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001122:	e008      	b.n	8001136 <LiquidCrystal_I2C_Print+0x1e>
        LiquidCrystal_I2C_Send(lcd, *str++, Rs);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	603a      	str	r2, [r7, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f819 	bl	8001168 <LiquidCrystal_I2C_Send>
    while (*str) {
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <LiquidCrystal_I2C_Print+0xc>
    }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LiquidCrystal_I2C_Command>:

void LiquidCrystal_I2C_Command(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_Send(lcd, value, 0);
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f804 	bl	8001168 <LiquidCrystal_I2C_Send>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <LiquidCrystal_I2C_Send>:

void LiquidCrystal_I2C_Send(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value, uint8_t mode) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
 8001174:	4613      	mov	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    uint8_t highnib = value & 0xf0;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f023 030f 	bic.w	r3, r3, #15
 800117e:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xf0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	73bb      	strb	r3, [r7, #14]
    LiquidCrystal_I2C_Write4Bits(lcd, (highnib) | mode);
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	78bb      	ldrb	r3, [r7, #2]
 800118a:	4313      	orrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f80c 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    LiquidCrystal_I2C_Write4Bits(lcd, (lownib) | mode);
 8001196:	7bba      	ldrb	r2, [r7, #14]
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f804 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LiquidCrystal_I2C_Write4Bits>:

void LiquidCrystal_I2C_Write4Bits(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, value);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f809 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    LiquidCrystal_I2C_PulseEnable(lcd, value);
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f821 	bl	8001210 <LiquidCrystal_I2C_PulseEnable>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LiquidCrystal_I2C_ExpanderWrite>:

void LiquidCrystal_I2C_ExpanderWrite(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af02      	add	r7, sp, #8
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
    uint8_t data_t[1];
    data_t[0] = _data | lcd->BacklightVal;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	79da      	ldrb	r2, [r3, #7]
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->Address, data_t, 1, 1000);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f107 020c 	add.w	r2, r7, #12
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	f002 ffe2 	bl	80041cc <HAL_I2C_Master_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <LiquidCrystal_I2C_PulseEnable>:

void LiquidCrystal_I2C_PulseEnable(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data | En);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffd5 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fe55 	bl	8001edc <HAL_Delay>
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data & ~En);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffca 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 fe4a 	bl	8001edc <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4619      	mov	r1, r3
 800125e:	2007      	movs	r0, #7
 8001260:	f000 f9fc 	bl	800165c <bno055_writeData>
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4619      	mov	r1, r3
 800127a:	203d      	movs	r0, #61	@ 0x3d
 800127c:	f000 f9ee 	bl	800165c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001286:	2013      	movs	r0, #19
 8001288:	f000 fa36 	bl	80016f8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800128c:	e002      	b.n	8001294 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800128e:	2007      	movs	r0, #7
 8001290:	f000 fa32 	bl	80016f8 <bno055_delay>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ffe3 	bl	800126c <bno055_setOperationMode>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}

080012aa <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80012ae:	200c      	movs	r0, #12
 80012b0:	f7ff ffdc 	bl	800126c <bno055_setOperationMode>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80012bc:	2120      	movs	r1, #32
 80012be:	203f      	movs	r0, #63	@ 0x3f
 80012c0:	f000 f9cc 	bl	800165c <bno055_writeData>
  bno055_delay(700);
 80012c4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80012c8:	f000 fa16 	bl	80016f8 <bno055_delay>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  bno055_reset();
 80012d6:	f7ff ffef 	bl	80012b8 <bno055_reset>

  uint8_t id = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f9db 	bl	80016a0 <bno055_readData>
  if (id != BNO055_ID) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80012ee:	d004      	beq.n	80012fa <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <bno055_setup+0x4c>)
 80012f6:	f005 fcd1 	bl	8006c9c <iprintf>
  }
  bno055_setPage(0);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ffa8 	bl	8001250 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001300:	2100      	movs	r1, #0
 8001302:	203f      	movs	r0, #63	@ 0x3f
 8001304:	f000 f9aa 	bl	800165c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001308:	f7ff ffc8 	bl	800129c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f000 f9f3 	bl	80016f8 <bno055_delay>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800a1c0 	.word	0x0800a1c0

08001320 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001324:	b09e      	sub	sp, #120	@ 0x78
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ff8e 	bl	8001250 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001338:	2b20      	cmp	r3, #32
 800133a:	d108      	bne.n	800134e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800133c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001344:	2208      	movs	r2, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f9aa 	bl	80016a0 <bno055_readData>
 800134c:	e007      	b.n	800135e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800134e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001356:	2206      	movs	r2, #6
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f9a1 	bl	80016a0 <bno055_readData>

  double scale = 1;
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b8b      	ldr	r3, [pc, #556]	@ (8001590 <bno055_getVector+0x270>)
 8001364:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136c:	2b0e      	cmp	r3, #14
 800136e:	d109      	bne.n	8001384 <bno055_getVector+0x64>
    scale = magScale;
 8001370:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <bno055_getVector+0x274>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8d5 	bl	8000524 <__aeabi_ui2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001382:	e03e      	b.n	8001402 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001388:	2b08      	cmp	r3, #8
 800138a:	d007      	beq.n	800139c <bno055_getVector+0x7c>
 800138c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001390:	2b28      	cmp	r3, #40	@ 0x28
 8001392:	d003      	beq.n	800139c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001398:	2b2e      	cmp	r3, #46	@ 0x2e
 800139a:	d109      	bne.n	80013b0 <bno055_getVector+0x90>
    scale = accelScale;
 800139c:	4b7e      	ldr	r3, [pc, #504]	@ (8001598 <bno055_getVector+0x278>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8bf 	bl	8000524 <__aeabi_ui2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013ae:	e028      	b.n	8001402 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80013b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013b4:	2b14      	cmp	r3, #20
 80013b6:	d109      	bne.n	80013cc <bno055_getVector+0xac>
    scale = angularRateScale;
 80013b8:	4b78      	ldr	r3, [pc, #480]	@ (800159c <bno055_getVector+0x27c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8b1 	bl	8000524 <__aeabi_ui2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013ca:	e01a      	b.n	8001402 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80013cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d0:	2b1a      	cmp	r3, #26
 80013d2:	d109      	bne.n	80013e8 <bno055_getVector+0xc8>
    scale = eulerScale;
 80013d4:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <bno055_getVector+0x280>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8a3 	bl	8000524 <__aeabi_ui2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013e6:	e00c      	b.n	8001402 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80013e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d108      	bne.n	8001402 <bno055_getVector+0xe2>
    scale = quaScale;
 80013f0:	4b6c      	ldr	r3, [pc, #432]	@ (80015a4 <bno055_getVector+0x284>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f895 	bl	8000524 <__aeabi_ui2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	2220      	movs	r2, #32
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fcd1 	bl	8006db2 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001414:	2b20      	cmp	r3, #32
 8001416:	d150      	bne.n	80014ba <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001418:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f88a 	bl	8000544 <__aeabi_i2d>
 8001430:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001434:	f7ff fa1a 	bl	800086c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001440:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f876 	bl	8000544 <__aeabi_i2d>
 8001458:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800145c:	f7ff fa06 	bl	800086c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001468:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f862 	bl	8000544 <__aeabi_i2d>
 8001480:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001484:	f7ff f9f2 	bl	800086c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001490:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f84e 	bl	8000544 <__aeabi_i2d>
 80014a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014ac:	f7ff f9de 	bl	800086c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80014b8:	e03b      	b.n	8001532 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014ba:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f839 	bl	8000544 <__aeabi_i2d>
 80014d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014d6:	f7ff f9c9 	bl	800086c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014e2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f825 	bl	8000544 <__aeabi_i2d>
 80014fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014fe:	f7ff f9b5 	bl	800086c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800150a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f811 	bl	8000544 <__aeabi_i2d>
 8001522:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001526:	f7ff f9a1 	bl	800086c <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001532:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001536:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001546:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800154a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800154e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001552:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001556:	ec49 8b14 	vmov	d4, r8, r9
 800155a:	ec45 4b15 	vmov	d5, r4, r5
 800155e:	ec41 0b16 	vmov	d6, r0, r1
 8001562:	ec43 2b17 	vmov	d7, r2, r3
}
 8001566:	eeb0 0a44 	vmov.f32	s0, s8
 800156a:	eef0 0a64 	vmov.f32	s1, s9
 800156e:	eeb0 1a45 	vmov.f32	s2, s10
 8001572:	eef0 1a65 	vmov.f32	s3, s11
 8001576:	eeb0 2a46 	vmov.f32	s4, s12
 800157a:	eef0 2a66 	vmov.f32	s5, s13
 800157e:	eeb0 3a47 	vmov.f32	s6, s14
 8001582:	eef0 3a67 	vmov.f32	s7, s15
 8001586:	3778      	adds	r7, #120	@ 0x78
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800158e:	bf00      	nop
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	20000006 	.word	0x20000006
 8001598:	20000000 	.word	0x20000000
 800159c:	20000002 	.word	0x20000002
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000008 	.word	0x20000008

080015a8 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80015a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015ac:	b090      	sub	sp, #64	@ 0x40
 80015ae:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80015b0:	201a      	movs	r0, #26
 80015b2:	f7ff feb5 	bl	8001320 <bno055_getVector>
 80015b6:	eeb0 4a40 	vmov.f32	s8, s0
 80015ba:	eef0 4a60 	vmov.f32	s9, s1
 80015be:	eeb0 5a41 	vmov.f32	s10, s2
 80015c2:	eef0 5a61 	vmov.f32	s11, s3
 80015c6:	eeb0 6a42 	vmov.f32	s12, s4
 80015ca:	eef0 6a62 	vmov.f32	s13, s5
 80015ce:	eeb0 7a43 	vmov.f32	s14, s6
 80015d2:	eef0 7a63 	vmov.f32	s15, s7
 80015d6:	ed87 4b08 	vstr	d4, [r7, #32]
 80015da:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80015de:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80015e2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80015e6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80015ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015f6:	ec49 8b14 	vmov	d4, r8, r9
 80015fa:	ec45 4b15 	vmov	d5, r4, r5
 80015fe:	ec41 0b16 	vmov	d6, r0, r1
 8001602:	ec43 2b17 	vmov	d7, r2, r3
}
 8001606:	eeb0 0a44 	vmov.f32	s0, s8
 800160a:	eef0 0a64 	vmov.f32	s1, s9
 800160e:	eeb0 1a45 	vmov.f32	s2, s10
 8001612:	eef0 1a65 	vmov.f32	s3, s11
 8001616:	eeb0 2a46 	vmov.f32	s4, s12
 800161a:	eef0 2a66 	vmov.f32	s5, s13
 800161e:	eeb0 3a47 	vmov.f32	s6, s14
 8001622:	eef0 3a67 	vmov.f32	s7, s15
 8001626:	3740      	adds	r7, #64	@ 0x40
 8001628:	46bd      	mov	sp, r7
 800162a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001630 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001634:	f3bf 8f4f 	dsb	sy
}
 8001638:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <__NVIC_SystemReset+0x24>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001642:	4904      	ldr	r1, [pc, #16]	@ (8001654 <__NVIC_SystemReset+0x24>)
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <__NVIC_SystemReset+0x28>)
 8001646:	4313      	orrs	r3, r2
 8001648:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <__NVIC_SystemReset+0x20>
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	05fa0004 	.word	0x05fa0004

0800165c <bno055_writeData>:

I2C_HandleTypeDef i2c;
LiquidCrystal_I2C_HandleTypeDef lcd;
LiquidCrystal_I2C_HandleTypeDef lcd2;

void bno055_writeData(uint8_t reg, uint8_t data) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	733b      	strb	r3, [r7, #12]
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001674:	f107 020c 	add.w	r2, r7, #12
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2302      	movs	r3, #2
 8001680:	2150      	movs	r1, #80	@ 0x50
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <bno055_writeData+0x40>)
 8001684:	f002 fda2 	bl	80041cc <HAL_I2C_Master_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <bno055_writeData+0x36>
        Error_Handler();
 800168e:	f000 f901 	bl	8001894 <Error_Handler>
    }
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000260 	.word	0x20000260

080016a0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80016b0:	1dfa      	adds	r2, r7, #7
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2150      	movs	r1, #80	@ 0x50
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <bno055_readData+0x54>)
 80016be:	f002 fd85 	bl	80041cc <HAL_I2C_Master_Transmit>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <bno055_readData+0x2c>
        Error_Handler();
 80016c8:	f000 f8e4 	bl	8001894 <Error_Handler>
    }
    if (HAL_I2C_Master_Receive(&i2c, BNO055_I2C_ADDR << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	2150      	movs	r1, #80	@ 0x50
 80016da:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <bno055_readData+0x54>)
 80016dc:	f002 fe74 	bl	80043c8 <HAL_I2C_Master_Receive>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <bno055_readData+0x4a>
        Error_Handler();
 80016e6:	f000 f8d5 	bl	8001894 <Error_Handler>
    }
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000260 	.word	0x20000260

080016f8 <bno055_delay>:

void bno055_delay(int time) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fbea 	bl	8001edc <HAL_Delay>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <main>:

int main(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	@ 0x48
 8001714:	af02      	add	r7, sp, #8
    HAL_Init();
 8001716:	f000 fb6f 	bl	8001df8 <HAL_Init>
    SystemClock_Config();
 800171a:	f000 f931 	bl	8001980 <SystemClock_Config>
    MX_GPIO_Init();
 800171e:	f000 f8ff 	bl	8001920 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001722:	f000 f8cf 	bl	80018c4 <MX_I2C1_Init>

    // Initialize LCD1 at 0x27
    LiquidCrystal_I2C_Init(&lcd, &i2c, 0x27, 20, 4);
 8001726:	2304      	movs	r3, #4
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2314      	movs	r3, #20
 800172c:	2227      	movs	r2, #39	@ 0x27
 800172e:	4952      	ldr	r1, [pc, #328]	@ (8001878 <main+0x168>)
 8001730:	4852      	ldr	r0, [pc, #328]	@ (800187c <main+0x16c>)
 8001732:	f7ff fc11 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd, 20, 4, LCD_5x8DOTS);
 8001736:	2300      	movs	r3, #0
 8001738:	2204      	movs	r2, #4
 800173a:	2114      	movs	r1, #20
 800173c:	484f      	ldr	r0, [pc, #316]	@ (800187c <main+0x16c>)
 800173e:	f7ff fc3a 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize LCD2 at 0x3F
    LiquidCrystal_I2C_Init(&lcd2, &i2c, 0x3F, 20, 4);
 8001742:	2304      	movs	r3, #4
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2314      	movs	r3, #20
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	494b      	ldr	r1, [pc, #300]	@ (8001878 <main+0x168>)
 800174c:	484c      	ldr	r0, [pc, #304]	@ (8001880 <main+0x170>)
 800174e:	f7ff fc03 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd2, 20, 4, LCD_5x8DOTS);
 8001752:	2300      	movs	r3, #0
 8001754:	2204      	movs	r2, #4
 8001756:	2114      	movs	r1, #20
 8001758:	4849      	ldr	r0, [pc, #292]	@ (8001880 <main+0x170>)
 800175a:	f7ff fc2c 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize BNO055
    bno055_setup();
 800175e:	f7ff fdb7 	bl	80012d0 <bno055_setup>
    bno055_setOperationModeNDOF();
 8001762:	f7ff fda2 	bl	80012aa <bno055_setOperationModeNDOF>
    bno055_vector_t euler;

    while (1) {

        // Read Euler
        euler = bno055_getVectorEuler();
 8001766:	f7ff ff1f 	bl	80015a8 <bno055_getVectorEuler>
 800176a:	eeb0 4a40 	vmov.f32	s8, s0
 800176e:	eef0 4a60 	vmov.f32	s9, s1
 8001772:	eeb0 5a41 	vmov.f32	s10, s2
 8001776:	eef0 5a61 	vmov.f32	s11, s3
 800177a:	eeb0 6a42 	vmov.f32	s12, s4
 800177e:	eef0 6a62 	vmov.f32	s13, s5
 8001782:	eeb0 7a43 	vmov.f32	s14, s6
 8001786:	eef0 7a63 	vmov.f32	s15, s7
 800178a:	ed87 4b02 	vstr	d4, [r7, #8]
 800178e:	ed87 5b04 	vstr	d5, [r7, #16]
 8001792:	ed87 6b06 	vstr	d6, [r7, #24]
 8001796:	ed87 7b08 	vstr	d7, [r7, #32]

        // Display Euler on LCD1
        LiquidCrystal_I2C_Clear(&lcd);
 800179a:	4838      	ldr	r0, [pc, #224]	@ (800187c <main+0x16c>)
 800179c:	f7ff fc6a 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	4835      	ldr	r0, [pc, #212]	@ (800187c <main+0x16c>)
 80017a6:	f7ff fc8d 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, sizeof(buffer), "Yaw: %.2f", euler.z);
 80017aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ae:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80017b2:	e9cd 2300 	strd	r2, r3, [sp]
 80017b6:	4a33      	ldr	r2, [pc, #204]	@ (8001884 <main+0x174>)
 80017b8:	2114      	movs	r1, #20
 80017ba:	f005 fa81 	bl	8006cc0 <sniprintf>
        LiquidCrystal_I2C_Print(&lcd, buffer);
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	4619      	mov	r1, r3
 80017c4:	482d      	ldr	r0, [pc, #180]	@ (800187c <main+0x16c>)
 80017c6:	f7ff fca7 	bl	8001118 <LiquidCrystal_I2C_Print>

        LiquidCrystal_I2C_SetCursor(&lcd, 0, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2100      	movs	r1, #0
 80017ce:	482b      	ldr	r0, [pc, #172]	@ (800187c <main+0x16c>)
 80017d0:	f7ff fc78 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, sizeof(buffer), "Pitch: %.2f", euler.y);
 80017d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80017dc:	e9cd 2300 	strd	r2, r3, [sp]
 80017e0:	4a29      	ldr	r2, [pc, #164]	@ (8001888 <main+0x178>)
 80017e2:	2114      	movs	r1, #20
 80017e4:	f005 fa6c 	bl	8006cc0 <sniprintf>
        LiquidCrystal_I2C_Print(&lcd, buffer);
 80017e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4823      	ldr	r0, [pc, #140]	@ (800187c <main+0x16c>)
 80017f0:	f7ff fc92 	bl	8001118 <LiquidCrystal_I2C_Print>

        LiquidCrystal_I2C_SetCursor(&lcd, 0, 2);
 80017f4:	2202      	movs	r2, #2
 80017f6:	2100      	movs	r1, #0
 80017f8:	4820      	ldr	r0, [pc, #128]	@ (800187c <main+0x16c>)
 80017fa:	f7ff fc63 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, sizeof(buffer), "Roll: %.2f", euler.x);
 80017fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001802:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001806:	e9cd 2300 	strd	r2, r3, [sp]
 800180a:	4a20      	ldr	r2, [pc, #128]	@ (800188c <main+0x17c>)
 800180c:	2114      	movs	r1, #20
 800180e:	f005 fa57 	bl	8006cc0 <sniprintf>
        LiquidCrystal_I2C_Print(&lcd, buffer);
 8001812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001816:	4619      	mov	r1, r3
 8001818:	4818      	ldr	r0, [pc, #96]	@ (800187c <main+0x16c>)
 800181a:	f7ff fc7d 	bl	8001118 <LiquidCrystal_I2C_Print>

        // Current Time
        time_t rawtime;
        struct tm * timeinfo;
        time(&rawtime);
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f005 fbdb 	bl	8006fdc <time>
        timeinfo = localtime(&rawtime);
 8001826:	463b      	mov	r3, r7
 8001828:	4618      	mov	r0, r3
 800182a:	f005 facb 	bl	8006dc4 <localtime>
 800182e:	63f8      	str	r0, [r7, #60]	@ 0x3c

        // Time on LCD2
        LiquidCrystal_I2C_Clear(&lcd2);
 8001830:	4813      	ldr	r0, [pc, #76]	@ (8001880 <main+0x170>)
 8001832:	f7ff fc1f 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	4811      	ldr	r0, [pc, #68]	@ (8001880 <main+0x170>)
 800183c:	f7ff fc42 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d", timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec);
 8001840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001850:	9201      	str	r2, [sp, #4]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <main+0x180>)
 8001858:	2114      	movs	r1, #20
 800185a:	f005 fa31 	bl	8006cc0 <sniprintf>
        LiquidCrystal_I2C_Print(&lcd2, buffer);
 800185e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001862:	4619      	mov	r1, r3
 8001864:	4806      	ldr	r0, [pc, #24]	@ (8001880 <main+0x170>)
 8001866:	f7ff fc57 	bl	8001118 <LiquidCrystal_I2C_Print>

        HAL_Delay(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186e:	f000 fb35 	bl	8001edc <HAL_Delay>
    while (1) {
 8001872:	bf00      	nop
 8001874:	e777      	b.n	8001766 <main+0x56>
 8001876:	bf00      	nop
 8001878:	20000260 	.word	0x20000260
 800187c:	200002b4 	.word	0x200002b4
 8001880:	200002c0 	.word	0x200002c0
 8001884:	0800a1fc 	.word	0x0800a1fc
 8001888:	0800a208 	.word	0x0800a208
 800188c:	0800a214 	.word	0x0800a214
 8001890:	0800a220 	.word	0x0800a220

08001894 <Error_Handler>:
    }
}

void Error_Handler(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    LiquidCrystal_I2C_Clear(&lcd);
 8001898:	4808      	ldr	r0, [pc, #32]	@ (80018bc <Error_Handler+0x28>)
 800189a:	f7ff fbeb 	bl	8001074 <LiquidCrystal_I2C_Clear>
    LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	4806      	ldr	r0, [pc, #24]	@ (80018bc <Error_Handler+0x28>)
 80018a4:	f7ff fc0e 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
    LiquidCrystal_I2C_Print(&lcd, "Error occurred!");
 80018a8:	4905      	ldr	r1, [pc, #20]	@ (80018c0 <Error_Handler+0x2c>)
 80018aa:	4804      	ldr	r0, [pc, #16]	@ (80018bc <Error_Handler+0x28>)
 80018ac:	f7ff fc34 	bl	8001118 <LiquidCrystal_I2C_Print>
    HAL_Delay(2000);
 80018b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018b4:	f000 fb12 	bl	8001edc <HAL_Delay>
    NVIC_SystemReset();
 80018b8:	f7ff feba 	bl	8001630 <__NVIC_SystemReset>
 80018bc:	200002b4 	.word	0x200002b4
 80018c0:	0800a238 	.word	0x0800a238

080018c4 <MX_I2C1_Init>:
}

//I2C Configuration
static void MX_I2C1_Init(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    i2c.Instance = I2C1;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018ca:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <MX_I2C1_Init+0x54>)
 80018cc:	601a      	str	r2, [r3, #0]
    i2c.Init.ClockSpeed = 100000;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018d0:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_I2C1_Init+0x58>)
 80018d2:	605a      	str	r2, [r3, #4]
    i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    i2c.Init.OwnAddress1 = 0;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018e6:	611a      	str	r2, [r3, #16]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2 = 0;
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&i2c) != HAL_OK) {
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_I2C1_Init+0x50>)
 8001902:	f002 fb1f 	bl	8003f44 <HAL_I2C_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_I2C1_Init+0x4c>
        Error_Handler();
 800190c:	f7ff ffc2 	bl	8001894 <Error_Handler>
    }
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000260 	.word	0x20000260
 8001918:	40005400 	.word	0x40005400
 800191c:	000186a0 	.word	0x000186a0

08001920 <MX_GPIO_Init>:

//SDL and SDA configurations
static void MX_GPIO_Init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <MX_GPIO_Init+0x58>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_GPIO_Init+0x58>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <MX_GPIO_Init+0x58>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001950:	23c0      	movs	r3, #192	@ 0xc0
 8001952:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_GPIO_Init+0x5c>)
 800196a:	f000 fbc1 	bl	80020f0 <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020400 	.word	0x40020400

08001980 <SystemClock_Config>:

//Sys Clock Configurations
void SystemClock_Config(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b092      	sub	sp, #72	@ 0x48
 8001984:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	2230      	movs	r2, #48	@ 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f005 fa0f 	bl	8006db2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <SystemClock_Config+0xac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <SystemClock_Config+0xac>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <SystemClock_Config+0xac>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 80019d2:	2308      	movs	r3, #8
 80019d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 80019d6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 faa5 	bl	8004f38 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x78>
        Error_Handler();
 80019f4:	f7ff ff4e 	bl	8001894 <Error_Handler>
    }
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f8:	230f      	movs	r3, #15
 80019fa:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2302      	movs	r3, #2
 80019fe:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a08:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0e:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2105      	movs	r1, #5
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fd07 	bl	8005428 <HAL_RCC_ClockConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xa4>
        Error_Handler();
 8001a20:	f7ff ff38 	bl	8001894 <Error_Handler>
    }
}
 8001a24:	bf00      	nop
 8001a26:	3748      	adds	r7, #72	@ 0x48
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6e:	2007      	movs	r0, #7
 8001a70:	f000 fb0a 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_I2C_MspInit+0xa4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d13b      	bne.n	8001b1a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001abe:	2340      	movs	r3, #64	@ 0x40
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <HAL_I2C_MspInit+0xac>)
 8001ada:	f000 fb09 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aee:	2304      	movs	r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <HAL_I2C_MspInit+0xac>)
 8001afa:	f000 faf9 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020400 	.word	0x40020400

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <NMI_Handler+0x4>

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 f989 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <OTG_FS_IRQHandler+0x10>)
 8001b96:	f000 fc47 	bl	8002428 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002d8 	.word	0x200002d8

08001ba4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <ITM_SendChar+0x48>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bec <ITM_SendChar+0x48>)
 8001bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <ITM_SendChar+0x4c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <ITM_SendChar+0x4c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001bc6:	bf00      	nop
 8001bc8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f8      	beq.n	8001bc8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001bd6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000edfc 	.word	0xe000edfc
 8001bf0:	e0000e00 	.word	0xe0000e00

08001bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_kill>:

int _kill(int pid, int sig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0e:	f005 fd4b 	bl	80076a8 <__errno>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2216      	movs	r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_exit>:

void _exit (int status)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <_exit+0x12>

08001c3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e00a      	b.n	8001c62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4c:	f3af 8000 	nop.w
 8001c50:	4601      	mov	r1, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	b2ca      	uxtb	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf0      	blt.n	8001c4c <_read+0x12>
  }

  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e009      	b.n	8001c9a <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff88 	bl	8001ba4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf1      	blt.n	8001c86 <_write+0x12>
  }
  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_close>:

int _close(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_isatty>:

int _isatty(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f005 fcb0 	bl	80076a8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	200002d0 	.word	0x200002d0
 8001d7c:	20000828 	.word	0x20000828

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	@ (8001de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f005 fc6f 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fc9b 	bl	8001710 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001de8:	0800a710 	.word	0x0800a710
  ldr r2, =_sbss
 8001dec:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001df0:	20000828 	.word	0x20000828

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <HAL_Init+0x40>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_Init+0x40>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_Init+0x40>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f931 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fe00 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f93b 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f911 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000010 	.word	0x20000010
 8001e94:	20000018 	.word	0x20000018
 8001e98:	20000014 	.word	0x20000014

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000018 	.word	0x20000018
 8001ec0:	200002d4 	.word	0x200002d4

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200002d4 	.word	0x200002d4

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000018 	.word	0x20000018

08001f24 <__NVIC_SetPriorityGrouping>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_SetPriority>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	@ (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	@ 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff47 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff5c 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffb0 	bl	8002044 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e16b      	b.n	80023e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 815a 	bne.w	80023de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80b4 	beq.w	80023de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b60      	ldr	r3, [pc, #384]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a5f      	ldr	r2, [pc, #380]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a5b      	ldr	r2, [pc, #364]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_GPIO_Init+0x314>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	@ (8002408 <HAL_GPIO_Init+0x318>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_GPIO_Init+0x31c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <HAL_GPIO_Init+0x320>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002414 <HAL_GPIO_Init+0x324>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <HAL_GPIO_Init+0x328>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	@ (800241c <HAL_GPIO_Init+0x32c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002420 <HAL_GPIO_Init+0x330>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x20a>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00e      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fa:	2308      	movs	r3, #8
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fe:	2306      	movs	r3, #6
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	@ (8002400 <HAL_GPIO_Init+0x310>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b3b      	ldr	r3, [pc, #236]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a32      	ldr	r2, [pc, #200]	@ (8002424 <HAL_GPIO_Init+0x334>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a27      	ldr	r2, [pc, #156]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <HAL_GPIO_Init+0x334>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae90 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	@ 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fb0c 	bl	8005a5c <USB_GetMode>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	f040 80fb 	bne.w	8002642 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 facf 	bl	80059f4 <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80f1 	beq.w	8002640 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fac6 	bl	80059f4 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002472:	d104      	bne.n	800247e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800247c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fab6 	bl	80059f4 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800248e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002492:	d104      	bne.n	800249e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800249c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 faa6 	bl	80059f4 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b2:	d104      	bne.n	80024be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fa96 	bl	80059f4 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fa88 	bl	80059f4 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ee:	d120      	bne.n	8002532 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80024f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d113      	bne.n	8002532 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800250a:	2110      	movs	r1, #16
 800250c:	6938      	ldr	r0, [r7, #16]
 800250e:	f003 f9b9 	bl	8005884 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002512:	6938      	ldr	r0, [r7, #16]
 8002514:	f003 f9e8 	bl	80058e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7a5b      	ldrb	r3, [r3, #9]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d105      	bne.n	800252c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f003 faa6 	bl	8005a78 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f003 fd5e 	bl	8005fee <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fa5c 	bl	80059f4 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002546:	d102      	bne.n	800254e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fc87 	bl	8003e5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fa4e 	bl	80059f4 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b08      	cmp	r3, #8
 8002560:	d106      	bne.n	8002570 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f003 fd27 	bl	8005fb6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2208      	movs	r2, #8
 800256e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fa3d 	bl	80059f4 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002584:	d139      	bne.n	80025fa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fab1 	bl	8005af2 <USB_HC_ReadInterrupt>
 8002590:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e025      	b.n	80025e4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d018      	beq.n	80025de <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c2:	d106      	bne.n	80025d2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f859 	bl	8002682 <HCD_HC_IN_IRQHandler>
 80025d0:	e005      	b.n	80025de <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 febb 	bl	8003354 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	795b      	ldrb	r3, [r3, #5]
 80025e8:	461a      	mov	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d3d3      	bcc.n	8002598 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f9f8 	bl	80059f4 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b10      	cmp	r3, #16
 800260c:	d101      	bne.n	8002612 <HAL_HCD_IRQHandler+0x1ea>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_HCD_IRQHandler+0x1ec>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d014      	beq.n	8002642 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0210 	bic.w	r2, r2, #16
 8002626:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f001 fb38 	bl	8003c9e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0210 	orr.w	r2, r2, #16
 800263c:	619a      	str	r2, [r3, #24]
 800263e:	e000      	b.n	8002642 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002640:	bf00      	nop
    }
  }
}
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_HCD_Stop+0x16>
 800265a:	2302      	movs	r3, #2
 800265c:	e00d      	b.n	800267a <HAL_HCD_Stop+0x32>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fb72 	bl	8005d54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 f9ba 	bl	8005a1a <USB_ReadChInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d11a      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2304      	movs	r3, #4
 80026c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	334d      	adds	r3, #77	@ 0x4d
 80026d2:	2207      	movs	r2, #7
 80026d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fa18 	bl	8005b14 <USB_HC_Halt>
 80026e4:	e09e      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 f993 	bl	8005a1a <USB_ReadChInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026fe:	d11b      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	2208      	movs	r2, #8
 8002726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f003 f9ef 	bl	8005b14 <USB_HC_Halt>
 8002736:	e075      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f003 f96a 	bl	8005a1a <USB_ReadChInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d11a      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	2308      	movs	r3, #8
 8002760:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	334d      	adds	r3, #77	@ 0x4d
 8002772:	2206      	movs	r2, #6
 8002774:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f9c8 	bl	8005b14 <USB_HC_Halt>
 8002784:	e04e      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f003 f943 	bl	8005a1a <USB_ReadChInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	d11b      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	334d      	adds	r3, #77	@ 0x4d
 80027c4:	2209      	movs	r2, #9
 80027c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 f99f 	bl	8005b14 <USB_HC_Halt>
 80027d6:	e025      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 f91a 	bl	8005a1a <USB_ReadChInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ec:	2b80      	cmp	r3, #128	@ 0x80
 80027ee:	d119      	bne.n	8002824 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	334d      	adds	r3, #77	@ 0x4d
 8002812:	2207      	movs	r2, #7
 8002814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f978 	bl	8005b14 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f003 f8f4 	bl	8005a1a <USB_ReadChInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800283c:	d112      	bne.n	8002864 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f003 f964 	bl	8005b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800285e:	6093      	str	r3, [r2, #8]
 8002860:	f000 bd75 	b.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f003 f8d4 	bl	8005a1a <USB_ReadChInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	f040 8128 	bne.w	8002ace <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	2320      	movs	r3, #32
 800288e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	331b      	adds	r3, #27
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d119      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	331b      	adds	r3, #27
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	799b      	ldrb	r3, [r3, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01b      	beq.n	800291a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3330      	adds	r3, #48	@ 0x30
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	1ac9      	subs	r1, r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3338      	adds	r3, #56	@ 0x38
 8002918:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334d      	adds	r3, #77	@ 0x4d
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3344      	adds	r3, #68	@ 0x44
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294e:	461a      	mov	r2, r3
 8002950:	2301      	movs	r3, #1
 8002952:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3326      	adds	r3, #38	@ 0x26
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3326      	adds	r3, #38	@ 0x26
 800297a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800297c:	2b02      	cmp	r3, #2
 800297e:	d110      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f003 f8c3 	bl	8005b14 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	e03d      	b.n	8002a1e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3326      	adds	r3, #38	@ 0x26
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d00a      	beq.n	80029ce <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	@ 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d127      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80029ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334c      	adds	r3, #76	@ 0x4c
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	334c      	adds	r3, #76	@ 0x4c
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f003 faf6 	bl	800600a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	799b      	ldrb	r3, [r3, #6]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d13b      	bne.n	8002a9e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3338      	adds	r3, #56	@ 0x38
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4403      	add	r3, r0
 8002a46:	3328      	adds	r3, #40	@ 0x28
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	440b      	add	r3, r1
 8002a4c:	1e59      	subs	r1, r3, #1
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3328      	adds	r3, #40	@ 0x28
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8470 	beq.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	333c      	adds	r3, #60	@ 0x3c
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2d8      	uxtb	r0, r3
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	333c      	adds	r3, #60	@ 0x3c
 8002a96:	4602      	mov	r2, r0
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	f000 bc58 	b.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	333c      	adds	r3, #60	@ 0x3c
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333c      	adds	r3, #60	@ 0x3c
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	f000 bc40 	b.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 ff9f 	bl	8005a1a <USB_ReadChInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d131      	bne.n	8002b4a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af2:	461a      	mov	r2, r3
 8002af4:	2320      	movs	r3, #32
 8002af6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331a      	adds	r3, #26
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 841f 	bne.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	331b      	adds	r3, #27
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	2203      	movs	r2, #3
 8002b36:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 ffe7 	bl	8005b14 <USB_HC_Halt>
 8002b46:	f000 bc02 	b.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 ff61 	bl	8005a1a <USB_ReadChInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 8305 	bne.w	800316e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	2302      	movs	r3, #2
 8002b74:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	334d      	adds	r3, #77	@ 0x4d
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d114      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	334d      	adds	r3, #77	@ 0x4d
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	334c      	adds	r3, #76	@ 0x4c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e2cc      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334d      	adds	r3, #77	@ 0x4d
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d114      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	334d      	adds	r3, #77	@ 0x4d
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334c      	adds	r3, #76	@ 0x4c
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e2ac      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334d      	adds	r3, #77	@ 0x4d
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d00b      	beq.n	8002c24 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	@ 0x4d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	f040 80a6 	bne.w	8002d70 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3344      	adds	r3, #68	@ 0x44
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4403      	add	r3, r0
 8002c58:	3344      	adds	r3, #68	@ 0x44
 8002c5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3344      	adds	r3, #68	@ 0x44
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d943      	bls.n	8002cfa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	@ 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	331a      	adds	r3, #26
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d123      	bne.n	8002ce4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	331b      	adds	r3, #27
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	331c      	adds	r3, #28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334c      	adds	r3, #76	@ 0x4c
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cf8:	e229      	b.n	800314e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334c      	adds	r3, #76	@ 0x4c
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3326      	adds	r3, #38	@ 0x26
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3326      	adds	r3, #38	@ 0x26
 8002d34:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	f040 8209 	bne.w	800314e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d52:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d5a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d6e:	e1ee      	b.n	800314e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334d      	adds	r3, #77	@ 0x4d
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	f040 80c8 	bne.w	8002f18 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2202      	movs	r2, #2
 8002d9a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	331b      	adds	r3, #27
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	f040 81ce 	bne.w	8003150 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3326      	adds	r3, #38	@ 0x26
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d16b      	bne.n	8002ea2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3348      	adds	r3, #72	@ 0x48
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	1c59      	adds	r1, r3, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4403      	add	r3, r0
 8002dea:	3348      	adds	r3, #72	@ 0x48
 8002dec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3348      	adds	r3, #72	@ 0x48
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d943      	bls.n	8002e8c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3348      	adds	r3, #72	@ 0x48
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	331b      	adds	r3, #27
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3344      	adds	r3, #68	@ 0x44
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d809      	bhi.n	8002e56 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	331c      	adds	r3, #28
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e74:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334c      	adds	r3, #76	@ 0x4c
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e014      	b.n	8002eb6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334c      	adds	r3, #76	@ 0x4c
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e009      	b.n	8002eb6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334c      	adds	r3, #76	@ 0x4c
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3326      	adds	r3, #38	@ 0x26
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3326      	adds	r3, #38	@ 0x26
 8002edc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	f040 8136 	bne.w	8003150 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002efa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f02:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e11b      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334d      	adds	r3, #77	@ 0x4d
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	f040 8081 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334d      	adds	r3, #77	@ 0x4d
 8002f40:	2202      	movs	r2, #2
 8002f42:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	331b      	adds	r3, #27
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 80fa 	bne.w	8003150 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334c      	adds	r3, #76	@ 0x4c
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	0151      	lsls	r1, r2, #5
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	440a      	add	r2, r1
 8002f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fca:	f023 0320 	bic.w	r3, r3, #32
 8002fce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3326      	adds	r3, #38	@ 0x26
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3326      	adds	r3, #38	@ 0x26
 8002ff6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 80a9 	bne.w	8003150 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003014:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800301c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e08e      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334d      	adds	r3, #77	@ 0x4d
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d143      	bne.n	80030d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334d      	adds	r3, #77	@ 0x4d
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334c      	adds	r3, #76	@ 0x4c
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3326      	adds	r3, #38	@ 0x26
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3326      	adds	r3, #38	@ 0x26
 8003096:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003098:	2b02      	cmp	r3, #2
 800309a:	d159      	bne.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e03f      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334d      	adds	r3, #77	@ 0x4d
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d126      	bne.n	8003134 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	@ 0x4d
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3344      	adds	r3, #68	@ 0x44
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	3344      	adds	r3, #68	@ 0x44
 800311c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334c      	adds	r3, #76	@ 0x4c
 800312e:	2204      	movs	r2, #4
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e00d      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	f000 8100 	beq.w	800334c <HCD_HC_IN_IRQHandler+0xcca>
 800314c:	e000      	b.n	8003150 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800314e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	334c      	adds	r3, #76	@ 0x4c
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f002 ff4f 	bl	800600a <HAL_HCD_HC_NotifyURBChange_Callback>
 800316c:	e0ef      	b.n	800334e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fc4f 	bl	8005a1a <USB_ReadChInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b40      	cmp	r3, #64	@ 0x40
 8003184:	d12f      	bne.n	80031e6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003192:	461a      	mov	r2, r3
 8003194:	2340      	movs	r3, #64	@ 0x40
 8003196:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	334d      	adds	r3, #77	@ 0x4d
 80031a8:	2205      	movs	r2, #5
 80031aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	331a      	adds	r3, #26
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3344      	adds	r3, #68	@ 0x44
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fc98 	bl	8005b14 <USB_HC_Halt>
 80031e4:	e0b3      	b.n	800334e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fc13 	bl	8005a1a <USB_ReadChInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	f040 80a7 	bne.w	800334e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3326      	adds	r3, #38	@ 0x26
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d11b      	bne.n	800324e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	@ 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334d      	adds	r3, #77	@ 0x4d
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fc64 	bl	8005b14 <USB_HC_Halt>
 800324c:	e03f      	b.n	80032ce <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	3326      	adds	r3, #38	@ 0x26
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3326      	adds	r3, #38	@ 0x26
 8003274:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003276:	2b02      	cmp	r3, #2
 8003278:	d129      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	799b      	ldrb	r3, [r3, #6]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HCD_HC_IN_IRQHandler+0xc2a>
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	331b      	adds	r3, #27
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d110      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	2204      	movs	r2, #4
 80032be:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f002 fc23 	bl	8005b14 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331b      	adds	r3, #27
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d129      	bne.n	8003338 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	331b      	adds	r3, #27
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	440a      	add	r2, r1
 800330e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	0151      	lsls	r1, r2, #5
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	440a      	add	r2, r1
 800332e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003332:	f043 0320 	orr.w	r3, r3, #32
 8003336:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	2310      	movs	r3, #16
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	e000      	b.n	800334e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800334c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f002 fb51 	bl	8005a1a <USB_ReadChInterrupts>
 8003378:	4603      	mov	r3, r0
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d11b      	bne.n	80033ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2304      	movs	r3, #4
 8003392:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	@ 0x4d
 80033a4:	2207      	movs	r2, #7
 80033a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fbaf 	bl	8005b14 <USB_HC_Halt>
 80033b6:	f000 bc6f 	b.w	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fb29 	bl	8005a1a <USB_ReadChInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 8082 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	2320      	movs	r3, #32
 80033e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3319      	adds	r3, #25
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d124      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3319      	adds	r3, #25
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	@ 0x4c
 8003420:	2202      	movs	r2, #2
 8003422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	2203      	movs	r2, #3
 8003436:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f002 fb67 	bl	8005b14 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	331a      	adds	r3, #26
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 841d 	bne.w	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	331b      	adds	r3, #27
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8411 	bne.w	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3326      	adds	r3, #38	@ 0x26
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d009      	beq.n	80034a0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	331b      	adds	r3, #27
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334d      	adds	r3, #77	@ 0x4d
 80034b0:	2203      	movs	r2, #3
 80034b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fb29 	bl	8005b14 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3344      	adds	r3, #68	@ 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e3df      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fa9a 	bl	8005a1a <USB_ReadChInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f0:	d111      	bne.n	8003516 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003504:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f002 fb00 	bl	8005b14 <USB_HC_Halt>
 8003514:	e3c0      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fa7b 	bl	8005a1a <USB_ReadChInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d168      	bne.n	8003600 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3344      	adds	r3, #68	@ 0x44
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f002 fa65 	bl	8005a1a <USB_ReadChInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	d112      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3319      	adds	r3, #25
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2340      	movs	r3, #64	@ 0x40
 800357e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	331b      	adds	r3, #27
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d019      	beq.n	80035ca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	331b      	adds	r3, #27
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d6:	461a      	mov	r2, r3
 80035d8:	2301      	movs	r3, #1
 80035da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fa8b 	bl	8005b14 <USB_HC_Halt>
 80035fe:	e34b      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f002 fa06 	bl	8005a1a <USB_ReadChInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d139      	bne.n	800368c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334d      	adds	r3, #77	@ 0x4d
 8003628:	2205      	movs	r2, #5
 800362a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	331a      	adds	r3, #26
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3319      	adds	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3344      	adds	r3, #68	@ 0x44
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fa4e 	bl	8005b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2340      	movs	r3, #64	@ 0x40
 8003688:	6093      	str	r3, [r2, #8]
 800368a:	e305      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f002 f9c0 	bl	8005a1a <USB_ReadChInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d11a      	bne.n	80036da <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	461a      	mov	r2, r3
 80036b2:	2308      	movs	r3, #8
 80036b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	2206      	movs	r2, #6
 80036c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fa1e 	bl	8005b14 <USB_HC_Halt>
 80036d8:	e2de      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 f999 	bl	8005a1a <USB_ReadChInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d144      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3344      	adds	r3, #68	@ 0x44
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	@ 0x4d
 8003716:	2204      	movs	r2, #4
 8003718:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3319      	adds	r3, #25
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d114      	bne.n	800375a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3318      	adds	r3, #24
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3319      	adds	r3, #25
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f002 f9d6 	bl	8005b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	2310      	movs	r3, #16
 8003778:	6093      	str	r3, [r2, #8]
 800377a:	e28d      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f002 f948 	bl	8005a1a <USB_ReadChInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003790:	2b80      	cmp	r3, #128	@ 0x80
 8003792:	d169      	bne.n	8003868 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	799b      	ldrb	r3, [r3, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334d      	adds	r3, #77	@ 0x4d
 80037ac:	2207      	movs	r2, #7
 80037ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 f9ab 	bl	8005b14 <USB_HC_Halt>
 80037be:	e049      	b.n	8003854 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	3344      	adds	r3, #68	@ 0x44
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4403      	add	r3, r0
 80037e0:	3344      	adds	r3, #68	@ 0x44
 80037e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3344      	adds	r3, #68	@ 0x44
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d922      	bls.n	8003840 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3344      	adds	r3, #68	@ 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334c      	adds	r3, #76	@ 0x4c
 800381e:	2204      	movs	r2, #4
 8003820:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	334c      	adds	r3, #76	@ 0x4c
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f002 fbe6 	bl	800600a <HAL_HCD_HC_NotifyURBChange_Callback>
 800383e:	e009      	b.n	8003854 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	334c      	adds	r3, #76	@ 0x4c
 8003850:	2202      	movs	r2, #2
 8003852:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	2380      	movs	r3, #128	@ 0x80
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	e217      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f002 f8d2 	bl	8005a1a <USB_ReadChInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003880:	d11b      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	334d      	adds	r3, #77	@ 0x4d
 8003892:	2209      	movs	r2, #9
 8003894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 f938 	bl	8005b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b0:	461a      	mov	r2, r3
 80038b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038b6:	6093      	str	r3, [r2, #8]
 80038b8:	e1ee      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 f8a9 	bl	8005a1a <USB_ReadChInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	f040 81df 	bne.w	8003c92 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2302      	movs	r3, #2
 80038e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334d      	adds	r3, #77	@ 0x4d
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 8093 	bne.w	8003a24 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	334d      	adds	r3, #77	@ 0x4d
 800390e:	2202      	movs	r2, #2
 8003910:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334c      	adds	r3, #76	@ 0x4c
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3326      	adds	r3, #38	@ 0x26
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d00b      	beq.n	8003954 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3326      	adds	r3, #38	@ 0x26
 800394c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800394e:	2b03      	cmp	r3, #3
 8003950:	f040 8190 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	799b      	ldrb	r3, [r3, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d115      	bne.n	8003988 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	333d      	adds	r3, #61	@ 0x3d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2d8      	uxtb	r0, r3
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	333d      	adds	r3, #61	@ 0x3d
 8003984:	4602      	mov	r2, r0
 8003986:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	799b      	ldrb	r3, [r3, #6]
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 8171 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3334      	adds	r3, #52	@ 0x34
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8165 	beq.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3334      	adds	r3, #52	@ 0x34
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4403      	add	r3, r0
 80039ca:	3328      	adds	r3, #40	@ 0x28
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	440b      	add	r3, r1
 80039d0:	1e59      	subs	r1, r3, #1
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	3328      	adds	r3, #40	@ 0x28
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 813f 	beq.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	333d      	adds	r3, #61	@ 0x3d
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2d8      	uxtb	r0, r3
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333d      	adds	r3, #61	@ 0x3d
 8003a1e:	4602      	mov	r2, r0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e127      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d120      	bne.n	8003a7c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	334d      	adds	r3, #77	@ 0x4d
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	331b      	adds	r3, #27
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 8107 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334c      	adds	r3, #76	@ 0x4c
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	e0fb      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	334d      	adds	r3, #77	@ 0x4d
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d13a      	bne.n	8003b08 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334d      	adds	r3, #77	@ 0x4d
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334c      	adds	r3, #76	@ 0x4c
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	331b      	adds	r3, #27
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 80d1 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	331b      	adds	r3, #27
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b04:	6053      	str	r3, [r2, #4]
 8003b06:	e0b5      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334d      	adds	r3, #77	@ 0x4d
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d114      	bne.n	8003b48 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	334d      	adds	r3, #77	@ 0x4d
 8003b2e:	2202      	movs	r2, #2
 8003b30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	334c      	adds	r3, #76	@ 0x4c
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e095      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334d      	adds	r3, #77	@ 0x4d
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d114      	bne.n	8003b88 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334d      	adds	r3, #77	@ 0x4d
 8003b6e:	2202      	movs	r2, #2
 8003b70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334c      	adds	r3, #76	@ 0x4c
 8003b82:	2205      	movs	r2, #5
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e075      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	334d      	adds	r3, #77	@ 0x4d
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b07      	cmp	r3, #7
 8003b9c:	d00a      	beq.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	334d      	adds	r3, #77	@ 0x4d
 8003bae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d170      	bne.n	8003c96 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	334d      	adds	r3, #77	@ 0x4d
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3344      	adds	r3, #68	@ 0x44
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1c59      	adds	r1, r3, #1
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4403      	add	r3, r0
 8003be8:	3344      	adds	r3, #68	@ 0x44
 8003bea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3344      	adds	r3, #68	@ 0x44
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d914      	bls.n	8003c2c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3344      	adds	r3, #68	@ 0x44
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	334c      	adds	r3, #76	@ 0x4c
 8003c26:	2204      	movs	r2, #4
 8003c28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c2a:	e022      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334c      	adds	r3, #76	@ 0x4c
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c72:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f002 f9bd 	bl	800600a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c90:	e002      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003c96:	bf00      	nop
  }
}
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08a      	sub	sp, #40	@ 0x28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	0c5b      	lsrs	r3, r3, #17
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d004      	beq.n	8003ce4 <HCD_RXQLVL_IRQHandler+0x46>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	f000 80b6 	beq.w	8003e4e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ce2:	e0b7      	b.n	8003e54 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80b3 	beq.w	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	332c      	adds	r3, #44	@ 0x2c
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a7 	beq.w	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3338      	adds	r3, #56	@ 0x38
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	18d1      	adds	r1, r2, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4403      	add	r3, r0
 8003d28:	3334      	adds	r3, #52	@ 0x34
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	f200 8083 	bhi.w	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	332c      	adds	r3, #44	@ 0x2c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f001 fdf9 	bl	8005944 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	332c      	adds	r3, #44	@ 0x2c
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	18d1      	adds	r1, r2, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4403      	add	r3, r0
 8003d76:	332c      	adds	r3, #44	@ 0x2c
 8003d78:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3338      	adds	r3, #56	@ 0x38
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	18d1      	adds	r1, r2, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	3338      	adds	r3, #56	@ 0x38
 8003da0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	0cdb      	lsrs	r3, r3, #19
 8003db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3328      	adds	r3, #40	@ 0x28
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d13f      	bne.n	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03c      	beq.n	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003df6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	333c      	adds	r3, #60	@ 0x3c
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f083 0301 	eor.w	r3, r3, #1
 8003e20:	b2d8      	uxtb	r0, r3
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	333c      	adds	r3, #60	@ 0x3c
 8003e32:	4602      	mov	r2, r0
 8003e34:	701a      	strb	r2, [r3, #0]
      break;
 8003e36:	e00c      	b.n	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334c      	adds	r3, #76	@ 0x4c
 8003e48:	2204      	movs	r2, #4
 8003e4a:	701a      	strb	r2, [r3, #0]
      break;
 8003e4c:	e001      	b.n	8003e52 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003e52:	bf00      	nop
  }
}
 8003e54:	bf00      	nop
 8003e56:	3728      	adds	r7, #40	@ 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003e88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d10b      	bne.n	8003eac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f002 f897 	bl	8005fd2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d132      	bne.n	8003f1c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d126      	bne.n	8003f16 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7a5b      	ldrb	r3, [r3, #9]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d113      	bne.n	8003ef8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003ed6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eda:	d106      	bne.n	8003eea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 fdc8 	bl	8005a78 <USB_InitFSLSPClkSel>
 8003ee8:	e011      	b.n	8003f0e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 fdc1 	bl	8005a78 <USB_InitFSLSPClkSel>
 8003ef6:	e00a      	b.n	8003f0e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	79db      	ldrb	r3, [r3, #7]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f06:	461a      	mov	r2, r3
 8003f08:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f0c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f002 f889 	bl	8006026 <HAL_HCD_PortEnabled_Callback>
 8003f14:	e002      	b.n	8003f1c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f002 f893 	bl	8006042 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d103      	bne.n	8003f2e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12b      	b.n	80041ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fd88 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f001 fc36 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d807      	bhi.n	8003fc8 <HAL_I2C_Init+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a80      	ldr	r2, [pc, #512]	@ (80041bc <HAL_I2C_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e006      	b.n	8003fd6 <HAL_I2C_Init+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a7d      	ldr	r2, [pc, #500]	@ (80041c0 <HAL_I2C_Init+0x27c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e7      	b.n	80041ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a78      	ldr	r2, [pc, #480]	@ (80041c4 <HAL_I2C_Init+0x280>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a6a      	ldr	r2, [pc, #424]	@ (80041b8 <HAL_I2C_Init+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <HAL_I2C_Init+0xd4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	e009      	b.n	800402c <HAL_I2C_Init+0xe8>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a69      	ldr	r2, [pc, #420]	@ (80041c8 <HAL_I2C_Init+0x284>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	3301      	adds	r3, #1
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800403e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	495c      	ldr	r1, [pc, #368]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d819      	bhi.n	8004080 <HAL_I2C_Init+0x13c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e59      	subs	r1, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb1 f3f3 	udiv	r3, r1, r3
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004060:	400b      	ands	r3, r1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_Init+0x138>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb1 f3f3 	udiv	r3, r1, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	e051      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 800407c:	2304      	movs	r3, #4
 800407e:	e04f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_I2C_Init+0x168>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_I2C_Init+0x18e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x196>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_I2C_Init+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e58      	subs	r0, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fe:	e00f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800414e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6911      	ldr	r1, [r2, #16]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	000186a0 	.word	0x000186a0
 80041bc:	001e847f 	.word	0x001e847f
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	10624dd3 	.word	0x10624dd3

080041cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	461a      	mov	r2, r3
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
 80041dc:	4613      	mov	r3, r2
 80041de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7fd fe70 	bl	8001ec4 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 80e0 	bne.w	80043b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	4970      	ldr	r1, [pc, #448]	@ (80043c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fc64 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e0d3      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_I2C_Master_Transmit+0x50>
 8004218:	2302      	movs	r3, #2
 800421a:	e0cc      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d007      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	@ 0x21
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2210      	movs	r2, #16
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	893a      	ldrh	r2, [r7, #8]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a50      	ldr	r2, [pc, #320]	@ (80043c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 face 	bl	800482c <I2C_MasterRequestWrite>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08d      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042b0:	e066      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fd22 	bl	8004d00 <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06b      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d11b      	bne.n	8004354 <HAL_I2C_Master_Transmit+0x188>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6a39      	ldr	r1, [r7, #32]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fd19 	bl	8004d90 <I2C_WaitOnBTFFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e01a      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d194      	bne.n	80042b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	00100002 	.word	0x00100002
 80043c4:	ffff0000 	.word	0xffff0000

080043c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	460b      	mov	r3, r1
 80043d6:	817b      	strh	r3, [r7, #10]
 80043d8:	4613      	mov	r3, r2
 80043da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043dc:	f7fd fd72 	bl	8001ec4 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	f040 8217 	bne.w	800481e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2319      	movs	r3, #25
 80043f6:	2201      	movs	r2, #1
 80043f8:	497c      	ldr	r1, [pc, #496]	@ (80045ec <HAL_I2C_Master_Receive+0x224>)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb66 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
 8004408:	e20a      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_I2C_Master_Receive+0x50>
 8004414:	2302      	movs	r3, #2
 8004416:	e203      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d007      	beq.n	800443e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2222      	movs	r2, #34	@ 0x22
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2210      	movs	r2, #16
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	893a      	ldrh	r2, [r7, #8]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a5c      	ldr	r2, [pc, #368]	@ (80045f0 <HAL_I2C_Master_Receive+0x228>)
 800447e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa52 	bl	8004930 <I2C_MasterRequestRead>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c4      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d113      	bne.n	80044c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e198      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d11b      	bne.n	8004506 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e178      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	2b02      	cmp	r3, #2
 800450c:	d11b      	bne.n	8004546 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	e158      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800456c:	e144      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	2b03      	cmp	r3, #3
 8004574:	f200 80f1 	bhi.w	800475a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	2b01      	cmp	r3, #1
 800457e:	d123      	bne.n	80045c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004582:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fc4b 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e145      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c6:	e117      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d14e      	bne.n	800466e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	4906      	ldr	r1, [pc, #24]	@ (80045f4 <HAL_I2C_Master_Receive+0x22c>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa76 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e11a      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
 80045ea:	bf00      	nop
 80045ec:	00100002 	.word	0x00100002
 80045f0:	ffff0000 	.word	0xffff0000
 80045f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800466c:	e0c4      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	496c      	ldr	r1, [pc, #432]	@ (8004828 <HAL_I2C_Master_Receive+0x460>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fa27 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cb      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	2200      	movs	r2, #0
 80046d2:	4955      	ldr	r1, [pc, #340]	@ (8004828 <HAL_I2C_Master_Receive+0x460>)
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f9f9 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e09d      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004758:	e04e      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fb5e 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e058      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d124      	bne.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f aeb6 	bne.w	800456e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3728      	adds	r7, #40	@ 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010004 	.word	0x00010004

0800482c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	460b      	mov	r3, r1
 800483a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d006      	beq.n	8004856 <I2C_MasterRequestWrite+0x2a>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d003      	beq.n	8004856 <I2C_MasterRequestWrite+0x2a>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004854:	d108      	bne.n	8004868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e00b      	b.n	8004880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	2b12      	cmp	r3, #18
 800486e:	d107      	bne.n	8004880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f91d 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a6:	d103      	bne.n	80048b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e035      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048bc:	d108      	bne.n	80048d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	e01b      	b.n	8004908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	11db      	asrs	r3, r3, #7
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f063 030f 	orn	r3, r3, #15
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <I2C_MasterRequestWrite+0xfc>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f966 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e010      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4907      	ldr	r1, [pc, #28]	@ (800492c <I2C_MasterRequestWrite+0x100>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f956 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	00010008 	.word	0x00010008
 800492c:	00010002 	.word	0x00010002

08004930 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	460b      	mov	r3, r1
 800493e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004954:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d006      	beq.n	800496a <I2C_MasterRequestRead+0x3a>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d003      	beq.n	800496a <I2C_MasterRequestRead+0x3a>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004968:	d108      	bne.n	800497c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00b      	b.n	8004994 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	2b11      	cmp	r3, #17
 8004982:	d107      	bne.n	8004994 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f893 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ba:	d103      	bne.n	80049c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e079      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049d0:	d108      	bne.n	80049e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d2:	897b      	ldrh	r3, [r7, #10]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]
 80049e2:	e05f      	b.n	8004aa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049e4:	897b      	ldrh	r3, [r7, #10]
 80049e6:	11db      	asrs	r3, r3, #7
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0306 	and.w	r3, r3, #6
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f063 030f 	orn	r3, r3, #15
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4930      	ldr	r1, [pc, #192]	@ (8004ac4 <I2C_MasterRequestRead+0x194>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f8dc 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e054      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4929      	ldr	r1, [pc, #164]	@ (8004ac8 <I2C_MasterRequestRead+0x198>)
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8cc 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e044      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f831 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d103      	bne.n	8004a88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e017      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	11db      	asrs	r3, r3, #7
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f063 030e 	orn	r3, r3, #14
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4907      	ldr	r1, [pc, #28]	@ (8004ac8 <I2C_MasterRequestRead+0x198>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f888 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	00010008 	.word	0x00010008
 8004ac8:	00010002 	.word	0x00010002

08004acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004adc:	e048      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d044      	beq.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fd f9ed 	bl	8001ec4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d139      	bne.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10d      	bne.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	e00c      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d116      	bne.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e023      	b.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10d      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	43da      	mvns	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	e00c      	b.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d093      	beq.n	8004ade <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bce:	e071      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bde:	d123      	bne.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e067      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d041      	beq.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c30:	f7fd f948 	bl	8001ec4 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d136      	bne.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10c      	bne.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e00b      	b.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e021      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10c      	bne.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e00b      	b.n	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af6d 	bne.w	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8e3 	bl	8004eda <I2C_IsAcknowledgeFailed>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e034      	b.n	8004d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d028      	beq.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fd f8cd 	bl	8001ec4 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11d      	bne.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d016      	beq.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b80      	cmp	r3, #128	@ 0x80
 8004d84:	d1c3      	bne.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9c:	e034      	b.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f89b 	bl	8004eda <I2C_IsAcknowledgeFailed>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e034      	b.n	8004e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d028      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fd f885 	bl	8001ec4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11d      	bne.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d016      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d1c3      	bne.n	8004d9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e2c:	e049      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d119      	bne.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0210 	mvn.w	r2, #16
 8004e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e030      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7fd f828 	bl	8001ec4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d016      	beq.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f043 0220 	orr.w	r2, r3, #32
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e007      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d1ae      	bne.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d11b      	bne.n	8004f2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004efa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f043 0204 	orr.w	r2, r3, #4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e267      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d075      	beq.n	8005042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f56:	4b88      	ldr	r3, [pc, #544]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d00c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f62:	4b85      	ldr	r3, [pc, #532]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d112      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6e:	4b82      	ldr	r3, [pc, #520]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05b      	beq.n	8005040 <HAL_RCC_OscConfig+0x108>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d157      	bne.n	8005040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e242      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCC_OscConfig+0x74>
 8004f9e:	4b76      	ldr	r3, [pc, #472]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a75      	ldr	r2, [pc, #468]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e01d      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x98>
 8004fb6:	4b70      	ldr	r3, [pc, #448]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6f      	ldr	r2, [pc, #444]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fd0:	4b69      	ldr	r3, [pc, #420]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a68      	ldr	r2, [pc, #416]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b66      	ldr	r3, [pc, #408]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d013      	beq.n	8005018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fc ff68 	bl	8001ec4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fc ff64 	bl	8001ec4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e207      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4b5b      	ldr	r3, [pc, #364]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0xc0>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fc ff54 	bl	8001ec4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005020:	f7fc ff50 	bl	8001ec4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1f3      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	4b51      	ldr	r3, [pc, #324]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0xe8>
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d063      	beq.n	8005116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504e:	4b4a      	ldr	r3, [pc, #296]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005062:	2b08      	cmp	r3, #8
 8005064:	d11c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005066:	4b44      	ldr	r3, [pc, #272]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d116      	bne.n	80050a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005072:	4b41      	ldr	r3, [pc, #260]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_RCC_OscConfig+0x152>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e1c7      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4937      	ldr	r1, [pc, #220]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800509a:	4313      	orrs	r3, r2
 800509c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509e:	e03a      	b.n	8005116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a8:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCC_OscConfig+0x244>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fc ff09 	bl	8001ec4 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b6:	f7fc ff05 	bl	8001ec4 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e1a8      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d4:	4b28      	ldr	r3, [pc, #160]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4925      	ldr	r1, [pc, #148]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]
 80050e8:	e015      	b.n	8005116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ea:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_RCC_OscConfig+0x244>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc fee8 	bl	8001ec4 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fc fee4 	bl	8001ec4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e187      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d036      	beq.n	8005190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <HAL_RCC_OscConfig+0x248>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fc fec8 	bl	8001ec4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005138:	f7fc fec4 	bl	8001ec4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e167      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x200>
 8005156:	e01b      	b.n	8005190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_RCC_OscConfig+0x248>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7fc feb1 	bl	8001ec4 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	e00e      	b.n	8005184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005166:	f7fc fead 	bl	8001ec4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d907      	bls.n	8005184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e150      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
 8005178:	40023800 	.word	0x40023800
 800517c:	42470000 	.word	0x42470000
 8005180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005184:	4b88      	ldr	r3, [pc, #544]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ea      	bne.n	8005166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8097 	beq.w	80052cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a2:	4b81      	ldr	r3, [pc, #516]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	4b7d      	ldr	r3, [pc, #500]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	4a7c      	ldr	r2, [pc, #496]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051be:	4b7a      	ldr	r3, [pc, #488]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ce:	4b77      	ldr	r3, [pc, #476]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d118      	bne.n	800520c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051da:	4b74      	ldr	r3, [pc, #464]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a73      	ldr	r2, [pc, #460]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e6:	f7fc fe6d 	bl	8001ec4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ee:	f7fc fe69 	bl	8001ec4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e10c      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005200:	4b6a      	ldr	r3, [pc, #424]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d106      	bne.n	8005222 <HAL_RCC_OscConfig+0x2ea>
 8005214:	4b64      	ldr	r3, [pc, #400]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005218:	4a63      	ldr	r2, [pc, #396]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005220:	e01c      	b.n	800525c <HAL_RCC_OscConfig+0x324>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b05      	cmp	r3, #5
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x30c>
 800522a:	4b5f      	ldr	r3, [pc, #380]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005230:	f043 0304 	orr.w	r3, r3, #4
 8005234:	6713      	str	r3, [r2, #112]	@ 0x70
 8005236:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523a:	4a5b      	ldr	r2, [pc, #364]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6713      	str	r3, [r2, #112]	@ 0x70
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0x324>
 8005244:	4b58      	ldr	r3, [pc, #352]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a57      	ldr	r2, [pc, #348]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	4b55      	ldr	r3, [pc, #340]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005254:	4a54      	ldr	r2, [pc, #336]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc fe2e 	bl	8001ec4 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fc fe2a 	bl	8001ec4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0cb      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	4b49      	ldr	r3, [pc, #292]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RCC_OscConfig+0x334>
 800528e:	e014      	b.n	80052ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005290:	f7fc fe18 	bl	8001ec4 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005296:	e00a      	b.n	80052ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fc fe14 	bl	8001ec4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0b5      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ae:	4b3e      	ldr	r3, [pc, #248]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1ee      	bne.n	8005298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d105      	bne.n	80052cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c0:	4b39      	ldr	r3, [pc, #228]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	4a38      	ldr	r2, [pc, #224]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a1 	beq.w	8005418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d6:	4b34      	ldr	r3, [pc, #208]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d05c      	beq.n	800539c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d141      	bne.n	800536e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b31      	ldr	r3, [pc, #196]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fc fde8 	bl	8001ec4 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fc fde4 	bl	8001ec4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e087      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	491b      	ldr	r1, [pc, #108]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7fc fdbd 	bl	8001ec4 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534e:	f7fc fdb9 	bl	8001ec4 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e05c      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005360:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x416>
 800536c:	e054      	b.n	8005418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fc fda6 	bl	8001ec4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537c:	f7fc fda2 	bl	8001ec4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e045      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x444>
 800539a:	e03d      	b.n	8005418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e038      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40007000 	.word	0x40007000
 80053b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x4ec>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d028      	beq.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d121      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d11a      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d111      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800

08005428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0cc      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	4b68      	ldr	r3, [pc, #416]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d90c      	bls.n	8005464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b65      	ldr	r3, [pc, #404]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b63      	ldr	r3, [pc, #396]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0b8      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d020      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800547c:	4b59      	ldr	r3, [pc, #356]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a58      	ldr	r2, [pc, #352]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005494:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a52      	ldr	r2, [pc, #328]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800549e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a0:	4b50      	ldr	r3, [pc, #320]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	494d      	ldr	r1, [pc, #308]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d044      	beq.n	8005548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d119      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e07f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d003      	beq.n	80054e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b3f      	ldr	r3, [pc, #252]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	4b3b      	ldr	r3, [pc, #236]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e067      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005506:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4934      	ldr	r1, [pc, #208]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	4313      	orrs	r3, r2
 8005516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005518:	f7fc fcd4 	bl	8001ec4 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fc fcd0 	bl	8001ec4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e04f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 020c 	and.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d1eb      	bne.n	8005520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d20c      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b22      	ldr	r3, [pc, #136]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b20      	ldr	r3, [pc, #128]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e032      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4916      	ldr	r1, [pc, #88]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559a:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	490e      	ldr	r1, [pc, #56]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ae:	f000 f821 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	490a      	ldr	r1, [pc, #40]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 80055c0:	5ccb      	ldrb	r3, [r1, r3]
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc fc34 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40023c00 	.word	0x40023c00
 80055e4:	40023800 	.word	0x40023800
 80055e8:	0800a254 	.word	0x0800a254
 80055ec:	20000010 	.word	0x20000010
 80055f0:	20000014 	.word	0x20000014

080055f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f8:	b094      	sub	sp, #80	@ 0x50
 80055fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005600:	2300      	movs	r3, #0
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005604:	2300      	movs	r3, #0
 8005606:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560c:	4b79      	ldr	r3, [pc, #484]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b08      	cmp	r3, #8
 8005616:	d00d      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x40>
 8005618:	2b08      	cmp	r3, #8
 800561a:	f200 80e1 	bhi.w	80057e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x34>
 8005622:	2b04      	cmp	r3, #4
 8005624:	d003      	beq.n	800562e <HAL_RCC_GetSysClockFreq+0x3a>
 8005626:	e0db      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005628:	4b73      	ldr	r3, [pc, #460]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800562c:	e0db      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562e:	4b73      	ldr	r3, [pc, #460]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005630:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005632:	e0d8      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005634:	4b6f      	ldr	r3, [pc, #444]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800563c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563e:	4b6d      	ldr	r3, [pc, #436]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d063      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800564a:	4b6a      	ldr	r3, [pc, #424]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	099b      	lsrs	r3, r3, #6
 8005650:	2200      	movs	r2, #0
 8005652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005654:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
 8005662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	f04f 0000 	mov.w	r0, #0
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	0159      	lsls	r1, r3, #5
 8005674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005678:	0150      	lsls	r0, r2, #5
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4621      	mov	r1, r4
 8005680:	1a51      	subs	r1, r2, r1
 8005682:	6139      	str	r1, [r7, #16]
 8005684:	4629      	mov	r1, r5
 8005686:	eb63 0301 	sbc.w	r3, r3, r1
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005698:	4659      	mov	r1, fp
 800569a:	018b      	lsls	r3, r1, #6
 800569c:	4651      	mov	r1, sl
 800569e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056a2:	4651      	mov	r1, sl
 80056a4:	018a      	lsls	r2, r1, #6
 80056a6:	4651      	mov	r1, sl
 80056a8:	ebb2 0801 	subs.w	r8, r2, r1
 80056ac:	4659      	mov	r1, fp
 80056ae:	eb63 0901 	sbc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	462b      	mov	r3, r5
 80056d4:	eb49 0303 	adc.w	r3, r9, r3
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056e6:	4629      	mov	r1, r5
 80056e8:	024b      	lsls	r3, r1, #9
 80056ea:	4621      	mov	r1, r4
 80056ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056f0:	4621      	mov	r1, r4
 80056f2:	024a      	lsls	r2, r1, #9
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fa:	2200      	movs	r2, #0
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005704:	f7fb fab0 	bl	8000c68 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005710:	e058      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005712:	4b38      	ldr	r3, [pc, #224]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	2200      	movs	r2, #0
 800571a:	4618      	mov	r0, r3
 800571c:	4611      	mov	r1, r2
 800571e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	2300      	movs	r3, #0
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
 8005728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	f04f 0100 	mov.w	r1, #0
 8005738:	0159      	lsls	r1, r3, #5
 800573a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800573e:	0150      	lsls	r0, r2, #5
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4641      	mov	r1, r8
 8005746:	ebb2 0a01 	subs.w	sl, r2, r1
 800574a:	4649      	mov	r1, r9
 800574c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800575c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005764:	ebb2 040a 	subs.w	r4, r2, sl
 8005768:	eb63 050b 	sbc.w	r5, r3, fp
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	00eb      	lsls	r3, r5, #3
 8005776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800577a:	00e2      	lsls	r2, r4, #3
 800577c:	4614      	mov	r4, r2
 800577e:	461d      	mov	r5, r3
 8005780:	4643      	mov	r3, r8
 8005782:	18e3      	adds	r3, r4, r3
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	464b      	mov	r3, r9
 8005788:	eb45 0303 	adc.w	r3, r5, r3
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800579a:	4629      	mov	r1, r5
 800579c:	028b      	lsls	r3, r1, #10
 800579e:	4621      	mov	r1, r4
 80057a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057a4:	4621      	mov	r1, r4
 80057a6:	028a      	lsls	r2, r1, #10
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ae:	2200      	movs	r2, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	61fa      	str	r2, [r7, #28]
 80057b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b8:	f7fb fa56 	bl	8000c68 <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4613      	mov	r3, r2
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057c4:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	3301      	adds	r3, #1
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80057d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057de:	e002      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3750      	adds	r7, #80	@ 0x50
 80057ec:	46bd      	mov	sp, r7
 80057ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	00f42400 	.word	0x00f42400
 80057fc:	007a1200 	.word	0x007a1200

08005800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005804:	4b03      	ldr	r3, [pc, #12]	@ (8005814 <HAL_RCC_GetHCLKFreq+0x14>)
 8005806:	681b      	ldr	r3, [r3, #0]
}
 8005808:	4618      	mov	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010

08005818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800581c:	f7ff fff0 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	0a9b      	lsrs	r3, r3, #10
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4903      	ldr	r1, [pc, #12]	@ (800583c <HAL_RCC_GetPCLK1Freq+0x24>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40023800 	.word	0x40023800
 800583c:	0800a264 	.word	0x0800a264

08005840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f043 0201 	orr.w	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800589e:	d901      	bls.n	80058a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e01b      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	daf2      	bge.n	8005892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	019b      	lsls	r3, r3, #6
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c8:	d901      	bls.n	80058ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e006      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d0f0      	beq.n	80058bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005900:	d901      	bls.n	8005906 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e018      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	daf2      	bge.n	80058f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2210      	movs	r2, #16
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005924:	d901      	bls.n	800592a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d0f0      	beq.n	8005918 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005944:	b480      	push	{r7}
 8005946:	b08b      	sub	sp, #44	@ 0x2c
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	b29b      	uxth	r3, r3
 8005960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	e014      	b.n	800599a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	601a      	str	r2, [r3, #0]
    pDest++;
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	3301      	adds	r3, #1
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	3301      	adds	r3, #1
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	3301      	adds	r3, #1
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	3301      	adds	r3, #1
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3e6      	bcc.n	8005970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059a2:	8bfb      	ldrh	r3, [r7, #30]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01e      	beq.n	80059e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b2:	461a      	mov	r2, r3
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	701a      	strb	r2, [r3, #0]
      i++;
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	3301      	adds	r3, #1
 80059d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	3301      	adds	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80059da:	8bfb      	ldrh	r3, [r7, #30]
 80059dc:	3b01      	subs	r3, #1
 80059de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059e0:	8bfb      	ldrh	r3, [r7, #30]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ea      	bne.n	80059bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	372c      	adds	r7, #44	@ 0x2c
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0301 	and.w	r3, r3, #1
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ac6:	6053      	str	r3, [r2, #4]
 8005ac8:	e00c      	b.n	8005ae4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d107      	bne.n	8005ae0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	e001      	b.n	8005ae4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	b29b      	uxth	r3, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	@ 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	0c9b      	lsrs	r3, r3, #18
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0fdb      	lsrs	r3, r3, #31
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	0fdb      	lsrs	r3, r3, #31
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d10d      	bne.n	8005b96 <USB_HC_Halt+0x82>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <USB_HC_Halt+0x82>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d002      	beq.n	8005b92 <USB_HC_Halt+0x7e>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d101      	bne.n	8005b96 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e0d8      	b.n	8005d48 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <USB_HC_Halt+0x8e>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d173      	bne.n	8005c8a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bc0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d14a      	bne.n	8005c64 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d133      	bne.n	8005c42 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c18:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c26:	d82e      	bhi.n	8005c86 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c3e:	d0ec      	beq.n	8005c1a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c40:	e081      	b.n	8005d46 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c62:	e070      	b.n	8005d46 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c82:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c84:	e05f      	b.n	8005d46 <USB_HC_Halt+0x232>
            break;
 8005c86:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c88:	e05d      	b.n	8005d46 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ca8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d133      	bne.n	8005d22 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cd8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cf8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d06:	d81d      	bhi.n	8005d44 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d1e:	d0ec      	beq.n	8005cfa <USB_HC_Halt+0x1e6>
 8005d20:	e011      	b.n	8005d46 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e000      	b.n	8005d46 <USB_HC_Halt+0x232>
          break;
 8005d44:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3724      	adds	r7, #36	@ 0x24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fd7a 	bl	8005862 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d6e:	2110      	movs	r1, #16
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fd87 	bl	8005884 <USB_FlushTxFifo>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fdb1 	bl	80058e8 <USB_FlushRxFifo>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e01f      	b.n	8005dd6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005db4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dca:	461a      	mov	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d9dc      	bls.n	8005d96 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e034      	b.n	8005e4c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	461a      	mov	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e28:	d80c      	bhi.n	8005e44 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e40:	d0ec      	beq.n	8005e1c <USB_StopHost+0xc8>
 8005e42:	e000      	b.n	8005e46 <USB_StopHost+0xf2>
        break;
 8005e44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d9c7      	bls.n	8005de2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fce9 	bl	8005840 <USB_EnableGlobalInt>

  return ret;
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f804 	bl	8005e9c <USBH_HandleSof>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b0b      	cmp	r3, #11
 8005eac:	d10a      	bne.n	8005ec4 <USBH_HandleSof+0x28>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005edc:	bf00      	nop
}
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005ef8:	bf00      	nop
}
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f883 	bl	800605e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	791b      	ldrb	r3, [r3, #4]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f80b 	bl	8005f7a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	795b      	ldrb	r3, [r3, #5]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f805 	bl	8005f7a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	2b0f      	cmp	r3, #15
 8005f8a:	d80d      	bhi.n	8005fa8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	33e0      	adds	r3, #224	@ 0xe0
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	33e0      	adds	r3, #224	@ 0xe0
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff57 	bl	8005e78 <USBH_LL_IncTimer>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff8f 	bl	8005f04 <USBH_LL_Connect>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ff98 	bl	8005f32 <USBH_LL_Disconnect>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
 8006016:	4613      	mov	r3, r2
 8006018:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff49 	bl	8005ecc <USBH_LL_PortEnabled>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ff49 	bl	8005ee8 <USBH_LL_PortDisabled>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc fae7 	bl	8002648 <HAL_HCD_Stop>
 800607a:	4603      	mov	r3, r0
 800607c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 f807 	bl	8006094 <USBH_Get_USB_Status>
 8006086:	4603      	mov	r3, r0
 8006088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800608a:	7bbb      	ldrb	r3, [r7, #14]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d817      	bhi.n	80060d8 <USBH_Get_USB_Status+0x44>
 80060a8:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <USBH_Get_USB_Status+0x1c>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060c7 	.word	0x080060c7
 80060b8:	080060cd 	.word	0x080060cd
 80060bc:	080060d3 	.word	0x080060d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
    break;
 80060c4:	e00b      	b.n	80060de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	73fb      	strb	r3, [r7, #15]
    break;
 80060ca:	e008      	b.n	80060de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
    break;
 80060d0:	e005      	b.n	80060de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80060d2:	2302      	movs	r3, #2
 80060d4:	73fb      	strb	r3, [r7, #15]
    break;
 80060d6:	e002      	b.n	80060de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80060d8:	2302      	movs	r3, #2
 80060da:	73fb      	strb	r3, [r7, #15]
    break;
 80060dc:	bf00      	nop
  }
  return usb_status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <malloc>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	@ (80060f8 <malloc+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f000 b82d 	b.w	8006150 <_malloc_r>
 80060f6:	bf00      	nop
 80060f8:	20000030 	.word	0x20000030

080060fc <free>:
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <free+0xc>)
 80060fe:	4601      	mov	r1, r0
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f002 b981 	b.w	8008408 <_free_r>
 8006106:	bf00      	nop
 8006108:	20000030 	.word	0x20000030

0800610c <sbrk_aligned>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0f      	ldr	r6, [pc, #60]	@ (800614c <sbrk_aligned+0x40>)
 8006110:	460c      	mov	r4, r1
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	4605      	mov	r5, r0
 8006116:	b911      	cbnz	r1, 800611e <sbrk_aligned+0x12>
 8006118:	f001 faa4 	bl	8007664 <_sbrk_r>
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f001 fa9f 	bl	8007664 <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d103      	bne.n	8006132 <sbrk_aligned+0x26>
 800612a:	f04f 34ff 	mov.w	r4, #4294967295
 800612e:	4620      	mov	r0, r4
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	1cc4      	adds	r4, r0, #3
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	42a0      	cmp	r0, r4
 800613a:	d0f8      	beq.n	800612e <sbrk_aligned+0x22>
 800613c:	1a21      	subs	r1, r4, r0
 800613e:	4628      	mov	r0, r5
 8006140:	f001 fa90 	bl	8007664 <_sbrk_r>
 8006144:	3001      	adds	r0, #1
 8006146:	d1f2      	bne.n	800612e <sbrk_aligned+0x22>
 8006148:	e7ef      	b.n	800612a <sbrk_aligned+0x1e>
 800614a:	bf00      	nop
 800614c:	200006b8 	.word	0x200006b8

08006150 <_malloc_r>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4606      	mov	r6, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d904      	bls.n	8006176 <_malloc_r+0x26>
 800616c:	230c      	movs	r3, #12
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	2000      	movs	r0, #0
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800624c <_malloc_r+0xfc>
 800617a:	f000 f869 	bl	8006250 <__malloc_lock>
 800617e:	f8d8 3000 	ldr.w	r3, [r8]
 8006182:	461c      	mov	r4, r3
 8006184:	bb44      	cbnz	r4, 80061d8 <_malloc_r+0x88>
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ffbf 	bl	800610c <sbrk_aligned>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	4604      	mov	r4, r0
 8006192:	d158      	bne.n	8006246 <_malloc_r+0xf6>
 8006194:	f8d8 4000 	ldr.w	r4, [r8]
 8006198:	4627      	mov	r7, r4
 800619a:	2f00      	cmp	r7, #0
 800619c:	d143      	bne.n	8006226 <_malloc_r+0xd6>
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d04b      	beq.n	800623a <_malloc_r+0xea>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	eb04 0903 	add.w	r9, r4, r3
 80061ac:	f001 fa5a 	bl	8007664 <_sbrk_r>
 80061b0:	4581      	cmp	r9, r0
 80061b2:	d142      	bne.n	800623a <_malloc_r+0xea>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	1a6d      	subs	r5, r5, r1
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa6 	bl	800610c <sbrk_aligned>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d03a      	beq.n	800623a <_malloc_r+0xea>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	442b      	add	r3, r5
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	f8d8 3000 	ldr.w	r3, [r8]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	bb62      	cbnz	r2, 800622c <_malloc_r+0xdc>
 80061d2:	f8c8 7000 	str.w	r7, [r8]
 80061d6:	e00f      	b.n	80061f8 <_malloc_r+0xa8>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	1b52      	subs	r2, r2, r5
 80061dc:	d420      	bmi.n	8006220 <_malloc_r+0xd0>
 80061de:	2a0b      	cmp	r2, #11
 80061e0:	d917      	bls.n	8006212 <_malloc_r+0xc2>
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	6025      	str	r5, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	6059      	strne	r1, [r3, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	bf08      	it	eq
 80061f0:	f8c8 1000 	streq.w	r1, [r8]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f82f 	bl	800625c <__malloc_unlock>
 80061fe:	f104 000b 	add.w	r0, r4, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	f020 0007 	bic.w	r0, r0, #7
 8006208:	1ac2      	subs	r2, r0, r3
 800620a:	bf1c      	itt	ne
 800620c:	1a1b      	subne	r3, r3, r0
 800620e:	50a3      	strne	r3, [r4, r2]
 8006210:	e7af      	b.n	8006172 <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	f8c8 2000 	streq.w	r2, [r8]
 800621c:	605a      	strne	r2, [r3, #4]
 800621e:	e7eb      	b.n	80061f8 <_malloc_r+0xa8>
 8006220:	4623      	mov	r3, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7ae      	b.n	8006184 <_malloc_r+0x34>
 8006226:	463c      	mov	r4, r7
 8006228:	687f      	ldr	r7, [r7, #4]
 800622a:	e7b6      	b.n	800619a <_malloc_r+0x4a>
 800622c:	461a      	mov	r2, r3
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	42a3      	cmp	r3, r4
 8006232:	d1fb      	bne.n	800622c <_malloc_r+0xdc>
 8006234:	2300      	movs	r3, #0
 8006236:	6053      	str	r3, [r2, #4]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa8>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f80c 	bl	800625c <__malloc_unlock>
 8006244:	e794      	b.n	8006170 <_malloc_r+0x20>
 8006246:	6005      	str	r5, [r0, #0]
 8006248:	e7d6      	b.n	80061f8 <_malloc_r+0xa8>
 800624a:	bf00      	nop
 800624c:	200006bc 	.word	0x200006bc

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	@ (8006258 <__malloc_lock+0x8>)
 8006252:	f001 ba55 	b.w	8007700 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	20000826 	.word	0x20000826

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	@ (8006264 <__malloc_unlock+0x8>)
 800625e:	f001 ba51 	b.w	8007704 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	20000826 	.word	0x20000826

08006268 <__cvt>:
 8006268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	ec57 6b10 	vmov	r6, r7, d0
 8006270:	2f00      	cmp	r7, #0
 8006272:	460c      	mov	r4, r1
 8006274:	4619      	mov	r1, r3
 8006276:	463b      	mov	r3, r7
 8006278:	bfbb      	ittet	lt
 800627a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800627e:	461f      	movlt	r7, r3
 8006280:	2300      	movge	r3, #0
 8006282:	232d      	movlt	r3, #45	@ 0x2d
 8006284:	700b      	strb	r3, [r1, #0]
 8006286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006288:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800628c:	4691      	mov	r9, r2
 800628e:	f023 0820 	bic.w	r8, r3, #32
 8006292:	bfbc      	itt	lt
 8006294:	4632      	movlt	r2, r6
 8006296:	4616      	movlt	r6, r2
 8006298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800629c:	d005      	beq.n	80062aa <__cvt+0x42>
 800629e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062a2:	d100      	bne.n	80062a6 <__cvt+0x3e>
 80062a4:	3401      	adds	r4, #1
 80062a6:	2102      	movs	r1, #2
 80062a8:	e000      	b.n	80062ac <__cvt+0x44>
 80062aa:	2103      	movs	r1, #3
 80062ac:	ab03      	add	r3, sp, #12
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	ab02      	add	r3, sp, #8
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	ec47 6b10 	vmov	d0, r6, r7
 80062b8:	4653      	mov	r3, sl
 80062ba:	4622      	mov	r2, r4
 80062bc:	f001 fae0 	bl	8007880 <_dtoa_r>
 80062c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062c4:	4605      	mov	r5, r0
 80062c6:	d119      	bne.n	80062fc <__cvt+0x94>
 80062c8:	f019 0f01 	tst.w	r9, #1
 80062cc:	d00e      	beq.n	80062ec <__cvt+0x84>
 80062ce:	eb00 0904 	add.w	r9, r0, r4
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	4630      	mov	r0, r6
 80062d8:	4639      	mov	r1, r7
 80062da:	f7fa fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 80062de:	b108      	cbz	r0, 80062e4 <__cvt+0x7c>
 80062e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80062e4:	2230      	movs	r2, #48	@ 0x30
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	454b      	cmp	r3, r9
 80062ea:	d31e      	bcc.n	800632a <__cvt+0xc2>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062f0:	1b5b      	subs	r3, r3, r5
 80062f2:	4628      	mov	r0, r5
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006300:	eb00 0904 	add.w	r9, r0, r4
 8006304:	d1e5      	bne.n	80062d2 <__cvt+0x6a>
 8006306:	7803      	ldrb	r3, [r0, #0]
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d10a      	bne.n	8006322 <__cvt+0xba>
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fbe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006318:	b918      	cbnz	r0, 8006322 <__cvt+0xba>
 800631a:	f1c4 0401 	rsb	r4, r4, #1
 800631e:	f8ca 4000 	str.w	r4, [sl]
 8006322:	f8da 3000 	ldr.w	r3, [sl]
 8006326:	4499      	add	r9, r3
 8006328:	e7d3      	b.n	80062d2 <__cvt+0x6a>
 800632a:	1c59      	adds	r1, r3, #1
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e7d9      	b.n	80062e6 <__cvt+0x7e>

08006332 <__exponent>:
 8006332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006334:	2900      	cmp	r1, #0
 8006336:	bfba      	itte	lt
 8006338:	4249      	neglt	r1, r1
 800633a:	232d      	movlt	r3, #45	@ 0x2d
 800633c:	232b      	movge	r3, #43	@ 0x2b
 800633e:	2909      	cmp	r1, #9
 8006340:	7002      	strb	r2, [r0, #0]
 8006342:	7043      	strb	r3, [r0, #1]
 8006344:	dd29      	ble.n	800639a <__exponent+0x68>
 8006346:	f10d 0307 	add.w	r3, sp, #7
 800634a:	461d      	mov	r5, r3
 800634c:	270a      	movs	r7, #10
 800634e:	461a      	mov	r2, r3
 8006350:	fbb1 f6f7 	udiv	r6, r1, r7
 8006354:	fb07 1416 	mls	r4, r7, r6, r1
 8006358:	3430      	adds	r4, #48	@ 0x30
 800635a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800635e:	460c      	mov	r4, r1
 8006360:	2c63      	cmp	r4, #99	@ 0x63
 8006362:	f103 33ff 	add.w	r3, r3, #4294967295
 8006366:	4631      	mov	r1, r6
 8006368:	dcf1      	bgt.n	800634e <__exponent+0x1c>
 800636a:	3130      	adds	r1, #48	@ 0x30
 800636c:	1e94      	subs	r4, r2, #2
 800636e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006372:	1c41      	adds	r1, r0, #1
 8006374:	4623      	mov	r3, r4
 8006376:	42ab      	cmp	r3, r5
 8006378:	d30a      	bcc.n	8006390 <__exponent+0x5e>
 800637a:	f10d 0309 	add.w	r3, sp, #9
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	42ac      	cmp	r4, r5
 8006382:	bf88      	it	hi
 8006384:	2300      	movhi	r3, #0
 8006386:	3302      	adds	r3, #2
 8006388:	4403      	add	r3, r0
 800638a:	1a18      	subs	r0, r3, r0
 800638c:	b003      	add	sp, #12
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006390:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006394:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006398:	e7ed      	b.n	8006376 <__exponent+0x44>
 800639a:	2330      	movs	r3, #48	@ 0x30
 800639c:	3130      	adds	r1, #48	@ 0x30
 800639e:	7083      	strb	r3, [r0, #2]
 80063a0:	70c1      	strb	r1, [r0, #3]
 80063a2:	1d03      	adds	r3, r0, #4
 80063a4:	e7f1      	b.n	800638a <__exponent+0x58>
	...

080063a8 <_printf_float>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b08d      	sub	sp, #52	@ 0x34
 80063ae:	460c      	mov	r4, r1
 80063b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063b4:	4616      	mov	r6, r2
 80063b6:	461f      	mov	r7, r3
 80063b8:	4605      	mov	r5, r0
 80063ba:	f001 f909 	bl	80075d0 <_localeconv_r>
 80063be:	6803      	ldr	r3, [r0, #0]
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7f9 ff64 	bl	8000290 <strlen>
 80063c8:	2300      	movs	r3, #0
 80063ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80063cc:	f8d8 3000 	ldr.w	r3, [r8]
 80063d0:	9005      	str	r0, [sp, #20]
 80063d2:	3307      	adds	r3, #7
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	f103 0208 	add.w	r2, r3, #8
 80063dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e0:	f8d4 b000 	ldr.w	fp, [r4]
 80063e4:	f8c8 2000 	str.w	r2, [r8]
 80063e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063f0:	9307      	str	r3, [sp, #28]
 80063f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80063f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006670 <_printf_float+0x2c8>)
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	f7fa fba2 	bl	8000b4c <__aeabi_dcmpun>
 8006408:	bb70      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800640a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800640e:	4b98      	ldr	r3, [pc, #608]	@ (8006670 <_printf_float+0x2c8>)
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	f7fa fb7c 	bl	8000b10 <__aeabi_dcmple>
 8006418:	bb30      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7fa fb6b 	bl	8000afc <__aeabi_dcmplt>
 8006426:	b110      	cbz	r0, 800642e <_printf_float+0x86>
 8006428:	232d      	movs	r3, #45	@ 0x2d
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642e:	4a91      	ldr	r2, [pc, #580]	@ (8006674 <_printf_float+0x2cc>)
 8006430:	4b91      	ldr	r3, [pc, #580]	@ (8006678 <_printf_float+0x2d0>)
 8006432:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006436:	bf94      	ite	ls
 8006438:	4690      	movls	r8, r2
 800643a:	4698      	movhi	r8, r3
 800643c:	2303      	movs	r3, #3
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	f02b 0304 	bic.w	r3, fp, #4
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	9700      	str	r7, [sp, #0]
 800644c:	4633      	mov	r3, r6
 800644e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f9d2 	bl	80067fc <_printf_common>
 8006458:	3001      	adds	r0, #1
 800645a:	f040 808d 	bne.w	8006578 <_printf_float+0x1d0>
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	b00d      	add	sp, #52	@ 0x34
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb6c 	bl	8000b4c <__aeabi_dcmpun>
 8006474:	b140      	cbz	r0, 8006488 <_printf_float+0xe0>
 8006476:	464b      	mov	r3, r9
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfbc      	itt	lt
 800647c:	232d      	movlt	r3, #45	@ 0x2d
 800647e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006482:	4a7e      	ldr	r2, [pc, #504]	@ (800667c <_printf_float+0x2d4>)
 8006484:	4b7e      	ldr	r3, [pc, #504]	@ (8006680 <_printf_float+0x2d8>)
 8006486:	e7d4      	b.n	8006432 <_printf_float+0x8a>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800648e:	9206      	str	r2, [sp, #24]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	d13b      	bne.n	800650c <_printf_float+0x164>
 8006494:	2306      	movs	r3, #6
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800649c:	2300      	movs	r3, #0
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80064a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064a8:	ab09      	add	r3, sp, #36	@ 0x24
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	6861      	ldr	r1, [r4, #4]
 80064ae:	ec49 8b10 	vmov	d0, r8, r9
 80064b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064b6:	4628      	mov	r0, r5
 80064b8:	f7ff fed6 	bl	8006268 <__cvt>
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064c0:	2b47      	cmp	r3, #71	@ 0x47
 80064c2:	4680      	mov	r8, r0
 80064c4:	d129      	bne.n	800651a <_printf_float+0x172>
 80064c6:	1cc8      	adds	r0, r1, #3
 80064c8:	db02      	blt.n	80064d0 <_printf_float+0x128>
 80064ca:	6863      	ldr	r3, [r4, #4]
 80064cc:	4299      	cmp	r1, r3
 80064ce:	dd41      	ble.n	8006554 <_printf_float+0x1ac>
 80064d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80064d4:	fa5f fa8a 	uxtb.w	sl, sl
 80064d8:	3901      	subs	r1, #1
 80064da:	4652      	mov	r2, sl
 80064dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80064e2:	f7ff ff26 	bl	8006332 <__exponent>
 80064e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e8:	1813      	adds	r3, r2, r0
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	4681      	mov	r9, r0
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	dc02      	bgt.n	80064f8 <_printf_float+0x150>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	07d2      	lsls	r2, r2, #31
 80064f6:	d501      	bpl.n	80064fc <_printf_float+0x154>
 80064f8:	3301      	adds	r3, #1
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0a2      	beq.n	800644a <_printf_float+0xa2>
 8006504:	232d      	movs	r3, #45	@ 0x2d
 8006506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800650a:	e79e      	b.n	800644a <_printf_float+0xa2>
 800650c:	9a06      	ldr	r2, [sp, #24]
 800650e:	2a47      	cmp	r2, #71	@ 0x47
 8006510:	d1c2      	bne.n	8006498 <_printf_float+0xf0>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1c0      	bne.n	8006498 <_printf_float+0xf0>
 8006516:	2301      	movs	r3, #1
 8006518:	e7bd      	b.n	8006496 <_printf_float+0xee>
 800651a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800651e:	d9db      	bls.n	80064d8 <_printf_float+0x130>
 8006520:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006524:	d118      	bne.n	8006558 <_printf_float+0x1b0>
 8006526:	2900      	cmp	r1, #0
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	dd0b      	ble.n	8006544 <_printf_float+0x19c>
 800652c:	6121      	str	r1, [r4, #16]
 800652e:	b913      	cbnz	r3, 8006536 <_printf_float+0x18e>
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	07d0      	lsls	r0, r2, #31
 8006534:	d502      	bpl.n	800653c <_printf_float+0x194>
 8006536:	3301      	adds	r3, #1
 8006538:	440b      	add	r3, r1
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	e7db      	b.n	80064fc <_printf_float+0x154>
 8006544:	b913      	cbnz	r3, 800654c <_printf_float+0x1a4>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d2      	lsls	r2, r2, #31
 800654a:	d501      	bpl.n	8006550 <_printf_float+0x1a8>
 800654c:	3302      	adds	r3, #2
 800654e:	e7f4      	b.n	800653a <_printf_float+0x192>
 8006550:	2301      	movs	r3, #1
 8006552:	e7f2      	b.n	800653a <_printf_float+0x192>
 8006554:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800655a:	4299      	cmp	r1, r3
 800655c:	db05      	blt.n	800656a <_printf_float+0x1c2>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6121      	str	r1, [r4, #16]
 8006562:	07d8      	lsls	r0, r3, #31
 8006564:	d5ea      	bpl.n	800653c <_printf_float+0x194>
 8006566:	1c4b      	adds	r3, r1, #1
 8006568:	e7e7      	b.n	800653a <_printf_float+0x192>
 800656a:	2900      	cmp	r1, #0
 800656c:	bfd4      	ite	le
 800656e:	f1c1 0202 	rsble	r2, r1, #2
 8006572:	2201      	movgt	r2, #1
 8006574:	4413      	add	r3, r2
 8006576:	e7e0      	b.n	800653a <_printf_float+0x192>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	055a      	lsls	r2, r3, #21
 800657c:	d407      	bmi.n	800658e <_printf_float+0x1e6>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	4642      	mov	r2, r8
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	d12b      	bne.n	80065e4 <_printf_float+0x23c>
 800658c:	e767      	b.n	800645e <_printf_float+0xb6>
 800658e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006592:	f240 80dd 	bls.w	8006750 <_printf_float+0x3a8>
 8006596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	f7fa faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d033      	beq.n	800660e <_printf_float+0x266>
 80065a6:	4a37      	ldr	r2, [pc, #220]	@ (8006684 <_printf_float+0x2dc>)
 80065a8:	2301      	movs	r3, #1
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af54 	beq.w	800645e <_printf_float+0xb6>
 80065b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065ba:	4543      	cmp	r3, r8
 80065bc:	db02      	blt.n	80065c4 <_printf_float+0x21c>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	07d8      	lsls	r0, r3, #31
 80065c2:	d50f      	bpl.n	80065e4 <_printf_float+0x23c>
 80065c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f af45 	beq.w	800645e <_printf_float+0xb6>
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80065dc:	f104 0a1a 	add.w	sl, r4, #26
 80065e0:	45c8      	cmp	r8, r9
 80065e2:	dc09      	bgt.n	80065f8 <_printf_float+0x250>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	079b      	lsls	r3, r3, #30
 80065e8:	f100 8103 	bmi.w	80067f2 <_printf_float+0x44a>
 80065ec:	68e0      	ldr	r0, [r4, #12]
 80065ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f0:	4298      	cmp	r0, r3
 80065f2:	bfb8      	it	lt
 80065f4:	4618      	movlt	r0, r3
 80065f6:	e734      	b.n	8006462 <_printf_float+0xba>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af2b 	beq.w	800645e <_printf_float+0xb6>
 8006608:	f109 0901 	add.w	r9, r9, #1
 800660c:	e7e8      	b.n	80065e0 <_printf_float+0x238>
 800660e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc39      	bgt.n	8006688 <_printf_float+0x2e0>
 8006614:	4a1b      	ldr	r2, [pc, #108]	@ (8006684 <_printf_float+0x2dc>)
 8006616:	2301      	movs	r3, #1
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af1d 	beq.w	800645e <_printf_float+0xb6>
 8006624:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006628:	ea59 0303 	orrs.w	r3, r9, r3
 800662c:	d102      	bne.n	8006634 <_printf_float+0x28c>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d5d7      	bpl.n	80065e4 <_printf_float+0x23c>
 8006634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af0d 	beq.w	800645e <_printf_float+0xb6>
 8006644:	f04f 0a00 	mov.w	sl, #0
 8006648:	f104 0b1a 	add.w	fp, r4, #26
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	425b      	negs	r3, r3
 8006650:	4553      	cmp	r3, sl
 8006652:	dc01      	bgt.n	8006658 <_printf_float+0x2b0>
 8006654:	464b      	mov	r3, r9
 8006656:	e793      	b.n	8006580 <_printf_float+0x1d8>
 8006658:	2301      	movs	r3, #1
 800665a:	465a      	mov	r2, fp
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f aefb 	beq.w	800645e <_printf_float+0xb6>
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	e7ee      	b.n	800664c <_printf_float+0x2a4>
 800666e:	bf00      	nop
 8006670:	7fefffff 	.word	0x7fefffff
 8006674:	0800a26c 	.word	0x0800a26c
 8006678:	0800a270 	.word	0x0800a270
 800667c:	0800a274 	.word	0x0800a274
 8006680:	0800a278 	.word	0x0800a278
 8006684:	0800a6fa 	.word	0x0800a6fa
 8006688:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800668a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800668e:	4553      	cmp	r3, sl
 8006690:	bfa8      	it	ge
 8006692:	4653      	movge	r3, sl
 8006694:	2b00      	cmp	r3, #0
 8006696:	4699      	mov	r9, r3
 8006698:	dc36      	bgt.n	8006708 <_printf_float+0x360>
 800669a:	f04f 0b00 	mov.w	fp, #0
 800669e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a2:	f104 021a 	add.w	r2, r4, #26
 80066a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	eba3 0309 	sub.w	r3, r3, r9
 80066ae:	455b      	cmp	r3, fp
 80066b0:	dc31      	bgt.n	8006716 <_printf_float+0x36e>
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	459a      	cmp	sl, r3
 80066b6:	dc3a      	bgt.n	800672e <_printf_float+0x386>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	07da      	lsls	r2, r3, #31
 80066bc:	d437      	bmi.n	800672e <_printf_float+0x386>
 80066be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c0:	ebaa 0903 	sub.w	r9, sl, r3
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	ebaa 0303 	sub.w	r3, sl, r3
 80066ca:	4599      	cmp	r9, r3
 80066cc:	bfa8      	it	ge
 80066ce:	4699      	movge	r9, r3
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	dc33      	bgt.n	800673e <_printf_float+0x396>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066de:	f104 0b1a 	add.w	fp, r4, #26
 80066e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e4:	ebaa 0303 	sub.w	r3, sl, r3
 80066e8:	eba3 0309 	sub.w	r3, r3, r9
 80066ec:	4543      	cmp	r3, r8
 80066ee:	f77f af79 	ble.w	80065e4 <_printf_float+0x23c>
 80066f2:	2301      	movs	r3, #1
 80066f4:	465a      	mov	r2, fp
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f aeae 	beq.w	800645e <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	e7ec      	b.n	80066e2 <_printf_float+0x33a>
 8006708:	4642      	mov	r2, r8
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	d1c2      	bne.n	800669a <_printf_float+0x2f2>
 8006714:	e6a3      	b.n	800645e <_printf_float+0xb6>
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae9c 	beq.w	800645e <_printf_float+0xb6>
 8006726:	9a06      	ldr	r2, [sp, #24]
 8006728:	f10b 0b01 	add.w	fp, fp, #1
 800672c:	e7bb      	b.n	80066a6 <_printf_float+0x2fe>
 800672e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	d1c0      	bne.n	80066be <_printf_float+0x316>
 800673c:	e68f      	b.n	800645e <_printf_float+0xb6>
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	464b      	mov	r3, r9
 8006742:	4442      	add	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d1c3      	bne.n	80066d6 <_printf_float+0x32e>
 800674e:	e686      	b.n	800645e <_printf_float+0xb6>
 8006750:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006754:	f1ba 0f01 	cmp.w	sl, #1
 8006758:	dc01      	bgt.n	800675e <_printf_float+0x3b6>
 800675a:	07db      	lsls	r3, r3, #31
 800675c:	d536      	bpl.n	80067cc <_printf_float+0x424>
 800675e:	2301      	movs	r3, #1
 8006760:	4642      	mov	r2, r8
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	f43f ae78 	beq.w	800645e <_printf_float+0xb6>
 800676e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f ae70 	beq.w	800645e <_printf_float+0xb6>
 800677e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800678a:	f7fa f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800678e:	b9c0      	cbnz	r0, 80067c2 <_printf_float+0x41a>
 8006790:	4653      	mov	r3, sl
 8006792:	f108 0201 	add.w	r2, r8, #1
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	d10c      	bne.n	80067ba <_printf_float+0x412>
 80067a0:	e65d      	b.n	800645e <_printf_float+0xb6>
 80067a2:	2301      	movs	r3, #1
 80067a4:	465a      	mov	r2, fp
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae56 	beq.w	800645e <_printf_float+0xb6>
 80067b2:	f108 0801 	add.w	r8, r8, #1
 80067b6:	45d0      	cmp	r8, sl
 80067b8:	dbf3      	blt.n	80067a2 <_printf_float+0x3fa>
 80067ba:	464b      	mov	r3, r9
 80067bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067c0:	e6df      	b.n	8006582 <_printf_float+0x1da>
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	f104 0b1a 	add.w	fp, r4, #26
 80067ca:	e7f4      	b.n	80067b6 <_printf_float+0x40e>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4642      	mov	r2, r8
 80067d0:	e7e1      	b.n	8006796 <_printf_float+0x3ee>
 80067d2:	2301      	movs	r3, #1
 80067d4:	464a      	mov	r2, r9
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae3e 	beq.w	800645e <_printf_float+0xb6>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067ea:	1a5b      	subs	r3, r3, r1
 80067ec:	4543      	cmp	r3, r8
 80067ee:	dcf0      	bgt.n	80067d2 <_printf_float+0x42a>
 80067f0:	e6fc      	b.n	80065ec <_printf_float+0x244>
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	f104 0919 	add.w	r9, r4, #25
 80067fa:	e7f4      	b.n	80067e6 <_printf_float+0x43e>

080067fc <_printf_common>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	4616      	mov	r6, r2
 8006802:	4698      	mov	r8, r3
 8006804:	688a      	ldr	r2, [r1, #8]
 8006806:	690b      	ldr	r3, [r1, #16]
 8006808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800680c:	4293      	cmp	r3, r2
 800680e:	bfb8      	it	lt
 8006810:	4613      	movlt	r3, r2
 8006812:	6033      	str	r3, [r6, #0]
 8006814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006818:	4607      	mov	r7, r0
 800681a:	460c      	mov	r4, r1
 800681c:	b10a      	cbz	r2, 8006822 <_printf_common+0x26>
 800681e:	3301      	adds	r3, #1
 8006820:	6033      	str	r3, [r6, #0]
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	0699      	lsls	r1, r3, #26
 8006826:	bf42      	ittt	mi
 8006828:	6833      	ldrmi	r3, [r6, #0]
 800682a:	3302      	addmi	r3, #2
 800682c:	6033      	strmi	r3, [r6, #0]
 800682e:	6825      	ldr	r5, [r4, #0]
 8006830:	f015 0506 	ands.w	r5, r5, #6
 8006834:	d106      	bne.n	8006844 <_printf_common+0x48>
 8006836:	f104 0a19 	add.w	sl, r4, #25
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	6832      	ldr	r2, [r6, #0]
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	42ab      	cmp	r3, r5
 8006842:	dc26      	bgt.n	8006892 <_printf_common+0x96>
 8006844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	3b00      	subs	r3, #0
 800684c:	bf18      	it	ne
 800684e:	2301      	movne	r3, #1
 8006850:	0692      	lsls	r2, r2, #26
 8006852:	d42b      	bmi.n	80068ac <_printf_common+0xb0>
 8006854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006858:	4641      	mov	r1, r8
 800685a:	4638      	mov	r0, r7
 800685c:	47c8      	blx	r9
 800685e:	3001      	adds	r0, #1
 8006860:	d01e      	beq.n	80068a0 <_printf_common+0xa4>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	f003 0306 	and.w	r3, r3, #6
 800686a:	2b04      	cmp	r3, #4
 800686c:	bf02      	ittt	eq
 800686e:	68e5      	ldreq	r5, [r4, #12]
 8006870:	6833      	ldreq	r3, [r6, #0]
 8006872:	1aed      	subeq	r5, r5, r3
 8006874:	68a3      	ldr	r3, [r4, #8]
 8006876:	bf0c      	ite	eq
 8006878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800687c:	2500      	movne	r5, #0
 800687e:	4293      	cmp	r3, r2
 8006880:	bfc4      	itt	gt
 8006882:	1a9b      	subgt	r3, r3, r2
 8006884:	18ed      	addgt	r5, r5, r3
 8006886:	2600      	movs	r6, #0
 8006888:	341a      	adds	r4, #26
 800688a:	42b5      	cmp	r5, r6
 800688c:	d11a      	bne.n	80068c4 <_printf_common+0xc8>
 800688e:	2000      	movs	r0, #0
 8006890:	e008      	b.n	80068a4 <_printf_common+0xa8>
 8006892:	2301      	movs	r3, #1
 8006894:	4652      	mov	r2, sl
 8006896:	4641      	mov	r1, r8
 8006898:	4638      	mov	r0, r7
 800689a:	47c8      	blx	r9
 800689c:	3001      	adds	r0, #1
 800689e:	d103      	bne.n	80068a8 <_printf_common+0xac>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a8:	3501      	adds	r5, #1
 80068aa:	e7c6      	b.n	800683a <_printf_common+0x3e>
 80068ac:	18e1      	adds	r1, r4, r3
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	2030      	movs	r0, #48	@ 0x30
 80068b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068b6:	4422      	add	r2, r4
 80068b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c0:	3302      	adds	r3, #2
 80068c2:	e7c7      	b.n	8006854 <_printf_common+0x58>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4622      	mov	r2, r4
 80068c8:	4641      	mov	r1, r8
 80068ca:	4638      	mov	r0, r7
 80068cc:	47c8      	blx	r9
 80068ce:	3001      	adds	r0, #1
 80068d0:	d0e6      	beq.n	80068a0 <_printf_common+0xa4>
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7d9      	b.n	800688a <_printf_common+0x8e>
	...

080068d8 <_printf_i>:
 80068d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068dc:	7e0f      	ldrb	r7, [r1, #24]
 80068de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068e0:	2f78      	cmp	r7, #120	@ 0x78
 80068e2:	4691      	mov	r9, r2
 80068e4:	4680      	mov	r8, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	469a      	mov	sl, r3
 80068ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ee:	d807      	bhi.n	8006900 <_printf_i+0x28>
 80068f0:	2f62      	cmp	r7, #98	@ 0x62
 80068f2:	d80a      	bhi.n	800690a <_printf_i+0x32>
 80068f4:	2f00      	cmp	r7, #0
 80068f6:	f000 80d2 	beq.w	8006a9e <_printf_i+0x1c6>
 80068fa:	2f58      	cmp	r7, #88	@ 0x58
 80068fc:	f000 80b9 	beq.w	8006a72 <_printf_i+0x19a>
 8006900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006908:	e03a      	b.n	8006980 <_printf_i+0xa8>
 800690a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800690e:	2b15      	cmp	r3, #21
 8006910:	d8f6      	bhi.n	8006900 <_printf_i+0x28>
 8006912:	a101      	add	r1, pc, #4	@ (adr r1, 8006918 <_printf_i+0x40>)
 8006914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006918:	08006971 	.word	0x08006971
 800691c:	08006985 	.word	0x08006985
 8006920:	08006901 	.word	0x08006901
 8006924:	08006901 	.word	0x08006901
 8006928:	08006901 	.word	0x08006901
 800692c:	08006901 	.word	0x08006901
 8006930:	08006985 	.word	0x08006985
 8006934:	08006901 	.word	0x08006901
 8006938:	08006901 	.word	0x08006901
 800693c:	08006901 	.word	0x08006901
 8006940:	08006901 	.word	0x08006901
 8006944:	08006a85 	.word	0x08006a85
 8006948:	080069af 	.word	0x080069af
 800694c:	08006a3f 	.word	0x08006a3f
 8006950:	08006901 	.word	0x08006901
 8006954:	08006901 	.word	0x08006901
 8006958:	08006aa7 	.word	0x08006aa7
 800695c:	08006901 	.word	0x08006901
 8006960:	080069af 	.word	0x080069af
 8006964:	08006901 	.word	0x08006901
 8006968:	08006901 	.word	0x08006901
 800696c:	08006a47 	.word	0x08006a47
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6032      	str	r2, [r6, #0]
 8006978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800697c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006980:	2301      	movs	r3, #1
 8006982:	e09d      	b.n	8006ac0 <_printf_i+0x1e8>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	6820      	ldr	r0, [r4, #0]
 8006988:	1d19      	adds	r1, r3, #4
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	0606      	lsls	r6, r0, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xbc>
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	e003      	b.n	800699c <_printf_i+0xc4>
 8006994:	0645      	lsls	r5, r0, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xb8>
 8006998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800699c:	2d00      	cmp	r5, #0
 800699e:	da03      	bge.n	80069a8 <_printf_i+0xd0>
 80069a0:	232d      	movs	r3, #45	@ 0x2d
 80069a2:	426d      	negs	r5, r5
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a8:	4859      	ldr	r0, [pc, #356]	@ (8006b10 <_printf_i+0x238>)
 80069aa:	230a      	movs	r3, #10
 80069ac:	e011      	b.n	80069d2 <_printf_i+0xfa>
 80069ae:	6821      	ldr	r1, [r4, #0]
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	0608      	lsls	r0, r1, #24
 80069b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069b8:	d402      	bmi.n	80069c0 <_printf_i+0xe8>
 80069ba:	0649      	lsls	r1, r1, #25
 80069bc:	bf48      	it	mi
 80069be:	b2ad      	uxthmi	r5, r5
 80069c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c2:	4853      	ldr	r0, [pc, #332]	@ (8006b10 <_printf_i+0x238>)
 80069c4:	6033      	str	r3, [r6, #0]
 80069c6:	bf14      	ite	ne
 80069c8:	230a      	movne	r3, #10
 80069ca:	2308      	moveq	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d2:	6866      	ldr	r6, [r4, #4]
 80069d4:	60a6      	str	r6, [r4, #8]
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	bfa2      	ittt	ge
 80069da:	6821      	ldrge	r1, [r4, #0]
 80069dc:	f021 0104 	bicge.w	r1, r1, #4
 80069e0:	6021      	strge	r1, [r4, #0]
 80069e2:	b90d      	cbnz	r5, 80069e8 <_printf_i+0x110>
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	d04b      	beq.n	8006a80 <_printf_i+0x1a8>
 80069e8:	4616      	mov	r6, r2
 80069ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ee:	fb03 5711 	mls	r7, r3, r1, r5
 80069f2:	5dc7      	ldrb	r7, [r0, r7]
 80069f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069f8:	462f      	mov	r7, r5
 80069fa:	42bb      	cmp	r3, r7
 80069fc:	460d      	mov	r5, r1
 80069fe:	d9f4      	bls.n	80069ea <_printf_i+0x112>
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d10b      	bne.n	8006a1c <_printf_i+0x144>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07df      	lsls	r7, r3, #31
 8006a08:	d508      	bpl.n	8006a1c <_printf_i+0x144>
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6861      	ldr	r1, [r4, #4]
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	bfde      	ittt	le
 8006a12:	2330      	movle	r3, #48	@ 0x30
 8006a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a1c:	1b92      	subs	r2, r2, r6
 8006a1e:	6122      	str	r2, [r4, #16]
 8006a20:	f8cd a000 	str.w	sl, [sp]
 8006a24:	464b      	mov	r3, r9
 8006a26:	aa03      	add	r2, sp, #12
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7ff fee6 	bl	80067fc <_printf_common>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d14a      	bne.n	8006aca <_printf_i+0x1f2>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	b004      	add	sp, #16
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	f043 0320 	orr.w	r3, r3, #32
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	4833      	ldr	r0, [pc, #204]	@ (8006b14 <_printf_i+0x23c>)
 8006a48:	2778      	movs	r7, #120	@ 0x78
 8006a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	6831      	ldr	r1, [r6, #0]
 8006a52:	061f      	lsls	r7, r3, #24
 8006a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a58:	d402      	bmi.n	8006a60 <_printf_i+0x188>
 8006a5a:	065f      	lsls	r7, r3, #25
 8006a5c:	bf48      	it	mi
 8006a5e:	b2ad      	uxthmi	r5, r5
 8006a60:	6031      	str	r1, [r6, #0]
 8006a62:	07d9      	lsls	r1, r3, #31
 8006a64:	bf44      	itt	mi
 8006a66:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6a:	6023      	strmi	r3, [r4, #0]
 8006a6c:	b11d      	cbz	r5, 8006a76 <_printf_i+0x19e>
 8006a6e:	2310      	movs	r3, #16
 8006a70:	e7ac      	b.n	80069cc <_printf_i+0xf4>
 8006a72:	4827      	ldr	r0, [pc, #156]	@ (8006b10 <_printf_i+0x238>)
 8006a74:	e7e9      	b.n	8006a4a <_printf_i+0x172>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f023 0320 	bic.w	r3, r3, #32
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	e7f6      	b.n	8006a6e <_printf_i+0x196>
 8006a80:	4616      	mov	r6, r2
 8006a82:	e7bd      	b.n	8006a00 <_printf_i+0x128>
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	6961      	ldr	r1, [r4, #20]
 8006a8a:	1d18      	adds	r0, r3, #4
 8006a8c:	6030      	str	r0, [r6, #0]
 8006a8e:	062e      	lsls	r6, r5, #24
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	d501      	bpl.n	8006a98 <_printf_i+0x1c0>
 8006a94:	6019      	str	r1, [r3, #0]
 8006a96:	e002      	b.n	8006a9e <_printf_i+0x1c6>
 8006a98:	0668      	lsls	r0, r5, #25
 8006a9a:	d5fb      	bpl.n	8006a94 <_printf_i+0x1bc>
 8006a9c:	8019      	strh	r1, [r3, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	4616      	mov	r6, r2
 8006aa4:	e7bc      	b.n	8006a20 <_printf_i+0x148>
 8006aa6:	6833      	ldr	r3, [r6, #0]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	6032      	str	r2, [r6, #0]
 8006aac:	681e      	ldr	r6, [r3, #0]
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7f9 fb9c 	bl	80001f0 <memchr>
 8006ab8:	b108      	cbz	r0, 8006abe <_printf_i+0x1e6>
 8006aba:	1b80      	subs	r0, r0, r6
 8006abc:	6060      	str	r0, [r4, #4]
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	e7aa      	b.n	8006a20 <_printf_i+0x148>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	4632      	mov	r2, r6
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	47d0      	blx	sl
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d0ad      	beq.n	8006a34 <_printf_i+0x15c>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	d413      	bmi.n	8006b06 <_printf_i+0x22e>
 8006ade:	68e0      	ldr	r0, [r4, #12]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	bfb8      	it	lt
 8006ae6:	4618      	movlt	r0, r3
 8006ae8:	e7a6      	b.n	8006a38 <_printf_i+0x160>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4632      	mov	r2, r6
 8006aee:	4649      	mov	r1, r9
 8006af0:	4640      	mov	r0, r8
 8006af2:	47d0      	blx	sl
 8006af4:	3001      	adds	r0, #1
 8006af6:	d09d      	beq.n	8006a34 <_printf_i+0x15c>
 8006af8:	3501      	adds	r5, #1
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	9903      	ldr	r1, [sp, #12]
 8006afe:	1a5b      	subs	r3, r3, r1
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dcf2      	bgt.n	8006aea <_printf_i+0x212>
 8006b04:	e7eb      	b.n	8006ade <_printf_i+0x206>
 8006b06:	2500      	movs	r5, #0
 8006b08:	f104 0619 	add.w	r6, r4, #25
 8006b0c:	e7f5      	b.n	8006afa <_printf_i+0x222>
 8006b0e:	bf00      	nop
 8006b10:	0800a27c 	.word	0x0800a27c
 8006b14:	0800a28d 	.word	0x0800a28d

08006b18 <std>:
 8006b18:	2300      	movs	r3, #0
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b26:	6083      	str	r3, [r0, #8]
 8006b28:	8181      	strh	r1, [r0, #12]
 8006b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b2c:	81c2      	strh	r2, [r0, #14]
 8006b2e:	6183      	str	r3, [r0, #24]
 8006b30:	4619      	mov	r1, r3
 8006b32:	2208      	movs	r2, #8
 8006b34:	305c      	adds	r0, #92	@ 0x5c
 8006b36:	f000 f93c 	bl	8006db2 <memset>
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <std+0x58>)
 8006b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x5c>)
 8006b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x60>)
 8006b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x64>)
 8006b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x68>)
 8006b4c:	6224      	str	r4, [r4, #32]
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d006      	beq.n	8006b60 <std+0x48>
 8006b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b56:	4294      	cmp	r4, r2
 8006b58:	d002      	beq.n	8006b60 <std+0x48>
 8006b5a:	33d0      	adds	r3, #208	@ 0xd0
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d105      	bne.n	8006b6c <std+0x54>
 8006b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	f000 bdc8 	b.w	80076fc <__retarget_lock_init_recursive>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	08006d29 	.word	0x08006d29
 8006b74:	08006d4f 	.word	0x08006d4f
 8006b78:	08006d87 	.word	0x08006d87
 8006b7c:	08006dab 	.word	0x08006dab
 8006b80:	200006c0 	.word	0x200006c0

08006b84 <stdio_exit_handler>:
 8006b84:	4a02      	ldr	r2, [pc, #8]	@ (8006b90 <stdio_exit_handler+0xc>)
 8006b86:	4903      	ldr	r1, [pc, #12]	@ (8006b94 <stdio_exit_handler+0x10>)
 8006b88:	4803      	ldr	r0, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x14>)
 8006b8a:	f000 b869 	b.w	8006c60 <_fwalk_sglue>
 8006b8e:	bf00      	nop
 8006b90:	2000001c 	.word	0x2000001c
 8006b94:	08009359 	.word	0x08009359
 8006b98:	20000034 	.word	0x20000034

08006b9c <cleanup_stdio>:
 8006b9c:	6841      	ldr	r1, [r0, #4]
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <cleanup_stdio+0x34>)
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	d001      	beq.n	8006bac <cleanup_stdio+0x10>
 8006ba8:	f002 fbd6 	bl	8009358 <_fflush_r>
 8006bac:	68a1      	ldr	r1, [r4, #8]
 8006bae:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <cleanup_stdio+0x38>)
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	d002      	beq.n	8006bba <cleanup_stdio+0x1e>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f002 fbcf 	bl	8009358 <_fflush_r>
 8006bba:	68e1      	ldr	r1, [r4, #12]
 8006bbc:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <cleanup_stdio+0x3c>)
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d004      	beq.n	8006bcc <cleanup_stdio+0x30>
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f002 bbc6 	b.w	8009358 <_fflush_r>
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	200006c0 	.word	0x200006c0
 8006bd4:	20000728 	.word	0x20000728
 8006bd8:	20000790 	.word	0x20000790

08006bdc <global_stdio_init.part.0>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <global_stdio_init.part.0+0x30>)
 8006be0:	4c0b      	ldr	r4, [pc, #44]	@ (8006c10 <global_stdio_init.part.0+0x34>)
 8006be2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c14 <global_stdio_init.part.0+0x38>)
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	4620      	mov	r0, r4
 8006be8:	2200      	movs	r2, #0
 8006bea:	2104      	movs	r1, #4
 8006bec:	f7ff ff94 	bl	8006b18 <std>
 8006bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2109      	movs	r1, #9
 8006bf8:	f7ff ff8e 	bl	8006b18 <std>
 8006bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c00:	2202      	movs	r2, #2
 8006c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c06:	2112      	movs	r1, #18
 8006c08:	f7ff bf86 	b.w	8006b18 <std>
 8006c0c:	200007f8 	.word	0x200007f8
 8006c10:	200006c0 	.word	0x200006c0
 8006c14:	08006b85 	.word	0x08006b85

08006c18 <__sfp_lock_acquire>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__sfp_lock_acquire+0x8>)
 8006c1a:	f000 bd71 	b.w	8007700 <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000827 	.word	0x20000827

08006c24 <__sfp_lock_release>:
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <__sfp_lock_release+0x8>)
 8006c26:	f000 bd6d 	b.w	8007704 <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20000827 	.word	0x20000827

08006c30 <__sinit>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	4604      	mov	r4, r0
 8006c34:	f7ff fff0 	bl	8006c18 <__sfp_lock_acquire>
 8006c38:	6a23      	ldr	r3, [r4, #32]
 8006c3a:	b11b      	cbz	r3, 8006c44 <__sinit+0x14>
 8006c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c40:	f7ff bff0 	b.w	8006c24 <__sfp_lock_release>
 8006c44:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <__sinit+0x28>)
 8006c46:	6223      	str	r3, [r4, #32]
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__sinit+0x2c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f5      	bne.n	8006c3c <__sinit+0xc>
 8006c50:	f7ff ffc4 	bl	8006bdc <global_stdio_init.part.0>
 8006c54:	e7f2      	b.n	8006c3c <__sinit+0xc>
 8006c56:	bf00      	nop
 8006c58:	08006b9d 	.word	0x08006b9d
 8006c5c:	200007f8 	.word	0x200007f8

08006c60 <_fwalk_sglue>:
 8006c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c64:	4607      	mov	r7, r0
 8006c66:	4688      	mov	r8, r1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c70:	f1b9 0901 	subs.w	r9, r9, #1
 8006c74:	d505      	bpl.n	8006c82 <_fwalk_sglue+0x22>
 8006c76:	6824      	ldr	r4, [r4, #0]
 8006c78:	2c00      	cmp	r4, #0
 8006c7a:	d1f7      	bne.n	8006c6c <_fwalk_sglue+0xc>
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d907      	bls.n	8006c98 <_fwalk_sglue+0x38>
 8006c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	d003      	beq.n	8006c98 <_fwalk_sglue+0x38>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	4306      	orrs	r6, r0
 8006c98:	3568      	adds	r5, #104	@ 0x68
 8006c9a:	e7e9      	b.n	8006c70 <_fwalk_sglue+0x10>

08006c9c <iprintf>:
 8006c9c:	b40f      	push	{r0, r1, r2, r3}
 8006c9e:	b507      	push	{r0, r1, r2, lr}
 8006ca0:	4906      	ldr	r1, [pc, #24]	@ (8006cbc <iprintf+0x20>)
 8006ca2:	ab04      	add	r3, sp, #16
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006caa:	6881      	ldr	r1, [r0, #8]
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	f002 f9b7 	bl	8009020 <_vfiprintf_r>
 8006cb2:	b003      	add	sp, #12
 8006cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb8:	b004      	add	sp, #16
 8006cba:	4770      	bx	lr
 8006cbc:	20000030 	.word	0x20000030

08006cc0 <sniprintf>:
 8006cc0:	b40c      	push	{r2, r3}
 8006cc2:	b530      	push	{r4, r5, lr}
 8006cc4:	4b17      	ldr	r3, [pc, #92]	@ (8006d24 <sniprintf+0x64>)
 8006cc6:	1e0c      	subs	r4, r1, #0
 8006cc8:	681d      	ldr	r5, [r3, #0]
 8006cca:	b09d      	sub	sp, #116	@ 0x74
 8006ccc:	da08      	bge.n	8006ce0 <sniprintf+0x20>
 8006cce:	238b      	movs	r3, #139	@ 0x8b
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd6:	b01d      	add	sp, #116	@ 0x74
 8006cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cdc:	b002      	add	sp, #8
 8006cde:	4770      	bx	lr
 8006ce0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ce8:	bf14      	ite	ne
 8006cea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cee:	4623      	moveq	r3, r4
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cf8:	9002      	str	r0, [sp, #8]
 8006cfa:	9006      	str	r0, [sp, #24]
 8006cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d02:	ab21      	add	r3, sp, #132	@ 0x84
 8006d04:	a902      	add	r1, sp, #8
 8006d06:	4628      	mov	r0, r5
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	f002 f863 	bl	8008dd4 <_svfiprintf_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	bfbc      	itt	lt
 8006d12:	238b      	movlt	r3, #139	@ 0x8b
 8006d14:	602b      	strlt	r3, [r5, #0]
 8006d16:	2c00      	cmp	r4, #0
 8006d18:	d0dd      	beq.n	8006cd6 <sniprintf+0x16>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	e7d9      	b.n	8006cd6 <sniprintf+0x16>
 8006d22:	bf00      	nop
 8006d24:	20000030 	.word	0x20000030

08006d28 <__sread>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d30:	f000 fc86 	bl	8007640 <_read_r>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	bfab      	itete	ge
 8006d38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d3c:	181b      	addge	r3, r3, r0
 8006d3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d42:	bfac      	ite	ge
 8006d44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d46:	81a3      	strhlt	r3, [r4, #12]
 8006d48:	bd10      	pop	{r4, pc}

08006d4a <__seofread>:
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	4770      	bx	lr

08006d4e <__swrite>:
 8006d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d52:	461f      	mov	r7, r3
 8006d54:	898b      	ldrh	r3, [r1, #12]
 8006d56:	05db      	lsls	r3, r3, #23
 8006d58:	4605      	mov	r5, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	d505      	bpl.n	8006d6c <__swrite+0x1e>
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	2302      	movs	r3, #2
 8006d66:	2200      	movs	r2, #0
 8006d68:	f000 fc58 	bl	800761c <_lseek_r>
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	4632      	mov	r2, r6
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d82:	f000 bc7f 	b.w	8007684 <_write_r>

08006d86 <__sseek>:
 8006d86:	b510      	push	{r4, lr}
 8006d88:	460c      	mov	r4, r1
 8006d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8e:	f000 fc45 	bl	800761c <_lseek_r>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	bf15      	itete	ne
 8006d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006da2:	81a3      	strheq	r3, [r4, #12]
 8006da4:	bf18      	it	ne
 8006da6:	81a3      	strhne	r3, [r4, #12]
 8006da8:	bd10      	pop	{r4, pc}

08006daa <__sclose>:
 8006daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dae:	f000 bc13 	b.w	80075d8 <_close_r>

08006db2 <memset>:
 8006db2:	4402      	add	r2, r0
 8006db4:	4603      	mov	r3, r0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d100      	bne.n	8006dbc <memset+0xa>
 8006dba:	4770      	bx	lr
 8006dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc0:	e7f9      	b.n	8006db6 <memset+0x4>
	...

08006dc4 <localtime>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <localtime+0x30>)
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006dcc:	4604      	mov	r4, r0
 8006dce:	b953      	cbnz	r3, 8006de6 <localtime+0x22>
 8006dd0:	2024      	movs	r0, #36	@ 0x24
 8006dd2:	f7ff f98b 	bl	80060ec <malloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6368      	str	r0, [r5, #52]	@ 0x34
 8006dda:	b920      	cbnz	r0, 8006de6 <localtime+0x22>
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <localtime+0x34>)
 8006dde:	4807      	ldr	r0, [pc, #28]	@ (8006dfc <localtime+0x38>)
 8006de0:	2132      	movs	r1, #50	@ 0x32
 8006de2:	f000 fca7 	bl	8007734 <__assert_func>
 8006de6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8006de8:	4620      	mov	r0, r4
 8006dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dee:	f000 b807 	b.w	8006e00 <localtime_r>
 8006df2:	bf00      	nop
 8006df4:	20000030 	.word	0x20000030
 8006df8:	0800a29e 	.word	0x0800a29e
 8006dfc:	0800a2b5 	.word	0x0800a2b5

08006e00 <localtime_r>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	460c      	mov	r4, r1
 8006e06:	4680      	mov	r8, r0
 8006e08:	f002 fbca 	bl	80095a0 <__gettzinfo>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4605      	mov	r5, r0
 8006e10:	4640      	mov	r0, r8
 8006e12:	f002 fbc9 	bl	80095a8 <gmtime_r>
 8006e16:	6943      	ldr	r3, [r0, #20]
 8006e18:	0799      	lsls	r1, r3, #30
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8006e20:	d106      	bne.n	8006e30 <localtime_r+0x30>
 8006e22:	2264      	movs	r2, #100	@ 0x64
 8006e24:	fb97 f3f2 	sdiv	r3, r7, r2
 8006e28:	fb02 7313 	mls	r3, r2, r3, r7
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d170      	bne.n	8006f12 <localtime_r+0x112>
 8006e30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006e34:	fb97 f3f2 	sdiv	r3, r7, r2
 8006e38:	fb02 7313 	mls	r3, r2, r3, r7
 8006e3c:	fab3 f383 	clz	r3, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	4e64      	ldr	r6, [pc, #400]	@ (8006fd4 <localtime_r+0x1d4>)
 8006e44:	2230      	movs	r2, #48	@ 0x30
 8006e46:	fb02 6603 	mla	r6, r2, r3, r6
 8006e4a:	f000 f98d 	bl	8007168 <__tz_lock>
 8006e4e:	f000 f997 	bl	8007180 <_tzset_unlocked>
 8006e52:	4b61      	ldr	r3, [pc, #388]	@ (8006fd8 <localtime_r+0x1d8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d06a      	beq.n	8006f30 <localtime_r+0x130>
 8006e5a:	686b      	ldr	r3, [r5, #4]
 8006e5c:	42bb      	cmp	r3, r7
 8006e5e:	d15a      	bne.n	8006f16 <localtime_r+0x116>
 8006e60:	682f      	ldr	r7, [r5, #0]
 8006e62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006e66:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d15b      	bne.n	8006f26 <localtime_r+0x126>
 8006e6e:	4282      	cmp	r2, r0
 8006e70:	eb73 0101 	sbcs.w	r1, r3, r1
 8006e74:	db5e      	blt.n	8006f34 <localtime_r+0x134>
 8006e76:	2301      	movs	r3, #1
 8006e78:	6223      	str	r3, [r4, #32]
 8006e7a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8006e7c:	6861      	ldr	r1, [r4, #4]
 8006e7e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8006e82:	fb93 f0f2 	sdiv	r0, r3, r2
 8006e86:	fb02 3310 	mls	r3, r2, r0, r3
 8006e8a:	223c      	movs	r2, #60	@ 0x3c
 8006e8c:	fb93 f5f2 	sdiv	r5, r3, r2
 8006e90:	fb02 3215 	mls	r2, r2, r5, r3
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	68a2      	ldr	r2, [r4, #8]
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	1b49      	subs	r1, r1, r5
 8006e9e:	1a12      	subs	r2, r2, r0
 8006ea0:	2b3b      	cmp	r3, #59	@ 0x3b
 8006ea2:	6061      	str	r1, [r4, #4]
 8006ea4:	60a2      	str	r2, [r4, #8]
 8006ea6:	dd51      	ble.n	8006f4c <localtime_r+0x14c>
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	6061      	str	r1, [r4, #4]
 8006eac:	3b3c      	subs	r3, #60	@ 0x3c
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	2b3b      	cmp	r3, #59	@ 0x3b
 8006eb4:	dd50      	ble.n	8006f58 <localtime_r+0x158>
 8006eb6:	3201      	adds	r2, #1
 8006eb8:	60a2      	str	r2, [r4, #8]
 8006eba:	3b3c      	subs	r3, #60	@ 0x3c
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	2b17      	cmp	r3, #23
 8006ec2:	dd4f      	ble.n	8006f64 <localtime_r+0x164>
 8006ec4:	69e2      	ldr	r2, [r4, #28]
 8006ec6:	3201      	adds	r2, #1
 8006ec8:	61e2      	str	r2, [r4, #28]
 8006eca:	69a2      	ldr	r2, [r4, #24]
 8006ecc:	3201      	adds	r2, #1
 8006ece:	2a07      	cmp	r2, #7
 8006ed0:	bfa8      	it	ge
 8006ed2:	2200      	movge	r2, #0
 8006ed4:	61a2      	str	r2, [r4, #24]
 8006ed6:	68e2      	ldr	r2, [r4, #12]
 8006ed8:	3b18      	subs	r3, #24
 8006eda:	3201      	adds	r2, #1
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	60e2      	str	r2, [r4, #12]
 8006ee2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8006ee6:	428a      	cmp	r2, r1
 8006ee8:	dd0e      	ble.n	8006f08 <localtime_r+0x108>
 8006eea:	2b0b      	cmp	r3, #11
 8006eec:	eba2 0201 	sub.w	r2, r2, r1
 8006ef0:	60e2      	str	r2, [r4, #12]
 8006ef2:	f103 0201 	add.w	r2, r3, #1
 8006ef6:	bf09      	itett	eq
 8006ef8:	6963      	ldreq	r3, [r4, #20]
 8006efa:	6122      	strne	r2, [r4, #16]
 8006efc:	2200      	moveq	r2, #0
 8006efe:	3301      	addeq	r3, #1
 8006f00:	bf02      	ittt	eq
 8006f02:	6122      	streq	r2, [r4, #16]
 8006f04:	6163      	streq	r3, [r4, #20]
 8006f06:	61e2      	streq	r2, [r4, #28]
 8006f08:	f000 f934 	bl	8007174 <__tz_unlock>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	2301      	movs	r3, #1
 8006f14:	e795      	b.n	8006e42 <localtime_r+0x42>
 8006f16:	4638      	mov	r0, r7
 8006f18:	f000 f87c 	bl	8007014 <__tzcalc_limits>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d19f      	bne.n	8006e60 <localtime_r+0x60>
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	e004      	b.n	8006f30 <localtime_r+0x130>
 8006f26:	4282      	cmp	r2, r0
 8006f28:	eb73 0101 	sbcs.w	r1, r3, r1
 8006f2c:	da02      	bge.n	8006f34 <localtime_r+0x134>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6223      	str	r3, [r4, #32]
 8006f32:	e009      	b.n	8006f48 <localtime_r+0x148>
 8006f34:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8006f38:	4282      	cmp	r2, r0
 8006f3a:	418b      	sbcs	r3, r1
 8006f3c:	bfb4      	ite	lt
 8006f3e:	2301      	movlt	r3, #1
 8006f40:	2300      	movge	r3, #0
 8006f42:	6223      	str	r3, [r4, #32]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d198      	bne.n	8006e7a <localtime_r+0x7a>
 8006f48:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006f4a:	e797      	b.n	8006e7c <localtime_r+0x7c>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	daaf      	bge.n	8006eb0 <localtime_r+0xb0>
 8006f50:	3901      	subs	r1, #1
 8006f52:	6061      	str	r1, [r4, #4]
 8006f54:	333c      	adds	r3, #60	@ 0x3c
 8006f56:	e7aa      	b.n	8006eae <localtime_r+0xae>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dab0      	bge.n	8006ebe <localtime_r+0xbe>
 8006f5c:	3a01      	subs	r2, #1
 8006f5e:	60a2      	str	r2, [r4, #8]
 8006f60:	333c      	adds	r3, #60	@ 0x3c
 8006f62:	e7ab      	b.n	8006ebc <localtime_r+0xbc>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dacf      	bge.n	8006f08 <localtime_r+0x108>
 8006f68:	69e2      	ldr	r2, [r4, #28]
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	61e2      	str	r2, [r4, #28]
 8006f6e:	69a2      	ldr	r2, [r4, #24]
 8006f70:	3a01      	subs	r2, #1
 8006f72:	bf48      	it	mi
 8006f74:	2206      	movmi	r2, #6
 8006f76:	61a2      	str	r2, [r4, #24]
 8006f78:	68e2      	ldr	r2, [r4, #12]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	3a01      	subs	r2, #1
 8006f7e:	60e2      	str	r2, [r4, #12]
 8006f80:	60a3      	str	r3, [r4, #8]
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d1c0      	bne.n	8006f08 <localtime_r+0x108>
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	d405      	bmi.n	8006f98 <localtime_r+0x198>
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8006f94:	60e3      	str	r3, [r4, #12]
 8006f96:	e7b7      	b.n	8006f08 <localtime_r+0x108>
 8006f98:	230b      	movs	r3, #11
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	6963      	ldr	r3, [r4, #20]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	6162      	str	r2, [r4, #20]
 8006fa2:	0792      	lsls	r2, r2, #30
 8006fa4:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8006fa8:	d105      	bne.n	8006fb6 <localtime_r+0x1b6>
 8006faa:	2164      	movs	r1, #100	@ 0x64
 8006fac:	fb93 f2f1 	sdiv	r2, r3, r1
 8006fb0:	fb01 3212 	mls	r2, r1, r2, r3
 8006fb4:	b962      	cbnz	r2, 8006fd0 <localtime_r+0x1d0>
 8006fb6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006fba:	fb93 f1f2 	sdiv	r1, r3, r2
 8006fbe:	fb02 3311 	mls	r3, r2, r1, r3
 8006fc2:	fab3 f383 	clz	r3, r3
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006fcc:	61e3      	str	r3, [r4, #28]
 8006fce:	e7de      	b.n	8006f8e <localtime_r+0x18e>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e7f9      	b.n	8006fc8 <localtime_r+0x1c8>
 8006fd4:	0800a310 	.word	0x0800a310
 8006fd8:	2000081c 	.word	0x2000081c

08006fdc <time>:
 8006fdc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8006fde:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <time+0x34>)
 8006fe0:	f04f 36ff 	mov.w	r6, #4294967295
 8006fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fe8:	4669      	mov	r1, sp
 8006fea:	4604      	mov	r4, r0
 8006fec:	2200      	movs	r2, #0
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	e9cd 6700 	strd	r6, r7, [sp]
 8006ff4:	f000 fb00 	bl	80075f8 <_gettimeofday_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	bfb8      	it	lt
 8006ffc:	e9cd 6700 	strdlt	r6, r7, [sp]
 8007000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007004:	b10c      	cbz	r4, 800700a <time+0x2e>
 8007006:	e9c4 0100 	strd	r0, r1, [r4]
 800700a:	b004      	add	sp, #16
 800700c:	bdd0      	pop	{r4, r6, r7, pc}
 800700e:	bf00      	nop
 8007010:	20000030 	.word	0x20000030

08007014 <__tzcalc_limits>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4604      	mov	r4, r0
 800701a:	f002 fac1 	bl	80095a0 <__gettzinfo>
 800701e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8007022:	429c      	cmp	r4, r3
 8007024:	f340 8099 	ble.w	800715a <__tzcalc_limits+0x146>
 8007028:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800702c:	19e5      	adds	r5, r4, r7
 800702e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8007032:	f240 126d 	movw	r2, #365	@ 0x16d
 8007036:	10ad      	asrs	r5, r5, #2
 8007038:	fb02 5503 	mla	r5, r2, r3, r5
 800703c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8007040:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8007044:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8007048:	4f45      	ldr	r7, [pc, #276]	@ (8007160 <__tzcalc_limits+0x14c>)
 800704a:	fb93 f3f2 	sdiv	r3, r3, r2
 800704e:	441d      	add	r5, r3
 8007050:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007054:	eb04 030c 	add.w	r3, r4, ip
 8007058:	6044      	str	r4, [r0, #4]
 800705a:	fbb3 f3f2 	udiv	r3, r3, r2
 800705e:	4601      	mov	r1, r0
 8007060:	441d      	add	r5, r3
 8007062:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8007066:	7a0b      	ldrb	r3, [r1, #8]
 8007068:	694a      	ldr	r2, [r1, #20]
 800706a:	2b4a      	cmp	r3, #74	@ 0x4a
 800706c:	d133      	bne.n	80070d6 <__tzcalc_limits+0xc2>
 800706e:	07a6      	lsls	r6, r4, #30
 8007070:	eb05 0302 	add.w	r3, r5, r2
 8007074:	d106      	bne.n	8007084 <__tzcalc_limits+0x70>
 8007076:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800707a:	fb94 f6fe 	sdiv	r6, r4, lr
 800707e:	fb0e 4616 	mls	r6, lr, r6, r4
 8007082:	b936      	cbnz	r6, 8007092 <__tzcalc_limits+0x7e>
 8007084:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8007088:	fb94 f6fe 	sdiv	r6, r4, lr
 800708c:	fb0e 4616 	mls	r6, lr, r6, r4
 8007090:	b9fe      	cbnz	r6, 80070d2 <__tzcalc_limits+0xbe>
 8007092:	2a3b      	cmp	r2, #59	@ 0x3b
 8007094:	bfd4      	ite	le
 8007096:	2200      	movle	r2, #0
 8007098:	2201      	movgt	r2, #1
 800709a:	4413      	add	r3, r2
 800709c:	3b01      	subs	r3, #1
 800709e:	698a      	ldr	r2, [r1, #24]
 80070a0:	17d6      	asrs	r6, r2, #31
 80070a2:	fbc3 2607 	smlal	r2, r6, r3, r7
 80070a6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80070a8:	18d2      	adds	r2, r2, r3
 80070aa:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 80070ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80070b2:	3128      	adds	r1, #40	@ 0x28
 80070b4:	458c      	cmp	ip, r1
 80070b6:	d1d6      	bne.n	8007066 <__tzcalc_limits+0x52>
 80070b8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80070bc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80070c0:	428c      	cmp	r4, r1
 80070c2:	4193      	sbcs	r3, r2
 80070c4:	bfb4      	ite	lt
 80070c6:	2301      	movlt	r3, #1
 80070c8:	2300      	movge	r3, #0
 80070ca:	6003      	str	r3, [r0, #0]
 80070cc:	2001      	movs	r0, #1
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	2200      	movs	r2, #0
 80070d4:	e7e1      	b.n	800709a <__tzcalc_limits+0x86>
 80070d6:	2b44      	cmp	r3, #68	@ 0x44
 80070d8:	d101      	bne.n	80070de <__tzcalc_limits+0xca>
 80070da:	18ab      	adds	r3, r5, r2
 80070dc:	e7df      	b.n	800709e <__tzcalc_limits+0x8a>
 80070de:	07a3      	lsls	r3, r4, #30
 80070e0:	d105      	bne.n	80070ee <__tzcalc_limits+0xda>
 80070e2:	2664      	movs	r6, #100	@ 0x64
 80070e4:	fb94 f3f6 	sdiv	r3, r4, r6
 80070e8:	fb06 4313 	mls	r3, r6, r3, r4
 80070ec:	bb7b      	cbnz	r3, 800714e <__tzcalc_limits+0x13a>
 80070ee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80070f2:	fb94 f6f3 	sdiv	r6, r4, r3
 80070f6:	fb03 4616 	mls	r6, r3, r6, r4
 80070fa:	fab6 f686 	clz	r6, r6
 80070fe:	0976      	lsrs	r6, r6, #5
 8007100:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8007164 <__tzcalc_limits+0x150>
 8007104:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8007108:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800710c:	462b      	mov	r3, r5
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	fb0a e606 	mla	r6, sl, r6, lr
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	45c1      	cmp	r9, r8
 800711c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8007120:	dc17      	bgt.n	8007152 <__tzcalc_limits+0x13e>
 8007122:	f103 0804 	add.w	r8, r3, #4
 8007126:	2607      	movs	r6, #7
 8007128:	fb98 f6f6 	sdiv	r6, r8, r6
 800712c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007130:	eba8 0606 	sub.w	r6, r8, r6
 8007134:	1b92      	subs	r2, r2, r6
 8007136:	690e      	ldr	r6, [r1, #16]
 8007138:	f106 36ff 	add.w	r6, r6, #4294967295
 800713c:	bf48      	it	mi
 800713e:	3207      	addmi	r2, #7
 8007140:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007144:	4432      	add	r2, r6
 8007146:	4572      	cmp	r2, lr
 8007148:	da05      	bge.n	8007156 <__tzcalc_limits+0x142>
 800714a:	4413      	add	r3, r2
 800714c:	e7a7      	b.n	800709e <__tzcalc_limits+0x8a>
 800714e:	2601      	movs	r6, #1
 8007150:	e7d6      	b.n	8007100 <__tzcalc_limits+0xec>
 8007152:	4473      	add	r3, lr
 8007154:	e7df      	b.n	8007116 <__tzcalc_limits+0x102>
 8007156:	3a07      	subs	r2, #7
 8007158:	e7f5      	b.n	8007146 <__tzcalc_limits+0x132>
 800715a:	2000      	movs	r0, #0
 800715c:	e7b7      	b.n	80070ce <__tzcalc_limits+0xba>
 800715e:	bf00      	nop
 8007160:	00015180 	.word	0x00015180
 8007164:	0800a30c 	.word	0x0800a30c

08007168 <__tz_lock>:
 8007168:	4801      	ldr	r0, [pc, #4]	@ (8007170 <__tz_lock+0x8>)
 800716a:	f000 bac8 	b.w	80076fe <__retarget_lock_acquire>
 800716e:	bf00      	nop
 8007170:	20000824 	.word	0x20000824

08007174 <__tz_unlock>:
 8007174:	4801      	ldr	r0, [pc, #4]	@ (800717c <__tz_unlock+0x8>)
 8007176:	f000 bac4 	b.w	8007702 <__retarget_lock_release>
 800717a:	bf00      	nop
 800717c:	20000824 	.word	0x20000824

08007180 <_tzset_unlocked>:
 8007180:	4b01      	ldr	r3, [pc, #4]	@ (8007188 <_tzset_unlocked+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	f000 b802 	b.w	800718c <_tzset_unlocked_r>
 8007188:	20000030 	.word	0x20000030

0800718c <_tzset_unlocked_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	b08d      	sub	sp, #52	@ 0x34
 8007192:	4607      	mov	r7, r0
 8007194:	f002 fa04 	bl	80095a0 <__gettzinfo>
 8007198:	49bc      	ldr	r1, [pc, #752]	@ (800748c <_tzset_unlocked_r+0x300>)
 800719a:	4dbd      	ldr	r5, [pc, #756]	@ (8007490 <_tzset_unlocked_r+0x304>)
 800719c:	4604      	mov	r4, r0
 800719e:	4638      	mov	r0, r7
 80071a0:	f001 f9b8 	bl	8008514 <_getenv_r>
 80071a4:	4606      	mov	r6, r0
 80071a6:	bb10      	cbnz	r0, 80071ee <_tzset_unlocked_r+0x62>
 80071a8:	4bba      	ldr	r3, [pc, #744]	@ (8007494 <_tzset_unlocked_r+0x308>)
 80071aa:	4abb      	ldr	r2, [pc, #748]	@ (8007498 <_tzset_unlocked_r+0x30c>)
 80071ac:	6018      	str	r0, [r3, #0]
 80071ae:	4bbb      	ldr	r3, [pc, #748]	@ (800749c <_tzset_unlocked_r+0x310>)
 80071b0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80071b2:	6018      	str	r0, [r3, #0]
 80071b4:	4bba      	ldr	r3, [pc, #744]	@ (80074a0 <_tzset_unlocked_r+0x314>)
 80071b6:	6520      	str	r0, [r4, #80]	@ 0x50
 80071b8:	e9c3 2200 	strd	r2, r2, [r3]
 80071bc:	214a      	movs	r1, #74	@ 0x4a
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80071c6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80071ca:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80071ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80071d2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80071d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80071da:	6828      	ldr	r0, [r5, #0]
 80071dc:	7221      	strb	r1, [r4, #8]
 80071de:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80071e2:	f7fe ff8b 	bl	80060fc <free>
 80071e6:	602e      	str	r6, [r5, #0]
 80071e8:	b00d      	add	sp, #52	@ 0x34
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	6829      	ldr	r1, [r5, #0]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	f040 808e 	bne.w	8007312 <_tzset_unlocked_r+0x186>
 80071f6:	6828      	ldr	r0, [r5, #0]
 80071f8:	f7fe ff80 	bl	80060fc <free>
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7f9 f847 	bl	8000290 <strlen>
 8007202:	1c41      	adds	r1, r0, #1
 8007204:	4638      	mov	r0, r7
 8007206:	f7fe ffa3 	bl	8006150 <_malloc_r>
 800720a:	6028      	str	r0, [r5, #0]
 800720c:	2800      	cmp	r0, #0
 800720e:	f040 8086 	bne.w	800731e <_tzset_unlocked_r+0x192>
 8007212:	4aa2      	ldr	r2, [pc, #648]	@ (800749c <_tzset_unlocked_r+0x310>)
 8007214:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80074a0 <_tzset_unlocked_r+0x314>
 8007218:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8007494 <_tzset_unlocked_r+0x308>
 800721c:	2300      	movs	r3, #0
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	4aa0      	ldr	r2, [pc, #640]	@ (80074a4 <_tzset_unlocked_r+0x318>)
 8007222:	f8ca 3000 	str.w	r3, [sl]
 8007226:	2000      	movs	r0, #0
 8007228:	2100      	movs	r1, #0
 800722a:	e9c8 2200 	strd	r2, r2, [r8]
 800722e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8007232:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8007236:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800723a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800723e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8007242:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8007246:	224a      	movs	r2, #74	@ 0x4a
 8007248:	7222      	strb	r2, [r4, #8]
 800724a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800724c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8007250:	6523      	str	r3, [r4, #80]	@ 0x50
 8007252:	7833      	ldrb	r3, [r6, #0]
 8007254:	2b3a      	cmp	r3, #58	@ 0x3a
 8007256:	bf08      	it	eq
 8007258:	3601      	addeq	r6, #1
 800725a:	7833      	ldrb	r3, [r6, #0]
 800725c:	2b3c      	cmp	r3, #60	@ 0x3c
 800725e:	d162      	bne.n	8007326 <_tzset_unlocked_r+0x19a>
 8007260:	1c75      	adds	r5, r6, #1
 8007262:	4a91      	ldr	r2, [pc, #580]	@ (80074a8 <_tzset_unlocked_r+0x31c>)
 8007264:	4991      	ldr	r1, [pc, #580]	@ (80074ac <_tzset_unlocked_r+0x320>)
 8007266:	ab0a      	add	r3, sp, #40	@ 0x28
 8007268:	4628      	mov	r0, r5
 800726a:	f002 f8af 	bl	80093cc <siscanf>
 800726e:	2800      	cmp	r0, #0
 8007270:	ddba      	ble.n	80071e8 <_tzset_unlocked_r+0x5c>
 8007272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007274:	1eda      	subs	r2, r3, #3
 8007276:	2a07      	cmp	r2, #7
 8007278:	d8b6      	bhi.n	80071e8 <_tzset_unlocked_r+0x5c>
 800727a:	5ceb      	ldrb	r3, [r5, r3]
 800727c:	2b3e      	cmp	r3, #62	@ 0x3e
 800727e:	d1b3      	bne.n	80071e8 <_tzset_unlocked_r+0x5c>
 8007280:	3602      	adds	r6, #2
 8007282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007284:	18f5      	adds	r5, r6, r3
 8007286:	5cf3      	ldrb	r3, [r6, r3]
 8007288:	2b2d      	cmp	r3, #45	@ 0x2d
 800728a:	d15a      	bne.n	8007342 <_tzset_unlocked_r+0x1b6>
 800728c:	3501      	adds	r5, #1
 800728e:	f04f 39ff 	mov.w	r9, #4294967295
 8007292:	2300      	movs	r3, #0
 8007294:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007298:	f8ad 3020 	strh.w	r3, [sp, #32]
 800729c:	af08      	add	r7, sp, #32
 800729e:	ab0a      	add	r3, sp, #40	@ 0x28
 80072a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80072a4:	9303      	str	r3, [sp, #12]
 80072a6:	f10d 031e 	add.w	r3, sp, #30
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4980      	ldr	r1, [pc, #512]	@ (80074b0 <_tzset_unlocked_r+0x324>)
 80072ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80072b0:	aa07      	add	r2, sp, #28
 80072b2:	4628      	mov	r0, r5
 80072b4:	f002 f88a 	bl	80093cc <siscanf>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	dd95      	ble.n	80071e8 <_tzset_unlocked_r+0x5c>
 80072bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80072c0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80072c4:	223c      	movs	r2, #60	@ 0x3c
 80072c6:	fb02 6603 	mla	r6, r2, r3, r6
 80072ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80072ce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80072d2:	fb02 6603 	mla	r6, r2, r3, r6
 80072d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072d8:	fb09 f606 	mul.w	r6, r9, r6
 80072dc:	eb05 0903 	add.w	r9, r5, r3
 80072e0:	5ceb      	ldrb	r3, [r5, r3]
 80072e2:	2b3c      	cmp	r3, #60	@ 0x3c
 80072e4:	f040 80ee 	bne.w	80074c4 <_tzset_unlocked_r+0x338>
 80072e8:	f109 0501 	add.w	r5, r9, #1
 80072ec:	4a71      	ldr	r2, [pc, #452]	@ (80074b4 <_tzset_unlocked_r+0x328>)
 80072ee:	496f      	ldr	r1, [pc, #444]	@ (80074ac <_tzset_unlocked_r+0x320>)
 80072f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80072f2:	4628      	mov	r0, r5
 80072f4:	f002 f86a 	bl	80093cc <siscanf>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dc28      	bgt.n	800734e <_tzset_unlocked_r+0x1c2>
 80072fc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007300:	2b3e      	cmp	r3, #62	@ 0x3e
 8007302:	d124      	bne.n	800734e <_tzset_unlocked_r+0x1c2>
 8007304:	4b68      	ldr	r3, [pc, #416]	@ (80074a8 <_tzset_unlocked_r+0x31c>)
 8007306:	62a6      	str	r6, [r4, #40]	@ 0x28
 8007308:	e9c8 3300 	strd	r3, r3, [r8]
 800730c:	f8ca 6000 	str.w	r6, [sl]
 8007310:	e76a      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 8007312:	f7f8 ff5d 	bl	80001d0 <strcmp>
 8007316:	2800      	cmp	r0, #0
 8007318:	f47f af6d 	bne.w	80071f6 <_tzset_unlocked_r+0x6a>
 800731c:	e764      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 800731e:	4631      	mov	r1, r6
 8007320:	f000 f9f1 	bl	8007706 <strcpy>
 8007324:	e775      	b.n	8007212 <_tzset_unlocked_r+0x86>
 8007326:	4a60      	ldr	r2, [pc, #384]	@ (80074a8 <_tzset_unlocked_r+0x31c>)
 8007328:	4963      	ldr	r1, [pc, #396]	@ (80074b8 <_tzset_unlocked_r+0x32c>)
 800732a:	ab0a      	add	r3, sp, #40	@ 0x28
 800732c:	4630      	mov	r0, r6
 800732e:	f002 f84d 	bl	80093cc <siscanf>
 8007332:	2800      	cmp	r0, #0
 8007334:	f77f af58 	ble.w	80071e8 <_tzset_unlocked_r+0x5c>
 8007338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800733a:	3b03      	subs	r3, #3
 800733c:	2b07      	cmp	r3, #7
 800733e:	d9a0      	bls.n	8007282 <_tzset_unlocked_r+0xf6>
 8007340:	e752      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 8007342:	2b2b      	cmp	r3, #43	@ 0x2b
 8007344:	bf08      	it	eq
 8007346:	3501      	addeq	r5, #1
 8007348:	f04f 0901 	mov.w	r9, #1
 800734c:	e7a1      	b.n	8007292 <_tzset_unlocked_r+0x106>
 800734e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007350:	1eda      	subs	r2, r3, #3
 8007352:	2a07      	cmp	r2, #7
 8007354:	f63f af48 	bhi.w	80071e8 <_tzset_unlocked_r+0x5c>
 8007358:	5ceb      	ldrb	r3, [r5, r3]
 800735a:	2b3e      	cmp	r3, #62	@ 0x3e
 800735c:	f47f af44 	bne.w	80071e8 <_tzset_unlocked_r+0x5c>
 8007360:	f109 0902 	add.w	r9, r9, #2
 8007364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007366:	eb09 0503 	add.w	r5, r9, r3
 800736a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800736e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007370:	f040 80b7 	bne.w	80074e2 <_tzset_unlocked_r+0x356>
 8007374:	3501      	adds	r5, #1
 8007376:	f04f 39ff 	mov.w	r9, #4294967295
 800737a:	2300      	movs	r3, #0
 800737c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007380:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007384:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007388:	930a      	str	r3, [sp, #40]	@ 0x28
 800738a:	ab0a      	add	r3, sp, #40	@ 0x28
 800738c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f10d 031e 	add.w	r3, sp, #30
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4945      	ldr	r1, [pc, #276]	@ (80074b0 <_tzset_unlocked_r+0x324>)
 800739a:	ab0a      	add	r3, sp, #40	@ 0x28
 800739c:	aa07      	add	r2, sp, #28
 800739e:	4628      	mov	r0, r5
 80073a0:	f002 f814 	bl	80093cc <siscanf>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f300 80a2 	bgt.w	80074ee <_tzset_unlocked_r+0x362>
 80073aa:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073b2:	4627      	mov	r7, r4
 80073b4:	441d      	add	r5, r3
 80073b6:	f04f 0b00 	mov.w	fp, #0
 80073ba:	782b      	ldrb	r3, [r5, #0]
 80073bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80073be:	bf08      	it	eq
 80073c0:	3501      	addeq	r5, #1
 80073c2:	f895 9000 	ldrb.w	r9, [r5]
 80073c6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80073ca:	f040 80a3 	bne.w	8007514 <_tzset_unlocked_r+0x388>
 80073ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80073d0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80073d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073d8:	aa09      	add	r2, sp, #36	@ 0x24
 80073da:	9200      	str	r2, [sp, #0]
 80073dc:	4937      	ldr	r1, [pc, #220]	@ (80074bc <_tzset_unlocked_r+0x330>)
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80073e4:	4628      	mov	r0, r5
 80073e6:	f001 fff1 	bl	80093cc <siscanf>
 80073ea:	2803      	cmp	r0, #3
 80073ec:	f47f aefc 	bne.w	80071e8 <_tzset_unlocked_r+0x5c>
 80073f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80073f4:	1e4b      	subs	r3, r1, #1
 80073f6:	2b0b      	cmp	r3, #11
 80073f8:	f63f aef6 	bhi.w	80071e8 <_tzset_unlocked_r+0x5c>
 80073fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8007400:	1e53      	subs	r3, r2, #1
 8007402:	2b04      	cmp	r3, #4
 8007404:	f63f aef0 	bhi.w	80071e8 <_tzset_unlocked_r+0x5c>
 8007408:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800740c:	2b06      	cmp	r3, #6
 800740e:	f63f aeeb 	bhi.w	80071e8 <_tzset_unlocked_r+0x5c>
 8007412:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007416:	f887 9008 	strb.w	r9, [r7, #8]
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800741e:	eb05 0903 	add.w	r9, r5, r3
 8007422:	2500      	movs	r5, #0
 8007424:	f04f 0302 	mov.w	r3, #2
 8007428:	f8ad 301c 	strh.w	r3, [sp, #28]
 800742c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8007430:	f8ad 5020 	strh.w	r5, [sp, #32]
 8007434:	950a      	str	r5, [sp, #40]	@ 0x28
 8007436:	f899 3000 	ldrb.w	r3, [r9]
 800743a:	2b2f      	cmp	r3, #47	@ 0x2f
 800743c:	f040 8096 	bne.w	800756c <_tzset_unlocked_r+0x3e0>
 8007440:	ab0a      	add	r3, sp, #40	@ 0x28
 8007442:	aa08      	add	r2, sp, #32
 8007444:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007448:	f10d 021e 	add.w	r2, sp, #30
 800744c:	9200      	str	r2, [sp, #0]
 800744e:	491c      	ldr	r1, [pc, #112]	@ (80074c0 <_tzset_unlocked_r+0x334>)
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	aa07      	add	r2, sp, #28
 8007454:	4648      	mov	r0, r9
 8007456:	f001 ffb9 	bl	80093cc <siscanf>
 800745a:	42a8      	cmp	r0, r5
 800745c:	f300 8086 	bgt.w	800756c <_tzset_unlocked_r+0x3e0>
 8007460:	214a      	movs	r1, #74	@ 0x4a
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800746a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800746e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007472:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8007476:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800747a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800747e:	7221      	strb	r1, [r4, #8]
 8007480:	62a5      	str	r5, [r4, #40]	@ 0x28
 8007482:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8007486:	6525      	str	r5, [r4, #80]	@ 0x50
 8007488:	e6ae      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 800748a:	bf00      	nop
 800748c:	0800a370 	.word	0x0800a370
 8007490:	200007fc 	.word	0x200007fc
 8007494:	20000818 	.word	0x20000818
 8007498:	0800a373 	.word	0x0800a373
 800749c:	2000081c 	.word	0x2000081c
 80074a0:	20000028 	.word	0x20000028
 80074a4:	0800a3f9 	.word	0x0800a3f9
 80074a8:	2000080c 	.word	0x2000080c
 80074ac:	0800a377 	.word	0x0800a377
 80074b0:	0800a3ac 	.word	0x0800a3ac
 80074b4:	20000800 	.word	0x20000800
 80074b8:	0800a38a 	.word	0x0800a38a
 80074bc:	0800a398 	.word	0x0800a398
 80074c0:	0800a3ab 	.word	0x0800a3ab
 80074c4:	4a3e      	ldr	r2, [pc, #248]	@ (80075c0 <_tzset_unlocked_r+0x434>)
 80074c6:	493f      	ldr	r1, [pc, #252]	@ (80075c4 <_tzset_unlocked_r+0x438>)
 80074c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80074ca:	4648      	mov	r0, r9
 80074cc:	f001 ff7e 	bl	80093cc <siscanf>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f77f af17 	ble.w	8007304 <_tzset_unlocked_r+0x178>
 80074d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d8:	3b03      	subs	r3, #3
 80074da:	2b07      	cmp	r3, #7
 80074dc:	f67f af42 	bls.w	8007364 <_tzset_unlocked_r+0x1d8>
 80074e0:	e682      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 80074e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80074e4:	bf08      	it	eq
 80074e6:	3501      	addeq	r5, #1
 80074e8:	f04f 0901 	mov.w	r9, #1
 80074ec:	e745      	b.n	800737a <_tzset_unlocked_r+0x1ee>
 80074ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80074f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80074f6:	213c      	movs	r1, #60	@ 0x3c
 80074f8:	fb01 3302 	mla	r3, r1, r2, r3
 80074fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007500:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007504:	fb01 3302 	mla	r3, r1, r2, r3
 8007508:	fb09 f303 	mul.w	r3, r9, r3
 800750c:	e74f      	b.n	80073ae <_tzset_unlocked_r+0x222>
 800750e:	f04f 0b01 	mov.w	fp, #1
 8007512:	e752      	b.n	80073ba <_tzset_unlocked_r+0x22e>
 8007514:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8007518:	bf06      	itte	eq
 800751a:	3501      	addeq	r5, #1
 800751c:	464b      	moveq	r3, r9
 800751e:	2344      	movne	r3, #68	@ 0x44
 8007520:	220a      	movs	r2, #10
 8007522:	a90b      	add	r1, sp, #44	@ 0x2c
 8007524:	4628      	mov	r0, r5
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	f001 fbee 	bl	8008d08 <strtoul>
 800752c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8007536:	45a9      	cmp	r9, r5
 8007538:	d114      	bne.n	8007564 <_tzset_unlocked_r+0x3d8>
 800753a:	234d      	movs	r3, #77	@ 0x4d
 800753c:	f1bb 0f00 	cmp.w	fp, #0
 8007540:	d107      	bne.n	8007552 <_tzset_unlocked_r+0x3c6>
 8007542:	7223      	strb	r3, [r4, #8]
 8007544:	2103      	movs	r1, #3
 8007546:	2302      	movs	r3, #2
 8007548:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800754c:	f8c4 b014 	str.w	fp, [r4, #20]
 8007550:	e767      	b.n	8007422 <_tzset_unlocked_r+0x296>
 8007552:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8007556:	220b      	movs	r2, #11
 8007558:	2301      	movs	r3, #1
 800755a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800755e:	2300      	movs	r3, #0
 8007560:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007562:	e75e      	b.n	8007422 <_tzset_unlocked_r+0x296>
 8007564:	b280      	uxth	r0, r0
 8007566:	723b      	strb	r3, [r7, #8]
 8007568:	6178      	str	r0, [r7, #20]
 800756a:	e75a      	b.n	8007422 <_tzset_unlocked_r+0x296>
 800756c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007570:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007574:	213c      	movs	r1, #60	@ 0x3c
 8007576:	fb01 3302 	mla	r3, r1, r2, r3
 800757a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800757e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007582:	fb01 3302 	mla	r3, r1, r2, r3
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800758a:	3728      	adds	r7, #40	@ 0x28
 800758c:	444d      	add	r5, r9
 800758e:	f1bb 0f00 	cmp.w	fp, #0
 8007592:	d0bc      	beq.n	800750e <_tzset_unlocked_r+0x382>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	6523      	str	r3, [r4, #80]	@ 0x50
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <_tzset_unlocked_r+0x43c>)
 800759a:	f8c8 3000 	str.w	r3, [r8]
 800759e:	6860      	ldr	r0, [r4, #4]
 80075a0:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <_tzset_unlocked_r+0x434>)
 80075a2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80075a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80075a8:	f7ff fd34 	bl	8007014 <__tzcalc_limits>
 80075ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80075ae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80075b0:	f8ca 2000 	str.w	r2, [sl]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	4a05      	ldr	r2, [pc, #20]	@ (80075cc <_tzset_unlocked_r+0x440>)
 80075b8:	bf18      	it	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e613      	b.n	80071e8 <_tzset_unlocked_r+0x5c>
 80075c0:	20000800 	.word	0x20000800
 80075c4:	0800a38a 	.word	0x0800a38a
 80075c8:	2000080c 	.word	0x2000080c
 80075cc:	2000081c 	.word	0x2000081c

080075d0 <_localeconv_r>:
 80075d0:	4800      	ldr	r0, [pc, #0]	@ (80075d4 <_localeconv_r+0x4>)
 80075d2:	4770      	bx	lr
 80075d4:	200001c8 	.word	0x200001c8

080075d8 <_close_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d06      	ldr	r5, [pc, #24]	@ (80075f4 <_close_r+0x1c>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	f7fa fb62 	bl	8001cac <_close>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_close_r+0x1a>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_close_r+0x1a>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000820 	.word	0x20000820

080075f8 <_gettimeofday_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	@ (8007618 <_gettimeofday_r+0x20>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f002 fdc5 	bl	800a194 <_gettimeofday>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d102      	bne.n	8007614 <_gettimeofday_r+0x1c>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b103      	cbz	r3, 8007614 <_gettimeofday_r+0x1c>
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20000820 	.word	0x20000820

0800761c <_lseek_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d07      	ldr	r5, [pc, #28]	@ (800763c <_lseek_r+0x20>)
 8007620:	4604      	mov	r4, r0
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	2200      	movs	r2, #0
 8007628:	602a      	str	r2, [r5, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f7fa fb65 	bl	8001cfa <_lseek>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_lseek_r+0x1e>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_lseek_r+0x1e>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20000820 	.word	0x20000820

08007640 <_read_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d07      	ldr	r5, [pc, #28]	@ (8007660 <_read_r+0x20>)
 8007644:	4604      	mov	r4, r0
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	2200      	movs	r2, #0
 800764c:	602a      	str	r2, [r5, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	f7fa faf3 	bl	8001c3a <_read>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_read_r+0x1e>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_read_r+0x1e>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000820 	.word	0x20000820

08007664 <_sbrk_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	@ (8007680 <_sbrk_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fa fb50 	bl	8001d14 <_sbrk>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_sbrk_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_sbrk_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20000820 	.word	0x20000820

08007684 <_write_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	@ (80076a4 <_write_r+0x20>)
 8007688:	4604      	mov	r4, r0
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7fa faee 	bl	8001c74 <_write>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_write_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_write_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000820 	.word	0x20000820

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	@ (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000030 	.word	0x20000030

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	@ (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	@ (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	@ (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	@ (80076f8 <__libc_init_array+0x44>)
 80076c8:	f002 fd6c 	bl	800a1a4 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	0800a708 	.word	0x0800a708
 80076f0:	0800a708 	.word	0x0800a708
 80076f4:	0800a708 	.word	0x0800a708
 80076f8:	0800a70c 	.word	0x0800a70c

080076fc <__retarget_lock_init_recursive>:
 80076fc:	4770      	bx	lr

080076fe <__retarget_lock_acquire>:
 80076fe:	4770      	bx	lr

08007700 <__retarget_lock_acquire_recursive>:
 8007700:	4770      	bx	lr

08007702 <__retarget_lock_release>:
 8007702:	4770      	bx	lr

08007704 <__retarget_lock_release_recursive>:
 8007704:	4770      	bx	lr

08007706 <strcpy>:
 8007706:	4603      	mov	r3, r0
 8007708:	f811 2b01 	ldrb.w	r2, [r1], #1
 800770c:	f803 2b01 	strb.w	r2, [r3], #1
 8007710:	2a00      	cmp	r2, #0
 8007712:	d1f9      	bne.n	8007708 <strcpy+0x2>
 8007714:	4770      	bx	lr

08007716 <memcpy>:
 8007716:	440a      	add	r2, r1
 8007718:	4291      	cmp	r1, r2
 800771a:	f100 33ff 	add.w	r3, r0, #4294967295
 800771e:	d100      	bne.n	8007722 <memcpy+0xc>
 8007720:	4770      	bx	lr
 8007722:	b510      	push	{r4, lr}
 8007724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772c:	4291      	cmp	r1, r2
 800772e:	d1f9      	bne.n	8007724 <memcpy+0xe>
 8007730:	bd10      	pop	{r4, pc}
	...

08007734 <__assert_func>:
 8007734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007736:	4614      	mov	r4, r2
 8007738:	461a      	mov	r2, r3
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <__assert_func+0x2c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4605      	mov	r5, r0
 8007740:	68d8      	ldr	r0, [r3, #12]
 8007742:	b954      	cbnz	r4, 800775a <__assert_func+0x26>
 8007744:	4b07      	ldr	r3, [pc, #28]	@ (8007764 <__assert_func+0x30>)
 8007746:	461c      	mov	r4, r3
 8007748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800774c:	9100      	str	r1, [sp, #0]
 800774e:	462b      	mov	r3, r5
 8007750:	4905      	ldr	r1, [pc, #20]	@ (8007768 <__assert_func+0x34>)
 8007752:	f001 fe29 	bl	80093a8 <fiprintf>
 8007756:	f001 ffcd 	bl	80096f4 <abort>
 800775a:	4b04      	ldr	r3, [pc, #16]	@ (800776c <__assert_func+0x38>)
 800775c:	e7f4      	b.n	8007748 <__assert_func+0x14>
 800775e:	bf00      	nop
 8007760:	20000030 	.word	0x20000030
 8007764:	0800a3f9 	.word	0x0800a3f9
 8007768:	0800a3cb 	.word	0x0800a3cb
 800776c:	0800a3be 	.word	0x0800a3be

08007770 <quorem>:
 8007770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	6903      	ldr	r3, [r0, #16]
 8007776:	690c      	ldr	r4, [r1, #16]
 8007778:	42a3      	cmp	r3, r4
 800777a:	4607      	mov	r7, r0
 800777c:	db7e      	blt.n	800787c <quorem+0x10c>
 800777e:	3c01      	subs	r4, #1
 8007780:	f101 0814 	add.w	r8, r1, #20
 8007784:	00a3      	lsls	r3, r4, #2
 8007786:	f100 0514 	add.w	r5, r0, #20
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800779a:	3301      	adds	r3, #1
 800779c:	429a      	cmp	r2, r3
 800779e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80077a6:	d32e      	bcc.n	8007806 <quorem+0x96>
 80077a8:	f04f 0a00 	mov.w	sl, #0
 80077ac:	46c4      	mov	ip, r8
 80077ae:	46ae      	mov	lr, r5
 80077b0:	46d3      	mov	fp, sl
 80077b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077b6:	b298      	uxth	r0, r3
 80077b8:	fb06 a000 	mla	r0, r6, r0, sl
 80077bc:	0c02      	lsrs	r2, r0, #16
 80077be:	0c1b      	lsrs	r3, r3, #16
 80077c0:	fb06 2303 	mla	r3, r6, r3, r2
 80077c4:	f8de 2000 	ldr.w	r2, [lr]
 80077c8:	b280      	uxth	r0, r0
 80077ca:	b292      	uxth	r2, r2
 80077cc:	1a12      	subs	r2, r2, r0
 80077ce:	445a      	add	r2, fp
 80077d0:	f8de 0000 	ldr.w	r0, [lr]
 80077d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077e2:	b292      	uxth	r2, r2
 80077e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077e8:	45e1      	cmp	r9, ip
 80077ea:	f84e 2b04 	str.w	r2, [lr], #4
 80077ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077f2:	d2de      	bcs.n	80077b2 <quorem+0x42>
 80077f4:	9b00      	ldr	r3, [sp, #0]
 80077f6:	58eb      	ldr	r3, [r5, r3]
 80077f8:	b92b      	cbnz	r3, 8007806 <quorem+0x96>
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	429d      	cmp	r5, r3
 8007800:	461a      	mov	r2, r3
 8007802:	d32f      	bcc.n	8007864 <quorem+0xf4>
 8007804:	613c      	str	r4, [r7, #16]
 8007806:	4638      	mov	r0, r7
 8007808:	f001 f906 	bl	8008a18 <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	db25      	blt.n	800785c <quorem+0xec>
 8007810:	4629      	mov	r1, r5
 8007812:	2000      	movs	r0, #0
 8007814:	f858 2b04 	ldr.w	r2, [r8], #4
 8007818:	f8d1 c000 	ldr.w	ip, [r1]
 800781c:	fa1f fe82 	uxth.w	lr, r2
 8007820:	fa1f f38c 	uxth.w	r3, ip
 8007824:	eba3 030e 	sub.w	r3, r3, lr
 8007828:	4403      	add	r3, r0
 800782a:	0c12      	lsrs	r2, r2, #16
 800782c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007830:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007834:	b29b      	uxth	r3, r3
 8007836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800783a:	45c1      	cmp	r9, r8
 800783c:	f841 3b04 	str.w	r3, [r1], #4
 8007840:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007844:	d2e6      	bcs.n	8007814 <quorem+0xa4>
 8007846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800784a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800784e:	b922      	cbnz	r2, 800785a <quorem+0xea>
 8007850:	3b04      	subs	r3, #4
 8007852:	429d      	cmp	r5, r3
 8007854:	461a      	mov	r2, r3
 8007856:	d30b      	bcc.n	8007870 <quorem+0x100>
 8007858:	613c      	str	r4, [r7, #16]
 800785a:	3601      	adds	r6, #1
 800785c:	4630      	mov	r0, r6
 800785e:	b003      	add	sp, #12
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	6812      	ldr	r2, [r2, #0]
 8007866:	3b04      	subs	r3, #4
 8007868:	2a00      	cmp	r2, #0
 800786a:	d1cb      	bne.n	8007804 <quorem+0x94>
 800786c:	3c01      	subs	r4, #1
 800786e:	e7c6      	b.n	80077fe <quorem+0x8e>
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	3b04      	subs	r3, #4
 8007874:	2a00      	cmp	r2, #0
 8007876:	d1ef      	bne.n	8007858 <quorem+0xe8>
 8007878:	3c01      	subs	r4, #1
 800787a:	e7ea      	b.n	8007852 <quorem+0xe2>
 800787c:	2000      	movs	r0, #0
 800787e:	e7ee      	b.n	800785e <quorem+0xee>

08007880 <_dtoa_r>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	69c7      	ldr	r7, [r0, #28]
 8007886:	b099      	sub	sp, #100	@ 0x64
 8007888:	ed8d 0b02 	vstr	d0, [sp, #8]
 800788c:	ec55 4b10 	vmov	r4, r5, d0
 8007890:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007892:	9109      	str	r1, [sp, #36]	@ 0x24
 8007894:	4683      	mov	fp, r0
 8007896:	920e      	str	r2, [sp, #56]	@ 0x38
 8007898:	9313      	str	r3, [sp, #76]	@ 0x4c
 800789a:	b97f      	cbnz	r7, 80078bc <_dtoa_r+0x3c>
 800789c:	2010      	movs	r0, #16
 800789e:	f7fe fc25 	bl	80060ec <malloc>
 80078a2:	4602      	mov	r2, r0
 80078a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80078a8:	b920      	cbnz	r0, 80078b4 <_dtoa_r+0x34>
 80078aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007b48 <_dtoa_r+0x2c8>)
 80078ac:	21ef      	movs	r1, #239	@ 0xef
 80078ae:	48a7      	ldr	r0, [pc, #668]	@ (8007b4c <_dtoa_r+0x2cc>)
 80078b0:	f7ff ff40 	bl	8007734 <__assert_func>
 80078b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078b8:	6007      	str	r7, [r0, #0]
 80078ba:	60c7      	str	r7, [r0, #12]
 80078bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	b159      	cbz	r1, 80078dc <_dtoa_r+0x5c>
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	604a      	str	r2, [r1, #4]
 80078c8:	2301      	movs	r3, #1
 80078ca:	4093      	lsls	r3, r2
 80078cc:	608b      	str	r3, [r1, #8]
 80078ce:	4658      	mov	r0, fp
 80078d0:	f000 fe68 	bl	80085a4 <_Bfree>
 80078d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	1e2b      	subs	r3, r5, #0
 80078de:	bfb9      	ittee	lt
 80078e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078e4:	9303      	strlt	r3, [sp, #12]
 80078e6:	2300      	movge	r3, #0
 80078e8:	6033      	strge	r3, [r6, #0]
 80078ea:	9f03      	ldr	r7, [sp, #12]
 80078ec:	4b98      	ldr	r3, [pc, #608]	@ (8007b50 <_dtoa_r+0x2d0>)
 80078ee:	bfbc      	itt	lt
 80078f0:	2201      	movlt	r2, #1
 80078f2:	6032      	strlt	r2, [r6, #0]
 80078f4:	43bb      	bics	r3, r7
 80078f6:	d112      	bne.n	800791e <_dtoa_r+0x9e>
 80078f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007904:	4323      	orrs	r3, r4
 8007906:	f000 854d 	beq.w	80083a4 <_dtoa_r+0xb24>
 800790a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800790c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b64 <_dtoa_r+0x2e4>
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 854f 	beq.w	80083b4 <_dtoa_r+0xb34>
 8007916:	f10a 0303 	add.w	r3, sl, #3
 800791a:	f000 bd49 	b.w	80083b0 <_dtoa_r+0xb30>
 800791e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	ec51 0b17 	vmov	r0, r1, d7
 8007928:	2300      	movs	r3, #0
 800792a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800792e:	f7f9 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 8007932:	4680      	mov	r8, r0
 8007934:	b158      	cbz	r0, 800794e <_dtoa_r+0xce>
 8007936:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007938:	2301      	movs	r3, #1
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800793e:	b113      	cbz	r3, 8007946 <_dtoa_r+0xc6>
 8007940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007942:	4b84      	ldr	r3, [pc, #528]	@ (8007b54 <_dtoa_r+0x2d4>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b68 <_dtoa_r+0x2e8>
 800794a:	f000 bd33 	b.w	80083b4 <_dtoa_r+0xb34>
 800794e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007952:	aa16      	add	r2, sp, #88	@ 0x58
 8007954:	a917      	add	r1, sp, #92	@ 0x5c
 8007956:	4658      	mov	r0, fp
 8007958:	f001 f90e 	bl	8008b78 <__d2b>
 800795c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007960:	4681      	mov	r9, r0
 8007962:	2e00      	cmp	r6, #0
 8007964:	d077      	beq.n	8007a56 <_dtoa_r+0x1d6>
 8007966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007968:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800796c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007974:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007978:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800797c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007980:	4619      	mov	r1, r3
 8007982:	2200      	movs	r2, #0
 8007984:	4b74      	ldr	r3, [pc, #464]	@ (8007b58 <_dtoa_r+0x2d8>)
 8007986:	f7f8 fc8f 	bl	80002a8 <__aeabi_dsub>
 800798a:	a369      	add	r3, pc, #420	@ (adr r3, 8007b30 <_dtoa_r+0x2b0>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe42 	bl	8000618 <__aeabi_dmul>
 8007994:	a368      	add	r3, pc, #416	@ (adr r3, 8007b38 <_dtoa_r+0x2b8>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc87 	bl	80002ac <__adddf3>
 800799e:	4604      	mov	r4, r0
 80079a0:	4630      	mov	r0, r6
 80079a2:	460d      	mov	r5, r1
 80079a4:	f7f8 fdce 	bl	8000544 <__aeabi_i2d>
 80079a8:	a365      	add	r3, pc, #404	@ (adr r3, 8007b40 <_dtoa_r+0x2c0>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fe33 	bl	8000618 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f8 fc77 	bl	80002ac <__adddf3>
 80079be:	4604      	mov	r4, r0
 80079c0:	460d      	mov	r5, r1
 80079c2:	f7f9 f8d9 	bl	8000b78 <__aeabi_d2iz>
 80079c6:	2200      	movs	r2, #0
 80079c8:	4607      	mov	r7, r0
 80079ca:	2300      	movs	r3, #0
 80079cc:	4620      	mov	r0, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7f9 f894 	bl	8000afc <__aeabi_dcmplt>
 80079d4:	b140      	cbz	r0, 80079e8 <_dtoa_r+0x168>
 80079d6:	4638      	mov	r0, r7
 80079d8:	f7f8 fdb4 	bl	8000544 <__aeabi_i2d>
 80079dc:	4622      	mov	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	f7f9 f882 	bl	8000ae8 <__aeabi_dcmpeq>
 80079e4:	b900      	cbnz	r0, 80079e8 <_dtoa_r+0x168>
 80079e6:	3f01      	subs	r7, #1
 80079e8:	2f16      	cmp	r7, #22
 80079ea:	d851      	bhi.n	8007a90 <_dtoa_r+0x210>
 80079ec:	4b5b      	ldr	r3, [pc, #364]	@ (8007b5c <_dtoa_r+0x2dc>)
 80079ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079fa:	f7f9 f87f 	bl	8000afc <__aeabi_dcmplt>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d048      	beq.n	8007a94 <_dtoa_r+0x214>
 8007a02:	3f01      	subs	r7, #1
 8007a04:	2300      	movs	r3, #0
 8007a06:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a0a:	1b9b      	subs	r3, r3, r6
 8007a0c:	1e5a      	subs	r2, r3, #1
 8007a0e:	bf44      	itt	mi
 8007a10:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a14:	2300      	movmi	r3, #0
 8007a16:	9208      	str	r2, [sp, #32]
 8007a18:	bf54      	ite	pl
 8007a1a:	f04f 0800 	movpl.w	r8, #0
 8007a1e:	9308      	strmi	r3, [sp, #32]
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	db39      	blt.n	8007a98 <_dtoa_r+0x218>
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a28:	443b      	add	r3, r7
 8007a2a:	9308      	str	r3, [sp, #32]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a32:	2b09      	cmp	r3, #9
 8007a34:	d864      	bhi.n	8007b00 <_dtoa_r+0x280>
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	bfc4      	itt	gt
 8007a3a:	3b04      	subgt	r3, #4
 8007a3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a40:	f1a3 0302 	sub.w	r3, r3, #2
 8007a44:	bfcc      	ite	gt
 8007a46:	2400      	movgt	r4, #0
 8007a48:	2401      	movle	r4, #1
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d863      	bhi.n	8007b16 <_dtoa_r+0x296>
 8007a4e:	e8df f003 	tbb	[pc, r3]
 8007a52:	372a      	.short	0x372a
 8007a54:	5535      	.short	0x5535
 8007a56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a5a:	441e      	add	r6, r3
 8007a5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	bfc1      	itttt	gt
 8007a64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a68:	409f      	lslgt	r7, r3
 8007a6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a72:	bfd6      	itet	le
 8007a74:	f1c3 0320 	rsble	r3, r3, #32
 8007a78:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a7c:	fa04 f003 	lslle.w	r0, r4, r3
 8007a80:	f7f8 fd50 	bl	8000524 <__aeabi_ui2d>
 8007a84:	2201      	movs	r2, #1
 8007a86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a8a:	3e01      	subs	r6, #1
 8007a8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a8e:	e777      	b.n	8007980 <_dtoa_r+0x100>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e7b8      	b.n	8007a06 <_dtoa_r+0x186>
 8007a94:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a96:	e7b7      	b.n	8007a08 <_dtoa_r+0x188>
 8007a98:	427b      	negs	r3, r7
 8007a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	eba8 0807 	sub.w	r8, r8, r7
 8007aa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007aa4:	e7c4      	b.n	8007a30 <_dtoa_r+0x1b0>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc35      	bgt.n	8007b1c <_dtoa_r+0x29c>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	9307      	str	r3, [sp, #28]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aba:	e00b      	b.n	8007ad4 <_dtoa_r+0x254>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e7f3      	b.n	8007aa8 <_dtoa_r+0x228>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	3301      	adds	r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	bfb8      	it	lt
 8007ad2:	2301      	movlt	r3, #1
 8007ad4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ad8:	2100      	movs	r1, #0
 8007ada:	2204      	movs	r2, #4
 8007adc:	f102 0514 	add.w	r5, r2, #20
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	d91f      	bls.n	8007b24 <_dtoa_r+0x2a4>
 8007ae4:	6041      	str	r1, [r0, #4]
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	f000 fd1c 	bl	8008524 <_Balloc>
 8007aec:	4682      	mov	sl, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d13c      	bne.n	8007b6c <_dtoa_r+0x2ec>
 8007af2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b60 <_dtoa_r+0x2e0>)
 8007af4:	4602      	mov	r2, r0
 8007af6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007afa:	e6d8      	b.n	80078ae <_dtoa_r+0x2e>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e7e0      	b.n	8007ac2 <_dtoa_r+0x242>
 8007b00:	2401      	movs	r4, #1
 8007b02:	2300      	movs	r3, #0
 8007b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2312      	movs	r3, #18
 8007b14:	e7d0      	b.n	8007ab8 <_dtoa_r+0x238>
 8007b16:	2301      	movs	r3, #1
 8007b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b1a:	e7f5      	b.n	8007b08 <_dtoa_r+0x288>
 8007b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	e7d7      	b.n	8007ad4 <_dtoa_r+0x254>
 8007b24:	3101      	adds	r1, #1
 8007b26:	0052      	lsls	r2, r2, #1
 8007b28:	e7d8      	b.n	8007adc <_dtoa_r+0x25c>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	636f4361 	.word	0x636f4361
 8007b34:	3fd287a7 	.word	0x3fd287a7
 8007b38:	8b60c8b3 	.word	0x8b60c8b3
 8007b3c:	3fc68a28 	.word	0x3fc68a28
 8007b40:	509f79fb 	.word	0x509f79fb
 8007b44:	3fd34413 	.word	0x3fd34413
 8007b48:	0800a29e 	.word	0x0800a29e
 8007b4c:	0800a407 	.word	0x0800a407
 8007b50:	7ff00000 	.word	0x7ff00000
 8007b54:	0800a6fb 	.word	0x0800a6fb
 8007b58:	3ff80000 	.word	0x3ff80000
 8007b5c:	0800a500 	.word	0x0800a500
 8007b60:	0800a45f 	.word	0x0800a45f
 8007b64:	0800a403 	.word	0x0800a403
 8007b68:	0800a6fa 	.word	0x0800a6fa
 8007b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b70:	6018      	str	r0, [r3, #0]
 8007b72:	9b07      	ldr	r3, [sp, #28]
 8007b74:	2b0e      	cmp	r3, #14
 8007b76:	f200 80a4 	bhi.w	8007cc2 <_dtoa_r+0x442>
 8007b7a:	2c00      	cmp	r4, #0
 8007b7c:	f000 80a1 	beq.w	8007cc2 <_dtoa_r+0x442>
 8007b80:	2f00      	cmp	r7, #0
 8007b82:	dd33      	ble.n	8007bec <_dtoa_r+0x36c>
 8007b84:	4bad      	ldr	r3, [pc, #692]	@ (8007e3c <_dtoa_r+0x5bc>)
 8007b86:	f007 020f 	and.w	r2, r7, #15
 8007b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b8e:	ed93 7b00 	vldr	d7, [r3]
 8007b92:	05f8      	lsls	r0, r7, #23
 8007b94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b9c:	d516      	bpl.n	8007bcc <_dtoa_r+0x34c>
 8007b9e:	4ba8      	ldr	r3, [pc, #672]	@ (8007e40 <_dtoa_r+0x5c0>)
 8007ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba8:	f7f8 fe60 	bl	800086c <__aeabi_ddiv>
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	f004 040f 	and.w	r4, r4, #15
 8007bb4:	2603      	movs	r6, #3
 8007bb6:	4da2      	ldr	r5, [pc, #648]	@ (8007e40 <_dtoa_r+0x5c0>)
 8007bb8:	b954      	cbnz	r4, 8007bd0 <_dtoa_r+0x350>
 8007bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc2:	f7f8 fe53 	bl	800086c <__aeabi_ddiv>
 8007bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bca:	e028      	b.n	8007c1e <_dtoa_r+0x39e>
 8007bcc:	2602      	movs	r6, #2
 8007bce:	e7f2      	b.n	8007bb6 <_dtoa_r+0x336>
 8007bd0:	07e1      	lsls	r1, r4, #31
 8007bd2:	d508      	bpl.n	8007be6 <_dtoa_r+0x366>
 8007bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bdc:	f7f8 fd1c 	bl	8000618 <__aeabi_dmul>
 8007be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be4:	3601      	adds	r6, #1
 8007be6:	1064      	asrs	r4, r4, #1
 8007be8:	3508      	adds	r5, #8
 8007bea:	e7e5      	b.n	8007bb8 <_dtoa_r+0x338>
 8007bec:	f000 80d2 	beq.w	8007d94 <_dtoa_r+0x514>
 8007bf0:	427c      	negs	r4, r7
 8007bf2:	4b92      	ldr	r3, [pc, #584]	@ (8007e3c <_dtoa_r+0x5bc>)
 8007bf4:	4d92      	ldr	r5, [pc, #584]	@ (8007e40 <_dtoa_r+0x5c0>)
 8007bf6:	f004 020f 	and.w	r2, r4, #15
 8007bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c06:	f7f8 fd07 	bl	8000618 <__aeabi_dmul>
 8007c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c0e:	1124      	asrs	r4, r4, #4
 8007c10:	2300      	movs	r3, #0
 8007c12:	2602      	movs	r6, #2
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	f040 80b2 	bne.w	8007d7e <_dtoa_r+0x4fe>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1d3      	bne.n	8007bc6 <_dtoa_r+0x346>
 8007c1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80b7 	beq.w	8007d98 <_dtoa_r+0x518>
 8007c2a:	4b86      	ldr	r3, [pc, #536]	@ (8007e44 <_dtoa_r+0x5c4>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 ff63 	bl	8000afc <__aeabi_dcmplt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f000 80ae 	beq.w	8007d98 <_dtoa_r+0x518>
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80aa 	beq.w	8007d98 <_dtoa_r+0x518>
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd37      	ble.n	8007cba <_dtoa_r+0x43a>
 8007c4a:	1e7b      	subs	r3, r7, #1
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4b7d      	ldr	r3, [pc, #500]	@ (8007e48 <_dtoa_r+0x5c8>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 fcdf 	bl	8000618 <__aeabi_dmul>
 8007c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c5e:	9c00      	ldr	r4, [sp, #0]
 8007c60:	3601      	adds	r6, #1
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7f8 fc6e 	bl	8000544 <__aeabi_i2d>
 8007c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c6c:	f7f8 fcd4 	bl	8000618 <__aeabi_dmul>
 8007c70:	4b76      	ldr	r3, [pc, #472]	@ (8007e4c <_dtoa_r+0x5cc>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fb1a 	bl	80002ac <__adddf3>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	f040 808d 	bne.w	8007d9e <_dtoa_r+0x51e>
 8007c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c88:	4b71      	ldr	r3, [pc, #452]	@ (8007e50 <_dtoa_r+0x5d0>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fb0c 	bl	80002a8 <__aeabi_dsub>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4633      	mov	r3, r6
 8007c9c:	f7f8 ff4c 	bl	8000b38 <__aeabi_dcmpgt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f040 828b 	bne.w	80081bc <_dtoa_r+0x93c>
 8007ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007caa:	462a      	mov	r2, r5
 8007cac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007cb0:	f7f8 ff24 	bl	8000afc <__aeabi_dcmplt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f040 8128 	bne.w	8007f0a <_dtoa_r+0x68a>
 8007cba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f2c0 815a 	blt.w	8007f7e <_dtoa_r+0x6fe>
 8007cca:	2f0e      	cmp	r7, #14
 8007ccc:	f300 8157 	bgt.w	8007f7e <_dtoa_r+0x6fe>
 8007cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e3c <_dtoa_r+0x5bc>)
 8007cd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cd6:	ed93 7b00 	vldr	d7, [r3]
 8007cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	ed8d 7b00 	vstr	d7, [sp]
 8007ce2:	da03      	bge.n	8007cec <_dtoa_r+0x46c>
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f340 8101 	ble.w	8007eee <_dtoa_r+0x66e>
 8007cec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cf0:	4656      	mov	r6, sl
 8007cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 fdb7 	bl	800086c <__aeabi_ddiv>
 8007cfe:	f7f8 ff3b 	bl	8000b78 <__aeabi_d2iz>
 8007d02:	4680      	mov	r8, r0
 8007d04:	f7f8 fc1e 	bl	8000544 <__aeabi_i2d>
 8007d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d0c:	f7f8 fc84 	bl	8000618 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d1c:	f7f8 fac4 	bl	80002a8 <__aeabi_dsub>
 8007d20:	f806 4b01 	strb.w	r4, [r6], #1
 8007d24:	9d07      	ldr	r5, [sp, #28]
 8007d26:	eba6 040a 	sub.w	r4, r6, sl
 8007d2a:	42a5      	cmp	r5, r4
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	f040 8117 	bne.w	8007f62 <_dtoa_r+0x6e2>
 8007d34:	f7f8 faba 	bl	80002ac <__adddf3>
 8007d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	460d      	mov	r5, r1
 8007d40:	f7f8 fefa 	bl	8000b38 <__aeabi_dcmpgt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 80f9 	bne.w	8007f3c <_dtoa_r+0x6bc>
 8007d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 fec9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d56:	b118      	cbz	r0, 8007d60 <_dtoa_r+0x4e0>
 8007d58:	f018 0f01 	tst.w	r8, #1
 8007d5c:	f040 80ee 	bne.w	8007f3c <_dtoa_r+0x6bc>
 8007d60:	4649      	mov	r1, r9
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 fc1e 	bl	80085a4 <_Bfree>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	7033      	strb	r3, [r6, #0]
 8007d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d6e:	3701      	adds	r7, #1
 8007d70:	601f      	str	r7, [r3, #0]
 8007d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 831d 	beq.w	80083b4 <_dtoa_r+0xb34>
 8007d7a:	601e      	str	r6, [r3, #0]
 8007d7c:	e31a      	b.n	80083b4 <_dtoa_r+0xb34>
 8007d7e:	07e2      	lsls	r2, r4, #31
 8007d80:	d505      	bpl.n	8007d8e <_dtoa_r+0x50e>
 8007d82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d86:	f7f8 fc47 	bl	8000618 <__aeabi_dmul>
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	1064      	asrs	r4, r4, #1
 8007d90:	3508      	adds	r5, #8
 8007d92:	e73f      	b.n	8007c14 <_dtoa_r+0x394>
 8007d94:	2602      	movs	r6, #2
 8007d96:	e742      	b.n	8007c1e <_dtoa_r+0x39e>
 8007d98:	9c07      	ldr	r4, [sp, #28]
 8007d9a:	9704      	str	r7, [sp, #16]
 8007d9c:	e761      	b.n	8007c62 <_dtoa_r+0x3e2>
 8007d9e:	4b27      	ldr	r3, [pc, #156]	@ (8007e3c <_dtoa_r+0x5bc>)
 8007da0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007da2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007da6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007daa:	4454      	add	r4, sl
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d053      	beq.n	8007e58 <_dtoa_r+0x5d8>
 8007db0:	4928      	ldr	r1, [pc, #160]	@ (8007e54 <_dtoa_r+0x5d4>)
 8007db2:	2000      	movs	r0, #0
 8007db4:	f7f8 fd5a 	bl	800086c <__aeabi_ddiv>
 8007db8:	4633      	mov	r3, r6
 8007dba:	462a      	mov	r2, r5
 8007dbc:	f7f8 fa74 	bl	80002a8 <__aeabi_dsub>
 8007dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dc4:	4656      	mov	r6, sl
 8007dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dca:	f7f8 fed5 	bl	8000b78 <__aeabi_d2iz>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	f7f8 fbb8 	bl	8000544 <__aeabi_i2d>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ddc:	f7f8 fa64 	bl	80002a8 <__aeabi_dsub>
 8007de0:	3530      	adds	r5, #48	@ 0x30
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dea:	f806 5b01 	strb.w	r5, [r6], #1
 8007dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007df2:	f7f8 fe83 	bl	8000afc <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d171      	bne.n	8007ede <_dtoa_r+0x65e>
 8007dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfe:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <_dtoa_r+0x5c4>)
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7f8 fa51 	bl	80002a8 <__aeabi_dsub>
 8007e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e0a:	f7f8 fe77 	bl	8000afc <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f040 8095 	bne.w	8007f3e <_dtoa_r+0x6be>
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	f43f af50 	beq.w	8007cba <_dtoa_r+0x43a>
 8007e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <_dtoa_r+0x5c8>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	f7f8 fbf9 	bl	8000618 <__aeabi_dmul>
 8007e26:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <_dtoa_r+0x5c8>)
 8007e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e32:	f7f8 fbf1 	bl	8000618 <__aeabi_dmul>
 8007e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3a:	e7c4      	b.n	8007dc6 <_dtoa_r+0x546>
 8007e3c:	0800a500 	.word	0x0800a500
 8007e40:	0800a4d8 	.word	0x0800a4d8
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	401c0000 	.word	0x401c0000
 8007e50:	40140000 	.word	0x40140000
 8007e54:	3fe00000 	.word	0x3fe00000
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f7f8 fbdc 	bl	8000618 <__aeabi_dmul>
 8007e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e64:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e66:	4656      	mov	r6, sl
 8007e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6c:	f7f8 fe84 	bl	8000b78 <__aeabi_d2iz>
 8007e70:	4605      	mov	r5, r0
 8007e72:	f7f8 fb67 	bl	8000544 <__aeabi_i2d>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e7e:	f7f8 fa13 	bl	80002a8 <__aeabi_dsub>
 8007e82:	3530      	adds	r5, #48	@ 0x30
 8007e84:	f806 5b01 	strb.w	r5, [r6], #1
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	d124      	bne.n	8007ee2 <_dtoa_r+0x662>
 8007e98:	4bac      	ldr	r3, [pc, #688]	@ (800814c <_dtoa_r+0x8cc>)
 8007e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e9e:	f7f8 fa05 	bl	80002ac <__adddf3>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	f7f8 fe45 	bl	8000b38 <__aeabi_dcmpgt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d145      	bne.n	8007f3e <_dtoa_r+0x6be>
 8007eb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eb6:	49a5      	ldr	r1, [pc, #660]	@ (800814c <_dtoa_r+0x8cc>)
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f7f8 f9f5 	bl	80002a8 <__aeabi_dsub>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec6:	f7f8 fe19 	bl	8000afc <__aeabi_dcmplt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f43f aef5 	beq.w	8007cba <_dtoa_r+0x43a>
 8007ed0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007ed2:	1e73      	subs	r3, r6, #1
 8007ed4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ed6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007eda:	2b30      	cmp	r3, #48	@ 0x30
 8007edc:	d0f8      	beq.n	8007ed0 <_dtoa_r+0x650>
 8007ede:	9f04      	ldr	r7, [sp, #16]
 8007ee0:	e73e      	b.n	8007d60 <_dtoa_r+0x4e0>
 8007ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8008150 <_dtoa_r+0x8d0>)
 8007ee4:	f7f8 fb98 	bl	8000618 <__aeabi_dmul>
 8007ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eec:	e7bc      	b.n	8007e68 <_dtoa_r+0x5e8>
 8007eee:	d10c      	bne.n	8007f0a <_dtoa_r+0x68a>
 8007ef0:	4b98      	ldr	r3, [pc, #608]	@ (8008154 <_dtoa_r+0x8d4>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef8:	f7f8 fb8e 	bl	8000618 <__aeabi_dmul>
 8007efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f00:	f7f8 fe10 	bl	8000b24 <__aeabi_dcmpge>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f000 8157 	beq.w	80081b8 <_dtoa_r+0x938>
 8007f0a:	2400      	movs	r4, #0
 8007f0c:	4625      	mov	r5, r4
 8007f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f10:	43db      	mvns	r3, r3
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	4656      	mov	r6, sl
 8007f16:	2700      	movs	r7, #0
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fb42 	bl	80085a4 <_Bfree>
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	d0dc      	beq.n	8007ede <_dtoa_r+0x65e>
 8007f24:	b12f      	cbz	r7, 8007f32 <_dtoa_r+0x6b2>
 8007f26:	42af      	cmp	r7, r5
 8007f28:	d003      	beq.n	8007f32 <_dtoa_r+0x6b2>
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 fb39 	bl	80085a4 <_Bfree>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4658      	mov	r0, fp
 8007f36:	f000 fb35 	bl	80085a4 <_Bfree>
 8007f3a:	e7d0      	b.n	8007ede <_dtoa_r+0x65e>
 8007f3c:	9704      	str	r7, [sp, #16]
 8007f3e:	4633      	mov	r3, r6
 8007f40:	461e      	mov	r6, r3
 8007f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f46:	2a39      	cmp	r2, #57	@ 0x39
 8007f48:	d107      	bne.n	8007f5a <_dtoa_r+0x6da>
 8007f4a:	459a      	cmp	sl, r3
 8007f4c:	d1f8      	bne.n	8007f40 <_dtoa_r+0x6c0>
 8007f4e:	9a04      	ldr	r2, [sp, #16]
 8007f50:	3201      	adds	r2, #1
 8007f52:	9204      	str	r2, [sp, #16]
 8007f54:	2230      	movs	r2, #48	@ 0x30
 8007f56:	f88a 2000 	strb.w	r2, [sl]
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	e7bd      	b.n	8007ede <_dtoa_r+0x65e>
 8007f62:	4b7b      	ldr	r3, [pc, #492]	@ (8008150 <_dtoa_r+0x8d0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	f7f8 fb57 	bl	8000618 <__aeabi_dmul>
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
 8007f72:	f7f8 fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f43f aebb 	beq.w	8007cf2 <_dtoa_r+0x472>
 8007f7c:	e6f0      	b.n	8007d60 <_dtoa_r+0x4e0>
 8007f7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	f000 80db 	beq.w	800813c <_dtoa_r+0x8bc>
 8007f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f88:	2a01      	cmp	r2, #1
 8007f8a:	f300 80bf 	bgt.w	800810c <_dtoa_r+0x88c>
 8007f8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	f000 80b7 	beq.w	8008104 <_dtoa_r+0x884>
 8007f96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f9c:	4646      	mov	r6, r8
 8007f9e:	9a08      	ldr	r2, [sp, #32]
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	441a      	add	r2, r3
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	4498      	add	r8, r3
 8007fa8:	9208      	str	r2, [sp, #32]
 8007faa:	f000 fbaf 	bl	800870c <__i2b>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b15e      	cbz	r6, 8007fca <_dtoa_r+0x74a>
 8007fb2:	9b08      	ldr	r3, [sp, #32]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dd08      	ble.n	8007fca <_dtoa_r+0x74a>
 8007fb8:	42b3      	cmp	r3, r6
 8007fba:	9a08      	ldr	r2, [sp, #32]
 8007fbc:	bfa8      	it	ge
 8007fbe:	4633      	movge	r3, r6
 8007fc0:	eba8 0803 	sub.w	r8, r8, r3
 8007fc4:	1af6      	subs	r6, r6, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fcc:	b1f3      	cbz	r3, 800800c <_dtoa_r+0x78c>
 8007fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80b7 	beq.w	8008144 <_dtoa_r+0x8c4>
 8007fd6:	b18c      	cbz	r4, 8007ffc <_dtoa_r+0x77c>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4622      	mov	r2, r4
 8007fdc:	4658      	mov	r0, fp
 8007fde:	f000 fc55 	bl	800888c <__pow5mult>
 8007fe2:	464a      	mov	r2, r9
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	4658      	mov	r0, fp
 8007fea:	f000 fba5 	bl	8008738 <__multiply>
 8007fee:	4649      	mov	r1, r9
 8007ff0:	9004      	str	r0, [sp, #16]
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 fad6 	bl	80085a4 <_Bfree>
 8007ff8:	9b04      	ldr	r3, [sp, #16]
 8007ffa:	4699      	mov	r9, r3
 8007ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ffe:	1b1a      	subs	r2, r3, r4
 8008000:	d004      	beq.n	800800c <_dtoa_r+0x78c>
 8008002:	4649      	mov	r1, r9
 8008004:	4658      	mov	r0, fp
 8008006:	f000 fc41 	bl	800888c <__pow5mult>
 800800a:	4681      	mov	r9, r0
 800800c:	2101      	movs	r1, #1
 800800e:	4658      	mov	r0, fp
 8008010:	f000 fb7c 	bl	800870c <__i2b>
 8008014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008016:	4604      	mov	r4, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 81cf 	beq.w	80083bc <_dtoa_r+0xb3c>
 800801e:	461a      	mov	r2, r3
 8008020:	4601      	mov	r1, r0
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fc32 	bl	800888c <__pow5mult>
 8008028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802a:	2b01      	cmp	r3, #1
 800802c:	4604      	mov	r4, r0
 800802e:	f300 8095 	bgt.w	800815c <_dtoa_r+0x8dc>
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 8087 	bne.w	8008148 <_dtoa_r+0x8c8>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008040:	2b00      	cmp	r3, #0
 8008042:	f040 8089 	bne.w	8008158 <_dtoa_r+0x8d8>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800804c:	0d1b      	lsrs	r3, r3, #20
 800804e:	051b      	lsls	r3, r3, #20
 8008050:	b12b      	cbz	r3, 800805e <_dtoa_r+0x7de>
 8008052:	9b08      	ldr	r3, [sp, #32]
 8008054:	3301      	adds	r3, #1
 8008056:	9308      	str	r3, [sp, #32]
 8008058:	f108 0801 	add.w	r8, r8, #1
 800805c:	2301      	movs	r3, #1
 800805e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 81b0 	beq.w	80083c8 <_dtoa_r+0xb48>
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800806e:	6918      	ldr	r0, [r3, #16]
 8008070:	f000 fb00 	bl	8008674 <__hi0bits>
 8008074:	f1c0 0020 	rsb	r0, r0, #32
 8008078:	9b08      	ldr	r3, [sp, #32]
 800807a:	4418      	add	r0, r3
 800807c:	f010 001f 	ands.w	r0, r0, #31
 8008080:	d077      	beq.n	8008172 <_dtoa_r+0x8f2>
 8008082:	f1c0 0320 	rsb	r3, r0, #32
 8008086:	2b04      	cmp	r3, #4
 8008088:	dd6b      	ble.n	8008162 <_dtoa_r+0x8e2>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	f1c0 001c 	rsb	r0, r0, #28
 8008090:	4403      	add	r3, r0
 8008092:	4480      	add	r8, r0
 8008094:	4406      	add	r6, r0
 8008096:	9308      	str	r3, [sp, #32]
 8008098:	f1b8 0f00 	cmp.w	r8, #0
 800809c:	dd05      	ble.n	80080aa <_dtoa_r+0x82a>
 800809e:	4649      	mov	r1, r9
 80080a0:	4642      	mov	r2, r8
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fc4c 	bl	8008940 <__lshift>
 80080a8:	4681      	mov	r9, r0
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dd05      	ble.n	80080bc <_dtoa_r+0x83c>
 80080b0:	4621      	mov	r1, r4
 80080b2:	461a      	mov	r2, r3
 80080b4:	4658      	mov	r0, fp
 80080b6:	f000 fc43 	bl	8008940 <__lshift>
 80080ba:	4604      	mov	r4, r0
 80080bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d059      	beq.n	8008176 <_dtoa_r+0x8f6>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4648      	mov	r0, r9
 80080c6:	f000 fca7 	bl	8008a18 <__mcmp>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	da53      	bge.n	8008176 <_dtoa_r+0x8f6>
 80080ce:	1e7b      	subs	r3, r7, #1
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	4649      	mov	r1, r9
 80080d4:	2300      	movs	r3, #0
 80080d6:	220a      	movs	r2, #10
 80080d8:	4658      	mov	r0, fp
 80080da:	f000 fa85 	bl	80085e8 <__multadd>
 80080de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e0:	4681      	mov	r9, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8172 	beq.w	80083cc <_dtoa_r+0xb4c>
 80080e8:	2300      	movs	r3, #0
 80080ea:	4629      	mov	r1, r5
 80080ec:	220a      	movs	r2, #10
 80080ee:	4658      	mov	r0, fp
 80080f0:	f000 fa7a 	bl	80085e8 <__multadd>
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	4605      	mov	r5, r0
 80080fa:	dc67      	bgt.n	80081cc <_dtoa_r+0x94c>
 80080fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fe:	2b02      	cmp	r3, #2
 8008100:	dc41      	bgt.n	8008186 <_dtoa_r+0x906>
 8008102:	e063      	b.n	80081cc <_dtoa_r+0x94c>
 8008104:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008106:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800810a:	e746      	b.n	8007f9a <_dtoa_r+0x71a>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	1e5c      	subs	r4, r3, #1
 8008110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008112:	42a3      	cmp	r3, r4
 8008114:	bfbf      	itttt	lt
 8008116:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008118:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800811a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800811c:	1ae3      	sublt	r3, r4, r3
 800811e:	bfb4      	ite	lt
 8008120:	18d2      	addlt	r2, r2, r3
 8008122:	1b1c      	subge	r4, r3, r4
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	bfbc      	itt	lt
 8008128:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800812a:	2400      	movlt	r4, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfb5      	itete	lt
 8008130:	eba8 0603 	sublt.w	r6, r8, r3
 8008134:	9b07      	ldrge	r3, [sp, #28]
 8008136:	2300      	movlt	r3, #0
 8008138:	4646      	movge	r6, r8
 800813a:	e730      	b.n	8007f9e <_dtoa_r+0x71e>
 800813c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800813e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008140:	4646      	mov	r6, r8
 8008142:	e735      	b.n	8007fb0 <_dtoa_r+0x730>
 8008144:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008146:	e75c      	b.n	8008002 <_dtoa_r+0x782>
 8008148:	2300      	movs	r3, #0
 800814a:	e788      	b.n	800805e <_dtoa_r+0x7de>
 800814c:	3fe00000 	.word	0x3fe00000
 8008150:	40240000 	.word	0x40240000
 8008154:	40140000 	.word	0x40140000
 8008158:	9b02      	ldr	r3, [sp, #8]
 800815a:	e780      	b.n	800805e <_dtoa_r+0x7de>
 800815c:	2300      	movs	r3, #0
 800815e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008160:	e782      	b.n	8008068 <_dtoa_r+0x7e8>
 8008162:	d099      	beq.n	8008098 <_dtoa_r+0x818>
 8008164:	9a08      	ldr	r2, [sp, #32]
 8008166:	331c      	adds	r3, #28
 8008168:	441a      	add	r2, r3
 800816a:	4498      	add	r8, r3
 800816c:	441e      	add	r6, r3
 800816e:	9208      	str	r2, [sp, #32]
 8008170:	e792      	b.n	8008098 <_dtoa_r+0x818>
 8008172:	4603      	mov	r3, r0
 8008174:	e7f6      	b.n	8008164 <_dtoa_r+0x8e4>
 8008176:	9b07      	ldr	r3, [sp, #28]
 8008178:	9704      	str	r7, [sp, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc20      	bgt.n	80081c0 <_dtoa_r+0x940>
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008182:	2b02      	cmp	r3, #2
 8008184:	dd1e      	ble.n	80081c4 <_dtoa_r+0x944>
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f47f aec0 	bne.w	8007f0e <_dtoa_r+0x68e>
 800818e:	4621      	mov	r1, r4
 8008190:	2205      	movs	r2, #5
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fa28 	bl	80085e8 <__multadd>
 8008198:	4601      	mov	r1, r0
 800819a:	4604      	mov	r4, r0
 800819c:	4648      	mov	r0, r9
 800819e:	f000 fc3b 	bl	8008a18 <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f77f aeb3 	ble.w	8007f0e <_dtoa_r+0x68e>
 80081a8:	4656      	mov	r6, sl
 80081aa:	2331      	movs	r3, #49	@ 0x31
 80081ac:	f806 3b01 	strb.w	r3, [r6], #1
 80081b0:	9b04      	ldr	r3, [sp, #16]
 80081b2:	3301      	adds	r3, #1
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	e6ae      	b.n	8007f16 <_dtoa_r+0x696>
 80081b8:	9c07      	ldr	r4, [sp, #28]
 80081ba:	9704      	str	r7, [sp, #16]
 80081bc:	4625      	mov	r5, r4
 80081be:	e7f3      	b.n	80081a8 <_dtoa_r+0x928>
 80081c0:	9b07      	ldr	r3, [sp, #28]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8104 	beq.w	80083d4 <_dtoa_r+0xb54>
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	dd05      	ble.n	80081dc <_dtoa_r+0x95c>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4632      	mov	r2, r6
 80081d4:	4658      	mov	r0, fp
 80081d6:	f000 fbb3 	bl	8008940 <__lshift>
 80081da:	4605      	mov	r5, r0
 80081dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d05a      	beq.n	8008298 <_dtoa_r+0xa18>
 80081e2:	6869      	ldr	r1, [r5, #4]
 80081e4:	4658      	mov	r0, fp
 80081e6:	f000 f99d 	bl	8008524 <_Balloc>
 80081ea:	4606      	mov	r6, r0
 80081ec:	b928      	cbnz	r0, 80081fa <_dtoa_r+0x97a>
 80081ee:	4b84      	ldr	r3, [pc, #528]	@ (8008400 <_dtoa_r+0xb80>)
 80081f0:	4602      	mov	r2, r0
 80081f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081f6:	f7ff bb5a 	b.w	80078ae <_dtoa_r+0x2e>
 80081fa:	692a      	ldr	r2, [r5, #16]
 80081fc:	3202      	adds	r2, #2
 80081fe:	0092      	lsls	r2, r2, #2
 8008200:	f105 010c 	add.w	r1, r5, #12
 8008204:	300c      	adds	r0, #12
 8008206:	f7ff fa86 	bl	8007716 <memcpy>
 800820a:	2201      	movs	r2, #1
 800820c:	4631      	mov	r1, r6
 800820e:	4658      	mov	r0, fp
 8008210:	f000 fb96 	bl	8008940 <__lshift>
 8008214:	f10a 0301 	add.w	r3, sl, #1
 8008218:	9307      	str	r3, [sp, #28]
 800821a:	9b00      	ldr	r3, [sp, #0]
 800821c:	4453      	add	r3, sl
 800821e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008220:	9b02      	ldr	r3, [sp, #8]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	462f      	mov	r7, r5
 8008228:	930a      	str	r3, [sp, #40]	@ 0x28
 800822a:	4605      	mov	r5, r0
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	4621      	mov	r1, r4
 8008230:	3b01      	subs	r3, #1
 8008232:	4648      	mov	r0, r9
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	f7ff fa9b 	bl	8007770 <quorem>
 800823a:	4639      	mov	r1, r7
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008242:	4648      	mov	r0, r9
 8008244:	f000 fbe8 	bl	8008a18 <__mcmp>
 8008248:	462a      	mov	r2, r5
 800824a:	9008      	str	r0, [sp, #32]
 800824c:	4621      	mov	r1, r4
 800824e:	4658      	mov	r0, fp
 8008250:	f000 fbfe 	bl	8008a50 <__mdiff>
 8008254:	68c2      	ldr	r2, [r0, #12]
 8008256:	4606      	mov	r6, r0
 8008258:	bb02      	cbnz	r2, 800829c <_dtoa_r+0xa1c>
 800825a:	4601      	mov	r1, r0
 800825c:	4648      	mov	r0, r9
 800825e:	f000 fbdb 	bl	8008a18 <__mcmp>
 8008262:	4602      	mov	r2, r0
 8008264:	4631      	mov	r1, r6
 8008266:	4658      	mov	r0, fp
 8008268:	920e      	str	r2, [sp, #56]	@ 0x38
 800826a:	f000 f99b 	bl	80085a4 <_Bfree>
 800826e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008272:	9e07      	ldr	r6, [sp, #28]
 8008274:	ea43 0102 	orr.w	r1, r3, r2
 8008278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800827a:	4319      	orrs	r1, r3
 800827c:	d110      	bne.n	80082a0 <_dtoa_r+0xa20>
 800827e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008282:	d029      	beq.n	80082d8 <_dtoa_r+0xa58>
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	2b00      	cmp	r3, #0
 8008288:	dd02      	ble.n	8008290 <_dtoa_r+0xa10>
 800828a:	9b02      	ldr	r3, [sp, #8]
 800828c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008290:	9b00      	ldr	r3, [sp, #0]
 8008292:	f883 8000 	strb.w	r8, [r3]
 8008296:	e63f      	b.n	8007f18 <_dtoa_r+0x698>
 8008298:	4628      	mov	r0, r5
 800829a:	e7bb      	b.n	8008214 <_dtoa_r+0x994>
 800829c:	2201      	movs	r2, #1
 800829e:	e7e1      	b.n	8008264 <_dtoa_r+0x9e4>
 80082a0:	9b08      	ldr	r3, [sp, #32]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	db04      	blt.n	80082b0 <_dtoa_r+0xa30>
 80082a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a8:	430b      	orrs	r3, r1
 80082aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082ac:	430b      	orrs	r3, r1
 80082ae:	d120      	bne.n	80082f2 <_dtoa_r+0xa72>
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	dded      	ble.n	8008290 <_dtoa_r+0xa10>
 80082b4:	4649      	mov	r1, r9
 80082b6:	2201      	movs	r2, #1
 80082b8:	4658      	mov	r0, fp
 80082ba:	f000 fb41 	bl	8008940 <__lshift>
 80082be:	4621      	mov	r1, r4
 80082c0:	4681      	mov	r9, r0
 80082c2:	f000 fba9 	bl	8008a18 <__mcmp>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	dc03      	bgt.n	80082d2 <_dtoa_r+0xa52>
 80082ca:	d1e1      	bne.n	8008290 <_dtoa_r+0xa10>
 80082cc:	f018 0f01 	tst.w	r8, #1
 80082d0:	d0de      	beq.n	8008290 <_dtoa_r+0xa10>
 80082d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082d6:	d1d8      	bne.n	800828a <_dtoa_r+0xa0a>
 80082d8:	9a00      	ldr	r2, [sp, #0]
 80082da:	2339      	movs	r3, #57	@ 0x39
 80082dc:	7013      	strb	r3, [r2, #0]
 80082de:	4633      	mov	r3, r6
 80082e0:	461e      	mov	r6, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082e8:	2a39      	cmp	r2, #57	@ 0x39
 80082ea:	d052      	beq.n	8008392 <_dtoa_r+0xb12>
 80082ec:	3201      	adds	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e612      	b.n	8007f18 <_dtoa_r+0x698>
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	dd07      	ble.n	8008306 <_dtoa_r+0xa86>
 80082f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082fa:	d0ed      	beq.n	80082d8 <_dtoa_r+0xa58>
 80082fc:	9a00      	ldr	r2, [sp, #0]
 80082fe:	f108 0301 	add.w	r3, r8, #1
 8008302:	7013      	strb	r3, [r2, #0]
 8008304:	e608      	b.n	8007f18 <_dtoa_r+0x698>
 8008306:	9b07      	ldr	r3, [sp, #28]
 8008308:	9a07      	ldr	r2, [sp, #28]
 800830a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800830e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008310:	4293      	cmp	r3, r2
 8008312:	d028      	beq.n	8008366 <_dtoa_r+0xae6>
 8008314:	4649      	mov	r1, r9
 8008316:	2300      	movs	r3, #0
 8008318:	220a      	movs	r2, #10
 800831a:	4658      	mov	r0, fp
 800831c:	f000 f964 	bl	80085e8 <__multadd>
 8008320:	42af      	cmp	r7, r5
 8008322:	4681      	mov	r9, r0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	f04f 020a 	mov.w	r2, #10
 800832c:	4639      	mov	r1, r7
 800832e:	4658      	mov	r0, fp
 8008330:	d107      	bne.n	8008342 <_dtoa_r+0xac2>
 8008332:	f000 f959 	bl	80085e8 <__multadd>
 8008336:	4607      	mov	r7, r0
 8008338:	4605      	mov	r5, r0
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	3301      	adds	r3, #1
 800833e:	9307      	str	r3, [sp, #28]
 8008340:	e774      	b.n	800822c <_dtoa_r+0x9ac>
 8008342:	f000 f951 	bl	80085e8 <__multadd>
 8008346:	4629      	mov	r1, r5
 8008348:	4607      	mov	r7, r0
 800834a:	2300      	movs	r3, #0
 800834c:	220a      	movs	r2, #10
 800834e:	4658      	mov	r0, fp
 8008350:	f000 f94a 	bl	80085e8 <__multadd>
 8008354:	4605      	mov	r5, r0
 8008356:	e7f0      	b.n	800833a <_dtoa_r+0xaba>
 8008358:	9b00      	ldr	r3, [sp, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfcc      	ite	gt
 800835e:	461e      	movgt	r6, r3
 8008360:	2601      	movle	r6, #1
 8008362:	4456      	add	r6, sl
 8008364:	2700      	movs	r7, #0
 8008366:	4649      	mov	r1, r9
 8008368:	2201      	movs	r2, #1
 800836a:	4658      	mov	r0, fp
 800836c:	f000 fae8 	bl	8008940 <__lshift>
 8008370:	4621      	mov	r1, r4
 8008372:	4681      	mov	r9, r0
 8008374:	f000 fb50 	bl	8008a18 <__mcmp>
 8008378:	2800      	cmp	r0, #0
 800837a:	dcb0      	bgt.n	80082de <_dtoa_r+0xa5e>
 800837c:	d102      	bne.n	8008384 <_dtoa_r+0xb04>
 800837e:	f018 0f01 	tst.w	r8, #1
 8008382:	d1ac      	bne.n	80082de <_dtoa_r+0xa5e>
 8008384:	4633      	mov	r3, r6
 8008386:	461e      	mov	r6, r3
 8008388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800838c:	2a30      	cmp	r2, #48	@ 0x30
 800838e:	d0fa      	beq.n	8008386 <_dtoa_r+0xb06>
 8008390:	e5c2      	b.n	8007f18 <_dtoa_r+0x698>
 8008392:	459a      	cmp	sl, r3
 8008394:	d1a4      	bne.n	80082e0 <_dtoa_r+0xa60>
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	2331      	movs	r3, #49	@ 0x31
 800839e:	f88a 3000 	strb.w	r3, [sl]
 80083a2:	e5b9      	b.n	8007f18 <_dtoa_r+0x698>
 80083a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008404 <_dtoa_r+0xb84>
 80083aa:	b11b      	cbz	r3, 80083b4 <_dtoa_r+0xb34>
 80083ac:	f10a 0308 	add.w	r3, sl, #8
 80083b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	4650      	mov	r0, sl
 80083b6:	b019      	add	sp, #100	@ 0x64
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083be:	2b01      	cmp	r3, #1
 80083c0:	f77f ae37 	ble.w	8008032 <_dtoa_r+0x7b2>
 80083c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c8:	2001      	movs	r0, #1
 80083ca:	e655      	b.n	8008078 <_dtoa_r+0x7f8>
 80083cc:	9b00      	ldr	r3, [sp, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f77f aed6 	ble.w	8008180 <_dtoa_r+0x900>
 80083d4:	4656      	mov	r6, sl
 80083d6:	4621      	mov	r1, r4
 80083d8:	4648      	mov	r0, r9
 80083da:	f7ff f9c9 	bl	8007770 <quorem>
 80083de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083e2:	f806 8b01 	strb.w	r8, [r6], #1
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	eba6 020a 	sub.w	r2, r6, sl
 80083ec:	4293      	cmp	r3, r2
 80083ee:	ddb3      	ble.n	8008358 <_dtoa_r+0xad8>
 80083f0:	4649      	mov	r1, r9
 80083f2:	2300      	movs	r3, #0
 80083f4:	220a      	movs	r2, #10
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 f8f6 	bl	80085e8 <__multadd>
 80083fc:	4681      	mov	r9, r0
 80083fe:	e7ea      	b.n	80083d6 <_dtoa_r+0xb56>
 8008400:	0800a45f 	.word	0x0800a45f
 8008404:	0800a3fa 	.word	0x0800a3fa

08008408 <_free_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	2900      	cmp	r1, #0
 800840e:	d041      	beq.n	8008494 <_free_r+0x8c>
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	1f0c      	subs	r4, r1, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	18e4      	addlt	r4, r4, r3
 800841c:	f7fd ff18 	bl	8006250 <__malloc_lock>
 8008420:	4a1d      	ldr	r2, [pc, #116]	@ (8008498 <_free_r+0x90>)
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	b933      	cbnz	r3, 8008434 <_free_r+0x2c>
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	6014      	str	r4, [r2, #0]
 800842a:	4628      	mov	r0, r5
 800842c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008430:	f7fd bf14 	b.w	800625c <__malloc_unlock>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d908      	bls.n	800844a <_free_r+0x42>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	1821      	adds	r1, r4, r0
 800843c:	428b      	cmp	r3, r1
 800843e:	bf01      	itttt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	1809      	addeq	r1, r1, r0
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	e7ed      	b.n	8008426 <_free_r+0x1e>
 800844a:	461a      	mov	r2, r3
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	b10b      	cbz	r3, 8008454 <_free_r+0x4c>
 8008450:	42a3      	cmp	r3, r4
 8008452:	d9fa      	bls.n	800844a <_free_r+0x42>
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	1850      	adds	r0, r2, r1
 8008458:	42a0      	cmp	r0, r4
 800845a:	d10b      	bne.n	8008474 <_free_r+0x6c>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4401      	add	r1, r0
 8008460:	1850      	adds	r0, r2, r1
 8008462:	4283      	cmp	r3, r0
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	d1e0      	bne.n	800842a <_free_r+0x22>
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	6053      	str	r3, [r2, #4]
 800846e:	4408      	add	r0, r1
 8008470:	6010      	str	r0, [r2, #0]
 8008472:	e7da      	b.n	800842a <_free_r+0x22>
 8008474:	d902      	bls.n	800847c <_free_r+0x74>
 8008476:	230c      	movs	r3, #12
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	e7d6      	b.n	800842a <_free_r+0x22>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	1821      	adds	r1, r4, r0
 8008480:	428b      	cmp	r3, r1
 8008482:	bf04      	itt	eq
 8008484:	6819      	ldreq	r1, [r3, #0]
 8008486:	685b      	ldreq	r3, [r3, #4]
 8008488:	6063      	str	r3, [r4, #4]
 800848a:	bf04      	itt	eq
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	6054      	str	r4, [r2, #4]
 8008492:	e7ca      	b.n	800842a <_free_r+0x22>
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	bf00      	nop
 8008498:	200006bc 	.word	0x200006bc

0800849c <_findenv_r>:
 800849c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8008510 <_findenv_r+0x74>
 80084a4:	4606      	mov	r6, r0
 80084a6:	4689      	mov	r9, r1
 80084a8:	4617      	mov	r7, r2
 80084aa:	f001 f93f 	bl	800972c <__env_lock>
 80084ae:	f8da 4000 	ldr.w	r4, [sl]
 80084b2:	b134      	cbz	r4, 80084c2 <_findenv_r+0x26>
 80084b4:	464b      	mov	r3, r9
 80084b6:	4698      	mov	r8, r3
 80084b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084bc:	b13a      	cbz	r2, 80084ce <_findenv_r+0x32>
 80084be:	2a3d      	cmp	r2, #61	@ 0x3d
 80084c0:	d1f9      	bne.n	80084b6 <_findenv_r+0x1a>
 80084c2:	4630      	mov	r0, r6
 80084c4:	f001 f938 	bl	8009738 <__env_unlock>
 80084c8:	2000      	movs	r0, #0
 80084ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	eba8 0809 	sub.w	r8, r8, r9
 80084d2:	46a3      	mov	fp, r4
 80084d4:	f854 0b04 	ldr.w	r0, [r4], #4
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0f2      	beq.n	80084c2 <_findenv_r+0x26>
 80084dc:	4642      	mov	r2, r8
 80084de:	4649      	mov	r1, r9
 80084e0:	f001 f84c 	bl	800957c <strncmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1f4      	bne.n	80084d2 <_findenv_r+0x36>
 80084e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80084ec:	eb03 0508 	add.w	r5, r3, r8
 80084f0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80084f4:	2b3d      	cmp	r3, #61	@ 0x3d
 80084f6:	d1ec      	bne.n	80084d2 <_findenv_r+0x36>
 80084f8:	f8da 3000 	ldr.w	r3, [sl]
 80084fc:	ebab 0303 	sub.w	r3, fp, r3
 8008500:	109b      	asrs	r3, r3, #2
 8008502:	4630      	mov	r0, r6
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	f001 f917 	bl	8009738 <__env_unlock>
 800850a:	1c68      	adds	r0, r5, #1
 800850c:	e7dd      	b.n	80084ca <_findenv_r+0x2e>
 800850e:	bf00      	nop
 8008510:	2000000c 	.word	0x2000000c

08008514 <_getenv_r>:
 8008514:	b507      	push	{r0, r1, r2, lr}
 8008516:	aa01      	add	r2, sp, #4
 8008518:	f7ff ffc0 	bl	800849c <_findenv_r>
 800851c:	b003      	add	sp, #12
 800851e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008524 <_Balloc>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	69c6      	ldr	r6, [r0, #28]
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	b976      	cbnz	r6, 800854c <_Balloc+0x28>
 800852e:	2010      	movs	r0, #16
 8008530:	f7fd fddc 	bl	80060ec <malloc>
 8008534:	4602      	mov	r2, r0
 8008536:	61e0      	str	r0, [r4, #28]
 8008538:	b920      	cbnz	r0, 8008544 <_Balloc+0x20>
 800853a:	4b18      	ldr	r3, [pc, #96]	@ (800859c <_Balloc+0x78>)
 800853c:	4818      	ldr	r0, [pc, #96]	@ (80085a0 <_Balloc+0x7c>)
 800853e:	216b      	movs	r1, #107	@ 0x6b
 8008540:	f7ff f8f8 	bl	8007734 <__assert_func>
 8008544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008548:	6006      	str	r6, [r0, #0]
 800854a:	60c6      	str	r6, [r0, #12]
 800854c:	69e6      	ldr	r6, [r4, #28]
 800854e:	68f3      	ldr	r3, [r6, #12]
 8008550:	b183      	cbz	r3, 8008574 <_Balloc+0x50>
 8008552:	69e3      	ldr	r3, [r4, #28]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800855a:	b9b8      	cbnz	r0, 800858c <_Balloc+0x68>
 800855c:	2101      	movs	r1, #1
 800855e:	fa01 f605 	lsl.w	r6, r1, r5
 8008562:	1d72      	adds	r2, r6, #5
 8008564:	0092      	lsls	r2, r2, #2
 8008566:	4620      	mov	r0, r4
 8008568:	f001 f8cb 	bl	8009702 <_calloc_r>
 800856c:	b160      	cbz	r0, 8008588 <_Balloc+0x64>
 800856e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008572:	e00e      	b.n	8008592 <_Balloc+0x6e>
 8008574:	2221      	movs	r2, #33	@ 0x21
 8008576:	2104      	movs	r1, #4
 8008578:	4620      	mov	r0, r4
 800857a:	f001 f8c2 	bl	8009702 <_calloc_r>
 800857e:	69e3      	ldr	r3, [r4, #28]
 8008580:	60f0      	str	r0, [r6, #12]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e4      	bne.n	8008552 <_Balloc+0x2e>
 8008588:	2000      	movs	r0, #0
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	6802      	ldr	r2, [r0, #0]
 800858e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008592:	2300      	movs	r3, #0
 8008594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008598:	e7f7      	b.n	800858a <_Balloc+0x66>
 800859a:	bf00      	nop
 800859c:	0800a29e 	.word	0x0800a29e
 80085a0:	0800a470 	.word	0x0800a470

080085a4 <_Bfree>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	69c6      	ldr	r6, [r0, #28]
 80085a8:	4605      	mov	r5, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	b976      	cbnz	r6, 80085cc <_Bfree+0x28>
 80085ae:	2010      	movs	r0, #16
 80085b0:	f7fd fd9c 	bl	80060ec <malloc>
 80085b4:	4602      	mov	r2, r0
 80085b6:	61e8      	str	r0, [r5, #28]
 80085b8:	b920      	cbnz	r0, 80085c4 <_Bfree+0x20>
 80085ba:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <_Bfree+0x3c>)
 80085bc:	4809      	ldr	r0, [pc, #36]	@ (80085e4 <_Bfree+0x40>)
 80085be:	218f      	movs	r1, #143	@ 0x8f
 80085c0:	f7ff f8b8 	bl	8007734 <__assert_func>
 80085c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085c8:	6006      	str	r6, [r0, #0]
 80085ca:	60c6      	str	r6, [r0, #12]
 80085cc:	b13c      	cbz	r4, 80085de <_Bfree+0x3a>
 80085ce:	69eb      	ldr	r3, [r5, #28]
 80085d0:	6862      	ldr	r2, [r4, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085d8:	6021      	str	r1, [r4, #0]
 80085da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	0800a29e 	.word	0x0800a29e
 80085e4:	0800a470 	.word	0x0800a470

080085e8 <__multadd>:
 80085e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	690d      	ldr	r5, [r1, #16]
 80085ee:	4607      	mov	r7, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	461e      	mov	r6, r3
 80085f4:	f101 0c14 	add.w	ip, r1, #20
 80085f8:	2000      	movs	r0, #0
 80085fa:	f8dc 3000 	ldr.w	r3, [ip]
 80085fe:	b299      	uxth	r1, r3
 8008600:	fb02 6101 	mla	r1, r2, r1, r6
 8008604:	0c1e      	lsrs	r6, r3, #16
 8008606:	0c0b      	lsrs	r3, r1, #16
 8008608:	fb02 3306 	mla	r3, r2, r6, r3
 800860c:	b289      	uxth	r1, r1
 800860e:	3001      	adds	r0, #1
 8008610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008614:	4285      	cmp	r5, r0
 8008616:	f84c 1b04 	str.w	r1, [ip], #4
 800861a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800861e:	dcec      	bgt.n	80085fa <__multadd+0x12>
 8008620:	b30e      	cbz	r6, 8008666 <__multadd+0x7e>
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	42ab      	cmp	r3, r5
 8008626:	dc19      	bgt.n	800865c <__multadd+0x74>
 8008628:	6861      	ldr	r1, [r4, #4]
 800862a:	4638      	mov	r0, r7
 800862c:	3101      	adds	r1, #1
 800862e:	f7ff ff79 	bl	8008524 <_Balloc>
 8008632:	4680      	mov	r8, r0
 8008634:	b928      	cbnz	r0, 8008642 <__multadd+0x5a>
 8008636:	4602      	mov	r2, r0
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <__multadd+0x84>)
 800863a:	480d      	ldr	r0, [pc, #52]	@ (8008670 <__multadd+0x88>)
 800863c:	21ba      	movs	r1, #186	@ 0xba
 800863e:	f7ff f879 	bl	8007734 <__assert_func>
 8008642:	6922      	ldr	r2, [r4, #16]
 8008644:	3202      	adds	r2, #2
 8008646:	f104 010c 	add.w	r1, r4, #12
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	300c      	adds	r0, #12
 800864e:	f7ff f862 	bl	8007716 <memcpy>
 8008652:	4621      	mov	r1, r4
 8008654:	4638      	mov	r0, r7
 8008656:	f7ff ffa5 	bl	80085a4 <_Bfree>
 800865a:	4644      	mov	r4, r8
 800865c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008660:	3501      	adds	r5, #1
 8008662:	615e      	str	r6, [r3, #20]
 8008664:	6125      	str	r5, [r4, #16]
 8008666:	4620      	mov	r0, r4
 8008668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866c:	0800a45f 	.word	0x0800a45f
 8008670:	0800a470 	.word	0x0800a470

08008674 <__hi0bits>:
 8008674:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008678:	4603      	mov	r3, r0
 800867a:	bf36      	itet	cc
 800867c:	0403      	lslcc	r3, r0, #16
 800867e:	2000      	movcs	r0, #0
 8008680:	2010      	movcc	r0, #16
 8008682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008686:	bf3c      	itt	cc
 8008688:	021b      	lslcc	r3, r3, #8
 800868a:	3008      	addcc	r0, #8
 800868c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008690:	bf3c      	itt	cc
 8008692:	011b      	lslcc	r3, r3, #4
 8008694:	3004      	addcc	r0, #4
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869a:	bf3c      	itt	cc
 800869c:	009b      	lslcc	r3, r3, #2
 800869e:	3002      	addcc	r0, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	db05      	blt.n	80086b0 <__hi0bits+0x3c>
 80086a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086a8:	f100 0001 	add.w	r0, r0, #1
 80086ac:	bf08      	it	eq
 80086ae:	2020      	moveq	r0, #32
 80086b0:	4770      	bx	lr

080086b2 <__lo0bits>:
 80086b2:	6803      	ldr	r3, [r0, #0]
 80086b4:	4602      	mov	r2, r0
 80086b6:	f013 0007 	ands.w	r0, r3, #7
 80086ba:	d00b      	beq.n	80086d4 <__lo0bits+0x22>
 80086bc:	07d9      	lsls	r1, r3, #31
 80086be:	d421      	bmi.n	8008704 <__lo0bits+0x52>
 80086c0:	0798      	lsls	r0, r3, #30
 80086c2:	bf49      	itett	mi
 80086c4:	085b      	lsrmi	r3, r3, #1
 80086c6:	089b      	lsrpl	r3, r3, #2
 80086c8:	2001      	movmi	r0, #1
 80086ca:	6013      	strmi	r3, [r2, #0]
 80086cc:	bf5c      	itt	pl
 80086ce:	6013      	strpl	r3, [r2, #0]
 80086d0:	2002      	movpl	r0, #2
 80086d2:	4770      	bx	lr
 80086d4:	b299      	uxth	r1, r3
 80086d6:	b909      	cbnz	r1, 80086dc <__lo0bits+0x2a>
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	2010      	movs	r0, #16
 80086dc:	b2d9      	uxtb	r1, r3
 80086de:	b909      	cbnz	r1, 80086e4 <__lo0bits+0x32>
 80086e0:	3008      	adds	r0, #8
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	0719      	lsls	r1, r3, #28
 80086e6:	bf04      	itt	eq
 80086e8:	091b      	lsreq	r3, r3, #4
 80086ea:	3004      	addeq	r0, #4
 80086ec:	0799      	lsls	r1, r3, #30
 80086ee:	bf04      	itt	eq
 80086f0:	089b      	lsreq	r3, r3, #2
 80086f2:	3002      	addeq	r0, #2
 80086f4:	07d9      	lsls	r1, r3, #31
 80086f6:	d403      	bmi.n	8008700 <__lo0bits+0x4e>
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	f100 0001 	add.w	r0, r0, #1
 80086fe:	d003      	beq.n	8008708 <__lo0bits+0x56>
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	4770      	bx	lr
 8008704:	2000      	movs	r0, #0
 8008706:	4770      	bx	lr
 8008708:	2020      	movs	r0, #32
 800870a:	4770      	bx	lr

0800870c <__i2b>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	2101      	movs	r1, #1
 8008712:	f7ff ff07 	bl	8008524 <_Balloc>
 8008716:	4602      	mov	r2, r0
 8008718:	b928      	cbnz	r0, 8008726 <__i2b+0x1a>
 800871a:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <__i2b+0x24>)
 800871c:	4805      	ldr	r0, [pc, #20]	@ (8008734 <__i2b+0x28>)
 800871e:	f240 1145 	movw	r1, #325	@ 0x145
 8008722:	f7ff f807 	bl	8007734 <__assert_func>
 8008726:	2301      	movs	r3, #1
 8008728:	6144      	str	r4, [r0, #20]
 800872a:	6103      	str	r3, [r0, #16]
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	0800a45f 	.word	0x0800a45f
 8008734:	0800a470 	.word	0x0800a470

08008738 <__multiply>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4614      	mov	r4, r2
 800873e:	690a      	ldr	r2, [r1, #16]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	429a      	cmp	r2, r3
 8008744:	bfa8      	it	ge
 8008746:	4623      	movge	r3, r4
 8008748:	460f      	mov	r7, r1
 800874a:	bfa4      	itt	ge
 800874c:	460c      	movge	r4, r1
 800874e:	461f      	movge	r7, r3
 8008750:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008754:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008758:	68a3      	ldr	r3, [r4, #8]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	eb0a 0609 	add.w	r6, sl, r9
 8008760:	42b3      	cmp	r3, r6
 8008762:	b085      	sub	sp, #20
 8008764:	bfb8      	it	lt
 8008766:	3101      	addlt	r1, #1
 8008768:	f7ff fedc 	bl	8008524 <_Balloc>
 800876c:	b930      	cbnz	r0, 800877c <__multiply+0x44>
 800876e:	4602      	mov	r2, r0
 8008770:	4b44      	ldr	r3, [pc, #272]	@ (8008884 <__multiply+0x14c>)
 8008772:	4845      	ldr	r0, [pc, #276]	@ (8008888 <__multiply+0x150>)
 8008774:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008778:	f7fe ffdc 	bl	8007734 <__assert_func>
 800877c:	f100 0514 	add.w	r5, r0, #20
 8008780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008784:	462b      	mov	r3, r5
 8008786:	2200      	movs	r2, #0
 8008788:	4543      	cmp	r3, r8
 800878a:	d321      	bcc.n	80087d0 <__multiply+0x98>
 800878c:	f107 0114 	add.w	r1, r7, #20
 8008790:	f104 0214 	add.w	r2, r4, #20
 8008794:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008798:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	1b13      	subs	r3, r2, r4
 80087a0:	3b15      	subs	r3, #21
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	3304      	adds	r3, #4
 80087a8:	f104 0715 	add.w	r7, r4, #21
 80087ac:	42ba      	cmp	r2, r7
 80087ae:	bf38      	it	cc
 80087b0:	2304      	movcc	r3, #4
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	9103      	str	r1, [sp, #12]
 80087b8:	428b      	cmp	r3, r1
 80087ba:	d80c      	bhi.n	80087d6 <__multiply+0x9e>
 80087bc:	2e00      	cmp	r6, #0
 80087be:	dd03      	ble.n	80087c8 <__multiply+0x90>
 80087c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d05b      	beq.n	8008880 <__multiply+0x148>
 80087c8:	6106      	str	r6, [r0, #16]
 80087ca:	b005      	add	sp, #20
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	f843 2b04 	str.w	r2, [r3], #4
 80087d4:	e7d8      	b.n	8008788 <__multiply+0x50>
 80087d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80087da:	f1ba 0f00 	cmp.w	sl, #0
 80087de:	d024      	beq.n	800882a <__multiply+0xf2>
 80087e0:	f104 0e14 	add.w	lr, r4, #20
 80087e4:	46a9      	mov	r9, r5
 80087e6:	f04f 0c00 	mov.w	ip, #0
 80087ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087ee:	f8d9 3000 	ldr.w	r3, [r9]
 80087f2:	fa1f fb87 	uxth.w	fp, r7
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80087fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008800:	f8d9 7000 	ldr.w	r7, [r9]
 8008804:	4463      	add	r3, ip
 8008806:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800880a:	fb0a c70b 	mla	r7, sl, fp, ip
 800880e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008812:	b29b      	uxth	r3, r3
 8008814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008818:	4572      	cmp	r2, lr
 800881a:	f849 3b04 	str.w	r3, [r9], #4
 800881e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008822:	d8e2      	bhi.n	80087ea <__multiply+0xb2>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	f845 c003 	str.w	ip, [r5, r3]
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008830:	3104      	adds	r1, #4
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	d021      	beq.n	800887c <__multiply+0x144>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	f104 0c14 	add.w	ip, r4, #20
 800883e:	46ae      	mov	lr, r5
 8008840:	f04f 0a00 	mov.w	sl, #0
 8008844:	f8bc b000 	ldrh.w	fp, [ip]
 8008848:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800884c:	fb09 770b 	mla	r7, r9, fp, r7
 8008850:	4457      	add	r7, sl
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008858:	f84e 3b04 	str.w	r3, [lr], #4
 800885c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008864:	f8be 3000 	ldrh.w	r3, [lr]
 8008868:	fb09 330a 	mla	r3, r9, sl, r3
 800886c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008870:	4562      	cmp	r2, ip
 8008872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008876:	d8e5      	bhi.n	8008844 <__multiply+0x10c>
 8008878:	9f01      	ldr	r7, [sp, #4]
 800887a:	51eb      	str	r3, [r5, r7]
 800887c:	3504      	adds	r5, #4
 800887e:	e799      	b.n	80087b4 <__multiply+0x7c>
 8008880:	3e01      	subs	r6, #1
 8008882:	e79b      	b.n	80087bc <__multiply+0x84>
 8008884:	0800a45f 	.word	0x0800a45f
 8008888:	0800a470 	.word	0x0800a470

0800888c <__pow5mult>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	4615      	mov	r5, r2
 8008892:	f012 0203 	ands.w	r2, r2, #3
 8008896:	4607      	mov	r7, r0
 8008898:	460e      	mov	r6, r1
 800889a:	d007      	beq.n	80088ac <__pow5mult+0x20>
 800889c:	4c25      	ldr	r4, [pc, #148]	@ (8008934 <__pow5mult+0xa8>)
 800889e:	3a01      	subs	r2, #1
 80088a0:	2300      	movs	r3, #0
 80088a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088a6:	f7ff fe9f 	bl	80085e8 <__multadd>
 80088aa:	4606      	mov	r6, r0
 80088ac:	10ad      	asrs	r5, r5, #2
 80088ae:	d03d      	beq.n	800892c <__pow5mult+0xa0>
 80088b0:	69fc      	ldr	r4, [r7, #28]
 80088b2:	b97c      	cbnz	r4, 80088d4 <__pow5mult+0x48>
 80088b4:	2010      	movs	r0, #16
 80088b6:	f7fd fc19 	bl	80060ec <malloc>
 80088ba:	4602      	mov	r2, r0
 80088bc:	61f8      	str	r0, [r7, #28]
 80088be:	b928      	cbnz	r0, 80088cc <__pow5mult+0x40>
 80088c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008938 <__pow5mult+0xac>)
 80088c2:	481e      	ldr	r0, [pc, #120]	@ (800893c <__pow5mult+0xb0>)
 80088c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088c8:	f7fe ff34 	bl	8007734 <__assert_func>
 80088cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d0:	6004      	str	r4, [r0, #0]
 80088d2:	60c4      	str	r4, [r0, #12]
 80088d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088dc:	b94c      	cbnz	r4, 80088f2 <__pow5mult+0x66>
 80088de:	f240 2171 	movw	r1, #625	@ 0x271
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ff12 	bl	800870c <__i2b>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ee:	4604      	mov	r4, r0
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	07eb      	lsls	r3, r5, #31
 80088f8:	d50a      	bpl.n	8008910 <__pow5mult+0x84>
 80088fa:	4631      	mov	r1, r6
 80088fc:	4622      	mov	r2, r4
 80088fe:	4638      	mov	r0, r7
 8008900:	f7ff ff1a 	bl	8008738 <__multiply>
 8008904:	4631      	mov	r1, r6
 8008906:	4680      	mov	r8, r0
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff fe4b 	bl	80085a4 <_Bfree>
 800890e:	4646      	mov	r6, r8
 8008910:	106d      	asrs	r5, r5, #1
 8008912:	d00b      	beq.n	800892c <__pow5mult+0xa0>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	b938      	cbnz	r0, 8008928 <__pow5mult+0x9c>
 8008918:	4622      	mov	r2, r4
 800891a:	4621      	mov	r1, r4
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff ff0b 	bl	8008738 <__multiply>
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	f8c0 9000 	str.w	r9, [r0]
 8008928:	4604      	mov	r4, r0
 800892a:	e7e4      	b.n	80088f6 <__pow5mult+0x6a>
 800892c:	4630      	mov	r0, r6
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008932:	bf00      	nop
 8008934:	0800a4cc 	.word	0x0800a4cc
 8008938:	0800a29e 	.word	0x0800a29e
 800893c:	0800a470 	.word	0x0800a470

08008940 <__lshift>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	6849      	ldr	r1, [r1, #4]
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	4607      	mov	r7, r0
 8008952:	4691      	mov	r9, r2
 8008954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008958:	f108 0601 	add.w	r6, r8, #1
 800895c:	42b3      	cmp	r3, r6
 800895e:	db0b      	blt.n	8008978 <__lshift+0x38>
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff fddf 	bl	8008524 <_Balloc>
 8008966:	4605      	mov	r5, r0
 8008968:	b948      	cbnz	r0, 800897e <__lshift+0x3e>
 800896a:	4602      	mov	r2, r0
 800896c:	4b28      	ldr	r3, [pc, #160]	@ (8008a10 <__lshift+0xd0>)
 800896e:	4829      	ldr	r0, [pc, #164]	@ (8008a14 <__lshift+0xd4>)
 8008970:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008974:	f7fe fede 	bl	8007734 <__assert_func>
 8008978:	3101      	adds	r1, #1
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	e7ee      	b.n	800895c <__lshift+0x1c>
 800897e:	2300      	movs	r3, #0
 8008980:	f100 0114 	add.w	r1, r0, #20
 8008984:	f100 0210 	add.w	r2, r0, #16
 8008988:	4618      	mov	r0, r3
 800898a:	4553      	cmp	r3, sl
 800898c:	db33      	blt.n	80089f6 <__lshift+0xb6>
 800898e:	6920      	ldr	r0, [r4, #16]
 8008990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008994:	f104 0314 	add.w	r3, r4, #20
 8008998:	f019 091f 	ands.w	r9, r9, #31
 800899c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a4:	d02b      	beq.n	80089fe <__lshift+0xbe>
 80089a6:	f1c9 0e20 	rsb	lr, r9, #32
 80089aa:	468a      	mov	sl, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	fa00 f009 	lsl.w	r0, r0, r9
 80089b4:	4310      	orrs	r0, r2
 80089b6:	f84a 0b04 	str.w	r0, [sl], #4
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	459c      	cmp	ip, r3
 80089c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c4:	d8f3      	bhi.n	80089ae <__lshift+0x6e>
 80089c6:	ebac 0304 	sub.w	r3, ip, r4
 80089ca:	3b15      	subs	r3, #21
 80089cc:	f023 0303 	bic.w	r3, r3, #3
 80089d0:	3304      	adds	r3, #4
 80089d2:	f104 0015 	add.w	r0, r4, #21
 80089d6:	4584      	cmp	ip, r0
 80089d8:	bf38      	it	cc
 80089da:	2304      	movcc	r3, #4
 80089dc:	50ca      	str	r2, [r1, r3]
 80089de:	b10a      	cbz	r2, 80089e4 <__lshift+0xa4>
 80089e0:	f108 0602 	add.w	r6, r8, #2
 80089e4:	3e01      	subs	r6, #1
 80089e6:	4638      	mov	r0, r7
 80089e8:	612e      	str	r6, [r5, #16]
 80089ea:	4621      	mov	r1, r4
 80089ec:	f7ff fdda 	bl	80085a4 <_Bfree>
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089fa:	3301      	adds	r3, #1
 80089fc:	e7c5      	b.n	800898a <__lshift+0x4a>
 80089fe:	3904      	subs	r1, #4
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a08:	459c      	cmp	ip, r3
 8008a0a:	d8f9      	bhi.n	8008a00 <__lshift+0xc0>
 8008a0c:	e7ea      	b.n	80089e4 <__lshift+0xa4>
 8008a0e:	bf00      	nop
 8008a10:	0800a45f 	.word	0x0800a45f
 8008a14:	0800a470 	.word	0x0800a470

08008a18 <__mcmp>:
 8008a18:	690a      	ldr	r2, [r1, #16]
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6900      	ldr	r0, [r0, #16]
 8008a1e:	1a80      	subs	r0, r0, r2
 8008a20:	b530      	push	{r4, r5, lr}
 8008a22:	d10e      	bne.n	8008a42 <__mcmp+0x2a>
 8008a24:	3314      	adds	r3, #20
 8008a26:	3114      	adds	r1, #20
 8008a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a38:	4295      	cmp	r5, r2
 8008a3a:	d003      	beq.n	8008a44 <__mcmp+0x2c>
 8008a3c:	d205      	bcs.n	8008a4a <__mcmp+0x32>
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d3f3      	bcc.n	8008a30 <__mcmp+0x18>
 8008a48:	e7fb      	b.n	8008a42 <__mcmp+0x2a>
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	e7f9      	b.n	8008a42 <__mcmp+0x2a>
	...

08008a50 <__mdiff>:
 8008a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	4689      	mov	r9, r1
 8008a56:	4606      	mov	r6, r0
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4648      	mov	r0, r9
 8008a5c:	4614      	mov	r4, r2
 8008a5e:	f7ff ffdb 	bl	8008a18 <__mcmp>
 8008a62:	1e05      	subs	r5, r0, #0
 8008a64:	d112      	bne.n	8008a8c <__mdiff+0x3c>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff fd5b 	bl	8008524 <_Balloc>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__mdiff+0x2e>
 8008a72:	4b3f      	ldr	r3, [pc, #252]	@ (8008b70 <__mdiff+0x120>)
 8008a74:	f240 2137 	movw	r1, #567	@ 0x237
 8008a78:	483e      	ldr	r0, [pc, #248]	@ (8008b74 <__mdiff+0x124>)
 8008a7a:	f7fe fe5b 	bl	8007734 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a84:	4610      	mov	r0, r2
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	bfbc      	itt	lt
 8008a8e:	464b      	movlt	r3, r9
 8008a90:	46a1      	movlt	r9, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a98:	bfba      	itte	lt
 8008a9a:	461c      	movlt	r4, r3
 8008a9c:	2501      	movlt	r5, #1
 8008a9e:	2500      	movge	r5, #0
 8008aa0:	f7ff fd40 	bl	8008524 <_Balloc>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	b918      	cbnz	r0, 8008ab0 <__mdiff+0x60>
 8008aa8:	4b31      	ldr	r3, [pc, #196]	@ (8008b70 <__mdiff+0x120>)
 8008aaa:	f240 2145 	movw	r1, #581	@ 0x245
 8008aae:	e7e3      	b.n	8008a78 <__mdiff+0x28>
 8008ab0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ab4:	6926      	ldr	r6, [r4, #16]
 8008ab6:	60c5      	str	r5, [r0, #12]
 8008ab8:	f109 0310 	add.w	r3, r9, #16
 8008abc:	f109 0514 	add.w	r5, r9, #20
 8008ac0:	f104 0e14 	add.w	lr, r4, #20
 8008ac4:	f100 0b14 	add.w	fp, r0, #20
 8008ac8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008acc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	46d9      	mov	r9, fp
 8008ad4:	f04f 0c00 	mov.w	ip, #0
 8008ad8:	9b01      	ldr	r3, [sp, #4]
 8008ada:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ade:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	fa1f f38a 	uxth.w	r3, sl
 8008ae8:	4619      	mov	r1, r3
 8008aea:	b283      	uxth	r3, r0
 8008aec:	1acb      	subs	r3, r1, r3
 8008aee:	0c00      	lsrs	r0, r0, #16
 8008af0:	4463      	add	r3, ip
 8008af2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008af6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b00:	4576      	cmp	r6, lr
 8008b02:	f849 3b04 	str.w	r3, [r9], #4
 8008b06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b0a:	d8e5      	bhi.n	8008ad8 <__mdiff+0x88>
 8008b0c:	1b33      	subs	r3, r6, r4
 8008b0e:	3b15      	subs	r3, #21
 8008b10:	f023 0303 	bic.w	r3, r3, #3
 8008b14:	3415      	adds	r4, #21
 8008b16:	3304      	adds	r3, #4
 8008b18:	42a6      	cmp	r6, r4
 8008b1a:	bf38      	it	cc
 8008b1c:	2304      	movcc	r3, #4
 8008b1e:	441d      	add	r5, r3
 8008b20:	445b      	add	r3, fp
 8008b22:	461e      	mov	r6, r3
 8008b24:	462c      	mov	r4, r5
 8008b26:	4544      	cmp	r4, r8
 8008b28:	d30e      	bcc.n	8008b48 <__mdiff+0xf8>
 8008b2a:	f108 0103 	add.w	r1, r8, #3
 8008b2e:	1b49      	subs	r1, r1, r5
 8008b30:	f021 0103 	bic.w	r1, r1, #3
 8008b34:	3d03      	subs	r5, #3
 8008b36:	45a8      	cmp	r8, r5
 8008b38:	bf38      	it	cc
 8008b3a:	2100      	movcc	r1, #0
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b42:	b191      	cbz	r1, 8008b6a <__mdiff+0x11a>
 8008b44:	6117      	str	r7, [r2, #16]
 8008b46:	e79d      	b.n	8008a84 <__mdiff+0x34>
 8008b48:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b4c:	46e6      	mov	lr, ip
 8008b4e:	0c08      	lsrs	r0, r1, #16
 8008b50:	fa1c fc81 	uxtah	ip, ip, r1
 8008b54:	4471      	add	r1, lr
 8008b56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b5a:	b289      	uxth	r1, r1
 8008b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b60:	f846 1b04 	str.w	r1, [r6], #4
 8008b64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b68:	e7dd      	b.n	8008b26 <__mdiff+0xd6>
 8008b6a:	3f01      	subs	r7, #1
 8008b6c:	e7e7      	b.n	8008b3e <__mdiff+0xee>
 8008b6e:	bf00      	nop
 8008b70:	0800a45f 	.word	0x0800a45f
 8008b74:	0800a470 	.word	0x0800a470

08008b78 <__d2b>:
 8008b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	2101      	movs	r1, #1
 8008b80:	ec59 8b10 	vmov	r8, r9, d0
 8008b84:	4616      	mov	r6, r2
 8008b86:	f7ff fccd 	bl	8008524 <_Balloc>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	b930      	cbnz	r0, 8008b9c <__d2b+0x24>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4b23      	ldr	r3, [pc, #140]	@ (8008c20 <__d2b+0xa8>)
 8008b92:	4824      	ldr	r0, [pc, #144]	@ (8008c24 <__d2b+0xac>)
 8008b94:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b98:	f7fe fdcc 	bl	8007734 <__assert_func>
 8008b9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ba4:	b10d      	cbz	r5, 8008baa <__d2b+0x32>
 8008ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	f1b8 0300 	subs.w	r3, r8, #0
 8008bb0:	d023      	beq.n	8008bfa <__d2b+0x82>
 8008bb2:	4668      	mov	r0, sp
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f7ff fd7c 	bl	80086b2 <__lo0bits>
 8008bba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bbe:	b1d0      	cbz	r0, 8008bf6 <__d2b+0x7e>
 8008bc0:	f1c0 0320 	rsb	r3, r0, #32
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	40c2      	lsrs	r2, r0
 8008bcc:	6163      	str	r3, [r4, #20]
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	61a3      	str	r3, [r4, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2201      	moveq	r2, #1
 8008bda:	2202      	movne	r2, #2
 8008bdc:	6122      	str	r2, [r4, #16]
 8008bde:	b1a5      	cbz	r5, 8008c0a <__d2b+0x92>
 8008be0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008be4:	4405      	add	r5, r0
 8008be6:	603d      	str	r5, [r7, #0]
 8008be8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bec:	6030      	str	r0, [r6, #0]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	b003      	add	sp, #12
 8008bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bf6:	6161      	str	r1, [r4, #20]
 8008bf8:	e7ea      	b.n	8008bd0 <__d2b+0x58>
 8008bfa:	a801      	add	r0, sp, #4
 8008bfc:	f7ff fd59 	bl	80086b2 <__lo0bits>
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	6163      	str	r3, [r4, #20]
 8008c04:	3020      	adds	r0, #32
 8008c06:	2201      	movs	r2, #1
 8008c08:	e7e8      	b.n	8008bdc <__d2b+0x64>
 8008c0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c12:	6038      	str	r0, [r7, #0]
 8008c14:	6918      	ldr	r0, [r3, #16]
 8008c16:	f7ff fd2d 	bl	8008674 <__hi0bits>
 8008c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c1e:	e7e5      	b.n	8008bec <__d2b+0x74>
 8008c20:	0800a45f 	.word	0x0800a45f
 8008c24:	0800a470 	.word	0x0800a470

08008c28 <_strtoul_l.constprop.0>:
 8008c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c2c:	4e34      	ldr	r6, [pc, #208]	@ (8008d00 <_strtoul_l.constprop.0+0xd8>)
 8008c2e:	4686      	mov	lr, r0
 8008c30:	460d      	mov	r5, r1
 8008c32:	4628      	mov	r0, r5
 8008c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c38:	5d37      	ldrb	r7, [r6, r4]
 8008c3a:	f017 0708 	ands.w	r7, r7, #8
 8008c3e:	d1f8      	bne.n	8008c32 <_strtoul_l.constprop.0+0xa>
 8008c40:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c42:	d12f      	bne.n	8008ca4 <_strtoul_l.constprop.0+0x7c>
 8008c44:	782c      	ldrb	r4, [r5, #0]
 8008c46:	2701      	movs	r7, #1
 8008c48:	1c85      	adds	r5, r0, #2
 8008c4a:	f033 0010 	bics.w	r0, r3, #16
 8008c4e:	d109      	bne.n	8008c64 <_strtoul_l.constprop.0+0x3c>
 8008c50:	2c30      	cmp	r4, #48	@ 0x30
 8008c52:	d12c      	bne.n	8008cae <_strtoul_l.constprop.0+0x86>
 8008c54:	7828      	ldrb	r0, [r5, #0]
 8008c56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008c5a:	2858      	cmp	r0, #88	@ 0x58
 8008c5c:	d127      	bne.n	8008cae <_strtoul_l.constprop.0+0x86>
 8008c5e:	786c      	ldrb	r4, [r5, #1]
 8008c60:	2310      	movs	r3, #16
 8008c62:	3502      	adds	r5, #2
 8008c64:	f04f 38ff 	mov.w	r8, #4294967295
 8008c68:	2600      	movs	r6, #0
 8008c6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008c6e:	fb03 f908 	mul.w	r9, r3, r8
 8008c72:	ea6f 0909 	mvn.w	r9, r9
 8008c76:	4630      	mov	r0, r6
 8008c78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008c7c:	f1bc 0f09 	cmp.w	ip, #9
 8008c80:	d81c      	bhi.n	8008cbc <_strtoul_l.constprop.0+0x94>
 8008c82:	4664      	mov	r4, ip
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	dd2a      	ble.n	8008cde <_strtoul_l.constprop.0+0xb6>
 8008c88:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008c8c:	d007      	beq.n	8008c9e <_strtoul_l.constprop.0+0x76>
 8008c8e:	4580      	cmp	r8, r0
 8008c90:	d322      	bcc.n	8008cd8 <_strtoul_l.constprop.0+0xb0>
 8008c92:	d101      	bne.n	8008c98 <_strtoul_l.constprop.0+0x70>
 8008c94:	45a1      	cmp	r9, r4
 8008c96:	db1f      	blt.n	8008cd8 <_strtoul_l.constprop.0+0xb0>
 8008c98:	fb00 4003 	mla	r0, r0, r3, r4
 8008c9c:	2601      	movs	r6, #1
 8008c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ca2:	e7e9      	b.n	8008c78 <_strtoul_l.constprop.0+0x50>
 8008ca4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ca6:	bf04      	itt	eq
 8008ca8:	782c      	ldrbeq	r4, [r5, #0]
 8008caa:	1c85      	addeq	r5, r0, #2
 8008cac:	e7cd      	b.n	8008c4a <_strtoul_l.constprop.0+0x22>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1d8      	bne.n	8008c64 <_strtoul_l.constprop.0+0x3c>
 8008cb2:	2c30      	cmp	r4, #48	@ 0x30
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2308      	moveq	r3, #8
 8008cb8:	230a      	movne	r3, #10
 8008cba:	e7d3      	b.n	8008c64 <_strtoul_l.constprop.0+0x3c>
 8008cbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008cc0:	f1bc 0f19 	cmp.w	ip, #25
 8008cc4:	d801      	bhi.n	8008cca <_strtoul_l.constprop.0+0xa2>
 8008cc6:	3c37      	subs	r4, #55	@ 0x37
 8008cc8:	e7dc      	b.n	8008c84 <_strtoul_l.constprop.0+0x5c>
 8008cca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008cce:	f1bc 0f19 	cmp.w	ip, #25
 8008cd2:	d804      	bhi.n	8008cde <_strtoul_l.constprop.0+0xb6>
 8008cd4:	3c57      	subs	r4, #87	@ 0x57
 8008cd6:	e7d5      	b.n	8008c84 <_strtoul_l.constprop.0+0x5c>
 8008cd8:	f04f 36ff 	mov.w	r6, #4294967295
 8008cdc:	e7df      	b.n	8008c9e <_strtoul_l.constprop.0+0x76>
 8008cde:	1c73      	adds	r3, r6, #1
 8008ce0:	d106      	bne.n	8008cf0 <_strtoul_l.constprop.0+0xc8>
 8008ce2:	2322      	movs	r3, #34	@ 0x22
 8008ce4:	f8ce 3000 	str.w	r3, [lr]
 8008ce8:	4630      	mov	r0, r6
 8008cea:	b932      	cbnz	r2, 8008cfa <_strtoul_l.constprop.0+0xd2>
 8008cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf0:	b107      	cbz	r7, 8008cf4 <_strtoul_l.constprop.0+0xcc>
 8008cf2:	4240      	negs	r0, r0
 8008cf4:	2a00      	cmp	r2, #0
 8008cf6:	d0f9      	beq.n	8008cec <_strtoul_l.constprop.0+0xc4>
 8008cf8:	b106      	cbz	r6, 8008cfc <_strtoul_l.constprop.0+0xd4>
 8008cfa:	1e69      	subs	r1, r5, #1
 8008cfc:	6011      	str	r1, [r2, #0]
 8008cfe:	e7f5      	b.n	8008cec <_strtoul_l.constprop.0+0xc4>
 8008d00:	0800a5c9 	.word	0x0800a5c9

08008d04 <_strtoul_r>:
 8008d04:	f7ff bf90 	b.w	8008c28 <_strtoul_l.constprop.0>

08008d08 <strtoul>:
 8008d08:	4613      	mov	r3, r2
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4802      	ldr	r0, [pc, #8]	@ (8008d18 <strtoul+0x10>)
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f7ff bf89 	b.w	8008c28 <_strtoul_l.constprop.0>
 8008d16:	bf00      	nop
 8008d18:	20000030 	.word	0x20000030

08008d1c <__ssputs_r>:
 8008d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d20:	688e      	ldr	r6, [r1, #8]
 8008d22:	461f      	mov	r7, r3
 8008d24:	42be      	cmp	r6, r7
 8008d26:	680b      	ldr	r3, [r1, #0]
 8008d28:	4682      	mov	sl, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	4690      	mov	r8, r2
 8008d2e:	d82d      	bhi.n	8008d8c <__ssputs_r+0x70>
 8008d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d38:	d026      	beq.n	8008d88 <__ssputs_r+0x6c>
 8008d3a:	6965      	ldr	r5, [r4, #20]
 8008d3c:	6909      	ldr	r1, [r1, #16]
 8008d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d42:	eba3 0901 	sub.w	r9, r3, r1
 8008d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d4a:	1c7b      	adds	r3, r7, #1
 8008d4c:	444b      	add	r3, r9
 8008d4e:	106d      	asrs	r5, r5, #1
 8008d50:	429d      	cmp	r5, r3
 8008d52:	bf38      	it	cc
 8008d54:	461d      	movcc	r5, r3
 8008d56:	0553      	lsls	r3, r2, #21
 8008d58:	d527      	bpl.n	8008daa <__ssputs_r+0x8e>
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f7fd f9f8 	bl	8006150 <_malloc_r>
 8008d60:	4606      	mov	r6, r0
 8008d62:	b360      	cbz	r0, 8008dbe <__ssputs_r+0xa2>
 8008d64:	6921      	ldr	r1, [r4, #16]
 8008d66:	464a      	mov	r2, r9
 8008d68:	f7fe fcd5 	bl	8007716 <memcpy>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	6126      	str	r6, [r4, #16]
 8008d7a:	6165      	str	r5, [r4, #20]
 8008d7c:	444e      	add	r6, r9
 8008d7e:	eba5 0509 	sub.w	r5, r5, r9
 8008d82:	6026      	str	r6, [r4, #0]
 8008d84:	60a5      	str	r5, [r4, #8]
 8008d86:	463e      	mov	r6, r7
 8008d88:	42be      	cmp	r6, r7
 8008d8a:	d900      	bls.n	8008d8e <__ssputs_r+0x72>
 8008d8c:	463e      	mov	r6, r7
 8008d8e:	6820      	ldr	r0, [r4, #0]
 8008d90:	4632      	mov	r2, r6
 8008d92:	4641      	mov	r1, r8
 8008d94:	f000 fbd8 	bl	8009548 <memmove>
 8008d98:	68a3      	ldr	r3, [r4, #8]
 8008d9a:	1b9b      	subs	r3, r3, r6
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	4433      	add	r3, r6
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	2000      	movs	r0, #0
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	462a      	mov	r2, r5
 8008dac:	f000 fcdc 	bl	8009768 <_realloc_r>
 8008db0:	4606      	mov	r6, r0
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d1e0      	bne.n	8008d78 <__ssputs_r+0x5c>
 8008db6:	6921      	ldr	r1, [r4, #16]
 8008db8:	4650      	mov	r0, sl
 8008dba:	f7ff fb25 	bl	8008408 <_free_r>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	f8ca 3000 	str.w	r3, [sl]
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	e7e9      	b.n	8008da6 <__ssputs_r+0x8a>
	...

08008dd4 <_svfiprintf_r>:
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	4698      	mov	r8, r3
 8008dda:	898b      	ldrh	r3, [r1, #12]
 8008ddc:	061b      	lsls	r3, r3, #24
 8008dde:	b09d      	sub	sp, #116	@ 0x74
 8008de0:	4607      	mov	r7, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	d510      	bpl.n	8008e0a <_svfiprintf_r+0x36>
 8008de8:	690b      	ldr	r3, [r1, #16]
 8008dea:	b973      	cbnz	r3, 8008e0a <_svfiprintf_r+0x36>
 8008dec:	2140      	movs	r1, #64	@ 0x40
 8008dee:	f7fd f9af 	bl	8006150 <_malloc_r>
 8008df2:	6028      	str	r0, [r5, #0]
 8008df4:	6128      	str	r0, [r5, #16]
 8008df6:	b930      	cbnz	r0, 8008e06 <_svfiprintf_r+0x32>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	b01d      	add	sp, #116	@ 0x74
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	2340      	movs	r3, #64	@ 0x40
 8008e08:	616b      	str	r3, [r5, #20]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0e:	2320      	movs	r3, #32
 8008e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e18:	2330      	movs	r3, #48	@ 0x30
 8008e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008fb8 <_svfiprintf_r+0x1e4>
 8008e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e22:	f04f 0901 	mov.w	r9, #1
 8008e26:	4623      	mov	r3, r4
 8008e28:	469a      	mov	sl, r3
 8008e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e2e:	b10a      	cbz	r2, 8008e34 <_svfiprintf_r+0x60>
 8008e30:	2a25      	cmp	r2, #37	@ 0x25
 8008e32:	d1f9      	bne.n	8008e28 <_svfiprintf_r+0x54>
 8008e34:	ebba 0b04 	subs.w	fp, sl, r4
 8008e38:	d00b      	beq.n	8008e52 <_svfiprintf_r+0x7e>
 8008e3a:	465b      	mov	r3, fp
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7ff ff6b 	bl	8008d1c <__ssputs_r>
 8008e46:	3001      	adds	r0, #1
 8008e48:	f000 80a7 	beq.w	8008f9a <_svfiprintf_r+0x1c6>
 8008e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e4e:	445a      	add	r2, fp
 8008e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e52:	f89a 3000 	ldrb.w	r3, [sl]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 809f 	beq.w	8008f9a <_svfiprintf_r+0x1c6>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e66:	f10a 0a01 	add.w	sl, sl, #1
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	9307      	str	r3, [sp, #28]
 8008e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e74:	4654      	mov	r4, sl
 8008e76:	2205      	movs	r2, #5
 8008e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7c:	484e      	ldr	r0, [pc, #312]	@ (8008fb8 <_svfiprintf_r+0x1e4>)
 8008e7e:	f7f7 f9b7 	bl	80001f0 <memchr>
 8008e82:	9a04      	ldr	r2, [sp, #16]
 8008e84:	b9d8      	cbnz	r0, 8008ebe <_svfiprintf_r+0xea>
 8008e86:	06d0      	lsls	r0, r2, #27
 8008e88:	bf44      	itt	mi
 8008e8a:	2320      	movmi	r3, #32
 8008e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e90:	0711      	lsls	r1, r2, #28
 8008e92:	bf44      	itt	mi
 8008e94:	232b      	movmi	r3, #43	@ 0x2b
 8008e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea0:	d015      	beq.n	8008ece <_svfiprintf_r+0xfa>
 8008ea2:	9a07      	ldr	r2, [sp, #28]
 8008ea4:	4654      	mov	r4, sl
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f04f 0c0a 	mov.w	ip, #10
 8008eac:	4621      	mov	r1, r4
 8008eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb2:	3b30      	subs	r3, #48	@ 0x30
 8008eb4:	2b09      	cmp	r3, #9
 8008eb6:	d94b      	bls.n	8008f50 <_svfiprintf_r+0x17c>
 8008eb8:	b1b0      	cbz	r0, 8008ee8 <_svfiprintf_r+0x114>
 8008eba:	9207      	str	r2, [sp, #28]
 8008ebc:	e014      	b.n	8008ee8 <_svfiprintf_r+0x114>
 8008ebe:	eba0 0308 	sub.w	r3, r0, r8
 8008ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	46a2      	mov	sl, r4
 8008ecc:	e7d2      	b.n	8008e74 <_svfiprintf_r+0xa0>
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	1d19      	adds	r1, r3, #4
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	9103      	str	r1, [sp, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfbb      	ittet	lt
 8008eda:	425b      	neglt	r3, r3
 8008edc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee0:	9307      	strge	r3, [sp, #28]
 8008ee2:	9307      	strlt	r3, [sp, #28]
 8008ee4:	bfb8      	it	lt
 8008ee6:	9204      	strlt	r2, [sp, #16]
 8008ee8:	7823      	ldrb	r3, [r4, #0]
 8008eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eec:	d10a      	bne.n	8008f04 <_svfiprintf_r+0x130>
 8008eee:	7863      	ldrb	r3, [r4, #1]
 8008ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ef2:	d132      	bne.n	8008f5a <_svfiprintf_r+0x186>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	9203      	str	r2, [sp, #12]
 8008efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f00:	3402      	adds	r4, #2
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fc8 <_svfiprintf_r+0x1f4>
 8008f08:	7821      	ldrb	r1, [r4, #0]
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	f7f7 f96f 	bl	80001f0 <memchr>
 8008f12:	b138      	cbz	r0, 8008f24 <_svfiprintf_r+0x150>
 8008f14:	9b04      	ldr	r3, [sp, #16]
 8008f16:	eba0 000a 	sub.w	r0, r0, sl
 8008f1a:	2240      	movs	r2, #64	@ 0x40
 8008f1c:	4082      	lsls	r2, r0
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	3401      	adds	r4, #1
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f28:	4824      	ldr	r0, [pc, #144]	@ (8008fbc <_svfiprintf_r+0x1e8>)
 8008f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f2e:	2206      	movs	r2, #6
 8008f30:	f7f7 f95e 	bl	80001f0 <memchr>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d036      	beq.n	8008fa6 <_svfiprintf_r+0x1d2>
 8008f38:	4b21      	ldr	r3, [pc, #132]	@ (8008fc0 <_svfiprintf_r+0x1ec>)
 8008f3a:	bb1b      	cbnz	r3, 8008f84 <_svfiprintf_r+0x1b0>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	3307      	adds	r3, #7
 8008f40:	f023 0307 	bic.w	r3, r3, #7
 8008f44:	3308      	adds	r3, #8
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4a:	4433      	add	r3, r6
 8008f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f4e:	e76a      	b.n	8008e26 <_svfiprintf_r+0x52>
 8008f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f54:	460c      	mov	r4, r1
 8008f56:	2001      	movs	r0, #1
 8008f58:	e7a8      	b.n	8008eac <_svfiprintf_r+0xd8>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	3401      	adds	r4, #1
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f04f 0c0a 	mov.w	ip, #10
 8008f66:	4620      	mov	r0, r4
 8008f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f6c:	3a30      	subs	r2, #48	@ 0x30
 8008f6e:	2a09      	cmp	r2, #9
 8008f70:	d903      	bls.n	8008f7a <_svfiprintf_r+0x1a6>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0c6      	beq.n	8008f04 <_svfiprintf_r+0x130>
 8008f76:	9105      	str	r1, [sp, #20]
 8008f78:	e7c4      	b.n	8008f04 <_svfiprintf_r+0x130>
 8008f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f7e:	4604      	mov	r4, r0
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7f0      	b.n	8008f66 <_svfiprintf_r+0x192>
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc4 <_svfiprintf_r+0x1f0>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7fd fa0a 	bl	80063a8 <_printf_float>
 8008f94:	1c42      	adds	r2, r0, #1
 8008f96:	4606      	mov	r6, r0
 8008f98:	d1d6      	bne.n	8008f48 <_svfiprintf_r+0x174>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	065b      	lsls	r3, r3, #25
 8008f9e:	f53f af2d 	bmi.w	8008dfc <_svfiprintf_r+0x28>
 8008fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa4:	e72c      	b.n	8008e00 <_svfiprintf_r+0x2c>
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	462a      	mov	r2, r5
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <_svfiprintf_r+0x1f0>)
 8008fae:	a904      	add	r1, sp, #16
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7fd fc91 	bl	80068d8 <_printf_i>
 8008fb6:	e7ed      	b.n	8008f94 <_svfiprintf_r+0x1c0>
 8008fb8:	0800a6c9 	.word	0x0800a6c9
 8008fbc:	0800a6d3 	.word	0x0800a6d3
 8008fc0:	080063a9 	.word	0x080063a9
 8008fc4:	08008d1d 	.word	0x08008d1d
 8008fc8:	0800a6cf 	.word	0x0800a6cf

08008fcc <__sfputc_r>:
 8008fcc:	6893      	ldr	r3, [r2, #8]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	b410      	push	{r4}
 8008fd4:	6093      	str	r3, [r2, #8]
 8008fd6:	da08      	bge.n	8008fea <__sfputc_r+0x1e>
 8008fd8:	6994      	ldr	r4, [r2, #24]
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	db01      	blt.n	8008fe2 <__sfputc_r+0x16>
 8008fde:	290a      	cmp	r1, #10
 8008fe0:	d103      	bne.n	8008fea <__sfputc_r+0x1e>
 8008fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe6:	f000 ba1b 	b.w	8009420 <__swbuf_r>
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	1c58      	adds	r0, r3, #1
 8008fee:	6010      	str	r0, [r2, #0]
 8008ff0:	7019      	strb	r1, [r3, #0]
 8008ff2:	4608      	mov	r0, r1
 8008ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <__sfputs_r>:
 8008ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	4614      	mov	r4, r2
 8009002:	18d5      	adds	r5, r2, r3
 8009004:	42ac      	cmp	r4, r5
 8009006:	d101      	bne.n	800900c <__sfputs_r+0x12>
 8009008:	2000      	movs	r0, #0
 800900a:	e007      	b.n	800901c <__sfputs_r+0x22>
 800900c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009010:	463a      	mov	r2, r7
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ffda 	bl	8008fcc <__sfputc_r>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d1f3      	bne.n	8009004 <__sfputs_r+0xa>
 800901c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009020 <_vfiprintf_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	460d      	mov	r5, r1
 8009026:	b09d      	sub	sp, #116	@ 0x74
 8009028:	4614      	mov	r4, r2
 800902a:	4698      	mov	r8, r3
 800902c:	4606      	mov	r6, r0
 800902e:	b118      	cbz	r0, 8009038 <_vfiprintf_r+0x18>
 8009030:	6a03      	ldr	r3, [r0, #32]
 8009032:	b90b      	cbnz	r3, 8009038 <_vfiprintf_r+0x18>
 8009034:	f7fd fdfc 	bl	8006c30 <__sinit>
 8009038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800903a:	07d9      	lsls	r1, r3, #31
 800903c:	d405      	bmi.n	800904a <_vfiprintf_r+0x2a>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	059a      	lsls	r2, r3, #22
 8009042:	d402      	bmi.n	800904a <_vfiprintf_r+0x2a>
 8009044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009046:	f7fe fb5b 	bl	8007700 <__retarget_lock_acquire_recursive>
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	071b      	lsls	r3, r3, #28
 800904e:	d501      	bpl.n	8009054 <_vfiprintf_r+0x34>
 8009050:	692b      	ldr	r3, [r5, #16]
 8009052:	b99b      	cbnz	r3, 800907c <_vfiprintf_r+0x5c>
 8009054:	4629      	mov	r1, r5
 8009056:	4630      	mov	r0, r6
 8009058:	f000 fa20 	bl	800949c <__swsetup_r>
 800905c:	b170      	cbz	r0, 800907c <_vfiprintf_r+0x5c>
 800905e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009060:	07dc      	lsls	r4, r3, #31
 8009062:	d504      	bpl.n	800906e <_vfiprintf_r+0x4e>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b01d      	add	sp, #116	@ 0x74
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	0598      	lsls	r0, r3, #22
 8009072:	d4f7      	bmi.n	8009064 <_vfiprintf_r+0x44>
 8009074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009076:	f7fe fb45 	bl	8007704 <__retarget_lock_release_recursive>
 800907a:	e7f3      	b.n	8009064 <_vfiprintf_r+0x44>
 800907c:	2300      	movs	r3, #0
 800907e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009080:	2320      	movs	r3, #32
 8009082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009086:	f8cd 800c 	str.w	r8, [sp, #12]
 800908a:	2330      	movs	r3, #48	@ 0x30
 800908c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800923c <_vfiprintf_r+0x21c>
 8009090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009094:	f04f 0901 	mov.w	r9, #1
 8009098:	4623      	mov	r3, r4
 800909a:	469a      	mov	sl, r3
 800909c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a0:	b10a      	cbz	r2, 80090a6 <_vfiprintf_r+0x86>
 80090a2:	2a25      	cmp	r2, #37	@ 0x25
 80090a4:	d1f9      	bne.n	800909a <_vfiprintf_r+0x7a>
 80090a6:	ebba 0b04 	subs.w	fp, sl, r4
 80090aa:	d00b      	beq.n	80090c4 <_vfiprintf_r+0xa4>
 80090ac:	465b      	mov	r3, fp
 80090ae:	4622      	mov	r2, r4
 80090b0:	4629      	mov	r1, r5
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ffa1 	bl	8008ffa <__sfputs_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	f000 80a7 	beq.w	800920c <_vfiprintf_r+0x1ec>
 80090be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c0:	445a      	add	r2, fp
 80090c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090c4:	f89a 3000 	ldrb.w	r3, [sl]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 809f 	beq.w	800920c <_vfiprintf_r+0x1ec>
 80090ce:	2300      	movs	r3, #0
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295
 80090d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d8:	f10a 0a01 	add.w	sl, sl, #1
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090e6:	4654      	mov	r4, sl
 80090e8:	2205      	movs	r2, #5
 80090ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ee:	4853      	ldr	r0, [pc, #332]	@ (800923c <_vfiprintf_r+0x21c>)
 80090f0:	f7f7 f87e 	bl	80001f0 <memchr>
 80090f4:	9a04      	ldr	r2, [sp, #16]
 80090f6:	b9d8      	cbnz	r0, 8009130 <_vfiprintf_r+0x110>
 80090f8:	06d1      	lsls	r1, r2, #27
 80090fa:	bf44      	itt	mi
 80090fc:	2320      	movmi	r3, #32
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009102:	0713      	lsls	r3, r2, #28
 8009104:	bf44      	itt	mi
 8009106:	232b      	movmi	r3, #43	@ 0x2b
 8009108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800910c:	f89a 3000 	ldrb.w	r3, [sl]
 8009110:	2b2a      	cmp	r3, #42	@ 0x2a
 8009112:	d015      	beq.n	8009140 <_vfiprintf_r+0x120>
 8009114:	9a07      	ldr	r2, [sp, #28]
 8009116:	4654      	mov	r4, sl
 8009118:	2000      	movs	r0, #0
 800911a:	f04f 0c0a 	mov.w	ip, #10
 800911e:	4621      	mov	r1, r4
 8009120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009124:	3b30      	subs	r3, #48	@ 0x30
 8009126:	2b09      	cmp	r3, #9
 8009128:	d94b      	bls.n	80091c2 <_vfiprintf_r+0x1a2>
 800912a:	b1b0      	cbz	r0, 800915a <_vfiprintf_r+0x13a>
 800912c:	9207      	str	r2, [sp, #28]
 800912e:	e014      	b.n	800915a <_vfiprintf_r+0x13a>
 8009130:	eba0 0308 	sub.w	r3, r0, r8
 8009134:	fa09 f303 	lsl.w	r3, r9, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	46a2      	mov	sl, r4
 800913e:	e7d2      	b.n	80090e6 <_vfiprintf_r+0xc6>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	1d19      	adds	r1, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	9103      	str	r1, [sp, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfbb      	ittet	lt
 800914c:	425b      	neglt	r3, r3
 800914e:	f042 0202 	orrlt.w	r2, r2, #2
 8009152:	9307      	strge	r3, [sp, #28]
 8009154:	9307      	strlt	r3, [sp, #28]
 8009156:	bfb8      	it	lt
 8009158:	9204      	strlt	r2, [sp, #16]
 800915a:	7823      	ldrb	r3, [r4, #0]
 800915c:	2b2e      	cmp	r3, #46	@ 0x2e
 800915e:	d10a      	bne.n	8009176 <_vfiprintf_r+0x156>
 8009160:	7863      	ldrb	r3, [r4, #1]
 8009162:	2b2a      	cmp	r3, #42	@ 0x2a
 8009164:	d132      	bne.n	80091cc <_vfiprintf_r+0x1ac>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	9203      	str	r2, [sp, #12]
 800916e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009172:	3402      	adds	r4, #2
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800924c <_vfiprintf_r+0x22c>
 800917a:	7821      	ldrb	r1, [r4, #0]
 800917c:	2203      	movs	r2, #3
 800917e:	4650      	mov	r0, sl
 8009180:	f7f7 f836 	bl	80001f0 <memchr>
 8009184:	b138      	cbz	r0, 8009196 <_vfiprintf_r+0x176>
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	eba0 000a 	sub.w	r0, r0, sl
 800918c:	2240      	movs	r2, #64	@ 0x40
 800918e:	4082      	lsls	r2, r0
 8009190:	4313      	orrs	r3, r2
 8009192:	3401      	adds	r4, #1
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919a:	4829      	ldr	r0, [pc, #164]	@ (8009240 <_vfiprintf_r+0x220>)
 800919c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091a0:	2206      	movs	r2, #6
 80091a2:	f7f7 f825 	bl	80001f0 <memchr>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d03f      	beq.n	800922a <_vfiprintf_r+0x20a>
 80091aa:	4b26      	ldr	r3, [pc, #152]	@ (8009244 <_vfiprintf_r+0x224>)
 80091ac:	bb1b      	cbnz	r3, 80091f6 <_vfiprintf_r+0x1d6>
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	3307      	adds	r3, #7
 80091b2:	f023 0307 	bic.w	r3, r3, #7
 80091b6:	3308      	adds	r3, #8
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091bc:	443b      	add	r3, r7
 80091be:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c0:	e76a      	b.n	8009098 <_vfiprintf_r+0x78>
 80091c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c6:	460c      	mov	r4, r1
 80091c8:	2001      	movs	r0, #1
 80091ca:	e7a8      	b.n	800911e <_vfiprintf_r+0xfe>
 80091cc:	2300      	movs	r3, #0
 80091ce:	3401      	adds	r4, #1
 80091d0:	9305      	str	r3, [sp, #20]
 80091d2:	4619      	mov	r1, r3
 80091d4:	f04f 0c0a 	mov.w	ip, #10
 80091d8:	4620      	mov	r0, r4
 80091da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091de:	3a30      	subs	r2, #48	@ 0x30
 80091e0:	2a09      	cmp	r2, #9
 80091e2:	d903      	bls.n	80091ec <_vfiprintf_r+0x1cc>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0c6      	beq.n	8009176 <_vfiprintf_r+0x156>
 80091e8:	9105      	str	r1, [sp, #20]
 80091ea:	e7c4      	b.n	8009176 <_vfiprintf_r+0x156>
 80091ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f0:	4604      	mov	r4, r0
 80091f2:	2301      	movs	r3, #1
 80091f4:	e7f0      	b.n	80091d8 <_vfiprintf_r+0x1b8>
 80091f6:	ab03      	add	r3, sp, #12
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	462a      	mov	r2, r5
 80091fc:	4b12      	ldr	r3, [pc, #72]	@ (8009248 <_vfiprintf_r+0x228>)
 80091fe:	a904      	add	r1, sp, #16
 8009200:	4630      	mov	r0, r6
 8009202:	f7fd f8d1 	bl	80063a8 <_printf_float>
 8009206:	4607      	mov	r7, r0
 8009208:	1c78      	adds	r0, r7, #1
 800920a:	d1d6      	bne.n	80091ba <_vfiprintf_r+0x19a>
 800920c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800920e:	07d9      	lsls	r1, r3, #31
 8009210:	d405      	bmi.n	800921e <_vfiprintf_r+0x1fe>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	059a      	lsls	r2, r3, #22
 8009216:	d402      	bmi.n	800921e <_vfiprintf_r+0x1fe>
 8009218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800921a:	f7fe fa73 	bl	8007704 <__retarget_lock_release_recursive>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	065b      	lsls	r3, r3, #25
 8009222:	f53f af1f 	bmi.w	8009064 <_vfiprintf_r+0x44>
 8009226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009228:	e71e      	b.n	8009068 <_vfiprintf_r+0x48>
 800922a:	ab03      	add	r3, sp, #12
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	462a      	mov	r2, r5
 8009230:	4b05      	ldr	r3, [pc, #20]	@ (8009248 <_vfiprintf_r+0x228>)
 8009232:	a904      	add	r1, sp, #16
 8009234:	4630      	mov	r0, r6
 8009236:	f7fd fb4f 	bl	80068d8 <_printf_i>
 800923a:	e7e4      	b.n	8009206 <_vfiprintf_r+0x1e6>
 800923c:	0800a6c9 	.word	0x0800a6c9
 8009240:	0800a6d3 	.word	0x0800a6d3
 8009244:	080063a9 	.word	0x080063a9
 8009248:	08008ffb 	.word	0x08008ffb
 800924c:	0800a6cf 	.word	0x0800a6cf

08009250 <__sflush_r>:
 8009250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	0716      	lsls	r6, r2, #28
 800925a:	4605      	mov	r5, r0
 800925c:	460c      	mov	r4, r1
 800925e:	d454      	bmi.n	800930a <__sflush_r+0xba>
 8009260:	684b      	ldr	r3, [r1, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc02      	bgt.n	800926c <__sflush_r+0x1c>
 8009266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	dd48      	ble.n	80092fe <__sflush_r+0xae>
 800926c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800926e:	2e00      	cmp	r6, #0
 8009270:	d045      	beq.n	80092fe <__sflush_r+0xae>
 8009272:	2300      	movs	r3, #0
 8009274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009278:	682f      	ldr	r7, [r5, #0]
 800927a:	6a21      	ldr	r1, [r4, #32]
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	d030      	beq.n	80092e2 <__sflush_r+0x92>
 8009280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	0759      	lsls	r1, r3, #29
 8009286:	d505      	bpl.n	8009294 <__sflush_r+0x44>
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800928e:	b10b      	cbz	r3, 8009294 <__sflush_r+0x44>
 8009290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	2300      	movs	r3, #0
 8009296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009298:	6a21      	ldr	r1, [r4, #32]
 800929a:	4628      	mov	r0, r5
 800929c:	47b0      	blx	r6
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	d106      	bne.n	80092b2 <__sflush_r+0x62>
 80092a4:	6829      	ldr	r1, [r5, #0]
 80092a6:	291d      	cmp	r1, #29
 80092a8:	d82b      	bhi.n	8009302 <__sflush_r+0xb2>
 80092aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009354 <__sflush_r+0x104>)
 80092ac:	410a      	asrs	r2, r1
 80092ae:	07d6      	lsls	r6, r2, #31
 80092b0:	d427      	bmi.n	8009302 <__sflush_r+0xb2>
 80092b2:	2200      	movs	r2, #0
 80092b4:	6062      	str	r2, [r4, #4]
 80092b6:	04d9      	lsls	r1, r3, #19
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	d504      	bpl.n	80092c8 <__sflush_r+0x78>
 80092be:	1c42      	adds	r2, r0, #1
 80092c0:	d101      	bne.n	80092c6 <__sflush_r+0x76>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	b903      	cbnz	r3, 80092c8 <__sflush_r+0x78>
 80092c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80092c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ca:	602f      	str	r7, [r5, #0]
 80092cc:	b1b9      	cbz	r1, 80092fe <__sflush_r+0xae>
 80092ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d002      	beq.n	80092dc <__sflush_r+0x8c>
 80092d6:	4628      	mov	r0, r5
 80092d8:	f7ff f896 	bl	8008408 <_free_r>
 80092dc:	2300      	movs	r3, #0
 80092de:	6363      	str	r3, [r4, #52]	@ 0x34
 80092e0:	e00d      	b.n	80092fe <__sflush_r+0xae>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	4602      	mov	r2, r0
 80092ea:	1c50      	adds	r0, r2, #1
 80092ec:	d1c9      	bne.n	8009282 <__sflush_r+0x32>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0c6      	beq.n	8009282 <__sflush_r+0x32>
 80092f4:	2b1d      	cmp	r3, #29
 80092f6:	d001      	beq.n	80092fc <__sflush_r+0xac>
 80092f8:	2b16      	cmp	r3, #22
 80092fa:	d11e      	bne.n	800933a <__sflush_r+0xea>
 80092fc:	602f      	str	r7, [r5, #0]
 80092fe:	2000      	movs	r0, #0
 8009300:	e022      	b.n	8009348 <__sflush_r+0xf8>
 8009302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009306:	b21b      	sxth	r3, r3
 8009308:	e01b      	b.n	8009342 <__sflush_r+0xf2>
 800930a:	690f      	ldr	r7, [r1, #16]
 800930c:	2f00      	cmp	r7, #0
 800930e:	d0f6      	beq.n	80092fe <__sflush_r+0xae>
 8009310:	0793      	lsls	r3, r2, #30
 8009312:	680e      	ldr	r6, [r1, #0]
 8009314:	bf08      	it	eq
 8009316:	694b      	ldreq	r3, [r1, #20]
 8009318:	600f      	str	r7, [r1, #0]
 800931a:	bf18      	it	ne
 800931c:	2300      	movne	r3, #0
 800931e:	eba6 0807 	sub.w	r8, r6, r7
 8009322:	608b      	str	r3, [r1, #8]
 8009324:	f1b8 0f00 	cmp.w	r8, #0
 8009328:	dde9      	ble.n	80092fe <__sflush_r+0xae>
 800932a:	6a21      	ldr	r1, [r4, #32]
 800932c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800932e:	4643      	mov	r3, r8
 8009330:	463a      	mov	r2, r7
 8009332:	4628      	mov	r0, r5
 8009334:	47b0      	blx	r6
 8009336:	2800      	cmp	r0, #0
 8009338:	dc08      	bgt.n	800934c <__sflush_r+0xfc>
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	4407      	add	r7, r0
 800934e:	eba8 0800 	sub.w	r8, r8, r0
 8009352:	e7e7      	b.n	8009324 <__sflush_r+0xd4>
 8009354:	dfbffffe 	.word	0xdfbffffe

08009358 <_fflush_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b913      	cbnz	r3, 8009368 <_fflush_r+0x10>
 8009362:	2500      	movs	r5, #0
 8009364:	4628      	mov	r0, r5
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	b118      	cbz	r0, 8009372 <_fflush_r+0x1a>
 800936a:	6a03      	ldr	r3, [r0, #32]
 800936c:	b90b      	cbnz	r3, 8009372 <_fflush_r+0x1a>
 800936e:	f7fd fc5f 	bl	8006c30 <__sinit>
 8009372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f3      	beq.n	8009362 <_fflush_r+0xa>
 800937a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800937c:	07d0      	lsls	r0, r2, #31
 800937e:	d404      	bmi.n	800938a <_fflush_r+0x32>
 8009380:	0599      	lsls	r1, r3, #22
 8009382:	d402      	bmi.n	800938a <_fflush_r+0x32>
 8009384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009386:	f7fe f9bb 	bl	8007700 <__retarget_lock_acquire_recursive>
 800938a:	4628      	mov	r0, r5
 800938c:	4621      	mov	r1, r4
 800938e:	f7ff ff5f 	bl	8009250 <__sflush_r>
 8009392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	4605      	mov	r5, r0
 8009398:	d4e4      	bmi.n	8009364 <_fflush_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	059b      	lsls	r3, r3, #22
 800939e:	d4e1      	bmi.n	8009364 <_fflush_r+0xc>
 80093a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093a2:	f7fe f9af 	bl	8007704 <__retarget_lock_release_recursive>
 80093a6:	e7dd      	b.n	8009364 <_fflush_r+0xc>

080093a8 <fiprintf>:
 80093a8:	b40e      	push	{r1, r2, r3}
 80093aa:	b503      	push	{r0, r1, lr}
 80093ac:	4601      	mov	r1, r0
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	4805      	ldr	r0, [pc, #20]	@ (80093c8 <fiprintf+0x20>)
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	6800      	ldr	r0, [r0, #0]
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	f7ff fe31 	bl	8009020 <_vfiprintf_r>
 80093be:	b002      	add	sp, #8
 80093c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c4:	b003      	add	sp, #12
 80093c6:	4770      	bx	lr
 80093c8:	20000030 	.word	0x20000030

080093cc <siscanf>:
 80093cc:	b40e      	push	{r1, r2, r3}
 80093ce:	b530      	push	{r4, r5, lr}
 80093d0:	b09c      	sub	sp, #112	@ 0x70
 80093d2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80093d4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80093d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80093dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80093e0:	9002      	str	r0, [sp, #8]
 80093e2:	9006      	str	r0, [sp, #24]
 80093e4:	f7f6 ff54 	bl	8000290 <strlen>
 80093e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <siscanf+0x4c>)
 80093ea:	9003      	str	r0, [sp, #12]
 80093ec:	9007      	str	r0, [sp, #28]
 80093ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093f0:	480a      	ldr	r0, [pc, #40]	@ (800941c <siscanf+0x50>)
 80093f2:	9401      	str	r4, [sp, #4]
 80093f4:	2300      	movs	r3, #0
 80093f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80093fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009402:	462a      	mov	r2, r5
 8009404:	4623      	mov	r3, r4
 8009406:	a902      	add	r1, sp, #8
 8009408:	6800      	ldr	r0, [r0, #0]
 800940a:	f000 fa41 	bl	8009890 <__ssvfiscanf_r>
 800940e:	b01c      	add	sp, #112	@ 0x70
 8009410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009414:	b003      	add	sp, #12
 8009416:	4770      	bx	lr
 8009418:	08006d4b 	.word	0x08006d4b
 800941c:	20000030 	.word	0x20000030

08009420 <__swbuf_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	460e      	mov	r6, r1
 8009424:	4614      	mov	r4, r2
 8009426:	4605      	mov	r5, r0
 8009428:	b118      	cbz	r0, 8009432 <__swbuf_r+0x12>
 800942a:	6a03      	ldr	r3, [r0, #32]
 800942c:	b90b      	cbnz	r3, 8009432 <__swbuf_r+0x12>
 800942e:	f7fd fbff 	bl	8006c30 <__sinit>
 8009432:	69a3      	ldr	r3, [r4, #24]
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	071a      	lsls	r2, r3, #28
 800943a:	d501      	bpl.n	8009440 <__swbuf_r+0x20>
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	b943      	cbnz	r3, 8009452 <__swbuf_r+0x32>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f82a 	bl	800949c <__swsetup_r>
 8009448:	b118      	cbz	r0, 8009452 <__swbuf_r+0x32>
 800944a:	f04f 37ff 	mov.w	r7, #4294967295
 800944e:	4638      	mov	r0, r7
 8009450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	1a98      	subs	r0, r3, r2
 8009458:	6963      	ldr	r3, [r4, #20]
 800945a:	b2f6      	uxtb	r6, r6
 800945c:	4283      	cmp	r3, r0
 800945e:	4637      	mov	r7, r6
 8009460:	dc05      	bgt.n	800946e <__swbuf_r+0x4e>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f7ff ff77 	bl	8009358 <_fflush_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	d1ed      	bne.n	800944a <__swbuf_r+0x2a>
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	60a3      	str	r3, [r4, #8]
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	701e      	strb	r6, [r3, #0]
 800947c:	6962      	ldr	r2, [r4, #20]
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	429a      	cmp	r2, r3
 8009482:	d004      	beq.n	800948e <__swbuf_r+0x6e>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	07db      	lsls	r3, r3, #31
 8009488:	d5e1      	bpl.n	800944e <__swbuf_r+0x2e>
 800948a:	2e0a      	cmp	r6, #10
 800948c:	d1df      	bne.n	800944e <__swbuf_r+0x2e>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff ff61 	bl	8009358 <_fflush_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0d9      	beq.n	800944e <__swbuf_r+0x2e>
 800949a:	e7d6      	b.n	800944a <__swbuf_r+0x2a>

0800949c <__swsetup_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4b29      	ldr	r3, [pc, #164]	@ (8009544 <__swsetup_r+0xa8>)
 80094a0:	4605      	mov	r5, r0
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	460c      	mov	r4, r1
 80094a6:	b118      	cbz	r0, 80094b0 <__swsetup_r+0x14>
 80094a8:	6a03      	ldr	r3, [r0, #32]
 80094aa:	b90b      	cbnz	r3, 80094b0 <__swsetup_r+0x14>
 80094ac:	f7fd fbc0 	bl	8006c30 <__sinit>
 80094b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b4:	0719      	lsls	r1, r3, #28
 80094b6:	d422      	bmi.n	80094fe <__swsetup_r+0x62>
 80094b8:	06da      	lsls	r2, r3, #27
 80094ba:	d407      	bmi.n	80094cc <__swsetup_r+0x30>
 80094bc:	2209      	movs	r2, #9
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e033      	b.n	8009534 <__swsetup_r+0x98>
 80094cc:	0758      	lsls	r0, r3, #29
 80094ce:	d512      	bpl.n	80094f6 <__swsetup_r+0x5a>
 80094d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094d2:	b141      	cbz	r1, 80094e6 <__swsetup_r+0x4a>
 80094d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094d8:	4299      	cmp	r1, r3
 80094da:	d002      	beq.n	80094e2 <__swsetup_r+0x46>
 80094dc:	4628      	mov	r0, r5
 80094de:	f7fe ff93 	bl	8008408 <_free_r>
 80094e2:	2300      	movs	r3, #0
 80094e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6063      	str	r3, [r4, #4]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f043 0308 	orr.w	r3, r3, #8
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	b94b      	cbnz	r3, 8009516 <__swsetup_r+0x7a>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800950c:	d003      	beq.n	8009516 <__swsetup_r+0x7a>
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 fca5 	bl	8009e60 <__smakebuf_r>
 8009516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951a:	f013 0201 	ands.w	r2, r3, #1
 800951e:	d00a      	beq.n	8009536 <__swsetup_r+0x9a>
 8009520:	2200      	movs	r2, #0
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6962      	ldr	r2, [r4, #20]
 8009526:	4252      	negs	r2, r2
 8009528:	61a2      	str	r2, [r4, #24]
 800952a:	6922      	ldr	r2, [r4, #16]
 800952c:	b942      	cbnz	r2, 8009540 <__swsetup_r+0xa4>
 800952e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009532:	d1c5      	bne.n	80094c0 <__swsetup_r+0x24>
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	0799      	lsls	r1, r3, #30
 8009538:	bf58      	it	pl
 800953a:	6962      	ldrpl	r2, [r4, #20]
 800953c:	60a2      	str	r2, [r4, #8]
 800953e:	e7f4      	b.n	800952a <__swsetup_r+0x8e>
 8009540:	2000      	movs	r0, #0
 8009542:	e7f7      	b.n	8009534 <__swsetup_r+0x98>
 8009544:	20000030 	.word	0x20000030

08009548 <memmove>:
 8009548:	4288      	cmp	r0, r1
 800954a:	b510      	push	{r4, lr}
 800954c:	eb01 0402 	add.w	r4, r1, r2
 8009550:	d902      	bls.n	8009558 <memmove+0x10>
 8009552:	4284      	cmp	r4, r0
 8009554:	4623      	mov	r3, r4
 8009556:	d807      	bhi.n	8009568 <memmove+0x20>
 8009558:	1e43      	subs	r3, r0, #1
 800955a:	42a1      	cmp	r1, r4
 800955c:	d008      	beq.n	8009570 <memmove+0x28>
 800955e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009566:	e7f8      	b.n	800955a <memmove+0x12>
 8009568:	4402      	add	r2, r0
 800956a:	4601      	mov	r1, r0
 800956c:	428a      	cmp	r2, r1
 800956e:	d100      	bne.n	8009572 <memmove+0x2a>
 8009570:	bd10      	pop	{r4, pc}
 8009572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800957a:	e7f7      	b.n	800956c <memmove+0x24>

0800957c <strncmp>:
 800957c:	b510      	push	{r4, lr}
 800957e:	b16a      	cbz	r2, 800959c <strncmp+0x20>
 8009580:	3901      	subs	r1, #1
 8009582:	1884      	adds	r4, r0, r2
 8009584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009588:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800958c:	429a      	cmp	r2, r3
 800958e:	d103      	bne.n	8009598 <strncmp+0x1c>
 8009590:	42a0      	cmp	r0, r4
 8009592:	d001      	beq.n	8009598 <strncmp+0x1c>
 8009594:	2a00      	cmp	r2, #0
 8009596:	d1f5      	bne.n	8009584 <strncmp+0x8>
 8009598:	1ad0      	subs	r0, r2, r3
 800959a:	bd10      	pop	{r4, pc}
 800959c:	4610      	mov	r0, r2
 800959e:	e7fc      	b.n	800959a <strncmp+0x1e>

080095a0 <__gettzinfo>:
 80095a0:	4800      	ldr	r0, [pc, #0]	@ (80095a4 <__gettzinfo+0x4>)
 80095a2:	4770      	bx	lr
 80095a4:	20000080 	.word	0x20000080

080095a8 <gmtime_r>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	4a4d      	ldr	r2, [pc, #308]	@ (80096e4 <gmtime_r+0x13c>)
 80095ae:	460c      	mov	r4, r1
 80095b0:	2300      	movs	r3, #0
 80095b2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80095b6:	f7f7 fb07 	bl	8000bc8 <__aeabi_ldivmod>
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	bfbc      	itt	lt
 80095be:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80095c2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80095c6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80095ca:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80095ce:	fbb2 f3f1 	udiv	r3, r2, r1
 80095d2:	fb01 2213 	mls	r2, r1, r3, r2
 80095d6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80095da:	bfac      	ite	ge
 80095dc:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80095e0:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80095e4:	60a3      	str	r3, [r4, #8]
 80095e6:	fbb2 f3f1 	udiv	r3, r2, r1
 80095ea:	fb01 2213 	mls	r2, r1, r3, r2
 80095ee:	6063      	str	r3, [r4, #4]
 80095f0:	6022      	str	r2, [r4, #0]
 80095f2:	1cc3      	adds	r3, r0, #3
 80095f4:	2207      	movs	r2, #7
 80095f6:	fb93 f2f2 	sdiv	r2, r3, r2
 80095fa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	bf48      	it	mi
 8009602:	3307      	addmi	r3, #7
 8009604:	2800      	cmp	r0, #0
 8009606:	61a3      	str	r3, [r4, #24]
 8009608:	bfb8      	it	lt
 800960a:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800960e:	4936      	ldr	r1, [pc, #216]	@ (80096e8 <gmtime_r+0x140>)
 8009610:	bfae      	itee	ge
 8009612:	fb90 f1f1 	sdivge	r1, r0, r1
 8009616:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800961a:	fb93 f1f1 	sdivlt	r1, r3, r1
 800961e:	4b33      	ldr	r3, [pc, #204]	@ (80096ec <gmtime_r+0x144>)
 8009620:	fb03 0001 	mla	r0, r3, r1, r0
 8009624:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8009628:	fbb0 f3f3 	udiv	r3, r0, r3
 800962c:	4403      	add	r3, r0
 800962e:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8009632:	fbb0 f2fc 	udiv	r2, r0, ip
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	f240 176d 	movw	r7, #365	@ 0x16d
 800963c:	4a2c      	ldr	r2, [pc, #176]	@ (80096f0 <gmtime_r+0x148>)
 800963e:	fbb0 f2f2 	udiv	r2, r0, r2
 8009642:	2664      	movs	r6, #100	@ 0x64
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	fbb3 f2f7 	udiv	r2, r3, r7
 800964a:	fbb3 f3fc 	udiv	r3, r3, ip
 800964e:	fbb2 f5f6 	udiv	r5, r2, r6
 8009652:	1aeb      	subs	r3, r5, r3
 8009654:	4403      	add	r3, r0
 8009656:	fb07 3312 	mls	r3, r7, r2, r3
 800965a:	2099      	movs	r0, #153	@ 0x99
 800965c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8009660:	3702      	adds	r7, #2
 8009662:	f103 0e01 	add.w	lr, r3, #1
 8009666:	fbb7 fcf0 	udiv	ip, r7, r0
 800966a:	fb00 f00c 	mul.w	r0, r0, ip
 800966e:	3002      	adds	r0, #2
 8009670:	f04f 0805 	mov.w	r8, #5
 8009674:	fbb0 f0f8 	udiv	r0, r0, r8
 8009678:	ebae 0000 	sub.w	r0, lr, r0
 800967c:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8009680:	4577      	cmp	r7, lr
 8009682:	bf8c      	ite	hi
 8009684:	f06f 0709 	mvnhi.w	r7, #9
 8009688:	2702      	movls	r7, #2
 800968a:	4467      	add	r7, ip
 800968c:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8009690:	fb0c 2101 	mla	r1, ip, r1, r2
 8009694:	2f01      	cmp	r7, #1
 8009696:	bf98      	it	ls
 8009698:	3101      	addls	r1, #1
 800969a:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800969e:	d30c      	bcc.n	80096ba <gmtime_r+0x112>
 80096a0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80096a4:	61e3      	str	r3, [r4, #28]
 80096a6:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 80096aa:	2300      	movs	r3, #0
 80096ac:	60e0      	str	r0, [r4, #12]
 80096ae:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80096b2:	6223      	str	r3, [r4, #32]
 80096b4:	4620      	mov	r0, r4
 80096b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ba:	f012 0f03 	tst.w	r2, #3
 80096be:	d102      	bne.n	80096c6 <gmtime_r+0x11e>
 80096c0:	fb06 2515 	mls	r5, r6, r5, r2
 80096c4:	b95d      	cbnz	r5, 80096de <gmtime_r+0x136>
 80096c6:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80096ca:	fbb2 f6f5 	udiv	r6, r2, r5
 80096ce:	fb05 2216 	mls	r2, r5, r6, r2
 80096d2:	fab2 f282 	clz	r2, r2
 80096d6:	0952      	lsrs	r2, r2, #5
 80096d8:	333b      	adds	r3, #59	@ 0x3b
 80096da:	4413      	add	r3, r2
 80096dc:	e7e2      	b.n	80096a4 <gmtime_r+0xfc>
 80096de:	2201      	movs	r2, #1
 80096e0:	e7fa      	b.n	80096d8 <gmtime_r+0x130>
 80096e2:	bf00      	nop
 80096e4:	00015180 	.word	0x00015180
 80096e8:	00023ab1 	.word	0x00023ab1
 80096ec:	fffdc54f 	.word	0xfffdc54f
 80096f0:	00023ab0 	.word	0x00023ab0

080096f4 <abort>:
 80096f4:	b508      	push	{r3, lr}
 80096f6:	2006      	movs	r0, #6
 80096f8:	f000 fc8a 	bl	800a010 <raise>
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7f8 fa91 	bl	8001c24 <_exit>

08009702 <_calloc_r>:
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	fba1 5402 	umull	r5, r4, r1, r2
 8009708:	b93c      	cbnz	r4, 800971a <_calloc_r+0x18>
 800970a:	4629      	mov	r1, r5
 800970c:	f7fc fd20 	bl	8006150 <_malloc_r>
 8009710:	4606      	mov	r6, r0
 8009712:	b928      	cbnz	r0, 8009720 <_calloc_r+0x1e>
 8009714:	2600      	movs	r6, #0
 8009716:	4630      	mov	r0, r6
 8009718:	bd70      	pop	{r4, r5, r6, pc}
 800971a:	220c      	movs	r2, #12
 800971c:	6002      	str	r2, [r0, #0]
 800971e:	e7f9      	b.n	8009714 <_calloc_r+0x12>
 8009720:	462a      	mov	r2, r5
 8009722:	4621      	mov	r1, r4
 8009724:	f7fd fb45 	bl	8006db2 <memset>
 8009728:	e7f5      	b.n	8009716 <_calloc_r+0x14>
	...

0800972c <__env_lock>:
 800972c:	4801      	ldr	r0, [pc, #4]	@ (8009734 <__env_lock+0x8>)
 800972e:	f7fd bfe7 	b.w	8007700 <__retarget_lock_acquire_recursive>
 8009732:	bf00      	nop
 8009734:	20000825 	.word	0x20000825

08009738 <__env_unlock>:
 8009738:	4801      	ldr	r0, [pc, #4]	@ (8009740 <__env_unlock+0x8>)
 800973a:	f7fd bfe3 	b.w	8007704 <__retarget_lock_release_recursive>
 800973e:	bf00      	nop
 8009740:	20000825 	.word	0x20000825

08009744 <__ascii_mbtowc>:
 8009744:	b082      	sub	sp, #8
 8009746:	b901      	cbnz	r1, 800974a <__ascii_mbtowc+0x6>
 8009748:	a901      	add	r1, sp, #4
 800974a:	b142      	cbz	r2, 800975e <__ascii_mbtowc+0x1a>
 800974c:	b14b      	cbz	r3, 8009762 <__ascii_mbtowc+0x1e>
 800974e:	7813      	ldrb	r3, [r2, #0]
 8009750:	600b      	str	r3, [r1, #0]
 8009752:	7812      	ldrb	r2, [r2, #0]
 8009754:	1e10      	subs	r0, r2, #0
 8009756:	bf18      	it	ne
 8009758:	2001      	movne	r0, #1
 800975a:	b002      	add	sp, #8
 800975c:	4770      	bx	lr
 800975e:	4610      	mov	r0, r2
 8009760:	e7fb      	b.n	800975a <__ascii_mbtowc+0x16>
 8009762:	f06f 0001 	mvn.w	r0, #1
 8009766:	e7f8      	b.n	800975a <__ascii_mbtowc+0x16>

08009768 <_realloc_r>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	4680      	mov	r8, r0
 800976e:	4615      	mov	r5, r2
 8009770:	460c      	mov	r4, r1
 8009772:	b921      	cbnz	r1, 800977e <_realloc_r+0x16>
 8009774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	4611      	mov	r1, r2
 800977a:	f7fc bce9 	b.w	8006150 <_malloc_r>
 800977e:	b92a      	cbnz	r2, 800978c <_realloc_r+0x24>
 8009780:	f7fe fe42 	bl	8008408 <_free_r>
 8009784:	2400      	movs	r4, #0
 8009786:	4620      	mov	r0, r4
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	f000 fc7e 	bl	800a08c <_malloc_usable_size_r>
 8009790:	4285      	cmp	r5, r0
 8009792:	4606      	mov	r6, r0
 8009794:	d802      	bhi.n	800979c <_realloc_r+0x34>
 8009796:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800979a:	d8f4      	bhi.n	8009786 <_realloc_r+0x1e>
 800979c:	4629      	mov	r1, r5
 800979e:	4640      	mov	r0, r8
 80097a0:	f7fc fcd6 	bl	8006150 <_malloc_r>
 80097a4:	4607      	mov	r7, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d0ec      	beq.n	8009784 <_realloc_r+0x1c>
 80097aa:	42b5      	cmp	r5, r6
 80097ac:	462a      	mov	r2, r5
 80097ae:	4621      	mov	r1, r4
 80097b0:	bf28      	it	cs
 80097b2:	4632      	movcs	r2, r6
 80097b4:	f7fd ffaf 	bl	8007716 <memcpy>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7fe fe24 	bl	8008408 <_free_r>
 80097c0:	463c      	mov	r4, r7
 80097c2:	e7e0      	b.n	8009786 <_realloc_r+0x1e>

080097c4 <__ascii_wctomb>:
 80097c4:	4603      	mov	r3, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	b141      	cbz	r1, 80097dc <__ascii_wctomb+0x18>
 80097ca:	2aff      	cmp	r2, #255	@ 0xff
 80097cc:	d904      	bls.n	80097d8 <__ascii_wctomb+0x14>
 80097ce:	228a      	movs	r2, #138	@ 0x8a
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	4770      	bx	lr
 80097d8:	700a      	strb	r2, [r1, #0]
 80097da:	2001      	movs	r0, #1
 80097dc:	4770      	bx	lr

080097de <_sungetc_r>:
 80097de:	b538      	push	{r3, r4, r5, lr}
 80097e0:	1c4b      	adds	r3, r1, #1
 80097e2:	4614      	mov	r4, r2
 80097e4:	d103      	bne.n	80097ee <_sungetc_r+0x10>
 80097e6:	f04f 35ff 	mov.w	r5, #4294967295
 80097ea:	4628      	mov	r0, r5
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	8993      	ldrh	r3, [r2, #12]
 80097f0:	f023 0320 	bic.w	r3, r3, #32
 80097f4:	8193      	strh	r3, [r2, #12]
 80097f6:	6853      	ldr	r3, [r2, #4]
 80097f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80097fa:	b2cd      	uxtb	r5, r1
 80097fc:	b18a      	cbz	r2, 8009822 <_sungetc_r+0x44>
 80097fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009800:	429a      	cmp	r2, r3
 8009802:	dd08      	ble.n	8009816 <_sungetc_r+0x38>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	1e5a      	subs	r2, r3, #1
 8009808:	6022      	str	r2, [r4, #0]
 800980a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	3301      	adds	r3, #1
 8009812:	6063      	str	r3, [r4, #4]
 8009814:	e7e9      	b.n	80097ea <_sungetc_r+0xc>
 8009816:	4621      	mov	r1, r4
 8009818:	f000 fb97 	bl	8009f4a <__submore>
 800981c:	2800      	cmp	r0, #0
 800981e:	d0f1      	beq.n	8009804 <_sungetc_r+0x26>
 8009820:	e7e1      	b.n	80097e6 <_sungetc_r+0x8>
 8009822:	6921      	ldr	r1, [r4, #16]
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	b141      	cbz	r1, 800983a <_sungetc_r+0x5c>
 8009828:	4291      	cmp	r1, r2
 800982a:	d206      	bcs.n	800983a <_sungetc_r+0x5c>
 800982c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009830:	42a9      	cmp	r1, r5
 8009832:	d102      	bne.n	800983a <_sungetc_r+0x5c>
 8009834:	3a01      	subs	r2, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	e7ea      	b.n	8009810 <_sungetc_r+0x32>
 800983a:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800983e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009842:	6363      	str	r3, [r4, #52]	@ 0x34
 8009844:	2303      	movs	r3, #3
 8009846:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009848:	4623      	mov	r3, r4
 800984a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	2301      	movs	r3, #1
 8009852:	e7de      	b.n	8009812 <_sungetc_r+0x34>

08009854 <__ssrefill_r>:
 8009854:	b510      	push	{r4, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800985a:	b169      	cbz	r1, 8009878 <__ssrefill_r+0x24>
 800985c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009860:	4299      	cmp	r1, r3
 8009862:	d001      	beq.n	8009868 <__ssrefill_r+0x14>
 8009864:	f7fe fdd0 	bl	8008408 <_free_r>
 8009868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	2000      	movs	r0, #0
 800986e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009870:	b113      	cbz	r3, 8009878 <__ssrefill_r+0x24>
 8009872:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd10      	pop	{r4, pc}
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	6063      	str	r3, [r4, #4]
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	f043 0320 	orr.w	r3, r3, #32
 8009886:	81a3      	strh	r3, [r4, #12]
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	e7f3      	b.n	8009876 <__ssrefill_r+0x22>
	...

08009890 <__ssvfiscanf_r>:
 8009890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009894:	460c      	mov	r4, r1
 8009896:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800989a:	2100      	movs	r1, #0
 800989c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80098a0:	49a5      	ldr	r1, [pc, #660]	@ (8009b38 <__ssvfiscanf_r+0x2a8>)
 80098a2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80098a4:	f10d 0804 	add.w	r8, sp, #4
 80098a8:	49a4      	ldr	r1, [pc, #656]	@ (8009b3c <__ssvfiscanf_r+0x2ac>)
 80098aa:	4fa5      	ldr	r7, [pc, #660]	@ (8009b40 <__ssvfiscanf_r+0x2b0>)
 80098ac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80098b0:	4606      	mov	r6, r0
 80098b2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	7813      	ldrb	r3, [r2, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 8158 	beq.w	8009b6e <__ssvfiscanf_r+0x2de>
 80098be:	5cf9      	ldrb	r1, [r7, r3]
 80098c0:	f011 0108 	ands.w	r1, r1, #8
 80098c4:	f102 0501 	add.w	r5, r2, #1
 80098c8:	d019      	beq.n	80098fe <__ssvfiscanf_r+0x6e>
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dd0f      	ble.n	80098f0 <__ssvfiscanf_r+0x60>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	5cba      	ldrb	r2, [r7, r2]
 80098d6:	0712      	lsls	r2, r2, #28
 80098d8:	d401      	bmi.n	80098de <__ssvfiscanf_r+0x4e>
 80098da:	462a      	mov	r2, r5
 80098dc:	e7eb      	b.n	80098b6 <__ssvfiscanf_r+0x26>
 80098de:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80098e0:	3201      	adds	r2, #1
 80098e2:	9245      	str	r2, [sp, #276]	@ 0x114
 80098e4:	6862      	ldr	r2, [r4, #4]
 80098e6:	3301      	adds	r3, #1
 80098e8:	3a01      	subs	r2, #1
 80098ea:	6062      	str	r2, [r4, #4]
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	e7ec      	b.n	80098ca <__ssvfiscanf_r+0x3a>
 80098f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098f2:	4621      	mov	r1, r4
 80098f4:	4630      	mov	r0, r6
 80098f6:	4798      	blx	r3
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0e9      	beq.n	80098d0 <__ssvfiscanf_r+0x40>
 80098fc:	e7ed      	b.n	80098da <__ssvfiscanf_r+0x4a>
 80098fe:	2b25      	cmp	r3, #37	@ 0x25
 8009900:	d012      	beq.n	8009928 <__ssvfiscanf_r+0x98>
 8009902:	4699      	mov	r9, r3
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f340 8093 	ble.w	8009a32 <__ssvfiscanf_r+0x1a2>
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	7813      	ldrb	r3, [r2, #0]
 8009910:	454b      	cmp	r3, r9
 8009912:	f040 812c 	bne.w	8009b6e <__ssvfiscanf_r+0x2de>
 8009916:	6863      	ldr	r3, [r4, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	6063      	str	r3, [r4, #4]
 800991c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800991e:	3201      	adds	r2, #1
 8009920:	3301      	adds	r3, #1
 8009922:	6022      	str	r2, [r4, #0]
 8009924:	9345      	str	r3, [sp, #276]	@ 0x114
 8009926:	e7d8      	b.n	80098da <__ssvfiscanf_r+0x4a>
 8009928:	9141      	str	r1, [sp, #260]	@ 0x104
 800992a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800992c:	7853      	ldrb	r3, [r2, #1]
 800992e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009930:	bf02      	ittt	eq
 8009932:	2310      	moveq	r3, #16
 8009934:	1c95      	addeq	r5, r2, #2
 8009936:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009938:	220a      	movs	r2, #10
 800993a:	46a9      	mov	r9, r5
 800993c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009940:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009944:	2b09      	cmp	r3, #9
 8009946:	d91e      	bls.n	8009986 <__ssvfiscanf_r+0xf6>
 8009948:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009b44 <__ssvfiscanf_r+0x2b4>
 800994c:	2203      	movs	r2, #3
 800994e:	4650      	mov	r0, sl
 8009950:	f7f6 fc4e 	bl	80001f0 <memchr>
 8009954:	b138      	cbz	r0, 8009966 <__ssvfiscanf_r+0xd6>
 8009956:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009958:	eba0 000a 	sub.w	r0, r0, sl
 800995c:	2301      	movs	r3, #1
 800995e:	4083      	lsls	r3, r0
 8009960:	4313      	orrs	r3, r2
 8009962:	9341      	str	r3, [sp, #260]	@ 0x104
 8009964:	464d      	mov	r5, r9
 8009966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800996a:	2b78      	cmp	r3, #120	@ 0x78
 800996c:	d806      	bhi.n	800997c <__ssvfiscanf_r+0xec>
 800996e:	2b57      	cmp	r3, #87	@ 0x57
 8009970:	d810      	bhi.n	8009994 <__ssvfiscanf_r+0x104>
 8009972:	2b25      	cmp	r3, #37	@ 0x25
 8009974:	d0c5      	beq.n	8009902 <__ssvfiscanf_r+0x72>
 8009976:	d857      	bhi.n	8009a28 <__ssvfiscanf_r+0x198>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d065      	beq.n	8009a48 <__ssvfiscanf_r+0x1b8>
 800997c:	2303      	movs	r3, #3
 800997e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009980:	230a      	movs	r3, #10
 8009982:	9342      	str	r3, [sp, #264]	@ 0x108
 8009984:	e078      	b.n	8009a78 <__ssvfiscanf_r+0x1e8>
 8009986:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009988:	fb02 1103 	mla	r1, r2, r3, r1
 800998c:	3930      	subs	r1, #48	@ 0x30
 800998e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009990:	464d      	mov	r5, r9
 8009992:	e7d2      	b.n	800993a <__ssvfiscanf_r+0xaa>
 8009994:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009998:	2a20      	cmp	r2, #32
 800999a:	d8ef      	bhi.n	800997c <__ssvfiscanf_r+0xec>
 800999c:	a101      	add	r1, pc, #4	@ (adr r1, 80099a4 <__ssvfiscanf_r+0x114>)
 800999e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	08009a57 	.word	0x08009a57
 80099a8:	0800997d 	.word	0x0800997d
 80099ac:	0800997d 	.word	0x0800997d
 80099b0:	08009ab1 	.word	0x08009ab1
 80099b4:	0800997d 	.word	0x0800997d
 80099b8:	0800997d 	.word	0x0800997d
 80099bc:	0800997d 	.word	0x0800997d
 80099c0:	0800997d 	.word	0x0800997d
 80099c4:	0800997d 	.word	0x0800997d
 80099c8:	0800997d 	.word	0x0800997d
 80099cc:	0800997d 	.word	0x0800997d
 80099d0:	08009ac7 	.word	0x08009ac7
 80099d4:	08009aad 	.word	0x08009aad
 80099d8:	08009a2f 	.word	0x08009a2f
 80099dc:	08009a2f 	.word	0x08009a2f
 80099e0:	08009a2f 	.word	0x08009a2f
 80099e4:	0800997d 	.word	0x0800997d
 80099e8:	08009a69 	.word	0x08009a69
 80099ec:	0800997d 	.word	0x0800997d
 80099f0:	0800997d 	.word	0x0800997d
 80099f4:	0800997d 	.word	0x0800997d
 80099f8:	0800997d 	.word	0x0800997d
 80099fc:	08009ad7 	.word	0x08009ad7
 8009a00:	08009a71 	.word	0x08009a71
 8009a04:	08009a4f 	.word	0x08009a4f
 8009a08:	0800997d 	.word	0x0800997d
 8009a0c:	0800997d 	.word	0x0800997d
 8009a10:	08009ad3 	.word	0x08009ad3
 8009a14:	0800997d 	.word	0x0800997d
 8009a18:	08009aad 	.word	0x08009aad
 8009a1c:	0800997d 	.word	0x0800997d
 8009a20:	0800997d 	.word	0x0800997d
 8009a24:	08009a57 	.word	0x08009a57
 8009a28:	3b45      	subs	r3, #69	@ 0x45
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d8a6      	bhi.n	800997c <__ssvfiscanf_r+0xec>
 8009a2e:	2305      	movs	r3, #5
 8009a30:	e021      	b.n	8009a76 <__ssvfiscanf_r+0x1e6>
 8009a32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009a34:	4621      	mov	r1, r4
 8009a36:	4630      	mov	r0, r6
 8009a38:	4798      	blx	r3
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f43f af66 	beq.w	800990c <__ssvfiscanf_r+0x7c>
 8009a40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f040 808b 	bne.w	8009b5e <__ssvfiscanf_r+0x2ce>
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e08b      	b.n	8009b66 <__ssvfiscanf_r+0x2d6>
 8009a4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a50:	f042 0220 	orr.w	r2, r2, #32
 8009a54:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a5e:	2210      	movs	r2, #16
 8009a60:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a62:	9242      	str	r2, [sp, #264]	@ 0x108
 8009a64:	d902      	bls.n	8009a6c <__ssvfiscanf_r+0x1dc>
 8009a66:	e005      	b.n	8009a74 <__ssvfiscanf_r+0x1e4>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e002      	b.n	8009a76 <__ssvfiscanf_r+0x1e6>
 8009a70:	2308      	movs	r3, #8
 8009a72:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a74:	2304      	movs	r3, #4
 8009a76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dd39      	ble.n	8009af2 <__ssvfiscanf_r+0x262>
 8009a7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a80:	0659      	lsls	r1, r3, #25
 8009a82:	d404      	bmi.n	8009a8e <__ssvfiscanf_r+0x1fe>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	5cba      	ldrb	r2, [r7, r2]
 8009a8a:	0712      	lsls	r2, r2, #28
 8009a8c:	d438      	bmi.n	8009b00 <__ssvfiscanf_r+0x270>
 8009a8e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	dc47      	bgt.n	8009b24 <__ssvfiscanf_r+0x294>
 8009a94:	466b      	mov	r3, sp
 8009a96:	4622      	mov	r2, r4
 8009a98:	a941      	add	r1, sp, #260	@ 0x104
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f86c 	bl	8009b78 <_scanf_chars>
 8009aa0:	2801      	cmp	r0, #1
 8009aa2:	d064      	beq.n	8009b6e <__ssvfiscanf_r+0x2de>
 8009aa4:	2802      	cmp	r0, #2
 8009aa6:	f47f af18 	bne.w	80098da <__ssvfiscanf_r+0x4a>
 8009aaa:	e7c9      	b.n	8009a40 <__ssvfiscanf_r+0x1b0>
 8009aac:	220a      	movs	r2, #10
 8009aae:	e7d7      	b.n	8009a60 <__ssvfiscanf_r+0x1d0>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	f000 fa10 	bl	8009ed8 <__sccl>
 8009ab8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009abe:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e7d7      	b.n	8009a76 <__ssvfiscanf_r+0x1e6>
 8009ac6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009acc:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e7d1      	b.n	8009a76 <__ssvfiscanf_r+0x1e6>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e7cf      	b.n	8009a76 <__ssvfiscanf_r+0x1e6>
 8009ad6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009ad8:	06c3      	lsls	r3, r0, #27
 8009ada:	f53f aefe 	bmi.w	80098da <__ssvfiscanf_r+0x4a>
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ae2:	1d19      	adds	r1, r3, #4
 8009ae4:	9100      	str	r1, [sp, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	07c0      	lsls	r0, r0, #31
 8009aea:	bf4c      	ite	mi
 8009aec:	801a      	strhmi	r2, [r3, #0]
 8009aee:	601a      	strpl	r2, [r3, #0]
 8009af0:	e6f3      	b.n	80098da <__ssvfiscanf_r+0x4a>
 8009af2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009af4:	4621      	mov	r1, r4
 8009af6:	4630      	mov	r0, r6
 8009af8:	4798      	blx	r3
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d0bf      	beq.n	8009a7e <__ssvfiscanf_r+0x1ee>
 8009afe:	e79f      	b.n	8009a40 <__ssvfiscanf_r+0x1b0>
 8009b00:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b02:	3201      	adds	r2, #1
 8009b04:	9245      	str	r2, [sp, #276]	@ 0x114
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	3a01      	subs	r2, #1
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	6062      	str	r2, [r4, #4]
 8009b0e:	dd02      	ble.n	8009b16 <__ssvfiscanf_r+0x286>
 8009b10:	3301      	adds	r3, #1
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	e7b6      	b.n	8009a84 <__ssvfiscanf_r+0x1f4>
 8009b16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	4798      	blx	r3
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0b0      	beq.n	8009a84 <__ssvfiscanf_r+0x1f4>
 8009b22:	e78d      	b.n	8009a40 <__ssvfiscanf_r+0x1b0>
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	dc0f      	bgt.n	8009b48 <__ssvfiscanf_r+0x2b8>
 8009b28:	466b      	mov	r3, sp
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	a941      	add	r1, sp, #260	@ 0x104
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f000 f87c 	bl	8009c2c <_scanf_i>
 8009b34:	e7b4      	b.n	8009aa0 <__ssvfiscanf_r+0x210>
 8009b36:	bf00      	nop
 8009b38:	080097df 	.word	0x080097df
 8009b3c:	08009855 	.word	0x08009855
 8009b40:	0800a5c9 	.word	0x0800a5c9
 8009b44:	0800a6cf 	.word	0x0800a6cf
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <__ssvfiscanf_r+0x2e4>)
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f43f aec5 	beq.w	80098da <__ssvfiscanf_r+0x4a>
 8009b50:	466b      	mov	r3, sp
 8009b52:	4622      	mov	r2, r4
 8009b54:	a941      	add	r1, sp, #260	@ 0x104
 8009b56:	4630      	mov	r0, r6
 8009b58:	f3af 8000 	nop.w
 8009b5c:	e7a0      	b.n	8009aa0 <__ssvfiscanf_r+0x210>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	065b      	lsls	r3, r3, #25
 8009b62:	f53f af71 	bmi.w	8009a48 <__ssvfiscanf_r+0x1b8>
 8009b66:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009b70:	e7f9      	b.n	8009b66 <__ssvfiscanf_r+0x2d6>
 8009b72:	bf00      	nop
 8009b74:	00000000 	.word	0x00000000

08009b78 <_scanf_chars>:
 8009b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	4615      	mov	r5, r2
 8009b7e:	688a      	ldr	r2, [r1, #8]
 8009b80:	4680      	mov	r8, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	b932      	cbnz	r2, 8009b94 <_scanf_chars+0x1c>
 8009b86:	698a      	ldr	r2, [r1, #24]
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	bf14      	ite	ne
 8009b8c:	f04f 32ff 	movne.w	r2, #4294967295
 8009b90:	2201      	moveq	r2, #1
 8009b92:	608a      	str	r2, [r1, #8]
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009c28 <_scanf_chars+0xb0>
 8009b9a:	06d1      	lsls	r1, r2, #27
 8009b9c:	bf5f      	itttt	pl
 8009b9e:	681a      	ldrpl	r2, [r3, #0]
 8009ba0:	1d11      	addpl	r1, r2, #4
 8009ba2:	6019      	strpl	r1, [r3, #0]
 8009ba4:	6816      	ldrpl	r6, [r2, #0]
 8009ba6:	2700      	movs	r7, #0
 8009ba8:	69a0      	ldr	r0, [r4, #24]
 8009baa:	b188      	cbz	r0, 8009bd0 <_scanf_chars+0x58>
 8009bac:	2801      	cmp	r0, #1
 8009bae:	d107      	bne.n	8009bc0 <_scanf_chars+0x48>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	781a      	ldrb	r2, [r3, #0]
 8009bb4:	6963      	ldr	r3, [r4, #20]
 8009bb6:	5c9b      	ldrb	r3, [r3, r2]
 8009bb8:	b953      	cbnz	r3, 8009bd0 <_scanf_chars+0x58>
 8009bba:	2f00      	cmp	r7, #0
 8009bbc:	d031      	beq.n	8009c22 <_scanf_chars+0xaa>
 8009bbe:	e022      	b.n	8009c06 <_scanf_chars+0x8e>
 8009bc0:	2802      	cmp	r0, #2
 8009bc2:	d120      	bne.n	8009c06 <_scanf_chars+0x8e>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009bcc:	071b      	lsls	r3, r3, #28
 8009bce:	d41a      	bmi.n	8009c06 <_scanf_chars+0x8e>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	06da      	lsls	r2, r3, #27
 8009bd4:	bf5e      	ittt	pl
 8009bd6:	682b      	ldrpl	r3, [r5, #0]
 8009bd8:	781b      	ldrbpl	r3, [r3, #0]
 8009bda:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009bde:	682a      	ldr	r2, [r5, #0]
 8009be0:	686b      	ldr	r3, [r5, #4]
 8009be2:	3201      	adds	r2, #1
 8009be4:	602a      	str	r2, [r5, #0]
 8009be6:	68a2      	ldr	r2, [r4, #8]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	3a01      	subs	r2, #1
 8009bec:	606b      	str	r3, [r5, #4]
 8009bee:	3701      	adds	r7, #1
 8009bf0:	60a2      	str	r2, [r4, #8]
 8009bf2:	b142      	cbz	r2, 8009c06 <_scanf_chars+0x8e>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dcd7      	bgt.n	8009ba8 <_scanf_chars+0x30>
 8009bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4798      	blx	r3
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d0d0      	beq.n	8009ba8 <_scanf_chars+0x30>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	f013 0310 	ands.w	r3, r3, #16
 8009c0c:	d105      	bne.n	8009c1a <_scanf_chars+0xa2>
 8009c0e:	68e2      	ldr	r2, [r4, #12]
 8009c10:	3201      	adds	r2, #1
 8009c12:	60e2      	str	r2, [r4, #12]
 8009c14:	69a2      	ldr	r2, [r4, #24]
 8009c16:	b102      	cbz	r2, 8009c1a <_scanf_chars+0xa2>
 8009c18:	7033      	strb	r3, [r6, #0]
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	443b      	add	r3, r7
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	2000      	movs	r0, #0
 8009c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c26:	bf00      	nop
 8009c28:	0800a5c9 	.word	0x0800a5c9

08009c2c <_scanf_i>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	4698      	mov	r8, r3
 8009c32:	4b74      	ldr	r3, [pc, #464]	@ (8009e04 <_scanf_i+0x1d8>)
 8009c34:	460c      	mov	r4, r1
 8009c36:	4682      	mov	sl, r0
 8009c38:	4616      	mov	r6, r2
 8009c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	ab03      	add	r3, sp, #12
 8009c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c46:	4b70      	ldr	r3, [pc, #448]	@ (8009e08 <_scanf_i+0x1dc>)
 8009c48:	69a1      	ldr	r1, [r4, #24]
 8009c4a:	4a70      	ldr	r2, [pc, #448]	@ (8009e0c <_scanf_i+0x1e0>)
 8009c4c:	2903      	cmp	r1, #3
 8009c4e:	bf08      	it	eq
 8009c50:	461a      	moveq	r2, r3
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	9201      	str	r2, [sp, #4]
 8009c56:	1e5a      	subs	r2, r3, #1
 8009c58:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009c5c:	bf88      	it	hi
 8009c5e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c62:	4627      	mov	r7, r4
 8009c64:	bf82      	ittt	hi
 8009c66:	eb03 0905 	addhi.w	r9, r3, r5
 8009c6a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c6e:	60a3      	strhi	r3, [r4, #8]
 8009c70:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009c74:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009c78:	bf98      	it	ls
 8009c7a:	f04f 0900 	movls.w	r9, #0
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	463d      	mov	r5, r7
 8009c82:	f04f 0b00 	mov.w	fp, #0
 8009c86:	6831      	ldr	r1, [r6, #0]
 8009c88:	ab03      	add	r3, sp, #12
 8009c8a:	7809      	ldrb	r1, [r1, #0]
 8009c8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009c90:	2202      	movs	r2, #2
 8009c92:	f7f6 faad 	bl	80001f0 <memchr>
 8009c96:	b328      	cbz	r0, 8009ce4 <_scanf_i+0xb8>
 8009c98:	f1bb 0f01 	cmp.w	fp, #1
 8009c9c:	d159      	bne.n	8009d52 <_scanf_i+0x126>
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	b92a      	cbnz	r2, 8009cae <_scanf_i+0x82>
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	2108      	movs	r1, #8
 8009ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009caa:	6061      	str	r1, [r4, #4]
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	68a2      	ldr	r2, [r4, #8]
 8009cb8:	1e51      	subs	r1, r2, #1
 8009cba:	60a1      	str	r1, [r4, #8]
 8009cbc:	b192      	cbz	r2, 8009ce4 <_scanf_i+0xb8>
 8009cbe:	6832      	ldr	r2, [r6, #0]
 8009cc0:	1c51      	adds	r1, r2, #1
 8009cc2:	6031      	str	r1, [r6, #0]
 8009cc4:	7812      	ldrb	r2, [r2, #0]
 8009cc6:	f805 2b01 	strb.w	r2, [r5], #1
 8009cca:	6872      	ldr	r2, [r6, #4]
 8009ccc:	3a01      	subs	r2, #1
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	6072      	str	r2, [r6, #4]
 8009cd2:	dc07      	bgt.n	8009ce4 <_scanf_i+0xb8>
 8009cd4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4650      	mov	r0, sl
 8009cdc:	4790      	blx	r2
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8085 	bne.w	8009dee <_scanf_i+0x1c2>
 8009ce4:	f10b 0b01 	add.w	fp, fp, #1
 8009ce8:	f1bb 0f03 	cmp.w	fp, #3
 8009cec:	d1cb      	bne.n	8009c86 <_scanf_i+0x5a>
 8009cee:	6863      	ldr	r3, [r4, #4]
 8009cf0:	b90b      	cbnz	r3, 8009cf6 <_scanf_i+0xca>
 8009cf2:	230a      	movs	r3, #10
 8009cf4:	6063      	str	r3, [r4, #4]
 8009cf6:	6863      	ldr	r3, [r4, #4]
 8009cf8:	4945      	ldr	r1, [pc, #276]	@ (8009e10 <_scanf_i+0x1e4>)
 8009cfa:	6960      	ldr	r0, [r4, #20]
 8009cfc:	1ac9      	subs	r1, r1, r3
 8009cfe:	f000 f8eb 	bl	8009ed8 <__sccl>
 8009d02:	f04f 0b00 	mov.w	fp, #0
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	6822      	ldr	r2, [r4, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d03d      	beq.n	8009d8a <_scanf_i+0x15e>
 8009d0e:	6831      	ldr	r1, [r6, #0]
 8009d10:	6960      	ldr	r0, [r4, #20]
 8009d12:	f891 c000 	ldrb.w	ip, [r1]
 8009d16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d035      	beq.n	8009d8a <_scanf_i+0x15e>
 8009d1e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009d22:	d124      	bne.n	8009d6e <_scanf_i+0x142>
 8009d24:	0510      	lsls	r0, r2, #20
 8009d26:	d522      	bpl.n	8009d6e <_scanf_i+0x142>
 8009d28:	f10b 0b01 	add.w	fp, fp, #1
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	d003      	beq.n	8009d3a <_scanf_i+0x10e>
 8009d32:	3301      	adds	r3, #1
 8009d34:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d38:	60a3      	str	r3, [r4, #8]
 8009d3a:	6873      	ldr	r3, [r6, #4]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	6073      	str	r3, [r6, #4]
 8009d42:	dd1b      	ble.n	8009d7c <_scanf_i+0x150>
 8009d44:	6833      	ldr	r3, [r6, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	e7d9      	b.n	8009d06 <_scanf_i+0xda>
 8009d52:	f1bb 0f02 	cmp.w	fp, #2
 8009d56:	d1ae      	bne.n	8009cb6 <_scanf_i+0x8a>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009d5e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009d62:	d1bf      	bne.n	8009ce4 <_scanf_i+0xb8>
 8009d64:	2110      	movs	r1, #16
 8009d66:	6061      	str	r1, [r4, #4]
 8009d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d6c:	e7a2      	b.n	8009cb4 <_scanf_i+0x88>
 8009d6e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	780b      	ldrb	r3, [r1, #0]
 8009d76:	f805 3b01 	strb.w	r3, [r5], #1
 8009d7a:	e7de      	b.n	8009d3a <_scanf_i+0x10e>
 8009d7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009d80:	4631      	mov	r1, r6
 8009d82:	4650      	mov	r0, sl
 8009d84:	4798      	blx	r3
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d0df      	beq.n	8009d4a <_scanf_i+0x11e>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	05d9      	lsls	r1, r3, #23
 8009d8e:	d50d      	bpl.n	8009dac <_scanf_i+0x180>
 8009d90:	42bd      	cmp	r5, r7
 8009d92:	d909      	bls.n	8009da8 <_scanf_i+0x17c>
 8009d94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	4650      	mov	r0, sl
 8009da0:	4798      	blx	r3
 8009da2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009da6:	464d      	mov	r5, r9
 8009da8:	42bd      	cmp	r5, r7
 8009daa:	d028      	beq.n	8009dfe <_scanf_i+0x1d2>
 8009dac:	6822      	ldr	r2, [r4, #0]
 8009dae:	f012 0210 	ands.w	r2, r2, #16
 8009db2:	d113      	bne.n	8009ddc <_scanf_i+0x1b0>
 8009db4:	702a      	strb	r2, [r5, #0]
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	9e01      	ldr	r6, [sp, #4]
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	47b0      	blx	r6
 8009dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8009dc4:	6821      	ldr	r1, [r4, #0]
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	f8c8 2000 	str.w	r2, [r8]
 8009dcc:	f011 0f20 	tst.w	r1, #32
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	d00f      	beq.n	8009df4 <_scanf_i+0x1c8>
 8009dd4:	6018      	str	r0, [r3, #0]
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	60e3      	str	r3, [r4, #12]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	1bed      	subs	r5, r5, r7
 8009de0:	445d      	add	r5, fp
 8009de2:	442b      	add	r3, r5
 8009de4:	6123      	str	r3, [r4, #16]
 8009de6:	2000      	movs	r0, #0
 8009de8:	b007      	add	sp, #28
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dee:	f04f 0b00 	mov.w	fp, #0
 8009df2:	e7ca      	b.n	8009d8a <_scanf_i+0x15e>
 8009df4:	07ca      	lsls	r2, r1, #31
 8009df6:	bf4c      	ite	mi
 8009df8:	8018      	strhmi	r0, [r3, #0]
 8009dfa:	6018      	strpl	r0, [r3, #0]
 8009dfc:	e7eb      	b.n	8009dd6 <_scanf_i+0x1aa>
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7f2      	b.n	8009de8 <_scanf_i+0x1bc>
 8009e02:	bf00      	nop
 8009e04:	0800a248 	.word	0x0800a248
 8009e08:	0800a191 	.word	0x0800a191
 8009e0c:	08008d05 	.word	0x08008d05
 8009e10:	0800a6f4 	.word	0x0800a6f4

08009e14 <__swhatbuf_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	460c      	mov	r4, r1
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	b096      	sub	sp, #88	@ 0x58
 8009e20:	4615      	mov	r5, r2
 8009e22:	461e      	mov	r6, r3
 8009e24:	da0d      	bge.n	8009e42 <__swhatbuf_r+0x2e>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e2c:	f04f 0100 	mov.w	r1, #0
 8009e30:	bf14      	ite	ne
 8009e32:	2340      	movne	r3, #64	@ 0x40
 8009e34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e38:	2000      	movs	r0, #0
 8009e3a:	6031      	str	r1, [r6, #0]
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	b016      	add	sp, #88	@ 0x58
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
 8009e42:	466a      	mov	r2, sp
 8009e44:	f000 f8ec 	bl	800a020 <_fstat_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	dbec      	blt.n	8009e26 <__swhatbuf_r+0x12>
 8009e4c:	9901      	ldr	r1, [sp, #4]
 8009e4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e56:	4259      	negs	r1, r3
 8009e58:	4159      	adcs	r1, r3
 8009e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e5e:	e7eb      	b.n	8009e38 <__swhatbuf_r+0x24>

08009e60 <__smakebuf_r>:
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e64:	079d      	lsls	r5, r3, #30
 8009e66:	4606      	mov	r6, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	d507      	bpl.n	8009e7c <__smakebuf_r+0x1c>
 8009e6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	2301      	movs	r3, #1
 8009e76:	6163      	str	r3, [r4, #20]
 8009e78:	b003      	add	sp, #12
 8009e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e7c:	ab01      	add	r3, sp, #4
 8009e7e:	466a      	mov	r2, sp
 8009e80:	f7ff ffc8 	bl	8009e14 <__swhatbuf_r>
 8009e84:	9f00      	ldr	r7, [sp, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f7fc f960 	bl	8006150 <_malloc_r>
 8009e90:	b948      	cbnz	r0, 8009ea6 <__smakebuf_r+0x46>
 8009e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e96:	059a      	lsls	r2, r3, #22
 8009e98:	d4ee      	bmi.n	8009e78 <__smakebuf_r+0x18>
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	f043 0302 	orr.w	r3, r3, #2
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	e7e2      	b.n	8009e6c <__smakebuf_r+0xc>
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	6020      	str	r0, [r4, #0]
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eb6:	b15b      	cbz	r3, 8009ed0 <__smakebuf_r+0x70>
 8009eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f000 f8c1 	bl	800a044 <_isatty_r>
 8009ec2:	b128      	cbz	r0, 8009ed0 <__smakebuf_r+0x70>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	f043 0301 	orr.w	r3, r3, #1
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	431d      	orrs	r5, r3
 8009ed4:	81a5      	strh	r5, [r4, #12]
 8009ed6:	e7cf      	b.n	8009e78 <__smakebuf_r+0x18>

08009ed8 <__sccl>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	780b      	ldrb	r3, [r1, #0]
 8009edc:	4604      	mov	r4, r0
 8009ede:	2b5e      	cmp	r3, #94	@ 0x5e
 8009ee0:	bf0b      	itete	eq
 8009ee2:	784b      	ldrbeq	r3, [r1, #1]
 8009ee4:	1c4a      	addne	r2, r1, #1
 8009ee6:	1c8a      	addeq	r2, r1, #2
 8009ee8:	2100      	movne	r1, #0
 8009eea:	bf08      	it	eq
 8009eec:	2101      	moveq	r1, #1
 8009eee:	3801      	subs	r0, #1
 8009ef0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009ef4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009ef8:	42a8      	cmp	r0, r5
 8009efa:	d1fb      	bne.n	8009ef4 <__sccl+0x1c>
 8009efc:	b90b      	cbnz	r3, 8009f02 <__sccl+0x2a>
 8009efe:	1e50      	subs	r0, r2, #1
 8009f00:	bd70      	pop	{r4, r5, r6, pc}
 8009f02:	f081 0101 	eor.w	r1, r1, #1
 8009f06:	54e1      	strb	r1, [r4, r3]
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f10:	2d2d      	cmp	r5, #45	@ 0x2d
 8009f12:	d005      	beq.n	8009f20 <__sccl+0x48>
 8009f14:	2d5d      	cmp	r5, #93	@ 0x5d
 8009f16:	d016      	beq.n	8009f46 <__sccl+0x6e>
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	d0f1      	beq.n	8009f00 <__sccl+0x28>
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	e7f2      	b.n	8009f06 <__sccl+0x2e>
 8009f20:	7846      	ldrb	r6, [r0, #1]
 8009f22:	2e5d      	cmp	r6, #93	@ 0x5d
 8009f24:	d0fa      	beq.n	8009f1c <__sccl+0x44>
 8009f26:	42b3      	cmp	r3, r6
 8009f28:	dcf8      	bgt.n	8009f1c <__sccl+0x44>
 8009f2a:	3002      	adds	r0, #2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	3201      	adds	r2, #1
 8009f30:	4296      	cmp	r6, r2
 8009f32:	54a1      	strb	r1, [r4, r2]
 8009f34:	dcfb      	bgt.n	8009f2e <__sccl+0x56>
 8009f36:	1af2      	subs	r2, r6, r3
 8009f38:	3a01      	subs	r2, #1
 8009f3a:	1c5d      	adds	r5, r3, #1
 8009f3c:	42b3      	cmp	r3, r6
 8009f3e:	bfa8      	it	ge
 8009f40:	2200      	movge	r2, #0
 8009f42:	18ab      	adds	r3, r5, r2
 8009f44:	e7e1      	b.n	8009f0a <__sccl+0x32>
 8009f46:	4610      	mov	r0, r2
 8009f48:	e7da      	b.n	8009f00 <__sccl+0x28>

08009f4a <__submore>:
 8009f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4e:	460c      	mov	r4, r1
 8009f50:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f56:	4299      	cmp	r1, r3
 8009f58:	d11d      	bne.n	8009f96 <__submore+0x4c>
 8009f5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009f5e:	f7fc f8f7 	bl	8006150 <_malloc_r>
 8009f62:	b918      	cbnz	r0, 8009f6c <__submore+0x22>
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009f72:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009f76:	6360      	str	r0, [r4, #52]	@ 0x34
 8009f78:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009f7c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009f80:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009f84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009f88:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009f8c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009f90:	6020      	str	r0, [r4, #0]
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7e8      	b.n	8009f68 <__submore+0x1e>
 8009f96:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009f98:	0077      	lsls	r7, r6, #1
 8009f9a:	463a      	mov	r2, r7
 8009f9c:	f7ff fbe4 	bl	8009768 <_realloc_r>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d0de      	beq.n	8009f64 <__submore+0x1a>
 8009fa6:	eb00 0806 	add.w	r8, r0, r6
 8009faa:	4601      	mov	r1, r0
 8009fac:	4632      	mov	r2, r6
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7fd fbb1 	bl	8007716 <memcpy>
 8009fb4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009fb8:	f8c4 8000 	str.w	r8, [r4]
 8009fbc:	e7e9      	b.n	8009f92 <__submore+0x48>

08009fbe <_raise_r>:
 8009fbe:	291f      	cmp	r1, #31
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	d904      	bls.n	8009fd2 <_raise_r+0x14>
 8009fc8:	2316      	movs	r3, #22
 8009fca:	6003      	str	r3, [r0, #0]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
 8009fd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fd4:	b112      	cbz	r2, 8009fdc <_raise_r+0x1e>
 8009fd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fda:	b94b      	cbnz	r3, 8009ff0 <_raise_r+0x32>
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 f853 	bl	800a088 <_getpid_r>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fec:	f000 b83a 	b.w	800a064 <_kill_r>
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d00a      	beq.n	800a00a <_raise_r+0x4c>
 8009ff4:	1c59      	adds	r1, r3, #1
 8009ff6:	d103      	bne.n	800a000 <_raise_r+0x42>
 8009ff8:	2316      	movs	r3, #22
 8009ffa:	6003      	str	r3, [r0, #0]
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	e7e7      	b.n	8009fd0 <_raise_r+0x12>
 800a000:	2100      	movs	r1, #0
 800a002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a006:	4620      	mov	r0, r4
 800a008:	4798      	blx	r3
 800a00a:	2000      	movs	r0, #0
 800a00c:	e7e0      	b.n	8009fd0 <_raise_r+0x12>
	...

0800a010 <raise>:
 800a010:	4b02      	ldr	r3, [pc, #8]	@ (800a01c <raise+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bfd2 	b.w	8009fbe <_raise_r>
 800a01a:	bf00      	nop
 800a01c:	20000030 	.word	0x20000030

0800a020 <_fstat_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	@ (800a040 <_fstat_r+0x20>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f7 fe49 	bl	8001cc4 <_fstat>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_fstat_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_fstat_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	20000820 	.word	0x20000820

0800a044 <_isatty_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	@ (800a060 <_isatty_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 fe48 	bl	8001ce4 <_isatty>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_isatty_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_isatty_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	20000820 	.word	0x20000820

0800a064 <_kill_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d07      	ldr	r5, [pc, #28]	@ (800a084 <_kill_r+0x20>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	4611      	mov	r1, r2
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	f7f7 fdc7 	bl	8001c04 <_kill>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	d102      	bne.n	800a080 <_kill_r+0x1c>
 800a07a:	682b      	ldr	r3, [r5, #0]
 800a07c:	b103      	cbz	r3, 800a080 <_kill_r+0x1c>
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	20000820 	.word	0x20000820

0800a088 <_getpid_r>:
 800a088:	f7f7 bdb4 	b.w	8001bf4 <_getpid>

0800a08c <_malloc_usable_size_r>:
 800a08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a090:	1f18      	subs	r0, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfbc      	itt	lt
 800a096:	580b      	ldrlt	r3, [r1, r0]
 800a098:	18c0      	addlt	r0, r0, r3
 800a09a:	4770      	bx	lr

0800a09c <_strtol_l.constprop.0>:
 800a09c:	2b24      	cmp	r3, #36	@ 0x24
 800a09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a2:	4686      	mov	lr, r0
 800a0a4:	4690      	mov	r8, r2
 800a0a6:	d801      	bhi.n	800a0ac <_strtol_l.constprop.0+0x10>
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d106      	bne.n	800a0ba <_strtol_l.constprop.0+0x1e>
 800a0ac:	f7fd fafc 	bl	80076a8 <__errno>
 800a0b0:	2316      	movs	r3, #22
 800a0b2:	6003      	str	r3, [r0, #0]
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ba:	4834      	ldr	r0, [pc, #208]	@ (800a18c <_strtol_l.constprop.0+0xf0>)
 800a0bc:	460d      	mov	r5, r1
 800a0be:	462a      	mov	r2, r5
 800a0c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0c4:	5d06      	ldrb	r6, [r0, r4]
 800a0c6:	f016 0608 	ands.w	r6, r6, #8
 800a0ca:	d1f8      	bne.n	800a0be <_strtol_l.constprop.0+0x22>
 800a0cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a0ce:	d12d      	bne.n	800a12c <_strtol_l.constprop.0+0x90>
 800a0d0:	782c      	ldrb	r4, [r5, #0]
 800a0d2:	2601      	movs	r6, #1
 800a0d4:	1c95      	adds	r5, r2, #2
 800a0d6:	f033 0210 	bics.w	r2, r3, #16
 800a0da:	d109      	bne.n	800a0f0 <_strtol_l.constprop.0+0x54>
 800a0dc:	2c30      	cmp	r4, #48	@ 0x30
 800a0de:	d12a      	bne.n	800a136 <_strtol_l.constprop.0+0x9a>
 800a0e0:	782a      	ldrb	r2, [r5, #0]
 800a0e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0e6:	2a58      	cmp	r2, #88	@ 0x58
 800a0e8:	d125      	bne.n	800a136 <_strtol_l.constprop.0+0x9a>
 800a0ea:	786c      	ldrb	r4, [r5, #1]
 800a0ec:	2310      	movs	r3, #16
 800a0ee:	3502      	adds	r5, #2
 800a0f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a0f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	fbbc f9f3 	udiv	r9, ip, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	fb03 ca19 	mls	sl, r3, r9, ip
 800a104:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a108:	2f09      	cmp	r7, #9
 800a10a:	d81b      	bhi.n	800a144 <_strtol_l.constprop.0+0xa8>
 800a10c:	463c      	mov	r4, r7
 800a10e:	42a3      	cmp	r3, r4
 800a110:	dd27      	ble.n	800a162 <_strtol_l.constprop.0+0xc6>
 800a112:	1c57      	adds	r7, r2, #1
 800a114:	d007      	beq.n	800a126 <_strtol_l.constprop.0+0x8a>
 800a116:	4581      	cmp	r9, r0
 800a118:	d320      	bcc.n	800a15c <_strtol_l.constprop.0+0xc0>
 800a11a:	d101      	bne.n	800a120 <_strtol_l.constprop.0+0x84>
 800a11c:	45a2      	cmp	sl, r4
 800a11e:	db1d      	blt.n	800a15c <_strtol_l.constprop.0+0xc0>
 800a120:	fb00 4003 	mla	r0, r0, r3, r4
 800a124:	2201      	movs	r2, #1
 800a126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a12a:	e7eb      	b.n	800a104 <_strtol_l.constprop.0+0x68>
 800a12c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a12e:	bf04      	itt	eq
 800a130:	782c      	ldrbeq	r4, [r5, #0]
 800a132:	1c95      	addeq	r5, r2, #2
 800a134:	e7cf      	b.n	800a0d6 <_strtol_l.constprop.0+0x3a>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1da      	bne.n	800a0f0 <_strtol_l.constprop.0+0x54>
 800a13a:	2c30      	cmp	r4, #48	@ 0x30
 800a13c:	bf0c      	ite	eq
 800a13e:	2308      	moveq	r3, #8
 800a140:	230a      	movne	r3, #10
 800a142:	e7d5      	b.n	800a0f0 <_strtol_l.constprop.0+0x54>
 800a144:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a148:	2f19      	cmp	r7, #25
 800a14a:	d801      	bhi.n	800a150 <_strtol_l.constprop.0+0xb4>
 800a14c:	3c37      	subs	r4, #55	@ 0x37
 800a14e:	e7de      	b.n	800a10e <_strtol_l.constprop.0+0x72>
 800a150:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a154:	2f19      	cmp	r7, #25
 800a156:	d804      	bhi.n	800a162 <_strtol_l.constprop.0+0xc6>
 800a158:	3c57      	subs	r4, #87	@ 0x57
 800a15a:	e7d8      	b.n	800a10e <_strtol_l.constprop.0+0x72>
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	e7e1      	b.n	800a126 <_strtol_l.constprop.0+0x8a>
 800a162:	1c53      	adds	r3, r2, #1
 800a164:	d108      	bne.n	800a178 <_strtol_l.constprop.0+0xdc>
 800a166:	2322      	movs	r3, #34	@ 0x22
 800a168:	f8ce 3000 	str.w	r3, [lr]
 800a16c:	4660      	mov	r0, ip
 800a16e:	f1b8 0f00 	cmp.w	r8, #0
 800a172:	d0a0      	beq.n	800a0b6 <_strtol_l.constprop.0+0x1a>
 800a174:	1e69      	subs	r1, r5, #1
 800a176:	e006      	b.n	800a186 <_strtol_l.constprop.0+0xea>
 800a178:	b106      	cbz	r6, 800a17c <_strtol_l.constprop.0+0xe0>
 800a17a:	4240      	negs	r0, r0
 800a17c:	f1b8 0f00 	cmp.w	r8, #0
 800a180:	d099      	beq.n	800a0b6 <_strtol_l.constprop.0+0x1a>
 800a182:	2a00      	cmp	r2, #0
 800a184:	d1f6      	bne.n	800a174 <_strtol_l.constprop.0+0xd8>
 800a186:	f8c8 1000 	str.w	r1, [r8]
 800a18a:	e794      	b.n	800a0b6 <_strtol_l.constprop.0+0x1a>
 800a18c:	0800a5c9 	.word	0x0800a5c9

0800a190 <_strtol_r>:
 800a190:	f7ff bf84 	b.w	800a09c <_strtol_l.constprop.0>

0800a194 <_gettimeofday>:
 800a194:	4b02      	ldr	r3, [pc, #8]	@ (800a1a0 <_gettimeofday+0xc>)
 800a196:	2258      	movs	r2, #88	@ 0x58
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	f04f 30ff 	mov.w	r0, #4294967295
 800a19e:	4770      	bx	lr
 800a1a0:	20000820 	.word	0x20000820

0800a1a4 <_init>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr

0800a1b0 <_fini>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr
