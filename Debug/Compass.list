
Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800aa50  0800aa50  0000ba50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0b8  0800b0b8  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0b8  0800b0b8  0000c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0c0  0800b0c0  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0c4  0800b0c4  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800b0c8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1f8  2**0
                  CONTENTS
 10 .bss          00000714  200001f8  200001f8  0000d1f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  0000d1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010932  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002acf  00000000  00000000  0001db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00020630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b40  00000000  00000000  000214f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237d0  00000000  00000000  00022038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121df  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4c2a  00000000  00000000  000579e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c611  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000514c  00000000  00000000  0012c654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  001317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa38 	.word	0x0800aa38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800aa38 	.word	0x0800aa38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <LiquidCrystal_I2C_Init>:
#include "LiquidCrystal_I2C.h"

void LiquidCrystal_I2C_Init(LiquidCrystal_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t cols, uint8_t rows) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71bb      	strb	r3, [r7, #6]
    lcd->hi2c = hi2c;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
    lcd->Address = address << 1;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	711a      	strb	r2, [r3, #4]
    lcd->Cols = cols;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	715a      	strb	r2, [r3, #5]
    lcd->Rows = rows;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	7e3a      	ldrb	r2, [r7, #24]
 8000f88:	719a      	strb	r2, [r3, #6]
    lcd->BacklightVal = LCD_BACKLIGHT;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	721a      	strb	r2, [r3, #8]
    if (rows > 1) {
 8000f96:	7e3b      	ldrb	r3, [r7, #24]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d906      	bls.n	8000faa <LiquidCrystal_I2C_Init+0x52>
        lcd->DisplayFunction |= LCD_2LINE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	721a      	strb	r2, [r3, #8]
    }
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LiquidCrystal_I2C_Begin>:

void LiquidCrystal_I2C_Begin(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70bb      	strb	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
    lcd->NumLines = rows;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	78ba      	ldrb	r2, [r7, #2]
 8000fd4:	72da      	strb	r2, [r3, #11]
    lcd->DisplayFunction |= charsize;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a1a      	ldrb	r2, [r3, #8]
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	721a      	strb	r2, [r3, #8]

    HAL_Delay(50); // Wait for >40ms
 8000fe4:	2032      	movs	r0, #50	@ 0x32
 8000fe6:	f002 fa3f 	bl	8003468 <HAL_Delay>

    LiquidCrystal_I2C_ExpanderWrite(lcd, lcd->BacklightVal);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	79db      	ldrb	r3, [r3, #7]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8f0 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffa:	f002 fa35 	bl	8003468 <HAL_Delay>

    // Initialization sequence
    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000ffe:	2130      	movs	r1, #48	@ 0x30
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8d4 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001006:	2005      	movs	r0, #5
 8001008:	f002 fa2e 	bl	8003468 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800100c:	2130      	movs	r1, #48	@ 0x30
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8cd 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8001014:	2005      	movs	r0, #5
 8001016:	f002 fa27 	bl	8003468 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 800101a:	2130      	movs	r1, #48	@ 0x30
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f8c6 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f002 fa20 	bl	8003468 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x02 << 4); // Finally, set to 4-bit interface
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8bf 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>

    LiquidCrystal_I2C_Command(lcd, LCD_FUNCTIONSET | lcd->DisplayFunction);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f883 	bl	8001148 <LiquidCrystal_I2C_Command>

    lcd->DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2204      	movs	r2, #4
 8001046:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Display(lcd);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f822 	bl	8001092 <LiquidCrystal_I2C_Display>

    LiquidCrystal_I2C_Clear(lcd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f810 	bl	8001074 <LiquidCrystal_I2C_Clear>

    lcd->DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	729a      	strb	r2, [r3, #10]
    LiquidCrystal_I2C_Command(lcd, LCD_ENTRYMODESET | lcd->DisplayMode);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f86e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LiquidCrystal_I2C_Clear>:

void LiquidCrystal_I2C_Clear(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    LiquidCrystal_I2C_Command(lcd, LCD_CLEARDISPLAY);
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f862 	bl	8001148 <LiquidCrystal_I2C_Command>
    HAL_Delay(2);
 8001084:	2002      	movs	r0, #2
 8001086:	f002 f9ef 	bl	8003468 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LiquidCrystal_I2C_Display>:
void LiquidCrystal_I2C_NoDisplay(LiquidCrystal_I2C_HandleTypeDef *lcd) {
    lcd->DisplayControl &= ~LCD_DISPLAYON;
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void LiquidCrystal_I2C_Display(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
    lcd->DisplayControl |= LCD_DISPLAYON;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a5b      	ldrb	r3, [r3, #9]
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a5b      	ldrb	r3, [r3, #9]
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f847 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LiquidCrystal_I2C_SetCursor>:
    for (int i = 0; i < 8; i++) {
        LiquidCrystal_I2C_Send(lcd, charmap[i], Rs);
    }
}

void LiquidCrystal_I2C_SetCursor(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <LiquidCrystal_I2C_SetCursor+0x50>)
 80010d6:	60fb      	str	r3, [r7, #12]
    if (row > lcd->NumLines) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7adb      	ldrb	r3, [r3, #11]
 80010dc:	78ba      	ldrb	r2, [r7, #2]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d903      	bls.n	80010ea <LiquidCrystal_I2C_SetCursor+0x26>
        row = lcd->NumLines - 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7adb      	ldrb	r3, [r3, #11]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	70bb      	strb	r3, [r7, #2]
    }
    LiquidCrystal_I2C_Command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	3310      	adds	r3, #16
 80010ee:	443b      	add	r3, r7
 80010f0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f81e 	bl	8001148 <LiquidCrystal_I2C_Command>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	54144000 	.word	0x54144000

08001118 <LiquidCrystal_I2C_Print>:

void LiquidCrystal_I2C_Print(LiquidCrystal_I2C_HandleTypeDef *lcd, const char *str) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001122:	e008      	b.n	8001136 <LiquidCrystal_I2C_Print+0x1e>
        LiquidCrystal_I2C_Send(lcd, *str++, Rs);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	603a      	str	r2, [r7, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f819 	bl	8001168 <LiquidCrystal_I2C_Send>
    while (*str) {
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <LiquidCrystal_I2C_Print+0xc>
    }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LiquidCrystal_I2C_Command>:

void LiquidCrystal_I2C_Command(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_Send(lcd, value, 0);
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f804 	bl	8001168 <LiquidCrystal_I2C_Send>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <LiquidCrystal_I2C_Send>:

void LiquidCrystal_I2C_Send(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value, uint8_t mode) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
 8001174:	4613      	mov	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    uint8_t highnib = value & 0xf0;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f023 030f 	bic.w	r3, r3, #15
 800117e:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xf0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	73bb      	strb	r3, [r7, #14]
    LiquidCrystal_I2C_Write4Bits(lcd, (highnib) | mode);
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	78bb      	ldrb	r3, [r7, #2]
 800118a:	4313      	orrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f80c 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
    LiquidCrystal_I2C_Write4Bits(lcd, (lownib) | mode);
 8001196:	7bba      	ldrb	r2, [r7, #14]
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f804 	bl	80011ae <LiquidCrystal_I2C_Write4Bits>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LiquidCrystal_I2C_Write4Bits>:

void LiquidCrystal_I2C_Write4Bits(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, value);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f809 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    LiquidCrystal_I2C_PulseEnable(lcd, value);
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f821 	bl	8001210 <LiquidCrystal_I2C_PulseEnable>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LiquidCrystal_I2C_ExpanderWrite>:

void LiquidCrystal_I2C_ExpanderWrite(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af02      	add	r7, sp, #8
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
    uint8_t data_t[1];
    data_t[0] = _data | lcd->BacklightVal;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	79da      	ldrb	r2, [r3, #7]
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->Address, data_t, 1, 1000);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f107 020c 	add.w	r2, r7, #12
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	f004 faa8 	bl	8005758 <HAL_I2C_Master_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <LiquidCrystal_I2C_PulseEnable>:

void LiquidCrystal_I2C_PulseEnable(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data | En);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffd5 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f002 f91b 	bl	8003468 <HAL_Delay>
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data & ~En);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffca 	bl	80011d6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f002 f910 	bl	8003468 <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bno055_writeData>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	733b      	strb	r3, [r7, #12]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2302      	movs	r3, #2
 8001274:	2150      	movs	r1, #80	@ 0x50
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <bno055_writeData+0x44>)
 8001278:	f004 fa6e 	bl	8005758 <HAL_I2C_Master_Transmit>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <bno055_writeData+0x3a>
        Error_Handler("BNO055 write failed", 1);
 8001282:	2101      	movs	r1, #1
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <bno055_writeData+0x48>)
 8001286:	f000 fddb 	bl	8001e40 <Error_Handler>
    }
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000036c 	.word	0x2000036c
 8001298:	0800aa50 	.word	0x0800aa50

0800129c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80012ac:	1dfa      	adds	r2, r7, #7
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	2150      	movs	r1, #80	@ 0x50
 80012b8:	480f      	ldr	r0, [pc, #60]	@ (80012f8 <bno055_readData+0x5c>)
 80012ba:	f004 fa4d 	bl	8005758 <HAL_I2C_Master_Transmit>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <bno055_readData+0x30>
        Error_Handler("BNO055 read address failed", 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <bno055_readData+0x60>)
 80012c8:	f000 fdba 	bl	8001e40 <Error_Handler>
    }
    if (HAL_I2C_Master_Receive(&i2c, BNO055_I2C_ADDR << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	2150      	movs	r1, #80	@ 0x50
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <bno055_readData+0x5c>)
 80012dc:	f004 fb3a 	bl	8005954 <HAL_I2C_Master_Receive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <bno055_readData+0x52>
        Error_Handler("BNO055 read data failed", 1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <bno055_readData+0x64>)
 80012ea:	f000 fda9 	bl	8001e40 <Error_Handler>
    }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000036c 	.word	0x2000036c
 80012fc:	0800aa64 	.word	0x0800aa64
 8001300:	0800aa80 	.word	0x0800aa80

08001304 <bno055_delay>:

void bno055_delay(int time) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f002 f8aa 	bl	8003468 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4619      	mov	r1, r3
 800132a:	2007      	movs	r0, #7
 800132c:	f7ff ff90 	bl	8001250 <bno055_writeData>
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <bno055_getOperationMode>:

bno055_opmode_t bno055_getOperationMode() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	203d      	movs	r0, #61	@ 0x3d
 8001346:	f7ff ffa9 	bl	800129c <bno055_readData>
  return mode;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4619      	mov	r1, r3
 8001362:	203d      	movs	r0, #61	@ 0x3d
 8001364:	f7ff ff74 	bl	8001250 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800136e:	2013      	movs	r0, #19
 8001370:	f7ff ffc8 	bl	8001304 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001374:	e002      	b.n	800137c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001376:	2007      	movs	r0, #7
 8001378:	f7ff ffc4 	bl	8001304 <bno055_delay>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ffe3 	bl	8001354 <bno055_setOperationMode>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}

08001392 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001396:	200c      	movs	r0, #12
 8001398:	f7ff ffdc 	bl	8001354 <bno055_setOperationMode>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80013a4:	2120      	movs	r1, #32
 80013a6:	203f      	movs	r0, #63	@ 0x3f
 80013a8:	f7ff ff52 	bl	8001250 <bno055_writeData>
  bno055_delay(700);
 80013ac:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80013b0:	f7ff ffa8 	bl	8001304 <bno055_delay>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <bno055_getTemp>:

int8_t bno055_getTemp() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ffac 	bl	800131c <bno055_setPage>
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	2034      	movs	r0, #52	@ 0x34
 80013cc:	f7ff ff66 	bl	800129c <bno055_readData>
  return t;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	b25b      	sxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <bno055_setup>:

void bno055_setup() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  bno055_reset();
 80013e2:	f7ff ffdd 	bl	80013a0 <bno055_reset>

  uint8_t id = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff53 	bl	800129c <bno055_readData>
  if (id != BNO055_ID) {
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80013fa:	d004      	beq.n	8001406 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4619      	mov	r1, r3
 8001400:	4809      	ldr	r0, [pc, #36]	@ (8001428 <bno055_setup+0x4c>)
 8001402:	f006 ff09 	bl	8008218 <iprintf>
  }
  bno055_setPage(0);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff88 	bl	800131c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800140c:	2100      	movs	r1, #0
 800140e:	203f      	movs	r0, #63	@ 0x3f
 8001410:	f7ff ff1e 	bl	8001250 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001414:	f7ff ffb6 	bl	8001384 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff ff73 	bl	8001304 <bno055_delay>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	0800aa98 	.word	0x0800aa98

0800142c <bno055_setCalibrationData>:
  bno055_setOperationMode(operationMode);

  return calData;
}

void bno055_setCalibrationData(bno055_calibration_data_t calData) {
 800142c:	b084      	sub	sp, #16
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	f107 0c20 	add.w	ip, r7, #32
 8001438:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t buffer[22];
  bno055_opmode_t operationMode = bno055_getOperationMode();
 800143c:	f7ff ff7c 	bl	8001338 <bno055_getOperationMode>
 8001440:	4603      	mov	r3, r0
 8001442:	75bb      	strb	r3, [r7, #22]
  bno055_setOperationModeConfig();
 8001444:	f7ff ff9e 	bl	8001384 <bno055_setOperationModeConfig>
  bno055_setPage(0);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ff67 	bl	800131c <bno055_setPage>

  // Assumes litle endian processor
  memcpy(buffer, &calData.offset.accel, 6);
 800144e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001452:	463b      	mov	r3, r7
 8001454:	2206      	movs	r2, #6
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fff7 	bl	800844a <memcpy>
  memcpy(buffer + 6, &calData.offset.mag, 6);
 800145c:	463b      	mov	r3, r7
 800145e:	3306      	adds	r3, #6
 8001460:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8001464:	2206      	movs	r2, #6
 8001466:	4618      	mov	r0, r3
 8001468:	f006 ffef 	bl	800844a <memcpy>
  memcpy(buffer + 12, &calData.offset.gyro, 6);
 800146c:	463b      	mov	r3, r7
 800146e:	330c      	adds	r3, #12
 8001470:	2206      	movs	r2, #6
 8001472:	f107 0120 	add.w	r1, r7, #32
 8001476:	4618      	mov	r0, r3
 8001478:	f006 ffe7 	bl	800844a <memcpy>
  memcpy(buffer + 18, &calData.radius.accel, 2);
 800147c:	463b      	mov	r3, r7
 800147e:	3312      	adds	r3, #18
 8001480:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001482:	801a      	strh	r2, [r3, #0]
  memcpy(buffer + 20, &calData.radius.mag, 2);
 8001484:	463b      	mov	r3, r7
 8001486:	3314      	adds	r3, #20
 8001488:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800148a:	801a      	strh	r2, [r3, #0]

  for (uint8_t i=0; i < 22; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	75fb      	strb	r3, [r7, #23]
 8001490:	e00e      	b.n	80014b0 <bno055_setCalibrationData+0x84>
    // TODO: create multibytes write
    bno055_writeData(BNO055_ACC_OFFSET_X_LSB+i, buffer[i]);
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	3355      	adds	r3, #85	@ 0x55
 8001496:	b2da      	uxtb	r2, r3
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	3318      	adds	r3, #24
 800149c:	443b      	add	r3, r7
 800149e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fed3 	bl	8001250 <bno055_writeData>
  for (uint8_t i=0; i < 22; i++) {
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3301      	adds	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b15      	cmp	r3, #21
 80014b4:	d9ed      	bls.n	8001492 <bno055_setCalibrationData+0x66>
  }

  bno055_setOperationMode(operationMode);
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff4b 	bl	8001354 <bno055_setOperationMode>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014c8:	b004      	add	sp, #16
 80014ca:	4770      	bx	lr

080014cc <bno055_getVector>:

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d0:	b09e      	sub	sp, #120	@ 0x78
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ff1e 	bl	800131c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80014e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d108      	bne.n	80014fa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80014e8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014f0:	2208      	movs	r2, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fed2 	bl	800129c <bno055_readData>
 80014f8:	e007      	b.n	800150a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80014fa:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80014fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001502:	2206      	movs	r2, #6
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fec9 	bl	800129c <bno055_readData>

  double scale = 1;
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <bno055_getVector+0x270>)
 8001510:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001518:	2b0e      	cmp	r3, #14
 800151a:	d109      	bne.n	8001530 <bno055_getVector+0x64>
    scale = magScale;
 800151c:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <bno055_getVector+0x274>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffff 	bl	8000524 <__aeabi_ui2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800152e:	e03e      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001534:	2b08      	cmp	r3, #8
 8001536:	d007      	beq.n	8001548 <bno055_getVector+0x7c>
 8001538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800153c:	2b28      	cmp	r3, #40	@ 0x28
 800153e:	d003      	beq.n	8001548 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001544:	2b2e      	cmp	r3, #46	@ 0x2e
 8001546:	d109      	bne.n	800155c <bno055_getVector+0x90>
    scale = accelScale;
 8001548:	4b7e      	ldr	r3, [pc, #504]	@ (8001744 <bno055_getVector+0x278>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffe9 	bl	8000524 <__aeabi_ui2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800155a:	e028      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800155c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001560:	2b14      	cmp	r3, #20
 8001562:	d109      	bne.n	8001578 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001564:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <bno055_getVector+0x27c>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffdb 	bl	8000524 <__aeabi_ui2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001576:	e01a      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800157c:	2b1a      	cmp	r3, #26
 800157e:	d109      	bne.n	8001594 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001580:	4b72      	ldr	r3, [pc, #456]	@ (800174c <bno055_getVector+0x280>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffcd 	bl	8000524 <__aeabi_ui2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001592:	e00c      	b.n	80015ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001598:	2b20      	cmp	r3, #32
 800159a:	d108      	bne.n	80015ae <bno055_getVector+0xe2>
    scale = quaScale;
 800159c:	4b6c      	ldr	r3, [pc, #432]	@ (8001750 <bno055_getVector+0x284>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_ui2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b2:	2220      	movs	r2, #32
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 feb7 	bl	800832a <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d150      	bne.n	8001666 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015c4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffb4 	bl	8000544 <__aeabi_i2d>
 80015dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015e0:	f7ff f944 	bl	800086c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80015ec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa0 	bl	8000544 <__aeabi_i2d>
 8001604:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001608:	f7ff f930 	bl	800086c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001614:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8c 	bl	8000544 <__aeabi_i2d>
 800162c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001630:	f7ff f91c 	bl	800086c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800163c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff78 	bl	8000544 <__aeabi_i2d>
 8001654:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001658:	f7ff f908 	bl	800086c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001664:	e03b      	b.n	80016de <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001666:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff63 	bl	8000544 <__aeabi_i2d>
 800167e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001682:	f7ff f8f3 	bl	800086c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800168e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff4f 	bl	8000544 <__aeabi_i2d>
 80016a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016aa:	f7ff f8df 	bl	800086c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3b 	bl	8000544 <__aeabi_i2d>
 80016ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016d2:	f7ff f8cb 	bl	800086c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 80016de:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016e2:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80016e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016f6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80016fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001702:	ec49 8b14 	vmov	d4, r8, r9
 8001706:	ec45 4b15 	vmov	d5, r4, r5
 800170a:	ec41 0b16 	vmov	d6, r0, r1
 800170e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001712:	eeb0 0a44 	vmov.f32	s0, s8
 8001716:	eef0 0a64 	vmov.f32	s1, s9
 800171a:	eeb0 1a45 	vmov.f32	s2, s10
 800171e:	eef0 1a65 	vmov.f32	s3, s11
 8001722:	eeb0 2a46 	vmov.f32	s4, s12
 8001726:	eef0 2a66 	vmov.f32	s5, s13
 800172a:	eeb0 3a47 	vmov.f32	s6, s14
 800172e:	eef0 3a67 	vmov.f32	s7, s15
 8001732:	3778      	adds	r7, #120	@ 0x78
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	3ff00000 	.word	0x3ff00000
 8001740:	20000006 	.word	0x20000006
 8001744:	20000000 	.word	0x20000000
 8001748:	20000002 	.word	0x20000002
 800174c:	20000004 	.word	0x20000004
 8001750:	20000008 	.word	0x20000008

08001754 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001758:	b090      	sub	sp, #64	@ 0x40
 800175a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 800175c:	2008      	movs	r0, #8
 800175e:	f7ff feb5 	bl	80014cc <bno055_getVector>
 8001762:	eeb0 4a40 	vmov.f32	s8, s0
 8001766:	eef0 4a60 	vmov.f32	s9, s1
 800176a:	eeb0 5a41 	vmov.f32	s10, s2
 800176e:	eef0 5a61 	vmov.f32	s11, s3
 8001772:	eeb0 6a42 	vmov.f32	s12, s4
 8001776:	eef0 6a62 	vmov.f32	s13, s5
 800177a:	eeb0 7a43 	vmov.f32	s14, s6
 800177e:	eef0 7a63 	vmov.f32	s15, s7
 8001782:	ed87 4b08 	vstr	d4, [r7, #32]
 8001786:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800178a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800178e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001792:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001796:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800179a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800179e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017a2:	ec49 8b14 	vmov	d4, r8, r9
 80017a6:	ec45 4b15 	vmov	d5, r4, r5
 80017aa:	ec41 0b16 	vmov	d6, r0, r1
 80017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80017b2:	eeb0 0a44 	vmov.f32	s0, s8
 80017b6:	eef0 0a64 	vmov.f32	s1, s9
 80017ba:	eeb0 1a45 	vmov.f32	s2, s10
 80017be:	eef0 1a65 	vmov.f32	s3, s11
 80017c2:	eeb0 2a46 	vmov.f32	s4, s12
 80017c6:	eef0 2a66 	vmov.f32	s5, s13
 80017ca:	eeb0 3a47 	vmov.f32	s6, s14
 80017ce:	eef0 3a67 	vmov.f32	s7, s15
 80017d2:	3740      	adds	r7, #64	@ 0x40
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080017da <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 80017da:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017de:	b090      	sub	sp, #64	@ 0x40
 80017e0:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 80017e2:	200e      	movs	r0, #14
 80017e4:	f7ff fe72 	bl	80014cc <bno055_getVector>
 80017e8:	eeb0 4a40 	vmov.f32	s8, s0
 80017ec:	eef0 4a60 	vmov.f32	s9, s1
 80017f0:	eeb0 5a41 	vmov.f32	s10, s2
 80017f4:	eef0 5a61 	vmov.f32	s11, s3
 80017f8:	eeb0 6a42 	vmov.f32	s12, s4
 80017fc:	eef0 6a62 	vmov.f32	s13, s5
 8001800:	eeb0 7a43 	vmov.f32	s14, s6
 8001804:	eef0 7a63 	vmov.f32	s15, s7
 8001808:	ed87 4b08 	vstr	d4, [r7, #32]
 800180c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001810:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001814:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800181c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001820:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001828:	ec49 8b14 	vmov	d4, r8, r9
 800182c:	ec45 4b15 	vmov	d5, r4, r5
 8001830:	ec41 0b16 	vmov	d6, r0, r1
 8001834:	ec43 2b17 	vmov	d7, r2, r3
}
 8001838:	eeb0 0a44 	vmov.f32	s0, s8
 800183c:	eef0 0a64 	vmov.f32	s1, s9
 8001840:	eeb0 1a45 	vmov.f32	s2, s10
 8001844:	eef0 1a65 	vmov.f32	s3, s11
 8001848:	eeb0 2a46 	vmov.f32	s4, s12
 800184c:	eef0 2a66 	vmov.f32	s5, s13
 8001850:	eeb0 3a47 	vmov.f32	s6, s14
 8001854:	eef0 3a67 	vmov.f32	s7, s15
 8001858:	3740      	adds	r7, #64	@ 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001860 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001864:	b090      	sub	sp, #64	@ 0x40
 8001866:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001868:	2014      	movs	r0, #20
 800186a:	f7ff fe2f 	bl	80014cc <bno055_getVector>
 800186e:	eeb0 4a40 	vmov.f32	s8, s0
 8001872:	eef0 4a60 	vmov.f32	s9, s1
 8001876:	eeb0 5a41 	vmov.f32	s10, s2
 800187a:	eef0 5a61 	vmov.f32	s11, s3
 800187e:	eeb0 6a42 	vmov.f32	s12, s4
 8001882:	eef0 6a62 	vmov.f32	s13, s5
 8001886:	eeb0 7a43 	vmov.f32	s14, s6
 800188a:	eef0 7a63 	vmov.f32	s15, s7
 800188e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001892:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001896:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800189a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800189e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80018a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018ae:	ec49 8b14 	vmov	d4, r8, r9
 80018b2:	ec45 4b15 	vmov	d5, r4, r5
 80018b6:	ec41 0b16 	vmov	d6, r0, r1
 80018ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80018be:	eeb0 0a44 	vmov.f32	s0, s8
 80018c2:	eef0 0a64 	vmov.f32	s1, s9
 80018c6:	eeb0 1a45 	vmov.f32	s2, s10
 80018ca:	eef0 1a65 	vmov.f32	s3, s11
 80018ce:	eeb0 2a46 	vmov.f32	s4, s12
 80018d2:	eef0 2a66 	vmov.f32	s5, s13
 80018d6:	eeb0 3a47 	vmov.f32	s6, s14
 80018da:	eef0 3a67 	vmov.f32	s7, s15
 80018de:	3740      	adds	r7, #64	@ 0x40
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018e6 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80018e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ea:	b090      	sub	sp, #64	@ 0x40
 80018ec:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80018ee:	201a      	movs	r0, #26
 80018f0:	f7ff fdec 	bl	80014cc <bno055_getVector>
 80018f4:	eeb0 4a40 	vmov.f32	s8, s0
 80018f8:	eef0 4a60 	vmov.f32	s9, s1
 80018fc:	eeb0 5a41 	vmov.f32	s10, s2
 8001900:	eef0 5a61 	vmov.f32	s11, s3
 8001904:	eeb0 6a42 	vmov.f32	s12, s4
 8001908:	eef0 6a62 	vmov.f32	s13, s5
 800190c:	eeb0 7a43 	vmov.f32	s14, s6
 8001910:	eef0 7a63 	vmov.f32	s15, s7
 8001914:	ed87 4b08 	vstr	d4, [r7, #32]
 8001918:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800191c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001920:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001928:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800192c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001934:	ec49 8b14 	vmov	d4, r8, r9
 8001938:	ec45 4b15 	vmov	d5, r4, r5
 800193c:	ec41 0b16 	vmov	d6, r0, r1
 8001940:	ec43 2b17 	vmov	d7, r2, r3
}
 8001944:	eeb0 0a44 	vmov.f32	s0, s8
 8001948:	eef0 0a64 	vmov.f32	s1, s9
 800194c:	eeb0 1a45 	vmov.f32	s2, s10
 8001950:	eef0 1a65 	vmov.f32	s3, s11
 8001954:	eeb0 2a46 	vmov.f32	s4, s12
 8001958:	eef0 2a66 	vmov.f32	s5, s13
 800195c:	eeb0 3a47 	vmov.f32	s6, s14
 8001960:	eef0 3a67 	vmov.f32	s7, s15
 8001964:	3740      	adds	r7, #64	@ 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800196c <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 800196c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001970:	b090      	sub	sp, #64	@ 0x40
 8001972:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001974:	2028      	movs	r0, #40	@ 0x28
 8001976:	f7ff fda9 	bl	80014cc <bno055_getVector>
 800197a:	eeb0 4a40 	vmov.f32	s8, s0
 800197e:	eef0 4a60 	vmov.f32	s9, s1
 8001982:	eeb0 5a41 	vmov.f32	s10, s2
 8001986:	eef0 5a61 	vmov.f32	s11, s3
 800198a:	eeb0 6a42 	vmov.f32	s12, s4
 800198e:	eef0 6a62 	vmov.f32	s13, s5
 8001992:	eeb0 7a43 	vmov.f32	s14, s6
 8001996:	eef0 7a63 	vmov.f32	s15, s7
 800199a:	ed87 4b08 	vstr	d4, [r7, #32]
 800199e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80019a2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80019a6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80019aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80019b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019ba:	ec49 8b14 	vmov	d4, r8, r9
 80019be:	ec45 4b15 	vmov	d5, r4, r5
 80019c2:	ec41 0b16 	vmov	d6, r0, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ca:	eeb0 0a44 	vmov.f32	s0, s8
 80019ce:	eef0 0a64 	vmov.f32	s1, s9
 80019d2:	eeb0 1a45 	vmov.f32	s2, s10
 80019d6:	eef0 1a65 	vmov.f32	s3, s11
 80019da:	eeb0 2a46 	vmov.f32	s4, s12
 80019de:	eef0 2a66 	vmov.f32	s5, s13
 80019e2:	eeb0 3a47 	vmov.f32	s6, s14
 80019e6:	eef0 3a67 	vmov.f32	s7, s15
 80019ea:	3740      	adds	r7, #64	@ 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019f2 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 80019f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019f6:	b090      	sub	sp, #64	@ 0x40
 80019f8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 80019fa:	202e      	movs	r0, #46	@ 0x2e
 80019fc:	f7ff fd66 	bl	80014cc <bno055_getVector>
 8001a00:	eeb0 4a40 	vmov.f32	s8, s0
 8001a04:	eef0 4a60 	vmov.f32	s9, s1
 8001a08:	eeb0 5a41 	vmov.f32	s10, s2
 8001a0c:	eef0 5a61 	vmov.f32	s11, s3
 8001a10:	eeb0 6a42 	vmov.f32	s12, s4
 8001a14:	eef0 6a62 	vmov.f32	s13, s5
 8001a18:	eeb0 7a43 	vmov.f32	s14, s6
 8001a1c:	eef0 7a63 	vmov.f32	s15, s7
 8001a20:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a24:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001a28:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001a2c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a34:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001a38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a40:	ec49 8b14 	vmov	d4, r8, r9
 8001a44:	ec45 4b15 	vmov	d5, r4, r5
 8001a48:	ec41 0b16 	vmov	d6, r0, r1
 8001a4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a50:	eeb0 0a44 	vmov.f32	s0, s8
 8001a54:	eef0 0a64 	vmov.f32	s1, s9
 8001a58:	eeb0 1a45 	vmov.f32	s2, s10
 8001a5c:	eef0 1a65 	vmov.f32	s3, s11
 8001a60:	eeb0 2a46 	vmov.f32	s4, s12
 8001a64:	eef0 2a66 	vmov.f32	s5, s13
 8001a68:	eeb0 3a47 	vmov.f32	s6, s14
 8001a6c:	eef0 3a67 	vmov.f32	s7, s15
 8001a70:	3740      	adds	r7, #64	@ 0x40
 8001a72:	46bd      	mov	sp, r7
 8001a74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7c:	f3bf 8f4f 	dsb	sy
}
 8001a80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <__NVIC_SystemReset+0x24>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a8a:	4904      	ldr	r1, [pc, #16]	@ (8001a9c <__NVIC_SystemReset+0x24>)
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_SystemReset+0x28>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a92:	f3bf 8f4f 	dsb	sy
}
 8001a96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <__NVIC_SystemReset+0x20>
 8001a9c:	e000ed00 	.word	0xe000ed00
 8001aa0:	05fa0004 	.word	0x05fa0004

08001aa4 <main>:
int isUserWalking(bno055_vector_t linear_accel, bno055_vector_t prev_linear_accel, bno055_vector_t gravity, bno055_vector_t prev_gravity);

I2C_HandleTypeDef i2c;
LiquidCrystal_I2C_HandleTypeDef lcd, lcd2;

int main(void) {
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b0a8      	sub	sp, #160	@ 0xa0
 8001aa8:	af28      	add	r7, sp, #160	@ 0xa0
    HAL_Init();
 8001aaa:	f001 fc6b 	bl	8003384 <HAL_Init>
    SystemClock_Config();
 8001aae:	f001 fa25 	bl	8002efc <SystemClock_Config>
    MX_GPIO_Init();
 8001ab2:	f001 f9f3 	bl	8002e9c <MX_GPIO_Init>
    MX_I2C1_Init();
 8001ab6:	f001 f9bf 	bl	8002e38 <MX_I2C1_Init>

    setUp();
 8001aba:	f000 f9ef 	bl	8001e9c <setUp>

    while (1) {

        // Get Sensor Data
        accel = bno055_getVectorAccelerometer();
 8001abe:	f7ff fe49 	bl	8001754 <bno055_getVectorAccelerometer>
 8001ac2:	eeb0 4a40 	vmov.f32	s8, s0
 8001ac6:	eef0 4a60 	vmov.f32	s9, s1
 8001aca:	eeb0 5a41 	vmov.f32	s10, s2
 8001ace:	eef0 5a61 	vmov.f32	s11, s3
 8001ad2:	eeb0 6a42 	vmov.f32	s12, s4
 8001ad6:	eef0 6a62 	vmov.f32	s13, s5
 8001ada:	eeb0 7a43 	vmov.f32	s14, s6
 8001ade:	eef0 7a63 	vmov.f32	s15, s7
 8001ae2:	4bc3      	ldr	r3, [pc, #780]	@ (8001df0 <main+0x34c>)
 8001ae4:	ed83 4b00 	vstr	d4, [r3]
 8001ae8:	ed83 5b02 	vstr	d5, [r3, #8]
 8001aec:	ed83 6b04 	vstr	d6, [r3, #16]
 8001af0:	ed83 7b06 	vstr	d7, [r3, #24]
        mag = bno055_getVectorMagnetometer();
 8001af4:	f7ff fe71 	bl	80017da <bno055_getVectorMagnetometer>
 8001af8:	eeb0 4a40 	vmov.f32	s8, s0
 8001afc:	eef0 4a60 	vmov.f32	s9, s1
 8001b00:	eeb0 5a41 	vmov.f32	s10, s2
 8001b04:	eef0 5a61 	vmov.f32	s11, s3
 8001b08:	eeb0 6a42 	vmov.f32	s12, s4
 8001b0c:	eef0 6a62 	vmov.f32	s13, s5
 8001b10:	eeb0 7a43 	vmov.f32	s14, s6
 8001b14:	eef0 7a63 	vmov.f32	s15, s7
 8001b18:	4bb6      	ldr	r3, [pc, #728]	@ (8001df4 <main+0x350>)
 8001b1a:	ed83 4b00 	vstr	d4, [r3]
 8001b1e:	ed83 5b02 	vstr	d5, [r3, #8]
 8001b22:	ed83 6b04 	vstr	d6, [r3, #16]
 8001b26:	ed83 7b06 	vstr	d7, [r3, #24]
        gyro = bno055_getVectorGyroscope();
 8001b2a:	f7ff fe99 	bl	8001860 <bno055_getVectorGyroscope>
 8001b2e:	eeb0 4a40 	vmov.f32	s8, s0
 8001b32:	eef0 4a60 	vmov.f32	s9, s1
 8001b36:	eeb0 5a41 	vmov.f32	s10, s2
 8001b3a:	eef0 5a61 	vmov.f32	s11, s3
 8001b3e:	eeb0 6a42 	vmov.f32	s12, s4
 8001b42:	eef0 6a62 	vmov.f32	s13, s5
 8001b46:	eeb0 7a43 	vmov.f32	s14, s6
 8001b4a:	eef0 7a63 	vmov.f32	s15, s7
 8001b4e:	4baa      	ldr	r3, [pc, #680]	@ (8001df8 <main+0x354>)
 8001b50:	ed83 4b00 	vstr	d4, [r3]
 8001b54:	ed83 5b02 	vstr	d5, [r3, #8]
 8001b58:	ed83 6b04 	vstr	d6, [r3, #16]
 8001b5c:	ed83 7b06 	vstr	d7, [r3, #24]
        euler = bno055_getVectorEuler();
 8001b60:	f7ff fec1 	bl	80018e6 <bno055_getVectorEuler>
 8001b64:	eeb0 4a40 	vmov.f32	s8, s0
 8001b68:	eef0 4a60 	vmov.f32	s9, s1
 8001b6c:	eeb0 5a41 	vmov.f32	s10, s2
 8001b70:	eef0 5a61 	vmov.f32	s11, s3
 8001b74:	eeb0 6a42 	vmov.f32	s12, s4
 8001b78:	eef0 6a62 	vmov.f32	s13, s5
 8001b7c:	eeb0 7a43 	vmov.f32	s14, s6
 8001b80:	eef0 7a63 	vmov.f32	s15, s7
 8001b84:	4b9d      	ldr	r3, [pc, #628]	@ (8001dfc <main+0x358>)
 8001b86:	ed83 4b00 	vstr	d4, [r3]
 8001b8a:	ed83 5b02 	vstr	d5, [r3, #8]
 8001b8e:	ed83 6b04 	vstr	d6, [r3, #16]
 8001b92:	ed83 7b06 	vstr	d7, [r3, #24]
        linear_accel = bno055_getVectorLinearAccel();
 8001b96:	f7ff fee9 	bl	800196c <bno055_getVectorLinearAccel>
 8001b9a:	eeb0 4a40 	vmov.f32	s8, s0
 8001b9e:	eef0 4a60 	vmov.f32	s9, s1
 8001ba2:	eeb0 5a41 	vmov.f32	s10, s2
 8001ba6:	eef0 5a61 	vmov.f32	s11, s3
 8001baa:	eeb0 6a42 	vmov.f32	s12, s4
 8001bae:	eef0 6a62 	vmov.f32	s13, s5
 8001bb2:	eeb0 7a43 	vmov.f32	s14, s6
 8001bb6:	eef0 7a63 	vmov.f32	s15, s7
 8001bba:	4b91      	ldr	r3, [pc, #580]	@ (8001e00 <main+0x35c>)
 8001bbc:	ed83 4b00 	vstr	d4, [r3]
 8001bc0:	ed83 5b02 	vstr	d5, [r3, #8]
 8001bc4:	ed83 6b04 	vstr	d6, [r3, #16]
 8001bc8:	ed83 7b06 	vstr	d7, [r3, #24]
        gravity = bno055_getVectorGravity();
 8001bcc:	f7ff ff11 	bl	80019f2 <bno055_getVectorGravity>
 8001bd0:	eeb0 4a40 	vmov.f32	s8, s0
 8001bd4:	eef0 4a60 	vmov.f32	s9, s1
 8001bd8:	eeb0 5a41 	vmov.f32	s10, s2
 8001bdc:	eef0 5a61 	vmov.f32	s11, s3
 8001be0:	eeb0 6a42 	vmov.f32	s12, s4
 8001be4:	eef0 6a62 	vmov.f32	s13, s5
 8001be8:	eeb0 7a43 	vmov.f32	s14, s6
 8001bec:	eef0 7a63 	vmov.f32	s15, s7
 8001bf0:	4b84      	ldr	r3, [pc, #528]	@ (8001e04 <main+0x360>)
 8001bf2:	ed83 4b00 	vstr	d4, [r3]
 8001bf6:	ed83 5b02 	vstr	d5, [r3, #8]
 8001bfa:	ed83 6b04 	vstr	d6, [r3, #16]
 8001bfe:	ed83 7b06 	vstr	d7, [r3, #24]
        temp_raw = bno055_getTemp();
 8001c02:	f7ff fbd9 	bl	80013b8 <bno055_getTemp>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <main+0x364>)
 8001c0c:	701a      	strb	r2, [r3, #0]

        // Debug
        printf("Euler: x=%.4f, y=%.4f, z=%.4f\n", euler.x, euler.y, euler.z);
 8001c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001dfc <main+0x358>)
 8001c10:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001c14:	4b79      	ldr	r3, [pc, #484]	@ (8001dfc <main+0x358>)
 8001c16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c1a:	4978      	ldr	r1, [pc, #480]	@ (8001dfc <main+0x358>)
 8001c1c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c24:	e9cd 2300 	strd	r2, r3, [sp]
 8001c28:	4622      	mov	r2, r4
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	4877      	ldr	r0, [pc, #476]	@ (8001e0c <main+0x368>)
 8001c2e:	f006 faf3 	bl	8008218 <iprintf>
        printf("\t\t\t\tGravity: x=%.4f, y=%.4f, z=%.4f\n", gravity.x, gravity.y, gravity.z);
 8001c32:	4b74      	ldr	r3, [pc, #464]	@ (8001e04 <main+0x360>)
 8001c34:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001c38:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <main+0x360>)
 8001c3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c3e:	4971      	ldr	r1, [pc, #452]	@ (8001e04 <main+0x360>)
 8001c40:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c48:	e9cd 2300 	strd	r2, r3, [sp]
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	462b      	mov	r3, r5
 8001c50:	486f      	ldr	r0, [pc, #444]	@ (8001e10 <main+0x36c>)
 8001c52:	f006 fae1 	bl	8008218 <iprintf>
        printf("\t\t\t\t\tAccel: x=%.4f, y=%.4f, z=%.4f\n", accel.x, accel.y, accel.z);
 8001c56:	4b66      	ldr	r3, [pc, #408]	@ (8001df0 <main+0x34c>)
 8001c58:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001c5c:	4b64      	ldr	r3, [pc, #400]	@ (8001df0 <main+0x34c>)
 8001c5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c62:	4963      	ldr	r1, [pc, #396]	@ (8001df0 <main+0x34c>)
 8001c64:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c70:	4622      	mov	r2, r4
 8001c72:	462b      	mov	r3, r5
 8001c74:	4867      	ldr	r0, [pc, #412]	@ (8001e14 <main+0x370>)
 8001c76:	f006 facf 	bl	8008218 <iprintf>
        printf("\t\t\t\t\t\tGyro: x=%.4f, y=%.4f, z=%.4f\n", gyro.x, gyro.y, gyro.z);
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001df8 <main+0x354>)
 8001c7c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001c80:	4b5d      	ldr	r3, [pc, #372]	@ (8001df8 <main+0x354>)
 8001c82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c86:	495c      	ldr	r1, [pc, #368]	@ (8001df8 <main+0x354>)
 8001c88:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c90:	e9cd 2300 	strd	r2, r3, [sp]
 8001c94:	4622      	mov	r2, r4
 8001c96:	462b      	mov	r3, r5
 8001c98:	485f      	ldr	r0, [pc, #380]	@ (8001e18 <main+0x374>)
 8001c9a:	f006 fabd 	bl	8008218 <iprintf>

        // Display movement
        displayMovement(euler, prev_euler, gravity, prev_gravity, linear_accel, prev_linear_accel, gyro);
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e1c <main+0x378>)
 8001ca0:	ed93 4b00 	vldr	d4, [r3]
 8001ca4:	ed93 5b02 	vldr	d5, [r3, #8]
 8001ca8:	ed93 6b04 	vldr	d6, [r3, #16]
 8001cac:	ed93 7b06 	vldr	d7, [r3, #24]
 8001cb0:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <main+0x358>)
 8001cb2:	ed93 0b00 	vldr	d0, [r3]
 8001cb6:	ed93 1b02 	vldr	d1, [r3, #8]
 8001cba:	ed93 2b04 	vldr	d2, [r3, #16]
 8001cbe:	ed93 3b06 	vldr	d3, [r3, #24]
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001df8 <main+0x354>)
 8001cc4:	ac20      	add	r4, sp, #128	@ 0x80
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cd4:	4b52      	ldr	r3, [pc, #328]	@ (8001e20 <main+0x37c>)
 8001cd6:	ac18      	add	r4, sp, #96	@ 0x60
 8001cd8:	461d      	mov	r5, r3
 8001cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce6:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <main+0x35c>)
 8001ce8:	ac10      	add	r4, sp, #64	@ 0x40
 8001cea:	461d      	mov	r5, r3
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <main+0x380>)
 8001cfa:	ac08      	add	r4, sp, #32
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e04 <main+0x360>)
 8001d0c:	466c      	mov	r4, sp
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d1c:	f000 fcc8 	bl	80026b0 <displayMovement>

        // Display Speed
        displaySpeed(&lcd2, linear_accel, &displayed_acceleration, buffer);
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <main+0x35c>)
 8001d22:	ed93 4b00 	vldr	d4, [r3]
 8001d26:	ed93 5b02 	vldr	d5, [r3, #8]
 8001d2a:	ed93 6b04 	vldr	d6, [r3, #16]
 8001d2e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001d32:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <main+0x384>)
 8001d34:	493d      	ldr	r1, [pc, #244]	@ (8001e2c <main+0x388>)
 8001d36:	eeb0 0a44 	vmov.f32	s0, s8
 8001d3a:	eef0 0a64 	vmov.f32	s1, s9
 8001d3e:	eeb0 1a45 	vmov.f32	s2, s10
 8001d42:	eef0 1a65 	vmov.f32	s3, s11
 8001d46:	eeb0 2a46 	vmov.f32	s4, s12
 8001d4a:	eef0 2a66 	vmov.f32	s5, s13
 8001d4e:	eeb0 3a47 	vmov.f32	s6, s14
 8001d52:	eef0 3a67 	vmov.f32	s7, s15
 8001d56:	4836      	ldr	r0, [pc, #216]	@ (8001e30 <main+0x38c>)
 8001d58:	f000 fa0e 	bl	8002178 <displaySpeed>

        // Display Temperature
        displayTemperature(&lcd2, temp_raw, &prev_temperature_f, buffer);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <main+0x364>)
 8001d5e:	f993 1000 	ldrsb.w	r1, [r3]
 8001d62:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <main+0x384>)
 8001d64:	4a33      	ldr	r2, [pc, #204]	@ (8001e34 <main+0x390>)
 8001d66:	4832      	ldr	r0, [pc, #200]	@ (8001e30 <main+0x38c>)
 8001d68:	f000 fa92 	bl	8002290 <displayTemperature>

        //Display Heading and Angle
        displayHeadingAndAngle(&lcd2, mag, &previous_heading, &previousDirection, buffer);
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <main+0x350>)
 8001d6e:	ed93 4b00 	vldr	d4, [r3]
 8001d72:	ed93 5b02 	vldr	d5, [r3, #8]
 8001d76:	ed93 6b04 	vldr	d6, [r3, #16]
 8001d7a:	ed93 7b06 	vldr	d7, [r3, #24]
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <main+0x384>)
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <main+0x394>)
 8001d82:	492e      	ldr	r1, [pc, #184]	@ (8001e3c <main+0x398>)
 8001d84:	eeb0 0a44 	vmov.f32	s0, s8
 8001d88:	eef0 0a64 	vmov.f32	s1, s9
 8001d8c:	eeb0 1a45 	vmov.f32	s2, s10
 8001d90:	eef0 1a65 	vmov.f32	s3, s11
 8001d94:	eeb0 2a46 	vmov.f32	s4, s12
 8001d98:	eef0 2a66 	vmov.f32	s5, s13
 8001d9c:	eeb0 3a47 	vmov.f32	s6, s14
 8001da0:	eef0 3a67 	vmov.f32	s7, s15
 8001da4:	4822      	ldr	r0, [pc, #136]	@ (8001e30 <main+0x38c>)
 8001da6:	f000 faf3 	bl	8002390 <displayHeadingAndAngle>

        // Update previous values
        prev_euler = euler;
 8001daa:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <main+0x378>)
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <main+0x358>)
 8001dae:	4614      	mov	r4, r2
 8001db0:	461d      	mov	r5, r3
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        prev_gravity = gravity;
 8001dbe:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <main+0x380>)
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <main+0x360>)
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        prev_linear_accel = linear_accel;
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <main+0x37c>)
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <main+0x35c>)
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        HAL_Delay(100);
 8001de6:	2064      	movs	r0, #100	@ 0x64
 8001de8:	f001 fb3e 	bl	8003468 <HAL_Delay>
        accel = bno055_getVectorAccelerometer();
 8001dec:	bf00      	nop
 8001dee:	e666      	b.n	8001abe <main+0x1a>
 8001df0:	20000230 	.word	0x20000230
 8001df4:	20000250 	.word	0x20000250
 8001df8:	20000270 	.word	0x20000270
 8001dfc:	20000290 	.word	0x20000290
 8001e00:	200002b0 	.word	0x200002b0
 8001e04:	200002d0 	.word	0x200002d0
 8001e08:	20000350 	.word	0x20000350
 8001e0c:	0800aad8 	.word	0x0800aad8
 8001e10:	0800aaf8 	.word	0x0800aaf8
 8001e14:	0800ab20 	.word	0x0800ab20
 8001e18:	0800ab44 	.word	0x0800ab44
 8001e1c:	200002f0 	.word	0x200002f0
 8001e20:	20000330 	.word	0x20000330
 8001e24:	20000310 	.word	0x20000310
 8001e28:	20000218 	.word	0x20000218
 8001e2c:	20000358 	.word	0x20000358
 8001e30:	200003cc 	.word	0x200003cc
 8001e34:	20000354 	.word	0x20000354
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <Error_Handler>:
    }
}

void Error_Handler(char *errorMessage, int lcdNumber) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    if (lcdNumber == 1) {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10c      	bne.n	8001e6a <Error_Handler+0x2a>
        LiquidCrystal_I2C_Clear(&lcd);
 8001e50:	4810      	ldr	r0, [pc, #64]	@ (8001e94 <Error_Handler+0x54>)
 8001e52:	f7ff f90f 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	480e      	ldr	r0, [pc, #56]	@ (8001e94 <Error_Handler+0x54>)
 8001e5c:	f7ff f932 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd, errorMessage);
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <Error_Handler+0x54>)
 8001e64:	f7ff f958 	bl	8001118 <LiquidCrystal_I2C_Print>
 8001e68:	e00e      	b.n	8001e88 <Error_Handler+0x48>
    } else if (lcdNumber == 2) {
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d10b      	bne.n	8001e88 <Error_Handler+0x48>
        LiquidCrystal_I2C_Clear(&lcd2);
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <Error_Handler+0x58>)
 8001e72:	f7ff f8ff 	bl	8001074 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <Error_Handler+0x58>)
 8001e7c:	f7ff f922 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd2, errorMessage);
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <Error_Handler+0x58>)
 8001e84:	f7ff f948 	bl	8001118 <LiquidCrystal_I2C_Print>
    }
    HAL_Delay(2000);
 8001e88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e8c:	f001 faec 	bl	8003468 <HAL_Delay>
    NVIC_SystemReset();
 8001e90:	f7ff fdf2 	bl	8001a78 <__NVIC_SystemReset>
 8001e94:	200003c0 	.word	0x200003c0
 8001e98:	200003cc 	.word	0x200003cc

08001e9c <setUp>:
}

void setUp(void) {
 8001e9c:	b5b0      	push	{r4, r5, r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af02      	add	r7, sp, #8

    // Initialize LCD1 at 0x27
    LiquidCrystal_I2C_Init(&lcd, &i2c, 0x27, 20, 4);
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	2227      	movs	r2, #39	@ 0x27
 8001eaa:	498b      	ldr	r1, [pc, #556]	@ (80020d8 <setUp+0x23c>)
 8001eac:	488b      	ldr	r0, [pc, #556]	@ (80020dc <setUp+0x240>)
 8001eae:	f7ff f853 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd, 20, 4, LCD_5x8DOTS);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	2114      	movs	r1, #20
 8001eb8:	4888      	ldr	r0, [pc, #544]	@ (80020dc <setUp+0x240>)
 8001eba:	f7ff f87c 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize LCD2 at 0x20
    LiquidCrystal_I2C_Init(&lcd2, &i2c, 0x20, 20, 4);
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2314      	movs	r3, #20
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	4984      	ldr	r1, [pc, #528]	@ (80020d8 <setUp+0x23c>)
 8001ec8:	4885      	ldr	r0, [pc, #532]	@ (80020e0 <setUp+0x244>)
 8001eca:	f7ff f845 	bl	8000f58 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd2, 20, 4, LCD_5x8DOTS);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	2114      	movs	r1, #20
 8001ed4:	4882      	ldr	r0, [pc, #520]	@ (80020e0 <setUp+0x244>)
 8001ed6:	f7ff f86e 	bl	8000fb6 <LiquidCrystal_I2C_Begin>

    // Initialize BNO055
    bno055_setup();
 8001eda:	f7ff fa7f 	bl	80013dc <bno055_setup>
    hardcodeCalibrationData();
 8001ede:	f000 f91b 	bl	8002118 <hardcodeCalibrationData>
    bno055_setOperationModeNDOF();
 8001ee2:	f7ff fa56 	bl	8001392 <bno055_setOperationModeNDOF>

    LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	487c      	ldr	r0, [pc, #496]	@ (80020dc <setUp+0x240>)
 8001eec:	f7ff f8ea 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
    LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	487a      	ldr	r0, [pc, #488]	@ (80020e0 <setUp+0x244>)
 8001ef6:	f7ff f8e5 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
    LiquidCrystal_I2C_Print(&lcd, "Getting Ready...");
 8001efa:	497a      	ldr	r1, [pc, #488]	@ (80020e4 <setUp+0x248>)
 8001efc:	4877      	ldr	r0, [pc, #476]	@ (80020dc <setUp+0x240>)
 8001efe:	f7ff f90b 	bl	8001118 <LiquidCrystal_I2C_Print>
    LiquidCrystal_I2C_Print(&lcd2, "Getting Ready...");
 8001f02:	4978      	ldr	r1, [pc, #480]	@ (80020e4 <setUp+0x248>)
 8001f04:	4876      	ldr	r0, [pc, #472]	@ (80020e0 <setUp+0x244>)
 8001f06:	f7ff f907 	bl	8001118 <LiquidCrystal_I2C_Print>

    while (stabilize_counter < 8) {
 8001f0a:	e008      	b.n	8001f1e <setUp+0x82>
        stabilize_counter++;
 8001f0c:	4b76      	ldr	r3, [pc, #472]	@ (80020e8 <setUp+0x24c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a75      	ldr	r2, [pc, #468]	@ (80020e8 <setUp+0x24c>)
 8001f14:	6013      	str	r3, [r2, #0]
        HAL_Delay(500);
 8001f16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f1a:	f001 faa5 	bl	8003468 <HAL_Delay>
    while (stabilize_counter < 8) {
 8001f1e:	4b72      	ldr	r3, [pc, #456]	@ (80020e8 <setUp+0x24c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b07      	cmp	r3, #7
 8001f24:	ddf2      	ble.n	8001f0c <setUp+0x70>
    }

    // Stable Initial Values
    accel = bno055_getVectorAccelerometer();
 8001f26:	f7ff fc15 	bl	8001754 <bno055_getVectorAccelerometer>
 8001f2a:	eeb0 4a40 	vmov.f32	s8, s0
 8001f2e:	eef0 4a60 	vmov.f32	s9, s1
 8001f32:	eeb0 5a41 	vmov.f32	s10, s2
 8001f36:	eef0 5a61 	vmov.f32	s11, s3
 8001f3a:	eeb0 6a42 	vmov.f32	s12, s4
 8001f3e:	eef0 6a62 	vmov.f32	s13, s5
 8001f42:	eeb0 7a43 	vmov.f32	s14, s6
 8001f46:	eef0 7a63 	vmov.f32	s15, s7
 8001f4a:	4b68      	ldr	r3, [pc, #416]	@ (80020ec <setUp+0x250>)
 8001f4c:	ed83 4b00 	vstr	d4, [r3]
 8001f50:	ed83 5b02 	vstr	d5, [r3, #8]
 8001f54:	ed83 6b04 	vstr	d6, [r3, #16]
 8001f58:	ed83 7b06 	vstr	d7, [r3, #24]
    mag = bno055_getVectorMagnetometer();
 8001f5c:	f7ff fc3d 	bl	80017da <bno055_getVectorMagnetometer>
 8001f60:	eeb0 4a40 	vmov.f32	s8, s0
 8001f64:	eef0 4a60 	vmov.f32	s9, s1
 8001f68:	eeb0 5a41 	vmov.f32	s10, s2
 8001f6c:	eef0 5a61 	vmov.f32	s11, s3
 8001f70:	eeb0 6a42 	vmov.f32	s12, s4
 8001f74:	eef0 6a62 	vmov.f32	s13, s5
 8001f78:	eeb0 7a43 	vmov.f32	s14, s6
 8001f7c:	eef0 7a63 	vmov.f32	s15, s7
 8001f80:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <setUp+0x254>)
 8001f82:	ed83 4b00 	vstr	d4, [r3]
 8001f86:	ed83 5b02 	vstr	d5, [r3, #8]
 8001f8a:	ed83 6b04 	vstr	d6, [r3, #16]
 8001f8e:	ed83 7b06 	vstr	d7, [r3, #24]
    gyro = bno055_getVectorGyroscope();
 8001f92:	f7ff fc65 	bl	8001860 <bno055_getVectorGyroscope>
 8001f96:	eeb0 4a40 	vmov.f32	s8, s0
 8001f9a:	eef0 4a60 	vmov.f32	s9, s1
 8001f9e:	eeb0 5a41 	vmov.f32	s10, s2
 8001fa2:	eef0 5a61 	vmov.f32	s11, s3
 8001fa6:	eeb0 6a42 	vmov.f32	s12, s4
 8001faa:	eef0 6a62 	vmov.f32	s13, s5
 8001fae:	eeb0 7a43 	vmov.f32	s14, s6
 8001fb2:	eef0 7a63 	vmov.f32	s15, s7
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80020f4 <setUp+0x258>)
 8001fb8:	ed83 4b00 	vstr	d4, [r3]
 8001fbc:	ed83 5b02 	vstr	d5, [r3, #8]
 8001fc0:	ed83 6b04 	vstr	d6, [r3, #16]
 8001fc4:	ed83 7b06 	vstr	d7, [r3, #24]
    euler = bno055_getVectorEuler();
 8001fc8:	f7ff fc8d 	bl	80018e6 <bno055_getVectorEuler>
 8001fcc:	eeb0 4a40 	vmov.f32	s8, s0
 8001fd0:	eef0 4a60 	vmov.f32	s9, s1
 8001fd4:	eeb0 5a41 	vmov.f32	s10, s2
 8001fd8:	eef0 5a61 	vmov.f32	s11, s3
 8001fdc:	eeb0 6a42 	vmov.f32	s12, s4
 8001fe0:	eef0 6a62 	vmov.f32	s13, s5
 8001fe4:	eeb0 7a43 	vmov.f32	s14, s6
 8001fe8:	eef0 7a63 	vmov.f32	s15, s7
 8001fec:	4b42      	ldr	r3, [pc, #264]	@ (80020f8 <setUp+0x25c>)
 8001fee:	ed83 4b00 	vstr	d4, [r3]
 8001ff2:	ed83 5b02 	vstr	d5, [r3, #8]
 8001ff6:	ed83 6b04 	vstr	d6, [r3, #16]
 8001ffa:	ed83 7b06 	vstr	d7, [r3, #24]
    linear_accel = bno055_getVectorLinearAccel();
 8001ffe:	f7ff fcb5 	bl	800196c <bno055_getVectorLinearAccel>
 8002002:	eeb0 4a40 	vmov.f32	s8, s0
 8002006:	eef0 4a60 	vmov.f32	s9, s1
 800200a:	eeb0 5a41 	vmov.f32	s10, s2
 800200e:	eef0 5a61 	vmov.f32	s11, s3
 8002012:	eeb0 6a42 	vmov.f32	s12, s4
 8002016:	eef0 6a62 	vmov.f32	s13, s5
 800201a:	eeb0 7a43 	vmov.f32	s14, s6
 800201e:	eef0 7a63 	vmov.f32	s15, s7
 8002022:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <setUp+0x260>)
 8002024:	ed83 4b00 	vstr	d4, [r3]
 8002028:	ed83 5b02 	vstr	d5, [r3, #8]
 800202c:	ed83 6b04 	vstr	d6, [r3, #16]
 8002030:	ed83 7b06 	vstr	d7, [r3, #24]
    gravity = bno055_getVectorGravity();
 8002034:	f7ff fcdd 	bl	80019f2 <bno055_getVectorGravity>
 8002038:	eeb0 4a40 	vmov.f32	s8, s0
 800203c:	eef0 4a60 	vmov.f32	s9, s1
 8002040:	eeb0 5a41 	vmov.f32	s10, s2
 8002044:	eef0 5a61 	vmov.f32	s11, s3
 8002048:	eeb0 6a42 	vmov.f32	s12, s4
 800204c:	eef0 6a62 	vmov.f32	s13, s5
 8002050:	eeb0 7a43 	vmov.f32	s14, s6
 8002054:	eef0 7a63 	vmov.f32	s15, s7
 8002058:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <setUp+0x264>)
 800205a:	ed83 4b00 	vstr	d4, [r3]
 800205e:	ed83 5b02 	vstr	d5, [r3, #8]
 8002062:	ed83 6b04 	vstr	d6, [r3, #16]
 8002066:	ed83 7b06 	vstr	d7, [r3, #24]
    temp_raw = bno055_getTemp();
 800206a:	f7ff f9a5 	bl	80013b8 <bno055_getTemp>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <setUp+0x268>)
 8002074:	701a      	strb	r2, [r3, #0]

    // Set prev values
    prev_euler = euler;
 8002076:	4a24      	ldr	r2, [pc, #144]	@ (8002108 <setUp+0x26c>)
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <setUp+0x25c>)
 800207a:	4614      	mov	r4, r2
 800207c:	461d      	mov	r5, r3
 800207e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002082:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    prev_gravity = gravity;
 800208a:	4a20      	ldr	r2, [pc, #128]	@ (800210c <setUp+0x270>)
 800208c:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <setUp+0x264>)
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002096:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800209a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    prev_linear_accel = accel;
 800209e:	4a1c      	ldr	r2, [pc, #112]	@ (8002110 <setUp+0x274>)
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <setUp+0x250>)
 80020a2:	4614      	mov	r4, r2
 80020a4:	461d      	mov	r5, r3
 80020a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    LiquidCrystal_I2C_Clear(&lcd);
 80020b2:	480a      	ldr	r0, [pc, #40]	@ (80020dc <setUp+0x240>)
 80020b4:	f7fe ffde 	bl	8001074 <LiquidCrystal_I2C_Clear>
    LiquidCrystal_I2C_Clear(&lcd2);
 80020b8:	4809      	ldr	r0, [pc, #36]	@ (80020e0 <setUp+0x244>)
 80020ba:	f7fe ffdb 	bl	8001074 <LiquidCrystal_I2C_Clear>
    LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <setUp+0x240>)
 80020c4:	f7fe fffe 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
    LiquidCrystal_I2C_Print(&lcd, "Movement:           ");
 80020c8:	4912      	ldr	r1, [pc, #72]	@ (8002114 <setUp+0x278>)
 80020ca:	4804      	ldr	r0, [pc, #16]	@ (80020dc <setUp+0x240>)
 80020cc:	f7ff f824 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bdb0      	pop	{r4, r5, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000036c 	.word	0x2000036c
 80020dc:	200003c0 	.word	0x200003c0
 80020e0:	200003cc 	.word	0x200003cc
 80020e4:	0800ab68 	.word	0x0800ab68
 80020e8:	20000214 	.word	0x20000214
 80020ec:	20000230 	.word	0x20000230
 80020f0:	20000250 	.word	0x20000250
 80020f4:	20000270 	.word	0x20000270
 80020f8:	20000290 	.word	0x20000290
 80020fc:	200002b0 	.word	0x200002b0
 8002100:	200002d0 	.word	0x200002d0
 8002104:	20000350 	.word	0x20000350
 8002108:	200002f0 	.word	0x200002f0
 800210c:	20000310 	.word	0x20000310
 8002110:	20000330 	.word	0x20000330
 8002114:	0800ab7c 	.word	0x0800ab7c

08002118 <hardcodeCalibrationData>:

// Data after calibrating the IMU in current environment
// "bno055Calibrate.c" can be used to retrieve new calibration
void hardcodeCalibrationData() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
    bno055_calibration_data_t calData;

    calData.offset.accel.x = -29;
 800211e:	f64f 73e3 	movw	r3, #65507	@ 0xffe3
 8002122:	81bb      	strh	r3, [r7, #12]
    calData.offset.accel.y = -16;
 8002124:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002128:	81fb      	strh	r3, [r7, #14]
    calData.offset.accel.z = -31;
 800212a:	f64f 73e1 	movw	r3, #65505	@ 0xffe1
 800212e:	823b      	strh	r3, [r7, #16]
    calData.offset.mag.x = 79;
 8002130:	234f      	movs	r3, #79	@ 0x4f
 8002132:	80fb      	strh	r3, [r7, #6]
    calData.offset.mag.y = -150;
 8002134:	f64f 736a 	movw	r3, #65386	@ 0xff6a
 8002138:	813b      	strh	r3, [r7, #8]
    calData.offset.mag.z = 80;
 800213a:	2350      	movs	r3, #80	@ 0x50
 800213c:	817b      	strh	r3, [r7, #10]
    calData.offset.gyro.x = -2;
 800213e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002142:	803b      	strh	r3, [r7, #0]
    calData.offset.gyro.y = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	807b      	strh	r3, [r7, #2]
    calData.offset.gyro.z = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	80bb      	strh	r3, [r7, #4]
    calData.radius.accel = 1000;
 800214c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002150:	82bb      	strh	r3, [r7, #20]
    calData.radius.mag = 814;
 8002152:	f240 332e 	movw	r3, #814	@ 0x32e
 8002156:	827b      	strh	r3, [r7, #18]

    bno055_setCalibrationData(calData);
 8002158:	466b      	mov	r3, sp
 800215a:	f107 0210 	add.w	r2, r7, #16
 800215e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002162:	6018      	str	r0, [r3, #0]
 8002164:	3304      	adds	r3, #4
 8002166:	8019      	strh	r1, [r3, #0]
 8002168:	463b      	mov	r3, r7
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	f7ff f95e 	bl	800142c <bno055_setCalibrationData>
}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <displaySpeed>:

void displaySpeed(LiquidCrystal_I2C_HandleTypeDef *lcd2, bno055_vector_t linear_accel, float *displayed_acceleration, char *buffer) {
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af02      	add	r7, sp, #8
 800217e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002180:	eeb0 4a40 	vmov.f32	s8, s0
 8002184:	eef0 4a60 	vmov.f32	s9, s1
 8002188:	eeb0 5a41 	vmov.f32	s10, s2
 800218c:	eef0 5a61 	vmov.f32	s11, s3
 8002190:	eeb0 6a42 	vmov.f32	s12, s4
 8002194:	eef0 6a62 	vmov.f32	s13, s5
 8002198:	eeb0 7a43 	vmov.f32	s14, s6
 800219c:	eef0 7a63 	vmov.f32	s15, s7
 80021a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	ed87 4b02 	vstr	d4, [r7, #8]
 80021a8:	ed87 5b04 	vstr	d5, [r7, #16]
 80021ac:	ed87 6b06 	vstr	d6, [r7, #24]
 80021b0:	ed87 7b08 	vstr	d7, [r7, #32]
    // If acceleration change is greater than threshold then display it
    if (fabs(linear_accel.y) > ACCEL_CHANGE_THRESHOLD) {
 80021b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b8:	4614      	mov	r4, r2
 80021ba:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80021be:	a32d      	add	r3, pc, #180	@ (adr r3, 8002274 <displaySpeed+0xfc>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe fcb6 	bl	8000b38 <__aeabi_dcmpgt>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <displaySpeed+0x76>
        *displayed_acceleration = fabs(linear_accel.y);
 80021d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fcf5 	bl	8000bc8 <__aeabi_d2f>
 80021de:	ee07 0a90 	vmov	s15, r0
 80021e2:	eef0 7ae7 	vabs.f32	s15, s15
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	edc3 7a00 	vstr	s15, [r3]
 80021ec:	e023      	b.n	8002236 <displaySpeed+0xbe>
    } else {
        // Slow down rate
        *displayed_acceleration *= DECAY_FACTOR;
 80021ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9b8 	bl	8000568 <__aeabi_f2d>
 80021f8:	a320      	add	r3, pc, #128	@ (adr r3, 800227c <displaySpeed+0x104>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe fa0b 	bl	8000618 <__aeabi_dmul>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fcdd 	bl	8000bc8 <__aeabi_d2f>
 800220e:	4602      	mov	r2, r0
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	601a      	str	r2, [r3, #0]
        if (*displayed_acceleration < 0.3) {
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f9a5 	bl	8000568 <__aeabi_f2d>
 800221e:	a319      	add	r3, pc, #100	@ (adr r3, 8002284 <displaySpeed+0x10c>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe fc6a 	bl	8000afc <__aeabi_dcmplt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <displaySpeed+0xbe>
            *displayed_acceleration = 0.0;
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
        }
    }

    // Display
    LiquidCrystal_I2C_SetCursor(lcd2, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800223c:	f7fe ff42 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
    snprintf(buffer, 20, "Speed: %.1f", *displayed_acceleration);
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f98f 	bl	8000568 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9cd 2300 	strd	r2, r3, [sp]
 8002252:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <displaySpeed+0xf8>)
 8002254:	2114      	movs	r1, #20
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f005 fff0 	bl	800823c <sniprintf>
    LiquidCrystal_I2C_Print(lcd2, buffer);
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002260:	f7fe ff5a 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 8002264:	bf00      	nop
 8002266:	3730      	adds	r7, #48	@ 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bdb0      	pop	{r4, r5, r7, pc}
 800226c:	f3af 8000 	nop.w
 8002270:	0800ab94 	.word	0x0800ab94
 8002274:	eb851eb8 	.word	0xeb851eb8
 8002278:	3faeb851 	.word	0x3faeb851
 800227c:	66666666 	.word	0x66666666
 8002280:	3fe66666 	.word	0x3fe66666
 8002284:	33333333 	.word	0x33333333
 8002288:	3fd33333 	.word	0x3fd33333
 800228c:	00000000 	.word	0x00000000

08002290 <displayTemperature>:

void displayTemperature(LiquidCrystal_I2C_HandleTypeDef *lcd2, int8_t temp_raw, float *prev_temperature_f, char *buffer) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af04      	add	r7, sp, #16
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	460b      	mov	r3, r1
 800229e:	72fb      	strb	r3, [r7, #11]
    // Convert Temperature from C to F
    float temperature_f = convertToFahrenheit(temp_raw);
 80022a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f83d 	bl	8002324 <convertToFahrenheit>
 80022aa:	ed87 0a05 	vstr	s0, [r7, #20]

    // Update temperature if change is greater than threshold
    if (fabs(temperature_f - *prev_temperature_f) > TEMP_CHANGE_THRESHOLD) {
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	eef0 7ae7 	vabs.f32	s15, s15
 80022c0:	ee17 0a90 	vmov	r0, s15
 80022c4:	f7fe f950 	bl	8000568 <__aeabi_f2d>
 80022c8:	a314      	add	r3, pc, #80	@ (adr r3, 800231c <displayTemperature+0x8c>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe fc33 	bl	8000b38 <__aeabi_dcmpgt>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d100      	bne.n	80022da <displayTemperature+0x4a>
        *prev_temperature_f = temperature_f;
        LiquidCrystal_I2C_SetCursor(lcd2, 0, 1);
        snprintf(buffer, 20, "Temp: %.1f %cF", temperature_f, 223); // 223 is char for degrees
        LiquidCrystal_I2C_Print(lcd2, buffer);
    }
}
 80022d8:	e019      	b.n	800230e <displayTemperature+0x7e>
        *prev_temperature_f = temperature_f;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	601a      	str	r2, [r3, #0]
        LiquidCrystal_I2C_SetCursor(lcd2, 0, 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2100      	movs	r1, #0
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7fe feed 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, 20, "Temp: %.1f %cF", temperature_f, 223); // 223 is char for degrees
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7fe f93c 	bl	8000568 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	21df      	movs	r1, #223	@ 0xdf
 80022f6:	9102      	str	r1, [sp, #8]
 80022f8:	e9cd 2300 	strd	r2, r3, [sp]
 80022fc:	4a06      	ldr	r2, [pc, #24]	@ (8002318 <displayTemperature+0x88>)
 80022fe:	2114      	movs	r1, #20
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f005 ff9b 	bl	800823c <sniprintf>
        LiquidCrystal_I2C_Print(lcd2, buffer);
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7fe ff05 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	0800aba0 	.word	0x0800aba0
 800231c:	9999999a 	.word	0x9999999a
 8002320:	3fb99999 	.word	0x3fb99999

08002324 <convertToFahrenheit>:

float convertToFahrenheit(int8_t temp_c) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
    return (temp_c * 9.0 / 5.0) + 32.0;
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f906 	bl	8000544 <__aeabi_i2d>
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <convertToFahrenheit+0x60>)
 800233e:	f7fe f96b 	bl	8000618 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <convertToFahrenheit+0x64>)
 8002350:	f7fe fa8c 	bl	800086c <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <convertToFahrenheit+0x68>)
 8002362:	f7fd ffa3 	bl	80002ac <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc2b 	bl	8000bc8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	ee07 3a90 	vmov	s15, r3
}
 8002378:	eeb0 0a67 	vmov.f32	s0, s15
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40220000 	.word	0x40220000
 8002388:	40140000 	.word	0x40140000
 800238c:	40400000 	.word	0x40400000

08002390 <displayHeadingAndAngle>:

void displayHeadingAndAngle(LiquidCrystal_I2C_HandleTypeDef *lcd2, bno055_vector_t mag, float *previous_heading, const char **previousDirection, char *buffer) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af04      	add	r7, sp, #16
 8002396:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002398:	eeb0 4a40 	vmov.f32	s8, s0
 800239c:	eef0 4a60 	vmov.f32	s9, s1
 80023a0:	eeb0 5a41 	vmov.f32	s10, s2
 80023a4:	eef0 5a61 	vmov.f32	s11, s3
 80023a8:	eeb0 6a42 	vmov.f32	s12, s4
 80023ac:	eef0 6a62 	vmov.f32	s13, s5
 80023b0:	eeb0 7a43 	vmov.f32	s14, s6
 80023b4:	eef0 7a63 	vmov.f32	s15, s7
 80023b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	ed87 4b02 	vstr	d4, [r7, #8]
 80023c2:	ed87 5b04 	vstr	d5, [r7, #16]
 80023c6:	ed87 6b06 	vstr	d6, [r7, #24]
 80023ca:	ed87 7b08 	vstr	d7, [r7, #32]
    float heading = calculateHeading(mag);
 80023ce:	ed97 4b02 	vldr	d4, [r7, #8]
 80023d2:	ed97 5b04 	vldr	d5, [r7, #16]
 80023d6:	ed97 6b06 	vldr	d6, [r7, #24]
 80023da:	ed97 7b08 	vldr	d7, [r7, #32]
 80023de:	eeb0 0a44 	vmov.f32	s0, s8
 80023e2:	eef0 0a64 	vmov.f32	s1, s9
 80023e6:	eeb0 1a45 	vmov.f32	s2, s10
 80023ea:	eef0 1a65 	vmov.f32	s3, s11
 80023ee:	eeb0 2a46 	vmov.f32	s4, s12
 80023f2:	eef0 2a66 	vmov.f32	s5, s13
 80023f6:	eeb0 3a47 	vmov.f32	s6, s14
 80023fa:	eef0 3a67 	vmov.f32	s7, s15
 80023fe:	f000 f8f3 	bl	80025e8 <calculateHeading>
 8002402:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
    const char* direction = getCompassDirection(heading);
 8002406:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 800240a:	f000 f869 	bl	80024e0 <getCompassDirection>
 800240e:	6378      	str	r0, [r7, #52]	@ 0x34

    // Calculate the degree difference
    float degree_difference = fabs(heading - *previous_heading);
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	eef0 7ae7 	vabs.f32	s15, s15
 8002422:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Angle wrap around check
    if (degree_difference > 180.0) {
 8002426:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800242a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80024d0 <displayHeadingAndAngle+0x140>
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	dd07      	ble.n	8002448 <displayHeadingAndAngle+0xb8>
        degree_difference = 360.0 - degree_difference;
 8002438:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80024d4 <displayHeadingAndAngle+0x144>
 800243c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002444:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Update direction and angle if degree difference is greater than threshold
    if (degree_difference > DEGREE_CHANGE_THRESHOLD) {
 8002448:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800244c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	dc00      	bgt.n	800245c <displayHeadingAndAngle+0xcc>
        *previous_heading = heading;
        LiquidCrystal_I2C_SetCursor(lcd2, 0, 3);
        snprintf(buffer, 20, "Angle: %.f%c    ", heading, 223); // 223 is char for degrees
        LiquidCrystal_I2C_Print(lcd2, buffer);
    }
}
 800245a:	e034      	b.n	80024c6 <displayHeadingAndAngle+0x136>
        if (strcmp(direction, *previousDirection) != 0) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002464:	f7fd feb4 	bl	80001d0 <strcmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d011      	beq.n	8002492 <displayHeadingAndAngle+0x102>
            *previousDirection = direction;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002472:	601a      	str	r2, [r3, #0]
            LiquidCrystal_I2C_SetCursor(lcd2, 0, 2);
 8002474:	2202      	movs	r2, #2
 8002476:	2100      	movs	r1, #0
 8002478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800247a:	f7fe fe23 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, 20, "Heading: %s          ", direction);
 800247e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002480:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <displayHeadingAndAngle+0x148>)
 8002482:	2114      	movs	r1, #20
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f005 fed9 	bl	800823c <sniprintf>
            LiquidCrystal_I2C_Print(lcd2, buffer);
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800248e:	f7fe fe43 	bl	8001118 <LiquidCrystal_I2C_Print>
        *previous_heading = heading;
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002496:	601a      	str	r2, [r3, #0]
        LiquidCrystal_I2C_SetCursor(lcd2, 0, 3);
 8002498:	2203      	movs	r2, #3
 800249a:	2100      	movs	r1, #0
 800249c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800249e:	f7fe fe11 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
        snprintf(buffer, 20, "Angle: %.f%c    ", heading, 223); // 223 is char for degrees
 80024a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80024a4:	f7fe f860 	bl	8000568 <__aeabi_f2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	21df      	movs	r1, #223	@ 0xdf
 80024ae:	9102      	str	r1, [sp, #8]
 80024b0:	e9cd 2300 	strd	r2, r3, [sp]
 80024b4:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <displayHeadingAndAngle+0x14c>)
 80024b6:	2114      	movs	r1, #20
 80024b8:	6838      	ldr	r0, [r7, #0]
 80024ba:	f005 febf 	bl	800823c <sniprintf>
        LiquidCrystal_I2C_Print(lcd2, buffer);
 80024be:	6839      	ldr	r1, [r7, #0]
 80024c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024c2:	f7fe fe29 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 80024c6:	bf00      	nop
 80024c8:	3740      	adds	r7, #64	@ 0x40
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	43340000 	.word	0x43340000
 80024d4:	43b40000 	.word	0x43b40000
 80024d8:	0800abb0 	.word	0x0800abb0
 80024dc:	0800abc8 	.word	0x0800abc8

080024e0 <getCompassDirection>:

const char* getCompassDirection(float heading) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	ed87 0a01 	vstr	s0, [r7, #4]
    if ((heading >= 337.5) || (heading < 22.5)) {
 80024ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ee:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80025a4 <getCompassDirection+0xc4>
 80024f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	da08      	bge.n	800250e <getCompassDirection+0x2e>
 80024fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002500:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80025a8 <getCompassDirection+0xc8>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d501      	bpl.n	8002512 <getCompassDirection+0x32>
        return "*North*";
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <getCompassDirection+0xcc>)
 8002510:	e042      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 67.5) {
 8002512:	edd7 7a01 	vldr	s15, [r7, #4]
 8002516:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80025b0 <getCompassDirection+0xd0>
 800251a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d501      	bpl.n	8002528 <getCompassDirection+0x48>
        return "NorthEast";
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <getCompassDirection+0xd4>)
 8002526:	e037      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 112.5) {
 8002528:	edd7 7a01 	vldr	s15, [r7, #4]
 800252c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80025b8 <getCompassDirection+0xd8>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d501      	bpl.n	800253e <getCompassDirection+0x5e>
        return "East";
 800253a:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <getCompassDirection+0xdc>)
 800253c:	e02c      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 157.5) {
 800253e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002542:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80025c0 <getCompassDirection+0xe0>
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d501      	bpl.n	8002554 <getCompassDirection+0x74>
        return "SouthEast";
 8002550:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <getCompassDirection+0xe4>)
 8002552:	e021      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 202.5) {
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80025c8 <getCompassDirection+0xe8>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d501      	bpl.n	800256a <getCompassDirection+0x8a>
        return "South";
 8002566:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <getCompassDirection+0xec>)
 8002568:	e016      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 247.5) {
 800256a:	edd7 7a01 	vldr	s15, [r7, #4]
 800256e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80025d0 <getCompassDirection+0xf0>
 8002572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d501      	bpl.n	8002580 <getCompassDirection+0xa0>
        return "SouthWest";
 800257c:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <getCompassDirection+0xf4>)
 800257e:	e00b      	b.n	8002598 <getCompassDirection+0xb8>
    } else if (heading < 292.5) {
 8002580:	edd7 7a01 	vldr	s15, [r7, #4]
 8002584:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80025d8 <getCompassDirection+0xf8>
 8002588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d501      	bpl.n	8002596 <getCompassDirection+0xb6>
        return "West";
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <getCompassDirection+0xfc>)
 8002594:	e000      	b.n	8002598 <getCompassDirection+0xb8>
    } else {
        return "NorthWest";
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <getCompassDirection+0x100>)
    }
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	43a8c000 	.word	0x43a8c000
 80025a8:	41b40000 	.word	0x41b40000
 80025ac:	0800abdc 	.word	0x0800abdc
 80025b0:	42870000 	.word	0x42870000
 80025b4:	0800abe4 	.word	0x0800abe4
 80025b8:	42e10000 	.word	0x42e10000
 80025bc:	0800abf0 	.word	0x0800abf0
 80025c0:	431d8000 	.word	0x431d8000
 80025c4:	0800abf8 	.word	0x0800abf8
 80025c8:	434a8000 	.word	0x434a8000
 80025cc:	0800ac04 	.word	0x0800ac04
 80025d0:	43778000 	.word	0x43778000
 80025d4:	0800ac0c 	.word	0x0800ac0c
 80025d8:	43924000 	.word	0x43924000
 80025dc:	0800ac18 	.word	0x0800ac18
 80025e0:	0800ac20 	.word	0x0800ac20
 80025e4:	00000000 	.word	0x00000000

080025e8 <calculateHeading>:

// Calculate heading angle in degrees from magnetometer
float calculateHeading(bno055_vector_t mag) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	eeb0 4a40 	vmov.f32	s8, s0
 80025f2:	eef0 4a60 	vmov.f32	s9, s1
 80025f6:	eeb0 5a41 	vmov.f32	s10, s2
 80025fa:	eef0 5a61 	vmov.f32	s11, s3
 80025fe:	eeb0 6a42 	vmov.f32	s12, s4
 8002602:	eef0 6a62 	vmov.f32	s13, s5
 8002606:	eeb0 7a43 	vmov.f32	s14, s6
 800260a:	eef0 7a63 	vmov.f32	s15, s7
 800260e:	ed87 4b00 	vstr	d4, [r7]
 8002612:	ed87 5b02 	vstr	d5, [r7, #8]
 8002616:	ed87 6b04 	vstr	d6, [r7, #16]
 800261a:	ed87 7b06 	vstr	d7, [r7, #24]
    // Since IMU is turned 90 deg to the right we adjust mag.x -> -mag.x
    float heading = atan2(-mag.x, mag.y) * 180 / M_PI;
 800261e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002622:	4610      	mov	r0, r2
 8002624:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8002628:	ed97 7b04 	vldr	d7, [r7, #16]
 800262c:	eeb0 1a47 	vmov.f32	s2, s14
 8002630:	eef0 1a67 	vmov.f32	s3, s15
 8002634:	ec41 0b10 	vmov	d0, r0, r1
 8002638:	f007 fe8c 	bl	800a354 <atan2>
 800263c:	ec51 0b10 	vmov	r0, r1, d0
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <calculateHeading+0xc0>)
 8002646:	f7fd ffe7 	bl	8000618 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	a313      	add	r3, pc, #76	@ (adr r3, 80026a0 <calculateHeading+0xb8>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe f908 	bl	800086c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fab0 	bl	8000bc8 <__aeabi_d2f>
 8002668:	4603      	mov	r3, r0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (heading < 0) {
 800266c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d507      	bpl.n	800268a <calculateHeading+0xa2>
        heading += 360;
 800267a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800267e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80026ac <calculateHeading+0xc4>
 8002682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002686:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    return heading;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	ee07 3a90 	vmov	s15, r3
}
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w
 80026a0:	54442d18 	.word	0x54442d18
 80026a4:	400921fb 	.word	0x400921fb
 80026a8:	40668000 	.word	0x40668000
 80026ac:	43b40000 	.word	0x43b40000

080026b0 <displayMovement>:

// Movement Status - idle, slightly moving, moving, walking
void displayMovement(bno055_vector_t euler, bno055_vector_t prev_euler, bno055_vector_t gravity, bno055_vector_t prev_gravity,
                        bno055_vector_t linear_accel, bno055_vector_t prev_linear_accel, bno055_vector_t gyro) {
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b0a8      	sub	sp, #160	@ 0xa0
 80026b4:	af18      	add	r7, sp, #96	@ 0x60
 80026b6:	ed87 0b08 	vstr	d0, [r7, #32]
 80026ba:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80026be:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 80026c2:	ed87 3b0e 	vstr	d3, [r7, #56]	@ 0x38
 80026c6:	ed87 4b00 	vstr	d4, [r7]
 80026ca:	ed87 5b02 	vstr	d5, [r7, #8]
 80026ce:	ed87 6b04 	vstr	d6, [r7, #16]
 80026d2:	ed87 7b06 	vstr	d7, [r7, #24]

    // Check if the user is walking
	if (isUserWalking(linear_accel, prev_linear_accel, gravity, prev_gravity)) {
 80026d6:	ed97 4b2c 	vldr	d4, [r7, #176]	@ 0xb0
 80026da:	ed97 5b2e 	vldr	d5, [r7, #184]	@ 0xb8
 80026de:	ed97 6b30 	vldr	d6, [r7, #192]	@ 0xc0
 80026e2:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80026e6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80026ea:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 80026ee:	ed97 2b28 	vldr	d2, [r7, #160]	@ 0xa0
 80026f2:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 80026f6:	ad08      	add	r5, sp, #32
 80026f8:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002704:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002708:	466c      	mov	r4, sp
 800270a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800270e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002712:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800271a:	f000 fb15 	bl	8002d48 <isUserWalking>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <displayMovement+0xae>
        walkingDebounceCounter++;
 8002724:	4b6f      	ldr	r3, [pc, #444]	@ (80028e4 <displayMovement+0x234>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <displayMovement+0x234>)
 800272c:	6013      	str	r3, [r2, #0]
        idleDebounceCounter = 0;
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <displayMovement+0x238>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
        slightlyMovingDebounceCounter = 0;
 8002734:	4b6d      	ldr	r3, [pc, #436]	@ (80028ec <displayMovement+0x23c>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
        movingDebounceCounter = 0;
 800273a:	4b6d      	ldr	r3, [pc, #436]	@ (80028f0 <displayMovement+0x240>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
        if (walkingDebounceCounter >= WALKING_DEBOUNCE_THRESHOLD) {
 8002740:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <displayMovement+0x234>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f340 80c9 	ble.w	80028dc <displayMovement+0x22c>
            LiquidCrystal_I2C_SetCursor(&lcd, 10, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	210a      	movs	r1, #10
 800274e:	4869      	ldr	r0, [pc, #420]	@ (80028f4 <displayMovement+0x244>)
 8002750:	f7fe fcb8 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            LiquidCrystal_I2C_Print(&lcd, "Walking   ");
 8002754:	4968      	ldr	r1, [pc, #416]	@ (80028f8 <displayMovement+0x248>)
 8002756:	4867      	ldr	r0, [pc, #412]	@ (80028f4 <displayMovement+0x244>)
 8002758:	f7fe fcde 	bl	8001118 <LiquidCrystal_I2C_Print>
        if (idleDebounceCounter >= IDLE_DEBOUNCE_THRESHOLD) {
            LiquidCrystal_I2C_SetCursor(&lcd, 10, 0);
            LiquidCrystal_I2C_Print(&lcd, "Full Idle      ");
        }
    }
}
 800275c:	e0be      	b.n	80028dc <displayMovement+0x22c>
    else if (isUserMoving(euler, prev_euler, gravity, prev_gravity, gyro)) {
 800275e:	ed97 4b00 	vldr	d4, [r7]
 8002762:	ed97 5b02 	vldr	d5, [r7, #8]
 8002766:	ed97 6b04 	vldr	d6, [r7, #16]
 800276a:	ed97 7b06 	vldr	d7, [r7, #24]
 800276e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002772:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8002776:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 800277a:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 800277e:	ad10      	add	r5, sp, #64	@ 0x40
 8002780:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800278c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002790:	ad08      	add	r5, sp, #32
 8002792:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800279e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027a2:	466c      	mov	r4, sp
 80027a4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027b4:	f000 f9ec 	bl	8002b90 <isUserMoving>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01b      	beq.n	80027f6 <displayMovement+0x146>
        movingDebounceCounter++;
 80027be:	4b4c      	ldr	r3, [pc, #304]	@ (80028f0 <displayMovement+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <displayMovement+0x240>)
 80027c6:	6013      	str	r3, [r2, #0]
        idleDebounceCounter = 0;
 80027c8:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <displayMovement+0x238>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
        slightlyMovingDebounceCounter = 0;
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <displayMovement+0x23c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
        walkingDebounceCounter = 0;
 80027d4:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <displayMovement+0x234>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
        if (movingDebounceCounter >= MOVING_DEBOUNCE_THRESHOLD) {
 80027da:	4b45      	ldr	r3, [pc, #276]	@ (80028f0 <displayMovement+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	dd7c      	ble.n	80028dc <displayMovement+0x22c>
            LiquidCrystal_I2C_SetCursor(&lcd, 10, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	210a      	movs	r1, #10
 80027e6:	4843      	ldr	r0, [pc, #268]	@ (80028f4 <displayMovement+0x244>)
 80027e8:	f7fe fc6c 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            LiquidCrystal_I2C_Print(&lcd, "Moving    ");
 80027ec:	4943      	ldr	r1, [pc, #268]	@ (80028fc <displayMovement+0x24c>)
 80027ee:	4841      	ldr	r0, [pc, #260]	@ (80028f4 <displayMovement+0x244>)
 80027f0:	f7fe fc92 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 80027f4:	e072      	b.n	80028dc <displayMovement+0x22c>
    else if (isUserSlightlyMoving(euler, prev_euler)) {
 80027f6:	ed97 4b00 	vldr	d4, [r7]
 80027fa:	ed97 5b02 	vldr	d5, [r7, #8]
 80027fe:	ed97 6b04 	vldr	d6, [r7, #16]
 8002802:	ed97 7b06 	vldr	d7, [r7, #24]
 8002806:	ed97 0b08 	vldr	d0, [r7, #32]
 800280a:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800280e:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8002812:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 8002816:	f000 f943 	bl	8002aa0 <isUserSlightlyMoving>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <displayMovement+0x1a8>
        slightlyMovingDebounceCounter++;
 8002820:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <displayMovement+0x23c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a31      	ldr	r2, [pc, #196]	@ (80028ec <displayMovement+0x23c>)
 8002828:	6013      	str	r3, [r2, #0]
        idleDebounceCounter = 0;
 800282a:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <displayMovement+0x238>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
        movingDebounceCounter = 0;
 8002830:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <displayMovement+0x240>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
        walkingDebounceCounter = 0;
 8002836:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <displayMovement+0x234>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
        if (slightlyMovingDebounceCounter >= SLIGHTLY_MOVING_DEBOUNCE_THRESHOLD) {
 800283c:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <displayMovement+0x23c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	dd4b      	ble.n	80028dc <displayMovement+0x22c>
            LiquidCrystal_I2C_SetCursor(&lcd, 10, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	210a      	movs	r1, #10
 8002848:	482a      	ldr	r0, [pc, #168]	@ (80028f4 <displayMovement+0x244>)
 800284a:	f7fe fc3b 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            LiquidCrystal_I2C_Print(&lcd, "Slight    ");
 800284e:	492c      	ldr	r1, [pc, #176]	@ (8002900 <displayMovement+0x250>)
 8002850:	4828      	ldr	r0, [pc, #160]	@ (80028f4 <displayMovement+0x244>)
 8002852:	f7fe fc61 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 8002856:	e041      	b.n	80028dc <displayMovement+0x22c>
    else if (isUserIdle(euler, prev_euler, gravity, prev_gravity)) {
 8002858:	ed97 4b00 	vldr	d4, [r7]
 800285c:	ed97 5b02 	vldr	d5, [r7, #8]
 8002860:	ed97 6b04 	vldr	d6, [r7, #16]
 8002864:	ed97 7b06 	vldr	d7, [r7, #24]
 8002868:	ed97 0b08 	vldr	d0, [r7, #32]
 800286c:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8002870:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8002874:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 8002878:	ad08      	add	r5, sp, #32
 800287a:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800287e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002882:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002886:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800288a:	466c      	mov	r4, sp
 800288c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8002890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002894:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800289c:	f000 f834 	bl	8002908 <isUserIdle>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01a      	beq.n	80028dc <displayMovement+0x22c>
        idleDebounceCounter++;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <displayMovement+0x238>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a0e      	ldr	r2, [pc, #56]	@ (80028e8 <displayMovement+0x238>)
 80028ae:	6013      	str	r3, [r2, #0]
        slightlyMovingDebounceCounter = 0;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <displayMovement+0x23c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
        movingDebounceCounter = 0;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <displayMovement+0x240>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
        walkingDebounceCounter = 0;
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <displayMovement+0x234>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
        if (idleDebounceCounter >= IDLE_DEBOUNCE_THRESHOLD) {
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <displayMovement+0x238>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	dd08      	ble.n	80028dc <displayMovement+0x22c>
            LiquidCrystal_I2C_SetCursor(&lcd, 10, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	210a      	movs	r1, #10
 80028ce:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <displayMovement+0x244>)
 80028d0:	f7fe fbf8 	bl	80010c4 <LiquidCrystal_I2C_SetCursor>
            LiquidCrystal_I2C_Print(&lcd, "Full Idle      ");
 80028d4:	490b      	ldr	r1, [pc, #44]	@ (8002904 <displayMovement+0x254>)
 80028d6:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <displayMovement+0x244>)
 80028d8:	f7fe fc1e 	bl	8001118 <LiquidCrystal_I2C_Print>
}
 80028dc:	bf00      	nop
 80028de:	3740      	adds	r7, #64	@ 0x40
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	20000368 	.word	0x20000368
 80028e8:	2000035c 	.word	0x2000035c
 80028ec:	20000360 	.word	0x20000360
 80028f0:	20000364 	.word	0x20000364
 80028f4:	200003c0 	.word	0x200003c0
 80028f8:	0800ac2c 	.word	0x0800ac2c
 80028fc:	0800ac38 	.word	0x0800ac38
 8002900:	0800ac44 	.word	0x0800ac44
 8002904:	0800ac50 	.word	0x0800ac50

08002908 <isUserIdle>:

// Check if user is idle using euler and gravity
int isUserIdle(bno055_vector_t euler, bno055_vector_t prev_euler, bno055_vector_t gravity, bno055_vector_t prev_gravity) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b096      	sub	sp, #88	@ 0x58
 800290c:	af00      	add	r7, sp, #0
 800290e:	ed87 0b08 	vstr	d0, [r7, #32]
 8002912:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002916:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 800291a:	ed87 3b0e 	vstr	d3, [r7, #56]	@ 0x38
 800291e:	ed87 4b00 	vstr	d4, [r7]
 8002922:	ed87 5b02 	vstr	d5, [r7, #8]
 8002926:	ed87 6b04 	vstr	d6, [r7, #16]
 800292a:	ed87 7b06 	vstr	d7, [r7, #24]
    float euler_change_x = fabs(euler.x - prev_euler.x);
 800292e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002936:	f7fd fcb7 	bl	80002a8 <__aeabi_dsub>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fe f941 	bl	8000bc8 <__aeabi_d2f>
 8002946:	ee07 0a90 	vmov	s15, r0
 800294a:	eef0 7ae7 	vabs.f32	s15, s15
 800294e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float euler_change_y = fabs(euler.y - prev_euler.y);
 8002952:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800295a:	f7fd fca5 	bl	80002a8 <__aeabi_dsub>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f92f 	bl	8000bc8 <__aeabi_d2f>
 800296a:	ee07 0a90 	vmov	s15, r0
 800296e:	eef0 7ae7 	vabs.f32	s15, s15
 8002972:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float euler_change_z = fabs(euler.z - prev_euler.z);
 8002976:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800297a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297e:	f7fd fc93 	bl	80002a8 <__aeabi_dsub>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f91d 	bl	8000bc8 <__aeabi_d2f>
 800298e:	ee07 0a90 	vmov	s15, r0
 8002992:	eef0 7ae7 	vabs.f32	s15, s15
 8002996:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float gravity_change_x = fabs(gravity.x - prev_gravity.x);
 800299a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800299e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029a2:	f7fd fc81 	bl	80002a8 <__aeabi_dsub>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f90b 	bl	8000bc8 <__aeabi_d2f>
 80029b2:	ee07 0a90 	vmov	s15, r0
 80029b6:	eef0 7ae7 	vabs.f32	s15, s15
 80029ba:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float gravity_change_y = fabs(gravity.y - prev_gravity.y);
 80029be:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80029c2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80029c6:	f7fd fc6f 	bl	80002a8 <__aeabi_dsub>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7fe f8f9 	bl	8000bc8 <__aeabi_d2f>
 80029d6:	ee07 0a90 	vmov	s15, r0
 80029da:	eef0 7ae7 	vabs.f32	s15, s15
 80029de:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float gravity_change_z = fabs(gravity.z - prev_gravity.z);
 80029e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80029e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80029ea:	f7fd fc5d 	bl	80002a8 <__aeabi_dsub>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7fe f8e7 	bl	8000bc8 <__aeabi_d2f>
 80029fa:	ee07 0a90 	vmov	s15, r0
 80029fe:	eef0 7ae7 	vabs.f32	s15, s15
 8002a02:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    return (euler_change_x < IDLE_EULER_CHANGE_THRESHOLD || euler_change_y < IDLE_EULER_CHANGE_THRESHOLD || euler_change_z < IDLE_EULER_CHANGE_THRESHOLD ||
 8002a06:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a08:	f7fd fdae 	bl	8000568 <__aeabi_f2d>
            gravity_change_x < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_y < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_z < IDLE_GRAVITY_CHANGE_THRESHOLD);
 8002a0c:	a322      	add	r3, pc, #136	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fe f873 	bl	8000afc <__aeabi_dcmplt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d136      	bne.n	8002a8a <isUserIdle+0x182>
    return (euler_change_x < IDLE_EULER_CHANGE_THRESHOLD || euler_change_y < IDLE_EULER_CHANGE_THRESHOLD || euler_change_z < IDLE_EULER_CHANGE_THRESHOLD ||
 8002a1c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002a1e:	f7fd fda3 	bl	8000568 <__aeabi_f2d>
 8002a22:	a31d      	add	r3, pc, #116	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fe f868 	bl	8000afc <__aeabi_dcmplt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d12b      	bne.n	8002a8a <isUserIdle+0x182>
 8002a32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a34:	f7fd fd98 	bl	8000568 <__aeabi_f2d>
 8002a38:	a317      	add	r3, pc, #92	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fe f85d 	bl	8000afc <__aeabi_dcmplt>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d120      	bne.n	8002a8a <isUserIdle+0x182>
            gravity_change_x < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_y < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_z < IDLE_GRAVITY_CHANGE_THRESHOLD);
 8002a48:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002a4a:	f7fd fd8d 	bl	8000568 <__aeabi_f2d>
    return (euler_change_x < IDLE_EULER_CHANGE_THRESHOLD || euler_change_y < IDLE_EULER_CHANGE_THRESHOLD || euler_change_z < IDLE_EULER_CHANGE_THRESHOLD ||
 8002a4e:	a312      	add	r3, pc, #72	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fe f852 	bl	8000afc <__aeabi_dcmplt>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <isUserIdle+0x182>
            gravity_change_x < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_y < IDLE_GRAVITY_CHANGE_THRESHOLD || gravity_change_z < IDLE_GRAVITY_CHANGE_THRESHOLD);
 8002a5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a60:	f7fd fd82 	bl	8000568 <__aeabi_f2d>
 8002a64:	a30c      	add	r3, pc, #48	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fe f847 	bl	8000afc <__aeabi_dcmplt>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <isUserIdle+0x182>
 8002a74:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a76:	f7fd fd77 	bl	8000568 <__aeabi_f2d>
 8002a7a:	a307      	add	r3, pc, #28	@ (adr r3, 8002a98 <isUserIdle+0x190>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fe f83c 	bl	8000afc <__aeabi_dcmplt>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <isUserIdle+0x186>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <isUserIdle+0x188>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3758      	adds	r7, #88	@ 0x58
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	eb851eb8 	.word	0xeb851eb8
 8002a9c:	3faeb851 	.word	0x3faeb851

08002aa0 <isUserSlightlyMoving>:

// Check if user is slightly moving using euler
int isUserSlightlyMoving(bno055_vector_t euler, bno055_vector_t prev_euler) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b094      	sub	sp, #80	@ 0x50
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	ed87 0b08 	vstr	d0, [r7, #32]
 8002aaa:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002aae:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 8002ab2:	ed87 3b0e 	vstr	d3, [r7, #56]	@ 0x38
 8002ab6:	ed87 4b00 	vstr	d4, [r7]
 8002aba:	ed87 5b02 	vstr	d5, [r7, #8]
 8002abe:	ed87 6b04 	vstr	d6, [r7, #16]
 8002ac2:	ed87 7b06 	vstr	d7, [r7, #24]
    float euler_change_x = fabs(euler.x - prev_euler.x);
 8002ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ace:	f7fd fbeb 	bl	80002a8 <__aeabi_dsub>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f875 	bl	8000bc8 <__aeabi_d2f>
 8002ade:	ee07 0a90 	vmov	s15, r0
 8002ae2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ae6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float euler_change_y = fabs(euler.y - prev_euler.y);
 8002aea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002aee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002af2:	f7fd fbd9 	bl	80002a8 <__aeabi_dsub>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f863 	bl	8000bc8 <__aeabi_d2f>
 8002b02:	ee07 0a90 	vmov	s15, r0
 8002b06:	eef0 7ae7 	vabs.f32	s15, s15
 8002b0a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float euler_change_z = fabs(euler.z - prev_euler.z);
 8002b0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b16:	f7fd fbc7 	bl	80002a8 <__aeabi_dsub>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fe f851 	bl	8000bc8 <__aeabi_d2f>
 8002b26:	ee07 0a90 	vmov	s15, r0
 8002b2a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b2e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    return (euler_change_x >= SLIGHTLY_MOVING_EULER_CHANGE_THRESHOLD || euler_change_y >= SLIGHTLY_MOVING_EULER_CHANGE_THRESHOLD || euler_change_z >= SLIGHTLY_MOVING_EULER_CHANGE_THRESHOLD);
 8002b32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b34:	f7fd fd18 	bl	8000568 <__aeabi_f2d>
 8002b38:	a313      	add	r3, pc, #76	@ (adr r3, 8002b88 <isUserSlightlyMoving+0xe8>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fff1 	bl	8000b24 <__aeabi_dcmpge>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <isUserSlightlyMoving+0xd4>
 8002b48:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002b4a:	f7fd fd0d 	bl	8000568 <__aeabi_f2d>
 8002b4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002b88 <isUserSlightlyMoving+0xe8>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd ffe6 	bl	8000b24 <__aeabi_dcmpge>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <isUserSlightlyMoving+0xd4>
 8002b5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b60:	f7fd fd02 	bl	8000568 <__aeabi_f2d>
 8002b64:	a308      	add	r3, pc, #32	@ (adr r3, 8002b88 <isUserSlightlyMoving+0xe8>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd ffdb 	bl	8000b24 <__aeabi_dcmpge>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <isUserSlightlyMoving+0xd8>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <isUserSlightlyMoving+0xda>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3750      	adds	r7, #80	@ 0x50
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	f3af 8000 	nop.w
 8002b88:	47ae147b 	.word	0x47ae147b
 8002b8c:	3fb47ae1 	.word	0x3fb47ae1

08002b90 <isUserMoving>:

// Check if user is moving using euler, gravity, gyro
int isUserMoving(bno055_vector_t euler, bno055_vector_t prev_euler, bno055_vector_t gravity, bno055_vector_t prev_gravity, bno055_vector_t gyro) {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b096      	sub	sp, #88	@ 0x58
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	ed87 0b08 	vstr	d0, [r7, #32]
 8002b9a:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002b9e:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 8002ba2:	ed87 3b0e 	vstr	d3, [r7, #56]	@ 0x38
 8002ba6:	ed87 4b00 	vstr	d4, [r7]
 8002baa:	ed87 5b02 	vstr	d5, [r7, #8]
 8002bae:	ed87 6b04 	vstr	d6, [r7, #16]
 8002bb2:	ed87 7b06 	vstr	d7, [r7, #24]
    float euler_change_x = fabs(euler.x - prev_euler.x);
 8002bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bbe:	f7fd fb73 	bl	80002a8 <__aeabi_dsub>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7fd fffd 	bl	8000bc8 <__aeabi_d2f>
 8002bce:	ee07 0a90 	vmov	s15, r0
 8002bd2:	eef0 7ae7 	vabs.f32	s15, s15
 8002bd6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float euler_change_y = fabs(euler.y - prev_euler.y);
 8002bda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002be2:	f7fd fb61 	bl	80002a8 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ffeb 	bl	8000bc8 <__aeabi_d2f>
 8002bf2:	ee07 0a90 	vmov	s15, r0
 8002bf6:	eef0 7ae7 	vabs.f32	s15, s15
 8002bfa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float euler_change_z = fabs(euler.z - prev_euler.z);
 8002bfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c06:	f7fd fb4f 	bl	80002a8 <__aeabi_dsub>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd ffd9 	bl	8000bc8 <__aeabi_d2f>
 8002c16:	ee07 0a90 	vmov	s15, r0
 8002c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c1e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float gravity_change_z = fabs(gravity.z - prev_gravity.z);
 8002c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002c2a:	f7fd fb3d 	bl	80002a8 <__aeabi_dsub>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd ffc7 	bl	8000bc8 <__aeabi_d2f>
 8002c3a:	ee07 0a90 	vmov	s15, r0
 8002c3e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c42:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Magnitude of 3D angular velocity vector: |gyro| = √(gyro.x^2 + gyro.y^2 + gyro.z^2)
    // Measure rate of rotation in 3D space to see if user is moving
    float gyro_magnitude = sqrt((gyro.x * gyro.x) + (gyro.y * gyro.y) + (gyro.z * gyro.z));
 8002c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c4a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002c4e:	f7fd fce3 	bl	8000618 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	461d      	mov	r5, r3
 8002c5a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002c5e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8002c62:	f7fd fcd9 	bl	8000618 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	f7fd fb1d 	bl	80002ac <__adddf3>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4614      	mov	r4, r2
 8002c78:	461d      	mov	r5, r3
 8002c7a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8002c7e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002c82:	f7fd fcc9 	bl	8000618 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd fb0d 	bl	80002ac <__adddf3>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	ec43 2b17 	vmov	d7, r2, r3
 8002c9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9e:	eef0 0a67 	vmov.f32	s1, s15
 8002ca2:	f007 fb59 	bl	800a358 <sqrt>
 8002ca6:	ec53 2b10 	vmov	r2, r3, d0
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fd ff8b 	bl	8000bc8 <__aeabi_d2f>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44

    return (
        ((euler_change_x >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_y >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_z >= MOVING_EULER_CHANGE_THRESHOLD)) &&
 8002cb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002cb8:	f7fd fc56 	bl	8000568 <__aeabi_f2d>
        (gravity_change_z >= MOVING_GRAVITY_CHANGE_THRESHOLD) && (gyro_magnitude >  MOVING_GYRO_CHANGE_THRESHOLD));
 8002cbc:	a31e      	add	r3, pc, #120	@ (adr r3, 8002d38 <isUserMoving+0x1a8>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd ff2f 	bl	8000b24 <__aeabi_dcmpge>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d115      	bne.n	8002cf8 <isUserMoving+0x168>
        ((euler_change_x >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_y >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_z >= MOVING_EULER_CHANGE_THRESHOLD)) &&
 8002ccc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002cce:	f7fd fc4b 	bl	8000568 <__aeabi_f2d>
 8002cd2:	a319      	add	r3, pc, #100	@ (adr r3, 8002d38 <isUserMoving+0x1a8>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd ff24 	bl	8000b24 <__aeabi_dcmpge>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <isUserMoving+0x168>
 8002ce2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002ce4:	f7fd fc40 	bl	8000568 <__aeabi_f2d>
 8002ce8:	a313      	add	r3, pc, #76	@ (adr r3, 8002d38 <isUserMoving+0x1a8>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd ff19 	bl	8000b24 <__aeabi_dcmpge>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <isUserMoving+0x198>
        (gravity_change_z >= MOVING_GRAVITY_CHANGE_THRESHOLD) && (gyro_magnitude >  MOVING_GYRO_CHANGE_THRESHOLD));
 8002cf8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002cfa:	f7fd fc35 	bl	8000568 <__aeabi_f2d>
        ((euler_change_x >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_y >= MOVING_EULER_CHANGE_THRESHOLD) || (euler_change_z >= MOVING_EULER_CHANGE_THRESHOLD)) &&
 8002cfe:	a310      	add	r3, pc, #64	@ (adr r3, 8002d40 <isUserMoving+0x1b0>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd ff0e 	bl	8000b24 <__aeabi_dcmpge>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <isUserMoving+0x198>
        (gravity_change_z >= MOVING_GRAVITY_CHANGE_THRESHOLD) && (gyro_magnitude >  MOVING_GYRO_CHANGE_THRESHOLD));
 8002d0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d10:	f7fd fc2a 	bl	8000568 <__aeabi_f2d>
 8002d14:	a30a      	add	r3, pc, #40	@ (adr r3, 8002d40 <isUserMoving+0x1b0>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd ff0d 	bl	8000b38 <__aeabi_dcmpgt>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <isUserMoving+0x198>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <isUserMoving+0x19a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3758      	adds	r7, #88	@ 0x58
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	f3af 8000 	nop.w
 8002d38:	33333333 	.word	0x33333333
 8002d3c:	3fd33333 	.word	0x3fd33333
 8002d40:	9999999a 	.word	0x9999999a
 8002d44:	3fc99999 	.word	0x3fc99999

08002d48 <isUserWalking>:

// Check if user is walking using lin accel, and gravity
int isUserWalking(bno055_vector_t linear_accel, bno055_vector_t prev_linear_accel, bno055_vector_t gravity, bno055_vector_t prev_gravity) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b094      	sub	sp, #80	@ 0x50
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	ed87 0b08 	vstr	d0, [r7, #32]
 8002d52:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002d56:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 8002d5a:	ed87 3b0e 	vstr	d3, [r7, #56]	@ 0x38
 8002d5e:	ed87 4b00 	vstr	d4, [r7]
 8002d62:	ed87 5b02 	vstr	d5, [r7, #8]
 8002d66:	ed87 6b04 	vstr	d6, [r7, #16]
 8002d6a:	ed87 7b06 	vstr	d7, [r7, #24]
    float accel_change_x = fabs(linear_accel.x - prev_linear_accel.x);
 8002d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d76:	f7fd fa97 	bl	80002a8 <__aeabi_dsub>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff21 	bl	8000bc8 <__aeabi_d2f>
 8002d86:	ee07 0a90 	vmov	s15, r0
 8002d8a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d8e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float gravity_change_x = fabs(gravity.x - prev_gravity.x);
 8002d92:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002d96:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d9a:	f7fd fa85 	bl	80002a8 <__aeabi_dsub>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f7fd ff0f 	bl	8000bc8 <__aeabi_d2f>
 8002daa:	ee07 0a90 	vmov	s15, r0
 8002dae:	eef0 7ae7 	vabs.f32	s15, s15
 8002db2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float gravity_change_z = fabs(gravity.z - prev_gravity.z);
 8002db6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002dba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002dbe:	f7fd fa73 	bl	80002a8 <__aeabi_dsub>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7fd fefd 	bl	8000bc8 <__aeabi_d2f>
 8002dce:	ee07 0a90 	vmov	s15, r0
 8002dd2:	eef0 7ae7 	vabs.f32	s15, s15
 8002dd6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    return (gravity_change_x >= WALKING_GRAVITY_X_CHANGE_THRESHOLD && gravity_change_z >= WALKING_GRAVITY_Z_CHANGE_THRESHOLD
 8002dda:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002ddc:	f7fd fbc4 	bl	8000568 <__aeabi_f2d>
    		&& accel_change_x >= WALKING_ACCEL_X_CHANGE_THRESHOLD);
 8002de0:	a311      	add	r3, pc, #68	@ (adr r3, 8002e28 <isUserWalking+0xe0>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fe9d 	bl	8000b24 <__aeabi_dcmpge>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <isUserWalking+0xd4>
    return (gravity_change_x >= WALKING_GRAVITY_X_CHANGE_THRESHOLD && gravity_change_z >= WALKING_GRAVITY_Z_CHANGE_THRESHOLD
 8002df0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002df2:	f7fd fbb9 	bl	8000568 <__aeabi_f2d>
 8002df6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002e30 <isUserWalking+0xe8>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fe92 	bl	8000b24 <__aeabi_dcmpge>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <isUserWalking+0xd4>
    		&& accel_change_x >= WALKING_ACCEL_X_CHANGE_THRESHOLD);
 8002e06:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002e0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	db01      	blt.n	8002e1c <isUserWalking+0xd4>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <isUserWalking+0xd6>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3750      	adds	r7, #80	@ 0x50
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	33333333 	.word	0x33333333
 8002e2c:	3fd33333 	.word	0x3fd33333
 8002e30:	9999999a 	.word	0x9999999a
 8002e34:	3fc99999 	.word	0x3fc99999

08002e38 <MX_I2C1_Init>:

// I2C Configuration
static void MX_I2C1_Init(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
    i2c.Instance = I2C1;
 8002e3c:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e3e:	4a14      	ldr	r2, [pc, #80]	@ (8002e90 <MX_I2C1_Init+0x58>)
 8002e40:	601a      	str	r2, [r3, #0]
    i2c.Init.ClockSpeed = 100000;
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <MX_I2C1_Init+0x5c>)
 8002e46:	605a      	str	r2, [r3, #4]
    i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e48:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
    i2c.Init.OwnAddress1 = 0;
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e5a:	611a      	str	r2, [r3, #16]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2 = 0;
 8002e62:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e68:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&i2c) != HAL_OK) {
 8002e74:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <MX_I2C1_Init+0x54>)
 8002e76:	f002 fb2b 	bl	80054d0 <HAL_I2C_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <MX_I2C1_Init+0x50>
        Error_Handler("I2C Initialization Failed", 1);
 8002e80:	2101      	movs	r1, #1
 8002e82:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <MX_I2C1_Init+0x60>)
 8002e84:	f7fe ffdc 	bl	8001e40 <Error_Handler>
    }
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000036c 	.word	0x2000036c
 8002e90:	40005400 	.word	0x40005400
 8002e94:	000186a0 	.word	0x000186a0
 8002e98:	0800ac60 	.word	0x0800ac60

08002e9c <MX_GPIO_Init>:

// SCL = PB6 and SDA = PB7 configurations
static void MX_GPIO_Init(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <MX_GPIO_Init+0x58>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <MX_GPIO_Init+0x58>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <MX_GPIO_Init+0x58>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002ecc:	23c0      	movs	r3, #192	@ 0xc0
 8002ece:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed0:	2312      	movs	r3, #18
 8002ed2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002edc:	2304      	movs	r3, #4
 8002ede:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4804      	ldr	r0, [pc, #16]	@ (8002ef8 <MX_GPIO_Init+0x5c>)
 8002ee6:	f000 fbc9 	bl	800367c <HAL_GPIO_Init>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020400 	.word	0x40020400

08002efc <SystemClock_Config>:

// Sys Clock Configurations
void SystemClock_Config(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b092      	sub	sp, #72	@ 0x48
 8002f00:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	2230      	movs	r2, #48	@ 0x30
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 fa0d 	bl	800832a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <SystemClock_Config+0xb4>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <SystemClock_Config+0xb4>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <SystemClock_Config+0xb4>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f42:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f44:	2302      	movs	r3, #2
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f48:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 8002f4e:	2308      	movs	r3, #8
 8002f50:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 8002f52:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f60:	f107 0318 	add.w	r3, r7, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 faad 	bl	80064c4 <HAL_RCC_OscConfig>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <SystemClock_Config+0x7c>
        Error_Handler("RCC Oscillator Configuration Failed", 2);
 8002f70:	2102      	movs	r1, #2
 8002f72:	4810      	ldr	r0, [pc, #64]	@ (8002fb4 <SystemClock_Config+0xb8>)
 8002f74:	f7fe ff64 	bl	8001e40 <Error_Handler>
    }
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f78:	230f      	movs	r3, #15
 8002f7a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f88:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f8e:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2105      	movs	r1, #5
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fd0d 	bl	80069b4 <HAL_RCC_ClockConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <SystemClock_Config+0xac>
        Error_Handler("RCC Clock Configuration Failed", 2);
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <SystemClock_Config+0xbc>)
 8002fa4:	f7fe ff4c 	bl	8001e40 <Error_Handler>
    }
}
 8002fa8:	bf00      	nop
 8002faa:	3748      	adds	r7, #72	@ 0x48
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	0800ac7c 	.word	0x0800ac7c
 8002fb8:	0800aca0 	.word	0x0800aca0

08002fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <HAL_MspInit+0x4c>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_MspInit+0x4c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4a08      	ldr	r2, [pc, #32]	@ (8003008 <HAL_MspInit+0x4c>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fee:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f000 fb0a 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	@ 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a21      	ldr	r2, [pc, #132]	@ (80030b0 <HAL_I2C_MspInit+0xa4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d13b      	bne.n	80030a6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800304a:	2340      	movs	r3, #64	@ 0x40
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304e:	2312      	movs	r3, #18
 8003050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800305a:	2304      	movs	r3, #4
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	4814      	ldr	r0, [pc, #80]	@ (80030b8 <HAL_I2C_MspInit+0xac>)
 8003066:	f000 fb09 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306e:	2312      	movs	r3, #18
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003072:	2301      	movs	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800307a:	2304      	movs	r3, #4
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	480c      	ldr	r0, [pc, #48]	@ (80030b8 <HAL_I2C_MspInit+0xac>)
 8003086:	f000 faf9 	bl	800367c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003094:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003098:	6413      	str	r3, [r2, #64]	@ 0x40
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_I2C_MspInit+0xa8>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3728      	adds	r7, #40	@ 0x28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40005400 	.word	0x40005400
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400

080030bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <NMI_Handler+0x4>

080030c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <HardFault_Handler+0x4>

080030cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <MemManage_Handler+0x4>

080030d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <BusFault_Handler+0x4>

080030dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <UsageFault_Handler+0x4>

080030e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003112:	f000 f989 	bl	8003428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <OTG_FS_IRQHandler+0x10>)
 8003122:	f000 fc47 	bl	80039b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200003e0 	.word	0x200003e0

08003130 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800313a:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <ITM_SendChar+0x48>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a0e      	ldr	r2, [pc, #56]	@ (8003178 <ITM_SendChar+0x48>)
 8003140:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003144:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <ITM_SendChar+0x4c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <ITM_SendChar+0x4c>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003152:	bf00      	nop
 8003154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f8      	beq.n	8003154 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8003162:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	6013      	str	r3, [r2, #0]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000edfc 	.word	0xe000edfc
 800317c:	e0000e00 	.word	0xe0000e00

08003180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return 1;
 8003184:	2301      	movs	r3, #1
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <_kill>:

int _kill(int pid, int sig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800319a:	f005 f929 	bl	80083f0 <__errno>
 800319e:	4603      	mov	r3, r0
 80031a0:	2216      	movs	r2, #22
 80031a2:	601a      	str	r2, [r3, #0]
  return -1;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_exit>:

void _exit (int status)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffe7 	bl	8003190 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <_exit+0x12>

080031c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e00a      	b.n	80031ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031d8:	f3af 8000 	nop.w
 80031dc:	4601      	mov	r1, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	60ba      	str	r2, [r7, #8]
 80031e4:	b2ca      	uxtb	r2, r1
 80031e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	dbf0      	blt.n	80031d8 <_read+0x12>
  }

  return len;
 80031f6:	687b      	ldr	r3, [r7, #4]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e009      	b.n	8003226 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff88 	bl	8003130 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	dbf1      	blt.n	8003212 <_write+0x12>
  }
  return len;
 800322e:	687b      	ldr	r3, [r7, #4]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_close>:

int _close(int file)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003260:	605a      	str	r2, [r3, #4]
  return 0;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <_isatty>:

int _isatty(int file)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a8:	4a14      	ldr	r2, [pc, #80]	@ (80032fc <_sbrk+0x5c>)
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <_sbrk+0x60>)
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b4:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <_sbrk+0x64>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <_sbrk+0x64>)
 80032be:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <_sbrk+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <_sbrk+0x64>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d0:	f005 f88e 	bl	80083f0 <__errno>
 80032d4:	4603      	mov	r3, r0
 80032d6:	220c      	movs	r2, #12
 80032d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	e009      	b.n	80032f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <_sbrk+0x64>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e6:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <_sbrk+0x64>)
 80032f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20020000 	.word	0x20020000
 8003300:	00000400 	.word	0x00000400
 8003304:	200003d8 	.word	0x200003d8
 8003308:	20000910 	.word	0x20000910

0800330c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <SystemInit+0x20>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <SystemInit+0x20>)
 8003318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800331c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003368 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003334:	f7ff ffea 	bl	800330c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800333a:	490d      	ldr	r1, [pc, #52]	@ (8003370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003340:	e002      	b.n	8003348 <LoopCopyDataInit>

08003342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003346:	3304      	adds	r3, #4

08003348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800334c:	d3f9      	bcc.n	8003342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003350:	4c0a      	ldr	r4, [pc, #40]	@ (800337c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003354:	e001      	b.n	800335a <LoopFillZerobss>

08003356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003358:	3204      	adds	r2, #4

0800335a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800335c:	d3fb      	bcc.n	8003356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335e:	f005 f84d 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003362:	f7fe fb9f 	bl	8001aa4 <main>
  bx  lr    
 8003366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800336c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003370:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003374:	0800b0c8 	.word	0x0800b0c8
  ldr r2, =_sbss
 8003378:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800337c:	2000090c 	.word	0x2000090c

08003380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC_IRQHandler>
	...

08003384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <HAL_Init+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0d      	ldr	r2, [pc, #52]	@ (80033c4 <HAL_Init+0x40>)
 800338e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <HAL_Init+0x40>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800339e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a0:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a07      	ldr	r2, [pc, #28]	@ (80033c4 <HAL_Init+0x40>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ac:	2003      	movs	r0, #3
 80033ae:	f000 f931 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f000 f808 	bl	80033c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b8:	f7ff fe00 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00

080033c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_InitTick+0x54>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <HAL_InitTick+0x58>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4619      	mov	r1, r3
 80033da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033de:	fbb3 f3f1 	udiv	r3, r3, r1
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f93b 	bl	8003662 <HAL_SYSTICK_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00e      	b.n	8003414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b0f      	cmp	r3, #15
 80033fa:	d80a      	bhi.n	8003412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033fc:	2200      	movs	r2, #0
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	f000 f911 	bl	800362a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003408:	4a06      	ldr	r2, [pc, #24]	@ (8003424 <HAL_InitTick+0x5c>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000014 	.word	0x20000014
 8003420:	2000001c 	.word	0x2000001c
 8003424:	20000018 	.word	0x20000018

08003428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_IncTick+0x20>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_IncTick+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4413      	add	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_IncTick+0x24>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000001c 	.word	0x2000001c
 800344c:	200003dc 	.word	0x200003dc

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	200003dc 	.word	0x200003dc

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <HAL_Delay+0x44>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348e:	bf00      	nop
 8003490:	f7ff ffde 	bl	8003450 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
  {
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000001c 	.word	0x2000001c

080034b0 <__NVIC_SetPriorityGrouping>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_SetPriority>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	@ (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	@ (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	@ 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff47 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff5c 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff8e 	bl	8003568 <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5d 	bl	8003514 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffb0 	bl	80035d0 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	e16b      	b.n	8003970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f040 815a 	bne.w	800396a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d005      	beq.n	80036ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d130      	bne.n	8003730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003704:	2201      	movs	r2, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0201 	and.w	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d017      	beq.n	800376c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d123      	bne.n	80037c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	08da      	lsrs	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3208      	adds	r2, #8
 8003780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	08da      	lsrs	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3208      	adds	r2, #8
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80b4 	beq.w	800396a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b60      	ldr	r3, [pc, #384]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	4a5f      	ldr	r2, [pc, #380]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 800380c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003810:	6453      	str	r3, [r2, #68]	@ 0x44
 8003812:	4b5d      	ldr	r3, [pc, #372]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800381e:	4a5b      	ldr	r2, [pc, #364]	@ (800398c <HAL_GPIO_Init+0x310>)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_GPIO_Init+0x314>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <HAL_GPIO_Init+0x226>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a51      	ldr	r2, [pc, #324]	@ (8003994 <HAL_GPIO_Init+0x318>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x222>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a50      	ldr	r2, [pc, #320]	@ (8003998 <HAL_GPIO_Init+0x31c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x21e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4f      	ldr	r2, [pc, #316]	@ (800399c <HAL_GPIO_Init+0x320>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x21a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4e      	ldr	r2, [pc, #312]	@ (80039a0 <HAL_GPIO_Init+0x324>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x216>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4d      	ldr	r2, [pc, #308]	@ (80039a4 <HAL_GPIO_Init+0x328>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x212>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4c      	ldr	r2, [pc, #304]	@ (80039a8 <HAL_GPIO_Init+0x32c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x20e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4b      	ldr	r2, [pc, #300]	@ (80039ac <HAL_GPIO_Init+0x330>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x20a>
 8003882:	2307      	movs	r3, #7
 8003884:	e00e      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003886:	2308      	movs	r3, #8
 8003888:	e00c      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388a:	2306      	movs	r3, #6
 800388c:	e00a      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388e:	2305      	movs	r3, #5
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003892:	2304      	movs	r3, #4
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	@ (800398c <HAL_GPIO_Init+0x310>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a32      	ldr	r2, [pc, #200]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f ae90 	bls.w	8003698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	@ 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40021400 	.word	0x40021400
 80039a8:	40021800 	.word	0x40021800
 80039ac:	40021c00 	.word	0x40021c00
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fb0c 	bl	8006fe8 <USB_GetMode>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 80fb 	bne.w	8003bce <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 facf 	bl	8006f80 <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80f1 	beq.w	8003bcc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fac6 	bl	8006f80 <USB_ReadInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039fe:	d104      	bne.n	8003a0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fab6 	bl	8006f80 <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1e:	d104      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 faa6 	bl	8006f80 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3e:	d104      	bne.n	8003a4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fa96 	bl	8006f80 <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d103      	bne.n	8003a66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 fa88 	bl	8006f80 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a7a:	d120      	bne.n	8003abe <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d113      	bne.n	8003abe <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a96:	2110      	movs	r1, #16
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	f003 f9b9 	bl	8006e10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a9e:	6938      	ldr	r0, [r7, #16]
 8003aa0:	f003 f9e8 	bl	8006e74 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7a5b      	ldrb	r3, [r3, #9]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d105      	bne.n	8003ab8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 faa6 	bl	8007004 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f003 fd5e 	bl	800757a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fa5c 	bl	8006f80 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad2:	d102      	bne.n	8003ada <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f001 fc87 	bl	80053e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fa4e 	bl	8006f80 <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d106      	bne.n	8003afc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f003 fd27 	bl	8007542 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2208      	movs	r2, #8
 8003afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 fa3d 	bl	8006f80 <USB_ReadInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b10:	d139      	bne.n	8003b86 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fab1 	bl	800707e <USB_HC_ReadInterrupt>
 8003b1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e025      	b.n	8003b70 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d018      	beq.n	8003b6a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4e:	d106      	bne.n	8003b5e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f859 	bl	8003c0e <HCD_HC_IN_IRQHandler>
 8003b5c:	e005      	b.n	8003b6a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 febb 	bl	80048e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	795b      	ldrb	r3, [r3, #5]
 8003b74:	461a      	mov	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d3d3      	bcc.n	8003b24 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 f9f8 	bl	8006f80 <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d101      	bne.n	8003b9e <HAL_HCD_IRQHandler+0x1ea>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_HCD_IRQHandler+0x1ec>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d014      	beq.n	8003bce <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0210 	bic.w	r2, r2, #16
 8003bb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 fb38 	bl	800522a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0210 	orr.w	r2, r2, #16
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	e000      	b.n	8003bce <HAL_HCD_IRQHandler+0x21a>
      return;
 8003bcc:	bf00      	nop
    }
  }
}
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_HCD_Stop+0x16>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e00d      	b.n	8003c06 <HAL_HCD_Stop+0x32>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fb72 	bl	80072e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 f9ba 	bl	8006fa6 <USB_ReadChInterrupts>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11a      	bne.n	8003c72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	334d      	adds	r3, #77	@ 0x4d
 8003c5e:	2207      	movs	r2, #7
 8003c60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fa18 	bl	80070a0 <USB_HC_Halt>
 8003c70:	e09e      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 f993 	bl	8006fa6 <USB_ReadChInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	d11b      	bne.n	8003cc4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	334d      	adds	r3, #77	@ 0x4d
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 f9ef 	bl	80070a0 <USB_HC_Halt>
 8003cc2:	e075      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 f96a 	bl	8006fa6 <USB_ReadChInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d11a      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2308      	movs	r3, #8
 8003cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	334d      	adds	r3, #77	@ 0x4d
 8003cfe:	2206      	movs	r2, #6
 8003d00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f003 f9c8 	bl	80070a0 <USB_HC_Halt>
 8003d10:	e04e      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 f943 	bl	8006fa6 <USB_ReadChInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d11b      	bne.n	8003d64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	2209      	movs	r2, #9
 8003d52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 f99f 	bl	80070a0 <USB_HC_Halt>
 8003d62:	e025      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 f91a 	bl	8006fa6 <USB_ReadChInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d78:	2b80      	cmp	r3, #128	@ 0x80
 8003d7a:	d119      	bne.n	8003db0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	@ 0x4d
 8003d9e:	2207      	movs	r2, #7
 8003da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 f978 	bl	80070a0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 f8f4 	bl	8006fa6 <USB_ReadChInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc8:	d112      	bne.n	8003df0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 f964 	bl	80070a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	f000 bd75 	b.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f003 f8d4 	bl	8006fa6 <USB_ReadChInterrupts>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 8128 	bne.w	800405a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	2320      	movs	r3, #32
 8003e1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	331b      	adds	r3, #27
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d119      	bne.n	8003e66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	331b      	adds	r3, #27
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	799b      	ldrb	r3, [r3, #6]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3330      	adds	r3, #48	@ 0x30
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	1ac9      	subs	r1, r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4403      	add	r3, r0
 8003ea2:	3338      	adds	r3, #56	@ 0x38
 8003ea4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	334d      	adds	r3, #77	@ 0x4d
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3344      	adds	r3, #68	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eda:	461a      	mov	r2, r3
 8003edc:	2301      	movs	r3, #1
 8003ede:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3326      	adds	r3, #38	@ 0x26
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3326      	adds	r3, #38	@ 0x26
 8003f06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d110      	bne.n	8003f2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 f8c3 	bl	80070a0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	e03d      	b.n	8003faa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3326      	adds	r3, #38	@ 0x26
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d00a      	beq.n	8003f5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3326      	adds	r3, #38	@ 0x26
 8003f54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d127      	bne.n	8003faa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	334c      	adds	r3, #76	@ 0x4c
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334c      	adds	r3, #76	@ 0x4c
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f003 faf6 	bl	8007596 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	799b      	ldrb	r3, [r3, #6]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d13b      	bne.n	800402a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3338      	adds	r3, #56	@ 0x38
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	3328      	adds	r3, #40	@ 0x28
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	440b      	add	r3, r1
 8003fd8:	1e59      	subs	r1, r3, #1
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4403      	add	r3, r0
 8003fe8:	3328      	adds	r3, #40	@ 0x28
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8470 	beq.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	333c      	adds	r3, #60	@ 0x3c
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	f083 0301 	eor.w	r3, r3, #1
 8004012:	b2d8      	uxtb	r0, r3
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	333c      	adds	r3, #60	@ 0x3c
 8004022:	4602      	mov	r2, r0
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	f000 bc58 	b.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	333c      	adds	r3, #60	@ 0x3c
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	f083 0301 	eor.w	r3, r3, #1
 8004042:	b2d8      	uxtb	r0, r3
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	333c      	adds	r3, #60	@ 0x3c
 8004052:	4602      	mov	r2, r0
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	f000 bc40 	b.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f002 ff9f 	bl	8006fa6 <USB_ReadChInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d131      	bne.n	80040d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800407e:	461a      	mov	r2, r3
 8004080:	2320      	movs	r3, #32
 8004082:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	331a      	adds	r3, #26
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	f040 841f 	bne.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	331b      	adds	r3, #27
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	334d      	adds	r3, #77	@ 0x4d
 80040c0:	2203      	movs	r2, #3
 80040c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 ffe7 	bl	80070a0 <USB_HC_Halt>
 80040d2:	f000 bc02 	b.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 ff61 	bl	8006fa6 <USB_ReadChInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	f040 8305 	bne.w	80046fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	2302      	movs	r3, #2
 8004100:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	@ 0x4d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d114      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334d      	adds	r3, #77	@ 0x4d
 8004128:	2202      	movs	r2, #2
 800412a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	334c      	adds	r3, #76	@ 0x4c
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e2cc      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	334d      	adds	r3, #77	@ 0x4d
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b06      	cmp	r3, #6
 8004156:	d114      	bne.n	8004182 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	2202      	movs	r2, #2
 800416a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	334c      	adds	r3, #76	@ 0x4c
 800417c:	2205      	movs	r2, #5
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e2ac      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	334d      	adds	r3, #77	@ 0x4d
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b07      	cmp	r3, #7
 8004196:	d00b      	beq.n	80041b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334d      	adds	r3, #77	@ 0x4d
 80041a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	f040 80a6 	bne.w	80042fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	334d      	adds	r3, #77	@ 0x4d
 80041c0:	2202      	movs	r2, #2
 80041c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3344      	adds	r3, #68	@ 0x44
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4403      	add	r3, r0
 80041e4:	3344      	adds	r3, #68	@ 0x44
 80041e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3344      	adds	r3, #68	@ 0x44
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d943      	bls.n	8004286 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	3344      	adds	r3, #68	@ 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	331a      	adds	r3, #26
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d123      	bne.n	8004270 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	331b      	adds	r3, #27
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	331c      	adds	r3, #28
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	440a      	add	r2, r1
 8004266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334c      	adds	r3, #76	@ 0x4c
 8004280:	2204      	movs	r2, #4
 8004282:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004284:	e229      	b.n	80046da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	334c      	adds	r3, #76	@ 0x4c
 8004296:	2202      	movs	r2, #2
 8004298:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3326      	adds	r3, #38	@ 0x26
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3326      	adds	r3, #38	@ 0x26
 80042c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	f040 8209 	bne.w	80046da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f4:	461a      	mov	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042fa:	e1ee      	b.n	80046da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334d      	adds	r3, #77	@ 0x4d
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b05      	cmp	r3, #5
 8004310:	f040 80c8 	bne.w	80044a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	334d      	adds	r3, #77	@ 0x4d
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	331b      	adds	r3, #27
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	f040 81ce 	bne.w	80046dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	3326      	adds	r3, #38	@ 0x26
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d16b      	bne.n	800442e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	3348      	adds	r3, #72	@ 0x48
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4403      	add	r3, r0
 8004376:	3348      	adds	r3, #72	@ 0x48
 8004378:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3348      	adds	r3, #72	@ 0x48
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d943      	bls.n	8004418 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3348      	adds	r3, #72	@ 0x48
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	331b      	adds	r3, #27
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	3344      	adds	r3, #68	@ 0x44
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d809      	bhi.n	80043e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	331c      	adds	r3, #28
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004400:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334c      	adds	r3, #76	@ 0x4c
 8004412:	2204      	movs	r2, #4
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e014      	b.n	8004442 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334c      	adds	r3, #76	@ 0x4c
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e009      	b.n	8004442 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334c      	adds	r3, #76	@ 0x4c
 800443e:	2202      	movs	r2, #2
 8004440:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3326      	adds	r3, #38	@ 0x26
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3326      	adds	r3, #38	@ 0x26
 8004468:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800446a:	2b02      	cmp	r3, #2
 800446c:	f040 8136 	bne.w	80046dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004486:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800448e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e11b      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	334d      	adds	r3, #77	@ 0x4d
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f040 8081 	bne.w	80045be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334d      	adds	r3, #77	@ 0x4d
 80044cc:	2202      	movs	r2, #2
 80044ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	331b      	adds	r3, #27
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 80fa 	bne.w	80046dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	334c      	adds	r3, #76	@ 0x4c
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	440a      	add	r2, r1
 8004512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	440a      	add	r2, r1
 8004532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	440a      	add	r2, r1
 8004552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3326      	adds	r3, #38	@ 0x26
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3326      	adds	r3, #38	@ 0x26
 8004582:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004584:	2b02      	cmp	r3, #2
 8004586:	f040 80a9 	bne.w	80046dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e08e      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	334d      	adds	r3, #77	@ 0x4d
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d143      	bne.n	800465c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334d      	adds	r3, #77	@ 0x4d
 80045e4:	2202      	movs	r2, #2
 80045e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	334c      	adds	r3, #76	@ 0x4c
 80045f8:	2202      	movs	r2, #2
 80045fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3326      	adds	r3, #38	@ 0x26
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3326      	adds	r3, #38	@ 0x26
 8004622:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004624:	2b02      	cmp	r3, #2
 8004626:	d159      	bne.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800463e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004646:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004654:	461a      	mov	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e03f      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	334d      	adds	r3, #77	@ 0x4d
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b08      	cmp	r3, #8
 8004670:	d126      	bne.n	80046c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334d      	adds	r3, #77	@ 0x4d
 8004682:	2202      	movs	r2, #2
 8004684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3344      	adds	r3, #68	@ 0x44
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4403      	add	r3, r0
 80046a6:	3344      	adds	r3, #68	@ 0x44
 80046a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	334c      	adds	r3, #76	@ 0x4c
 80046ba:	2204      	movs	r2, #4
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e00d      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334d      	adds	r3, #77	@ 0x4d
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	f000 8100 	beq.w	80048d8 <HCD_HC_IN_IRQHandler+0xcca>
 80046d8:	e000      	b.n	80046dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334c      	adds	r3, #76	@ 0x4c
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f002 ff4f 	bl	8007596 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046f8:	e0ef      	b.n	80048da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f002 fc4f 	bl	8006fa6 <USB_ReadChInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b40      	cmp	r3, #64	@ 0x40
 8004710:	d12f      	bne.n	8004772 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471e:	461a      	mov	r2, r3
 8004720:	2340      	movs	r3, #64	@ 0x40
 8004722:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	334d      	adds	r3, #77	@ 0x4d
 8004734:	2205      	movs	r2, #5
 8004736:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	331a      	adds	r3, #26
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3344      	adds	r3, #68	@ 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fc98 	bl	80070a0 <USB_HC_Halt>
 8004770:	e0b3      	b.n	80048da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f002 fc13 	bl	8006fa6 <USB_ReadChInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b10      	cmp	r3, #16
 8004788:	f040 80a7 	bne.w	80048da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3326      	adds	r3, #38	@ 0x26
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d11b      	bne.n	80047da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3344      	adds	r3, #68	@ 0x44
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334d      	adds	r3, #77	@ 0x4d
 80047c6:	2204      	movs	r2, #4
 80047c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 fc64 	bl	80070a0 <USB_HC_Halt>
 80047d8:	e03f      	b.n	800485a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3326      	adds	r3, #38	@ 0x26
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	3326      	adds	r3, #38	@ 0x26
 8004800:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004802:	2b02      	cmp	r3, #2
 8004804:	d129      	bne.n	800485a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3344      	adds	r3, #68	@ 0x44
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	799b      	ldrb	r3, [r3, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HCD_HC_IN_IRQHandler+0xc2a>
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	331b      	adds	r3, #27
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d110      	bne.n	800485a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	334d      	adds	r3, #77	@ 0x4d
 8004848:	2204      	movs	r2, #4
 800484a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f002 fc23 	bl	80070a0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	331b      	adds	r3, #27
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d129      	bne.n	80048c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	331b      	adds	r3, #27
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	440a      	add	r2, r1
 800489a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800489e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048be:	f043 0320 	orr.w	r3, r3, #32
 80048c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	2310      	movs	r3, #16
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	e000      	b.n	80048da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80048d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 fb51 	bl	8006fa6 <USB_ReadChInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d11b      	bne.n	8004946 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800491a:	461a      	mov	r2, r3
 800491c:	2304      	movs	r3, #4
 800491e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	334d      	adds	r3, #77	@ 0x4d
 8004930:	2207      	movs	r2, #7
 8004932:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f002 fbaf 	bl	80070a0 <USB_HC_Halt>
 8004942:	f000 bc6f 	b.w	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fb29 	bl	8006fa6 <USB_ReadChInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	f040 8082 	bne.w	8004a64 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496c:	461a      	mov	r2, r3
 800496e:	2320      	movs	r3, #32
 8004970:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3319      	adds	r3, #25
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d124      	bne.n	80049d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	3319      	adds	r3, #25
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334c      	adds	r3, #76	@ 0x4c
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334d      	adds	r3, #77	@ 0x4d
 80049c0:	2203      	movs	r2, #3
 80049c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f002 fb67 	bl	80070a0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	331a      	adds	r3, #26
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 841d 	bne.w	8005224 <HCD_HC_OUT_IRQHandler+0x944>
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	331b      	adds	r3, #27
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8411 	bne.w	8005224 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3326      	adds	r3, #38	@ 0x26
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d009      	beq.n	8004a2c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	331b      	adds	r3, #27
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	334d      	adds	r3, #77	@ 0x4d
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 fb29 	bl	80070a0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3344      	adds	r3, #68	@ 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e3df      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 fa9a 	bl	8006fa6 <USB_ReadChInterrupts>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a7c:	d111      	bne.n	8004aa2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f002 fb00 	bl	80070a0 <USB_HC_Halt>
 8004aa0:	e3c0      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 fa7b 	bl	8006fa6 <USB_ReadChInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d168      	bne.n	8004b8c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3344      	adds	r3, #68	@ 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 fa65 	bl	8006fa6 <USB_ReadChInterrupts>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b40      	cmp	r3, #64	@ 0x40
 8004ae4:	d112      	bne.n	8004b0c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3319      	adds	r3, #25
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b06:	461a      	mov	r2, r3
 8004b08:	2340      	movs	r3, #64	@ 0x40
 8004b0a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	331b      	adds	r3, #27
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d019      	beq.n	8004b56 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	331b      	adds	r3, #27
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b54:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b62:	461a      	mov	r2, r3
 8004b64:	2301      	movs	r3, #1
 8004b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	334d      	adds	r3, #77	@ 0x4d
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 fa8b 	bl	80070a0 <USB_HC_Halt>
 8004b8a:	e34b      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 fa06 	bl	8006fa6 <USB_ReadChInterrupts>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d139      	bne.n	8004c18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	334d      	adds	r3, #77	@ 0x4d
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	331a      	adds	r3, #26
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3319      	adds	r3, #25
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3344      	adds	r3, #68	@ 0x44
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 fa4e 	bl	80070a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c10:	461a      	mov	r2, r3
 8004c12:	2340      	movs	r3, #64	@ 0x40
 8004c14:	6093      	str	r3, [r2, #8]
 8004c16:	e305      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 f9c0 	bl	8006fa6 <USB_ReadChInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11a      	bne.n	8004c66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2308      	movs	r3, #8
 8004c40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	334d      	adds	r3, #77	@ 0x4d
 8004c52:	2206      	movs	r2, #6
 8004c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 fa1e 	bl	80070a0 <USB_HC_Halt>
 8004c64:	e2de      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f002 f999 	bl	8006fa6 <USB_ReadChInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d144      	bne.n	8004d08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3344      	adds	r3, #68	@ 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334d      	adds	r3, #77	@ 0x4d
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3319      	adds	r3, #25
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d114      	bne.n	8004ce6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3318      	adds	r3, #24
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3319      	adds	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f002 f9d6 	bl	80070a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2310      	movs	r3, #16
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	e28d      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 f948 	bl	8006fa6 <USB_ReadChInterrupts>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b80      	cmp	r3, #128	@ 0x80
 8004d1e:	d169      	bne.n	8004df4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	799b      	ldrb	r3, [r3, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d111      	bne.n	8004d4c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	334d      	adds	r3, #77	@ 0x4d
 8004d38:	2207      	movs	r2, #7
 8004d3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 f9ab 	bl	80070a0 <USB_HC_Halt>
 8004d4a:	e049      	b.n	8004de0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3344      	adds	r3, #68	@ 0x44
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1c59      	adds	r1, r3, #1
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4403      	add	r3, r0
 8004d6c:	3344      	adds	r3, #68	@ 0x44
 8004d6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3344      	adds	r3, #68	@ 0x44
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d922      	bls.n	8004dcc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	3344      	adds	r3, #68	@ 0x44
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	334c      	adds	r3, #76	@ 0x4c
 8004daa:	2204      	movs	r2, #4
 8004dac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	334c      	adds	r3, #76	@ 0x4c
 8004dbe:	781a      	ldrb	r2, [r3, #0]
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f002 fbe6 	bl	8007596 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dca:	e009      	b.n	8004de0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	334c      	adds	r3, #76	@ 0x4c
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dec:	461a      	mov	r2, r3
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	e217      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f002 f8d2 	bl	8006fa6 <USB_ReadChInterrupts>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0c:	d11b      	bne.n	8004e46 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334d      	adds	r3, #77	@ 0x4d
 8004e1e:	2209      	movs	r2, #9
 8004e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 f938 	bl	80070a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e42:	6093      	str	r3, [r2, #8]
 8004e44:	e1ee      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f002 f8a9 	bl	8006fa6 <USB_ReadChInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	f040 81df 	bne.w	800521e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2302      	movs	r3, #2
 8004e70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	334d      	adds	r3, #77	@ 0x4d
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 8093 	bne.w	8004fb0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334d      	adds	r3, #77	@ 0x4d
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	334c      	adds	r3, #76	@ 0x4c
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3326      	adds	r3, #38	@ 0x26
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d00b      	beq.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3326      	adds	r3, #38	@ 0x26
 8004ed8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	f040 8190 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	799b      	ldrb	r3, [r3, #6]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d115      	bne.n	8004f14 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	333d      	adds	r3, #61	@ 0x3d
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2d8      	uxtb	r0, r3
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	333d      	adds	r3, #61	@ 0x3d
 8004f10:	4602      	mov	r2, r0
 8004f12:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	799b      	ldrb	r3, [r3, #6]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 8171 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3334      	adds	r3, #52	@ 0x34
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8165 	beq.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	3334      	adds	r3, #52	@ 0x34
 8004f46:	6819      	ldr	r1, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4403      	add	r3, r0
 8004f56:	3328      	adds	r3, #40	@ 0x28
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	440b      	add	r3, r1
 8004f5c:	1e59      	subs	r1, r3, #1
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4403      	add	r3, r0
 8004f6c:	3328      	adds	r3, #40	@ 0x28
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f74:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 813f 	beq.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	333d      	adds	r3, #61	@ 0x3d
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	f083 0301 	eor.w	r3, r3, #1
 8004f9a:	b2d8      	uxtb	r0, r3
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	333d      	adds	r3, #61	@ 0x3d
 8004faa:	4602      	mov	r2, r0
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e127      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334d      	adds	r3, #77	@ 0x4d
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d120      	bne.n	8005008 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	334d      	adds	r3, #77	@ 0x4d
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	331b      	adds	r3, #27
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 8107 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	334c      	adds	r3, #76	@ 0x4c
 8005002:	2202      	movs	r2, #2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e0fb      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	334d      	adds	r3, #77	@ 0x4d
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d13a      	bne.n	8005094 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	334d      	adds	r3, #77	@ 0x4d
 800502e:	2202      	movs	r2, #2
 8005030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	334c      	adds	r3, #76	@ 0x4c
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	331b      	adds	r3, #27
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 80d1 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	331b      	adds	r3, #27
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800508c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005090:	6053      	str	r3, [r2, #4]
 8005092:	e0b5      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	334d      	adds	r3, #77	@ 0x4d
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d114      	bne.n	80050d4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334d      	adds	r3, #77	@ 0x4d
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	334c      	adds	r3, #76	@ 0x4c
 80050ce:	2202      	movs	r2, #2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e095      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	334d      	adds	r3, #77	@ 0x4d
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d114      	bne.n	8005114 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	334d      	adds	r3, #77	@ 0x4d
 80050fa:	2202      	movs	r2, #2
 80050fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	334c      	adds	r3, #76	@ 0x4c
 800510e:	2205      	movs	r2, #5
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e075      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	334d      	adds	r3, #77	@ 0x4d
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b07      	cmp	r3, #7
 8005128:	d00a      	beq.n	8005140 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	334d      	adds	r3, #77	@ 0x4d
 800513a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800513c:	2b09      	cmp	r3, #9
 800513e:	d170      	bne.n	8005222 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	2202      	movs	r2, #2
 8005152:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3344      	adds	r3, #68	@ 0x44
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4403      	add	r3, r0
 8005174:	3344      	adds	r3, #68	@ 0x44
 8005176:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3344      	adds	r3, #68	@ 0x44
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d914      	bls.n	80051b8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3344      	adds	r3, #68	@ 0x44
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	334c      	adds	r3, #76	@ 0x4c
 80051b2:	2204      	movs	r2, #4
 80051b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051b6:	e022      	b.n	80051fe <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	334c      	adds	r3, #76	@ 0x4c
 80051c8:	2202      	movs	r2, #2
 80051ca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	334c      	adds	r3, #76	@ 0x4c
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 f9bd 	bl	8007596 <HAL_HCD_HC_NotifyURBChange_Callback>
 800521c:	e002      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005222:	bf00      	nop
  }
}
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b08a      	sub	sp, #40	@ 0x28
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	0c5b      	lsrs	r3, r3, #17
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d004      	beq.n	8005270 <HCD_RXQLVL_IRQHandler+0x46>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b05      	cmp	r3, #5
 800526a:	f000 80b6 	beq.w	80053da <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800526e:	e0b7      	b.n	80053e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80b3 	beq.w	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	332c      	adds	r3, #44	@ 0x2c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80a7 	beq.w	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3338      	adds	r3, #56	@ 0x38
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	18d1      	adds	r1, r2, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4403      	add	r3, r0
 80052b4:	3334      	adds	r3, #52	@ 0x34
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4299      	cmp	r1, r3
 80052ba:	f200 8083 	bhi.w	80053c4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4613      	mov	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	332c      	adds	r3, #44	@ 0x2c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	b292      	uxth	r2, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	f001 fdf9 	bl	8006ed0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	332c      	adds	r3, #44	@ 0x2c
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	18d1      	adds	r1, r2, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4403      	add	r3, r0
 8005302:	332c      	adds	r3, #44	@ 0x2c
 8005304:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3338      	adds	r3, #56	@ 0x38
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	18d1      	adds	r1, r2, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4613      	mov	r3, r2
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4403      	add	r3, r0
 800532a:	3338      	adds	r3, #56	@ 0x38
 800532c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	0cdb      	lsrs	r3, r3, #19
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	3328      	adds	r3, #40	@ 0x28
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4293      	cmp	r3, r2
 800535c:	d13f      	bne.n	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03c      	beq.n	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800537a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005382:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	333c      	adds	r3, #60	@ 0x3c
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2d8      	uxtb	r0, r3
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	333c      	adds	r3, #60	@ 0x3c
 80053be:	4602      	mov	r2, r0
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e00c      	b.n	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	334c      	adds	r3, #76	@ 0x4c
 80053d4:	2204      	movs	r2, #4
 80053d6:	701a      	strb	r2, [r3, #0]
      break;
 80053d8:	e001      	b.n	80053de <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80053de:	bf00      	nop
  }
}
 80053e0:	bf00      	nop
 80053e2:	3728      	adds	r7, #40	@ 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005414:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d10b      	bne.n	8005438 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f002 f897 	bl	800755e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b08      	cmp	r3, #8
 8005440:	d132      	bne.n	80054a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d126      	bne.n	80054a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	7a5b      	ldrb	r3, [r3, #9]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d113      	bne.n	8005484 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005466:	d106      	bne.n	8005476 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2102      	movs	r1, #2
 800546e:	4618      	mov	r0, r3
 8005470:	f001 fdc8 	bl	8007004 <USB_InitFSLSPClkSel>
 8005474:	e011      	b.n	800549a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fdc1 	bl	8007004 <USB_InitFSLSPClkSel>
 8005482:	e00a      	b.n	800549a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	79db      	ldrb	r3, [r3, #7]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d106      	bne.n	800549a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005492:	461a      	mov	r2, r3
 8005494:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005498:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f002 f889 	bl	80075b2 <HAL_HCD_PortEnabled_Callback>
 80054a0:	e002      	b.n	80054a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f002 f893 	bl	80075ce <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d103      	bne.n	80054ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6013      	str	r3, [r2, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e12b      	b.n	800573a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fd fd88 	bl	800300c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	@ 0x24
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005534:	f001 fc36 	bl	8006da4 <HAL_RCC_GetPCLK1Freq>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4a81      	ldr	r2, [pc, #516]	@ (8005744 <HAL_I2C_Init+0x274>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d807      	bhi.n	8005554 <HAL_I2C_Init+0x84>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a80      	ldr	r2, [pc, #512]	@ (8005748 <HAL_I2C_Init+0x278>)
 8005548:	4293      	cmp	r3, r2
 800554a:	bf94      	ite	ls
 800554c:	2301      	movls	r3, #1
 800554e:	2300      	movhi	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e006      	b.n	8005562 <HAL_I2C_Init+0x92>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a7d      	ldr	r2, [pc, #500]	@ (800574c <HAL_I2C_Init+0x27c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	bf94      	ite	ls
 800555c:	2301      	movls	r3, #1
 800555e:	2300      	movhi	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e0e7      	b.n	800573a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a78      	ldr	r2, [pc, #480]	@ (8005750 <HAL_I2C_Init+0x280>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0c9b      	lsrs	r3, r3, #18
 8005574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a6a      	ldr	r2, [pc, #424]	@ (8005744 <HAL_I2C_Init+0x274>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <HAL_I2C_Init+0xd4>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3301      	adds	r3, #1
 80055a2:	e009      	b.n	80055b8 <HAL_I2C_Init+0xe8>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	4a69      	ldr	r2, [pc, #420]	@ (8005754 <HAL_I2C_Init+0x284>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	3301      	adds	r3, #1
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	430b      	orrs	r3, r1
 80055be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	495c      	ldr	r1, [pc, #368]	@ (8005744 <HAL_I2C_Init+0x274>)
 80055d4:	428b      	cmp	r3, r1
 80055d6:	d819      	bhi.n	800560c <HAL_I2C_Init+0x13c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1e59      	subs	r1, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055ec:	400b      	ands	r3, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_I2C_Init+0x138>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1e59      	subs	r1, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005600:	3301      	adds	r3, #1
 8005602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005606:	e051      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 8005608:	2304      	movs	r3, #4
 800560a:	e04f      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <HAL_I2C_Init+0x168>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1e58      	subs	r0, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	440b      	add	r3, r1
 8005622:	fbb0 f3f3 	udiv	r3, r0, r3
 8005626:	3301      	adds	r3, #1
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e012      	b.n	800565e <HAL_I2C_Init+0x18e>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	0099      	lsls	r1, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Init+0x196>
 8005662:	2301      	movs	r3, #1
 8005664:	e022      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10e      	bne.n	800568c <HAL_I2C_Init+0x1bc>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1e58      	subs	r0, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	440b      	add	r3, r1
 800567c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005680:	3301      	adds	r3, #1
 8005682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	e00f      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1e58      	subs	r0, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	0099      	lsls	r1, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a2:	3301      	adds	r3, #1
 80056a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	6809      	ldr	r1, [r1, #0]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6911      	ldr	r1, [r2, #16]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68d2      	ldr	r2, [r2, #12]
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	000186a0 	.word	0x000186a0
 8005748:	001e847f 	.word	0x001e847f
 800574c:	003d08ff 	.word	0x003d08ff
 8005750:	431bde83 	.word	0x431bde83
 8005754:	10624dd3 	.word	0x10624dd3

08005758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	461a      	mov	r2, r3
 8005764:	460b      	mov	r3, r1
 8005766:	817b      	strh	r3, [r7, #10]
 8005768:	4613      	mov	r3, r2
 800576a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7fd fe70 	bl	8003450 <HAL_GetTick>
 8005770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	f040 80e0 	bne.w	8005940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2319      	movs	r3, #25
 8005786:	2201      	movs	r2, #1
 8005788:	4970      	ldr	r1, [pc, #448]	@ (800594c <HAL_I2C_Master_Transmit+0x1f4>)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fc64 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e0d3      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2C_Master_Transmit+0x50>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0cc      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d007      	beq.n	80057ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2221      	movs	r2, #33	@ 0x21
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	893a      	ldrh	r2, [r7, #8]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a50      	ldr	r2, [pc, #320]	@ (8005950 <HAL_I2C_Master_Transmit+0x1f8>)
 800580e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 face 	bl	8005db8 <I2C_MasterRequestWrite>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e08d      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800583c:	e066      	b.n	800590c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6a39      	ldr	r1, [r7, #32]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fd22 	bl	800628c <I2C_WaitOnTXEFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2b04      	cmp	r3, #4
 8005854:	d107      	bne.n	8005866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e06b      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_I2C_Master_Transmit+0x188>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	6a39      	ldr	r1, [r7, #32]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fd19 	bl	800631c <I2C_WaitOnBTFFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d107      	bne.n	8005908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e01a      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d194      	bne.n	800583e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	00100002 	.word	0x00100002
 8005950:	ffff0000 	.word	0xffff0000

08005954 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	@ 0x30
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	461a      	mov	r2, r3
 8005960:	460b      	mov	r3, r1
 8005962:	817b      	strh	r3, [r7, #10]
 8005964:	4613      	mov	r3, r2
 8005966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005968:	f7fd fd72 	bl	8003450 <HAL_GetTick>
 800596c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b20      	cmp	r3, #32
 8005978:	f040 8217 	bne.w	8005daa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	2319      	movs	r3, #25
 8005982:	2201      	movs	r2, #1
 8005984:	497c      	ldr	r1, [pc, #496]	@ (8005b78 <HAL_I2C_Master_Receive+0x224>)
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fb66 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
 8005994:	e20a      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_I2C_Master_Receive+0x50>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e203      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d007      	beq.n	80059ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2222      	movs	r2, #34	@ 0x22
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2210      	movs	r2, #16
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	893a      	ldrh	r2, [r7, #8]
 80059fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a5c      	ldr	r2, [pc, #368]	@ (8005b7c <HAL_I2C_Master_Receive+0x228>)
 8005a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a0c:	8979      	ldrh	r1, [r7, #10]
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa52 	bl	8005ebc <I2C_MasterRequestRead>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e1c4      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e198      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d11b      	bne.n	8005a92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e178      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d11b      	bne.n	8005ad2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	e158      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005af8:	e144      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	f200 80f1 	bhi.w	8005ce6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d123      	bne.n	8005b54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fc4b 	bl	80063ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e145      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b52:	e117      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d14e      	bne.n	8005bfa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	2200      	movs	r2, #0
 8005b64:	4906      	ldr	r1, [pc, #24]	@ (8005b80 <HAL_I2C_Master_Receive+0x22c>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fa76 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e11a      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
 8005b76:	bf00      	nop
 8005b78:	00100002 	.word	0x00100002
 8005b7c:	ffff0000 	.word	0xffff0000
 8005b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bf8:	e0c4      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	2200      	movs	r2, #0
 8005c02:	496c      	ldr	r1, [pc, #432]	@ (8005db4 <HAL_I2C_Master_Receive+0x460>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fa27 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0cb      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4955      	ldr	r1, [pc, #340]	@ (8005db4 <HAL_I2C_Master_Receive+0x460>)
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f9f9 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e09d      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ce4:	e04e      	b.n	8005d84 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fb5e 	bl	80063ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e058      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d124      	bne.n	8005d84 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d107      	bne.n	8005d52 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f47f aeb6 	bne.w	8005afa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3728      	adds	r7, #40	@ 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	00010004 	.word	0x00010004

08005db8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d006      	beq.n	8005de2 <I2C_MasterRequestWrite+0x2a>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d003      	beq.n	8005de2 <I2C_MasterRequestWrite+0x2a>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005de0:	d108      	bne.n	8005df4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e00b      	b.n	8005e0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	2b12      	cmp	r3, #18
 8005dfa:	d107      	bne.n	8005e0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f91d 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e32:	d103      	bne.n	8005e3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e035      	b.n	8005eac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e48:	d108      	bne.n	8005e5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	e01b      	b.n	8005e94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	11db      	asrs	r3, r3, #7
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0306 	and.w	r3, r3, #6
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f063 030f 	orn	r3, r3, #15
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	490e      	ldr	r1, [pc, #56]	@ (8005eb4 <I2C_MasterRequestWrite+0xfc>)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f966 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e010      	b.n	8005eac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e8a:	897b      	ldrh	r3, [r7, #10]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4907      	ldr	r1, [pc, #28]	@ (8005eb8 <I2C_MasterRequestWrite+0x100>)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f956 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	00010008 	.word	0x00010008
 8005eb8:	00010002 	.word	0x00010002

08005ebc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d006      	beq.n	8005ef6 <I2C_MasterRequestRead+0x3a>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d003      	beq.n	8005ef6 <I2C_MasterRequestRead+0x3a>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ef4:	d108      	bne.n	8005f08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e00b      	b.n	8005f20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	2b11      	cmp	r3, #17
 8005f0e:	d107      	bne.n	8005f20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f893 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d103      	bne.n	8005f50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e079      	b.n	8006048 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f5c:	d108      	bne.n	8005f70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	611a      	str	r2, [r3, #16]
 8005f6e:	e05f      	b.n	8006030 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f70:	897b      	ldrh	r3, [r7, #10]
 8005f72:	11db      	asrs	r3, r3, #7
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0306 	and.w	r3, r3, #6
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f063 030f 	orn	r3, r3, #15
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4930      	ldr	r1, [pc, #192]	@ (8006050 <I2C_MasterRequestRead+0x194>)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f8dc 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e054      	b.n	8006048 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f9e:	897b      	ldrh	r3, [r7, #10]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4929      	ldr	r1, [pc, #164]	@ (8006054 <I2C_MasterRequestRead+0x198>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f8cc 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e044      	b.n	8006048 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fe2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f831 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800600a:	d103      	bne.n	8006014 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006012:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e017      	b.n	8006048 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006018:	897b      	ldrh	r3, [r7, #10]
 800601a:	11db      	asrs	r3, r3, #7
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f063 030e 	orn	r3, r3, #14
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4907      	ldr	r1, [pc, #28]	@ (8006054 <I2C_MasterRequestRead+0x198>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f888 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	00010008 	.word	0x00010008
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006068:	e048      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d044      	beq.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fd f9ed 	bl	8003450 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d139      	bne.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10d      	bne.n	80060ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	43da      	mvns	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4013      	ands	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	e00c      	b.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d116      	bne.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e023      	b.n	8006144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10d      	bne.n	8006122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	43da      	mvns	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	e00c      	b.n	800613c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	43da      	mvns	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	429a      	cmp	r2, r3
 8006140:	d093      	beq.n	800606a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800615a:	e071      	b.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	d123      	bne.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	f043 0204 	orr.w	r2, r3, #4
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e067      	b.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d041      	beq.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	f7fd f948 	bl	8003450 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d136      	bne.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d10c      	bne.n	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	43da      	mvns	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bf14      	ite	ne
 80061ee:	2301      	movne	r3, #1
 80061f0:	2300      	moveq	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	e00b      	b.n	800620e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	43da      	mvns	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e021      	b.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10c      	bne.n	8006264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	43da      	mvns	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e00b      	b.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	43da      	mvns	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	f47f af6d 	bne.w	800615c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006298:	e034      	b.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8e3 	bl	8006466 <I2C_IsAcknowledgeFailed>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e034      	b.n	8006314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d028      	beq.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fd f8cd 	bl	8003450 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11d      	bne.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d016      	beq.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e007      	b.n	8006314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630e:	2b80      	cmp	r3, #128	@ 0x80
 8006310:	d1c3      	bne.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006328:	e034      	b.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f89b 	bl	8006466 <I2C_IsAcknowledgeFailed>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e034      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d028      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fd f885 	bl	8003450 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11d      	bne.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d016      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e007      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d1c3      	bne.n	800632a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b8:	e049      	b.n	800644e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d119      	bne.n	80063fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0210 	mvn.w	r2, #16
 80063d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e030      	b.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fd f828 	bl	8003450 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11d      	bne.n	800644e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d016      	beq.n	800644e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e007      	b.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b40      	cmp	r3, #64	@ 0x40
 800645a:	d1ae      	bne.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647c:	d11b      	bne.n	80064b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006486:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e267      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d075      	beq.n	80065ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064e2:	4b88      	ldr	r3, [pc, #544]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d00c      	beq.n	8006508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ee:	4b85      	ldr	r3, [pc, #532]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d112      	bne.n	8006520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064fa:	4b82      	ldr	r3, [pc, #520]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006506:	d10b      	bne.n	8006520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	4b7e      	ldr	r3, [pc, #504]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05b      	beq.n	80065cc <HAL_RCC_OscConfig+0x108>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d157      	bne.n	80065cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e242      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006528:	d106      	bne.n	8006538 <HAL_RCC_OscConfig+0x74>
 800652a:	4b76      	ldr	r3, [pc, #472]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a75      	ldr	r2, [pc, #468]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e01d      	b.n	8006574 <HAL_RCC_OscConfig+0xb0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006540:	d10c      	bne.n	800655c <HAL_RCC_OscConfig+0x98>
 8006542:	4b70      	ldr	r3, [pc, #448]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a6f      	ldr	r2, [pc, #444]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4b6d      	ldr	r3, [pc, #436]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a6c      	ldr	r2, [pc, #432]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e00b      	b.n	8006574 <HAL_RCC_OscConfig+0xb0>
 800655c:	4b69      	ldr	r3, [pc, #420]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a68      	ldr	r2, [pc, #416]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b66      	ldr	r3, [pc, #408]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a65      	ldr	r2, [pc, #404]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 800656e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d013      	beq.n	80065a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc ff68 	bl	8003450 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006584:	f7fc ff64 	bl	8003450 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	@ 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e207      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006596:	4b5b      	ldr	r3, [pc, #364]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0xc0>
 80065a2:	e014      	b.n	80065ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fc ff54 	bl	8003450 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ac:	f7fc ff50 	bl	8003450 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	@ 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e1f3      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065be:	4b51      	ldr	r3, [pc, #324]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0xe8>
 80065ca:	e000      	b.n	80065ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d063      	beq.n	80066a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065da:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d11c      	bne.n	800662c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065f2:	4b44      	ldr	r3, [pc, #272]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d116      	bne.n	800662c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fe:	4b41      	ldr	r3, [pc, #260]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_RCC_OscConfig+0x152>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d001      	beq.n	8006616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e1c7      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006616:	4b3b      	ldr	r3, [pc, #236]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4937      	ldr	r1, [pc, #220]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006626:	4313      	orrs	r3, r2
 8006628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800662a:	e03a      	b.n	80066a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d020      	beq.n	8006676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006634:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <HAL_RCC_OscConfig+0x244>)
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fc ff09 	bl	8003450 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006642:	f7fc ff05 	bl	8003450 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e1a8      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006654:	4b2b      	ldr	r3, [pc, #172]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006660:	4b28      	ldr	r3, [pc, #160]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4925      	ldr	r1, [pc, #148]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006670:	4313      	orrs	r3, r2
 8006672:	600b      	str	r3, [r1, #0]
 8006674:	e015      	b.n	80066a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006676:	4b24      	ldr	r3, [pc, #144]	@ (8006708 <HAL_RCC_OscConfig+0x244>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7fc fee8 	bl	8003450 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006684:	f7fc fee4 	bl	8003450 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e187      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006696:	4b1b      	ldr	r3, [pc, #108]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d036      	beq.n	800671c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <HAL_RCC_OscConfig+0x248>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066bc:	f7fc fec8 	bl	8003450 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066c4:	f7fc fec4 	bl	8003450 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e167      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <HAL_RCC_OscConfig+0x240>)
 80066d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0x200>
 80066e2:	e01b      	b.n	800671c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066e4:	4b09      	ldr	r3, [pc, #36]	@ (800670c <HAL_RCC_OscConfig+0x248>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ea:	f7fc feb1 	bl	8003450 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f0:	e00e      	b.n	8006710 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066f2:	f7fc fead 	bl	8003450 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d907      	bls.n	8006710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e150      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
 8006704:	40023800 	.word	0x40023800
 8006708:	42470000 	.word	0x42470000
 800670c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006710:	4b88      	ldr	r3, [pc, #544]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ea      	bne.n	80066f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8097 	beq.w	8006858 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672e:	4b81      	ldr	r3, [pc, #516]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10f      	bne.n	800675a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	4b7d      	ldr	r3, [pc, #500]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	4a7c      	ldr	r2, [pc, #496]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006748:	6413      	str	r3, [r2, #64]	@ 0x40
 800674a:	4b7a      	ldr	r3, [pc, #488]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006752:	60bb      	str	r3, [r7, #8]
 8006754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675a:	4b77      	ldr	r3, [pc, #476]	@ (8006938 <HAL_RCC_OscConfig+0x474>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d118      	bne.n	8006798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006766:	4b74      	ldr	r3, [pc, #464]	@ (8006938 <HAL_RCC_OscConfig+0x474>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a73      	ldr	r2, [pc, #460]	@ (8006938 <HAL_RCC_OscConfig+0x474>)
 800676c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006772:	f7fc fe6d 	bl	8003450 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677a:	f7fc fe69 	bl	8003450 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e10c      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678c:	4b6a      	ldr	r3, [pc, #424]	@ (8006938 <HAL_RCC_OscConfig+0x474>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x2ea>
 80067a0:	4b64      	ldr	r3, [pc, #400]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a4:	4a63      	ldr	r2, [pc, #396]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ac:	e01c      	b.n	80067e8 <HAL_RCC_OscConfig+0x324>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x30c>
 80067b6:	4b5f      	ldr	r3, [pc, #380]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067bc:	f043 0304 	orr.w	r3, r3, #4
 80067c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ce:	e00b      	b.n	80067e8 <HAL_RCC_OscConfig+0x324>
 80067d0:	4b58      	ldr	r3, [pc, #352]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	4a57      	ldr	r2, [pc, #348]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	@ 0x70
 80067dc:	4b55      	ldr	r3, [pc, #340]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e0:	4a54      	ldr	r2, [pc, #336]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80067e2:	f023 0304 	bic.w	r3, r3, #4
 80067e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d015      	beq.n	800681c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f0:	f7fc fe2e 	bl	8003450 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f6:	e00a      	b.n	800680e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f8:	f7fc fe2a 	bl	8003450 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e0cb      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680e:	4b49      	ldr	r3, [pc, #292]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0ee      	beq.n	80067f8 <HAL_RCC_OscConfig+0x334>
 800681a:	e014      	b.n	8006846 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800681c:	f7fc fe18 	bl	8003450 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006822:	e00a      	b.n	800683a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006824:	f7fc fe14 	bl	8003450 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0b5      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800683a:	4b3e      	ldr	r3, [pc, #248]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1ee      	bne.n	8006824 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d105      	bne.n	8006858 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684c:	4b39      	ldr	r3, [pc, #228]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	4a38      	ldr	r2, [pc, #224]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a1 	beq.w	80069a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006862:	4b34      	ldr	r3, [pc, #208]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b08      	cmp	r3, #8
 800686c:	d05c      	beq.n	8006928 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d141      	bne.n	80068fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006876:	4b31      	ldr	r3, [pc, #196]	@ (800693c <HAL_RCC_OscConfig+0x478>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687c:	f7fc fde8 	bl	8003450 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006884:	f7fc fde4 	bl	8003450 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e087      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006896:	4b27      	ldr	r3, [pc, #156]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	3b01      	subs	r3, #1
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	061b      	lsls	r3, r3, #24
 80068c6:	491b      	ldr	r1, [pc, #108]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068cc:	4b1b      	ldr	r3, [pc, #108]	@ (800693c <HAL_RCC_OscConfig+0x478>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fc fdbd 	bl	8003450 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068da:	f7fc fdb9 	bl	8003450 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e05c      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ec:	4b11      	ldr	r3, [pc, #68]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x416>
 80068f8:	e054      	b.n	80069a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b10      	ldr	r3, [pc, #64]	@ (800693c <HAL_RCC_OscConfig+0x478>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fc fda6 	bl	8003450 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006908:	f7fc fda2 	bl	8003450 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e045      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <HAL_RCC_OscConfig+0x470>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x444>
 8006926:	e03d      	b.n	80069a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e038      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
 8006934:	40023800 	.word	0x40023800
 8006938:	40007000 	.word	0x40007000
 800693c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006940:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <HAL_RCC_OscConfig+0x4ec>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d028      	beq.n	80069a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006958:	429a      	cmp	r2, r3
 800695a:	d121      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d11a      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006970:	4013      	ands	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006978:	4293      	cmp	r3, r2
 800697a:	d111      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	3b01      	subs	r3, #1
 800698a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d107      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800

080069b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0cc      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c8:	4b68      	ldr	r3, [pc, #416]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d90c      	bls.n	80069f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b65      	ldr	r3, [pc, #404]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069de:	4b63      	ldr	r3, [pc, #396]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d001      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0b8      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a08:	4b59      	ldr	r3, [pc, #356]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4a58      	ldr	r2, [pc, #352]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a20:	4b53      	ldr	r3, [pc, #332]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4a52      	ldr	r2, [pc, #328]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a2c:	4b50      	ldr	r3, [pc, #320]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	494d      	ldr	r1, [pc, #308]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d044      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a52:	4b47      	ldr	r3, [pc, #284]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d119      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e07f      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d003      	beq.n	8006a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d107      	bne.n	8006a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a72:	4b3f      	ldr	r3, [pc, #252]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e06f      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a82:	4b3b      	ldr	r3, [pc, #236]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e067      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a92:	4b37      	ldr	r3, [pc, #220]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f023 0203 	bic.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4934      	ldr	r1, [pc, #208]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006aa4:	f7fc fcd4 	bl	8003450 <HAL_GetTick>
 8006aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	e00a      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aac:	f7fc fcd0 	bl	8003450 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e04f      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 020c 	and.w	r2, r3, #12
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d1eb      	bne.n	8006aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b25      	ldr	r3, [pc, #148]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d20c      	bcs.n	8006afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b22      	ldr	r3, [pc, #136]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aea:	4b20      	ldr	r3, [pc, #128]	@ (8006b6c <HAL_RCC_ClockConfig+0x1b8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e032      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b08:	4b19      	ldr	r3, [pc, #100]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	4916      	ldr	r1, [pc, #88]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	490e      	ldr	r1, [pc, #56]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b3a:	f000 f821 	bl	8006b80 <HAL_RCC_GetSysClockFreq>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	490a      	ldr	r1, [pc, #40]	@ (8006b74 <HAL_RCC_ClockConfig+0x1c0>)
 8006b4c:	5ccb      	ldrb	r3, [r1, r3]
 8006b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b52:	4a09      	ldr	r2, [pc, #36]	@ (8006b78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b56:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc fc34 	bl	80033c8 <HAL_InitTick>

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023c00 	.word	0x40023c00
 8006b70:	40023800 	.word	0x40023800
 8006b74:	0800acc0 	.word	0x0800acc0
 8006b78:	20000014 	.word	0x20000014
 8006b7c:	20000018 	.word	0x20000018

08006b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b84:	b094      	sub	sp, #80	@ 0x50
 8006b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b90:	2300      	movs	r3, #0
 8006b92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b98:	4b79      	ldr	r3, [pc, #484]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 030c 	and.w	r3, r3, #12
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d00d      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	f200 80e1 	bhi.w	8006d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d003      	beq.n	8006bba <HAL_RCC_GetSysClockFreq+0x3a>
 8006bb2:	e0db      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bb4:	4b73      	ldr	r3, [pc, #460]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006bb8:	e0db      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bba:	4b73      	ldr	r3, [pc, #460]	@ (8006d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8006bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bbe:	e0d8      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bca:	4b6d      	ldr	r3, [pc, #436]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d063      	beq.n	8006c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	099b      	lsrs	r3, r3, #6
 8006bdc:	2200      	movs	r2, #0
 8006bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bea:	2300      	movs	r3, #0
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	f04f 0000 	mov.w	r0, #0
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	0159      	lsls	r1, r3, #5
 8006c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c04:	0150      	lsls	r0, r2, #5
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	1a51      	subs	r1, r2, r1
 8006c0e:	6139      	str	r1, [r7, #16]
 8006c10:	4629      	mov	r1, r5
 8006c12:	eb63 0301 	sbc.w	r3, r3, r1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c24:	4659      	mov	r1, fp
 8006c26:	018b      	lsls	r3, r1, #6
 8006c28:	4651      	mov	r1, sl
 8006c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c2e:	4651      	mov	r1, sl
 8006c30:	018a      	lsls	r2, r1, #6
 8006c32:	4651      	mov	r1, sl
 8006c34:	ebb2 0801 	subs.w	r8, r2, r1
 8006c38:	4659      	mov	r1, fp
 8006c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c52:	4690      	mov	r8, r2
 8006c54:	4699      	mov	r9, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	eb18 0303 	adds.w	r3, r8, r3
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	462b      	mov	r3, r5
 8006c60:	eb49 0303 	adc.w	r3, r9, r3
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c72:	4629      	mov	r1, r5
 8006c74:	024b      	lsls	r3, r1, #9
 8006c76:	4621      	mov	r1, r4
 8006c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	024a      	lsls	r2, r1, #9
 8006c80:	4610      	mov	r0, r2
 8006c82:	4619      	mov	r1, r3
 8006c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c86:	2200      	movs	r2, #0
 8006c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c90:	f7f9 ffea 	bl	8000c68 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4613      	mov	r3, r2
 8006c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c9c:	e058      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c9e:	4b38      	ldr	r3, [pc, #224]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	099b      	lsrs	r3, r3, #6
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4611      	mov	r1, r2
 8006caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	f04f 0000 	mov.w	r0, #0
 8006cc0:	f04f 0100 	mov.w	r1, #0
 8006cc4:	0159      	lsls	r1, r3, #5
 8006cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cca:	0150      	lsls	r0, r2, #5
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4641      	mov	r1, r8
 8006cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8006cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	00eb      	lsls	r3, r5, #3
 8006d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d06:	00e2      	lsls	r2, r4, #3
 8006d08:	4614      	mov	r4, r2
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	4643      	mov	r3, r8
 8006d0e:	18e3      	adds	r3, r4, r3
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	464b      	mov	r3, r9
 8006d14:	eb45 0303 	adc.w	r3, r5, r3
 8006d18:	607b      	str	r3, [r7, #4]
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d26:	4629      	mov	r1, r5
 8006d28:	028b      	lsls	r3, r1, #10
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d30:	4621      	mov	r1, r4
 8006d32:	028a      	lsls	r2, r1, #10
 8006d34:	4610      	mov	r0, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	61fa      	str	r2, [r7, #28]
 8006d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d44:	f7f9 ff90 	bl	8000c68 <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d50:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	0c1b      	lsrs	r3, r3, #16
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d6a:	e002      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d6c:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3750      	adds	r7, #80	@ 0x50
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800
 8006d84:	00f42400 	.word	0x00f42400
 8006d88:	007a1200 	.word	0x007a1200

08006d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d90:	4b03      	ldr	r3, [pc, #12]	@ (8006da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d92:	681b      	ldr	r3, [r3, #0]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20000014 	.word	0x20000014

08006da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006da8:	f7ff fff0 	bl	8006d8c <HAL_RCC_GetHCLKFreq>
 8006dac:	4602      	mov	r2, r0
 8006dae:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	0a9b      	lsrs	r3, r3, #10
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	4903      	ldr	r1, [pc, #12]	@ (8006dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dba:	5ccb      	ldrb	r3, [r1, r3]
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	0800acd0 	.word	0x0800acd0

08006dcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f043 0201 	orr.w	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e2a:	d901      	bls.n	8006e30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e01b      	b.n	8006e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	daf2      	bge.n	8006e1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	019b      	lsls	r3, r3, #6
 8006e40:	f043 0220 	orr.w	r2, r3, #32
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e54:	d901      	bls.n	8006e5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e006      	b.n	8006e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d0f0      	beq.n	8006e48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e8c:	d901      	bls.n	8006e92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e018      	b.n	8006ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	daf2      	bge.n	8006e80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e006      	b.n	8006ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d0f0      	beq.n	8006ea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b08b      	sub	sp, #44	@ 0x2c
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	089b      	lsrs	r3, r3, #2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	623b      	str	r3, [r7, #32]
 8006efa:	e014      	b.n	8006f26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	3301      	adds	r3, #1
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	3301      	adds	r3, #1
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	3301      	adds	r3, #1
 8006f24:	623b      	str	r3, [r7, #32]
 8006f26:	6a3a      	ldr	r2, [r7, #32]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3e6      	bcc.n	8006efc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f2e:	8bfb      	ldrh	r3, [r7, #30]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01e      	beq.n	8006f72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f107 0310 	add.w	r3, r7, #16
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	701a      	strb	r2, [r3, #0]
      i++;
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	3301      	adds	r3, #1
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f66:	8bfb      	ldrh	r3, [r7, #30]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f6c:	8bfb      	ldrh	r3, [r7, #30]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1ea      	bne.n	8006f48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	372c      	adds	r7, #44	@ 0x2c
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4013      	ands	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f98:	68fb      	ldr	r3, [r7, #12]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fda:	68bb      	ldr	r3, [r7, #8]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704c:	461a      	mov	r2, r3
 800704e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007052:	6053      	str	r3, [r2, #4]
 8007054:	e00c      	b.n	8007070 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d107      	bne.n	800706c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007062:	461a      	mov	r2, r3
 8007064:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	e001      	b.n	8007070 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	b29b      	uxth	r3, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	@ 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	0c9b      	lsrs	r3, r3, #18
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	0fdb      	lsrs	r3, r3, #31
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	0fdb      	lsrs	r3, r3, #31
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b20      	cmp	r3, #32
 8007104:	d10d      	bne.n	8007122 <USB_HC_Halt+0x82>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <USB_HC_Halt+0x82>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d002      	beq.n	800711e <USB_HC_Halt+0x7e>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b03      	cmp	r3, #3
 800711c:	d101      	bne.n	8007122 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	e0d8      	b.n	80072d4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <USB_HC_Halt+0x8e>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d173      	bne.n	8007216 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	440a      	add	r2, r1
 8007144:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800714c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d14a      	bne.n	80071f0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d133      	bne.n	80071ce <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	440a      	add	r2, r1
 800717c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	440a      	add	r2, r1
 800719c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071b2:	d82e      	bhi.n	8007212 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ca:	d0ec      	beq.n	80071a6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071cc:	e081      	b.n	80072d2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ee:	e070      	b.n	80072d2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	440a      	add	r2, r1
 8007206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800720a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800720e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007210:	e05f      	b.n	80072d2 <USB_HC_Halt+0x232>
            break;
 8007212:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007214:	e05d      	b.n	80072d2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	440a      	add	r2, r1
 800722c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007234:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d133      	bne.n	80072ae <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007264:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	440a      	add	r2, r1
 800727c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007280:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007284:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007292:	d81d      	bhi.n	80072d0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072aa:	d0ec      	beq.n	8007286 <USB_HC_Halt+0x1e6>
 80072ac:	e011      	b.n	80072d2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e000      	b.n	80072d2 <USB_HC_Halt+0x232>
          break;
 80072d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3724      	adds	r7, #36	@ 0x24
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fd7a 	bl	8006dee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072fa:	2110      	movs	r1, #16
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fd87 	bl	8006e10 <USB_FlushTxFifo>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fdb1 	bl	8006e74 <USB_FlushRxFifo>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e01f      	b.n	8007362 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007338:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007340:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007348:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007356:	461a      	mov	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	3301      	adds	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b0f      	cmp	r3, #15
 8007366:	d9dc      	bls.n	8007322 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007368:	2300      	movs	r3, #0
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	e034      	b.n	80073d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007384:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800738c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007394:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a2:	461a      	mov	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073b4:	d80c      	bhi.n	80073d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073cc:	d0ec      	beq.n	80073a8 <USB_StopHost+0xc8>
 80073ce:	e000      	b.n	80073d2 <USB_StopHost+0xf2>
        break;
 80073d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	3301      	adds	r3, #1
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d9c7      	bls.n	800736e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e4:	461a      	mov	r2, r3
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff fce9 	bl	8006dcc <USB_EnableGlobalInt>

  return ret;
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f804 	bl	8007428 <USBH_HandleSof>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b0b      	cmp	r3, #11
 8007438:	d10a      	bne.n	8007450 <USBH_HandleSof+0x28>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007468:	bf00      	nop
}
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007484:	bf00      	nop
}
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f883 	bl	80075ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	791b      	ldrb	r3, [r3, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f80b 	bl	8007506 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	795b      	ldrb	r3, [r3, #5]
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f805 	bl	8007506 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	2b0f      	cmp	r3, #15
 8007516:	d80d      	bhi.n	8007534 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	33e0      	adds	r3, #224	@ 0xe0
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	33e0      	adds	r3, #224	@ 0xe0
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff57 	bl	8007404 <USBH_LL_IncTimer>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff8f 	bl	8007490 <USBH_LL_Connect>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ff98 	bl	80074be <USBH_LL_Disconnect>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
 80075a2:	4613      	mov	r3, r2
 80075a4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff49 	bl	8007458 <USBH_LL_PortEnabled>
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff49 	bl	8007474 <USBH_LL_PortDisabled>
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007600:	4618      	mov	r0, r3
 8007602:	f7fc fae7 	bl	8003bd4 <HAL_HCD_Stop>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f807 	bl	8007620 <USBH_Get_USB_Status>
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007616:	7bbb      	ldrb	r3, [r7, #14]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d817      	bhi.n	8007664 <USBH_Get_USB_Status+0x44>
 8007634:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <USBH_Get_USB_Status+0x1c>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007653 	.word	0x08007653
 8007644:	08007659 	.word	0x08007659
 8007648:	0800765f 	.word	0x0800765f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
    break;
 8007650:	e00b      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007652:	2302      	movs	r3, #2
 8007654:	73fb      	strb	r3, [r7, #15]
    break;
 8007656:	e008      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
    break;
 800765c:	e005      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800765e:	2302      	movs	r3, #2
 8007660:	73fb      	strb	r3, [r7, #15]
    break;
 8007662:	e002      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007664:	2302      	movs	r3, #2
 8007666:	73fb      	strb	r3, [r7, #15]
    break;
 8007668:	bf00      	nop
  }
  return usb_status;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <malloc>:
 8007678:	4b02      	ldr	r3, [pc, #8]	@ (8007684 <malloc+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f000 b825 	b.w	80076cc <_malloc_r>
 8007682:	bf00      	nop
 8007684:	2000002c 	.word	0x2000002c

08007688 <sbrk_aligned>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4e0f      	ldr	r6, [pc, #60]	@ (80076c8 <sbrk_aligned+0x40>)
 800768c:	460c      	mov	r4, r1
 800768e:	6831      	ldr	r1, [r6, #0]
 8007690:	4605      	mov	r5, r0
 8007692:	b911      	cbnz	r1, 800769a <sbrk_aligned+0x12>
 8007694:	f000 fe8a 	bl	80083ac <_sbrk_r>
 8007698:	6030      	str	r0, [r6, #0]
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f000 fe85 	bl	80083ac <_sbrk_r>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d103      	bne.n	80076ae <sbrk_aligned+0x26>
 80076a6:	f04f 34ff 	mov.w	r4, #4294967295
 80076aa:	4620      	mov	r0, r4
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d0f8      	beq.n	80076aa <sbrk_aligned+0x22>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fe76 	bl	80083ac <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d1f2      	bne.n	80076aa <sbrk_aligned+0x22>
 80076c4:	e7ef      	b.n	80076a6 <sbrk_aligned+0x1e>
 80076c6:	bf00      	nop
 80076c8:	200007c0 	.word	0x200007c0

080076cc <_malloc_r>:
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	1ccd      	adds	r5, r1, #3
 80076d2:	f025 0503 	bic.w	r5, r5, #3
 80076d6:	3508      	adds	r5, #8
 80076d8:	2d0c      	cmp	r5, #12
 80076da:	bf38      	it	cc
 80076dc:	250c      	movcc	r5, #12
 80076de:	2d00      	cmp	r5, #0
 80076e0:	4606      	mov	r6, r0
 80076e2:	db01      	blt.n	80076e8 <_malloc_r+0x1c>
 80076e4:	42a9      	cmp	r1, r5
 80076e6:	d904      	bls.n	80076f2 <_malloc_r+0x26>
 80076e8:	230c      	movs	r3, #12
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	2000      	movs	r0, #0
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077c8 <_malloc_r+0xfc>
 80076f6:	f000 f869 	bl	80077cc <__malloc_lock>
 80076fa:	f8d8 3000 	ldr.w	r3, [r8]
 80076fe:	461c      	mov	r4, r3
 8007700:	bb44      	cbnz	r4, 8007754 <_malloc_r+0x88>
 8007702:	4629      	mov	r1, r5
 8007704:	4630      	mov	r0, r6
 8007706:	f7ff ffbf 	bl	8007688 <sbrk_aligned>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	4604      	mov	r4, r0
 800770e:	d158      	bne.n	80077c2 <_malloc_r+0xf6>
 8007710:	f8d8 4000 	ldr.w	r4, [r8]
 8007714:	4627      	mov	r7, r4
 8007716:	2f00      	cmp	r7, #0
 8007718:	d143      	bne.n	80077a2 <_malloc_r+0xd6>
 800771a:	2c00      	cmp	r4, #0
 800771c:	d04b      	beq.n	80077b6 <_malloc_r+0xea>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	4639      	mov	r1, r7
 8007722:	4630      	mov	r0, r6
 8007724:	eb04 0903 	add.w	r9, r4, r3
 8007728:	f000 fe40 	bl	80083ac <_sbrk_r>
 800772c:	4581      	cmp	r9, r0
 800772e:	d142      	bne.n	80077b6 <_malloc_r+0xea>
 8007730:	6821      	ldr	r1, [r4, #0]
 8007732:	1a6d      	subs	r5, r5, r1
 8007734:	4629      	mov	r1, r5
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ffa6 	bl	8007688 <sbrk_aligned>
 800773c:	3001      	adds	r0, #1
 800773e:	d03a      	beq.n	80077b6 <_malloc_r+0xea>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	442b      	add	r3, r5
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	f8d8 3000 	ldr.w	r3, [r8]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	bb62      	cbnz	r2, 80077a8 <_malloc_r+0xdc>
 800774e:	f8c8 7000 	str.w	r7, [r8]
 8007752:	e00f      	b.n	8007774 <_malloc_r+0xa8>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	1b52      	subs	r2, r2, r5
 8007758:	d420      	bmi.n	800779c <_malloc_r+0xd0>
 800775a:	2a0b      	cmp	r2, #11
 800775c:	d917      	bls.n	800778e <_malloc_r+0xc2>
 800775e:	1961      	adds	r1, r4, r5
 8007760:	42a3      	cmp	r3, r4
 8007762:	6025      	str	r5, [r4, #0]
 8007764:	bf18      	it	ne
 8007766:	6059      	strne	r1, [r3, #4]
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	bf08      	it	eq
 800776c:	f8c8 1000 	streq.w	r1, [r8]
 8007770:	5162      	str	r2, [r4, r5]
 8007772:	604b      	str	r3, [r1, #4]
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f82f 	bl	80077d8 <__malloc_unlock>
 800777a:	f104 000b 	add.w	r0, r4, #11
 800777e:	1d23      	adds	r3, r4, #4
 8007780:	f020 0007 	bic.w	r0, r0, #7
 8007784:	1ac2      	subs	r2, r0, r3
 8007786:	bf1c      	itt	ne
 8007788:	1a1b      	subne	r3, r3, r0
 800778a:	50a3      	strne	r3, [r4, r2]
 800778c:	e7af      	b.n	80076ee <_malloc_r+0x22>
 800778e:	6862      	ldr	r2, [r4, #4]
 8007790:	42a3      	cmp	r3, r4
 8007792:	bf0c      	ite	eq
 8007794:	f8c8 2000 	streq.w	r2, [r8]
 8007798:	605a      	strne	r2, [r3, #4]
 800779a:	e7eb      	b.n	8007774 <_malloc_r+0xa8>
 800779c:	4623      	mov	r3, r4
 800779e:	6864      	ldr	r4, [r4, #4]
 80077a0:	e7ae      	b.n	8007700 <_malloc_r+0x34>
 80077a2:	463c      	mov	r4, r7
 80077a4:	687f      	ldr	r7, [r7, #4]
 80077a6:	e7b6      	b.n	8007716 <_malloc_r+0x4a>
 80077a8:	461a      	mov	r2, r3
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d1fb      	bne.n	80077a8 <_malloc_r+0xdc>
 80077b0:	2300      	movs	r3, #0
 80077b2:	6053      	str	r3, [r2, #4]
 80077b4:	e7de      	b.n	8007774 <_malloc_r+0xa8>
 80077b6:	230c      	movs	r3, #12
 80077b8:	6033      	str	r3, [r6, #0]
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f80c 	bl	80077d8 <__malloc_unlock>
 80077c0:	e794      	b.n	80076ec <_malloc_r+0x20>
 80077c2:	6005      	str	r5, [r0, #0]
 80077c4:	e7d6      	b.n	8007774 <_malloc_r+0xa8>
 80077c6:	bf00      	nop
 80077c8:	200007c4 	.word	0x200007c4

080077cc <__malloc_lock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	@ (80077d4 <__malloc_lock+0x8>)
 80077ce:	f000 be3a 	b.w	8008446 <__retarget_lock_acquire_recursive>
 80077d2:	bf00      	nop
 80077d4:	20000908 	.word	0x20000908

080077d8 <__malloc_unlock>:
 80077d8:	4801      	ldr	r0, [pc, #4]	@ (80077e0 <__malloc_unlock+0x8>)
 80077da:	f000 be35 	b.w	8008448 <__retarget_lock_release_recursive>
 80077de:	bf00      	nop
 80077e0:	20000908 	.word	0x20000908

080077e4 <__cvt>:
 80077e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	ec57 6b10 	vmov	r6, r7, d0
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	460c      	mov	r4, r1
 80077f0:	4619      	mov	r1, r3
 80077f2:	463b      	mov	r3, r7
 80077f4:	bfbb      	ittet	lt
 80077f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077fa:	461f      	movlt	r7, r3
 80077fc:	2300      	movge	r3, #0
 80077fe:	232d      	movlt	r3, #45	@ 0x2d
 8007800:	700b      	strb	r3, [r1, #0]
 8007802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007804:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007808:	4691      	mov	r9, r2
 800780a:	f023 0820 	bic.w	r8, r3, #32
 800780e:	bfbc      	itt	lt
 8007810:	4632      	movlt	r2, r6
 8007812:	4616      	movlt	r6, r2
 8007814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007818:	d005      	beq.n	8007826 <__cvt+0x42>
 800781a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800781e:	d100      	bne.n	8007822 <__cvt+0x3e>
 8007820:	3401      	adds	r4, #1
 8007822:	2102      	movs	r1, #2
 8007824:	e000      	b.n	8007828 <__cvt+0x44>
 8007826:	2103      	movs	r1, #3
 8007828:	ab03      	add	r3, sp, #12
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	ab02      	add	r3, sp, #8
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	ec47 6b10 	vmov	d0, r6, r7
 8007834:	4653      	mov	r3, sl
 8007836:	4622      	mov	r2, r4
 8007838:	f000 fe9e 	bl	8008578 <_dtoa_r>
 800783c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007840:	4605      	mov	r5, r0
 8007842:	d119      	bne.n	8007878 <__cvt+0x94>
 8007844:	f019 0f01 	tst.w	r9, #1
 8007848:	d00e      	beq.n	8007868 <__cvt+0x84>
 800784a:	eb00 0904 	add.w	r9, r0, r4
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	f7f9 f947 	bl	8000ae8 <__aeabi_dcmpeq>
 800785a:	b108      	cbz	r0, 8007860 <__cvt+0x7c>
 800785c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007860:	2230      	movs	r2, #48	@ 0x30
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	454b      	cmp	r3, r9
 8007866:	d31e      	bcc.n	80078a6 <__cvt+0xc2>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800786c:	1b5b      	subs	r3, r3, r5
 800786e:	4628      	mov	r0, r5
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	b004      	add	sp, #16
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800787c:	eb00 0904 	add.w	r9, r0, r4
 8007880:	d1e5      	bne.n	800784e <__cvt+0x6a>
 8007882:	7803      	ldrb	r3, [r0, #0]
 8007884:	2b30      	cmp	r3, #48	@ 0x30
 8007886:	d10a      	bne.n	800789e <__cvt+0xba>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f9 f92a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007894:	b918      	cbnz	r0, 800789e <__cvt+0xba>
 8007896:	f1c4 0401 	rsb	r4, r4, #1
 800789a:	f8ca 4000 	str.w	r4, [sl]
 800789e:	f8da 3000 	ldr.w	r3, [sl]
 80078a2:	4499      	add	r9, r3
 80078a4:	e7d3      	b.n	800784e <__cvt+0x6a>
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	9103      	str	r1, [sp, #12]
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e7d9      	b.n	8007862 <__cvt+0x7e>

080078ae <__exponent>:
 80078ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078b0:	2900      	cmp	r1, #0
 80078b2:	bfba      	itte	lt
 80078b4:	4249      	neglt	r1, r1
 80078b6:	232d      	movlt	r3, #45	@ 0x2d
 80078b8:	232b      	movge	r3, #43	@ 0x2b
 80078ba:	2909      	cmp	r1, #9
 80078bc:	7002      	strb	r2, [r0, #0]
 80078be:	7043      	strb	r3, [r0, #1]
 80078c0:	dd29      	ble.n	8007916 <__exponent+0x68>
 80078c2:	f10d 0307 	add.w	r3, sp, #7
 80078c6:	461d      	mov	r5, r3
 80078c8:	270a      	movs	r7, #10
 80078ca:	461a      	mov	r2, r3
 80078cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80078d0:	fb07 1416 	mls	r4, r7, r6, r1
 80078d4:	3430      	adds	r4, #48	@ 0x30
 80078d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078da:	460c      	mov	r4, r1
 80078dc:	2c63      	cmp	r4, #99	@ 0x63
 80078de:	f103 33ff 	add.w	r3, r3, #4294967295
 80078e2:	4631      	mov	r1, r6
 80078e4:	dcf1      	bgt.n	80078ca <__exponent+0x1c>
 80078e6:	3130      	adds	r1, #48	@ 0x30
 80078e8:	1e94      	subs	r4, r2, #2
 80078ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ee:	1c41      	adds	r1, r0, #1
 80078f0:	4623      	mov	r3, r4
 80078f2:	42ab      	cmp	r3, r5
 80078f4:	d30a      	bcc.n	800790c <__exponent+0x5e>
 80078f6:	f10d 0309 	add.w	r3, sp, #9
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	42ac      	cmp	r4, r5
 80078fe:	bf88      	it	hi
 8007900:	2300      	movhi	r3, #0
 8007902:	3302      	adds	r3, #2
 8007904:	4403      	add	r3, r0
 8007906:	1a18      	subs	r0, r3, r0
 8007908:	b003      	add	sp, #12
 800790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007910:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007914:	e7ed      	b.n	80078f2 <__exponent+0x44>
 8007916:	2330      	movs	r3, #48	@ 0x30
 8007918:	3130      	adds	r1, #48	@ 0x30
 800791a:	7083      	strb	r3, [r0, #2]
 800791c:	70c1      	strb	r1, [r0, #3]
 800791e:	1d03      	adds	r3, r0, #4
 8007920:	e7f1      	b.n	8007906 <__exponent+0x58>
	...

08007924 <_printf_float>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	b08d      	sub	sp, #52	@ 0x34
 800792a:	460c      	mov	r4, r1
 800792c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007930:	4616      	mov	r6, r2
 8007932:	461f      	mov	r7, r3
 8007934:	4605      	mov	r5, r0
 8007936:	f000 fd01 	bl	800833c <_localeconv_r>
 800793a:	6803      	ldr	r3, [r0, #0]
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	4618      	mov	r0, r3
 8007940:	f7f8 fca6 	bl	8000290 <strlen>
 8007944:	2300      	movs	r3, #0
 8007946:	930a      	str	r3, [sp, #40]	@ 0x28
 8007948:	f8d8 3000 	ldr.w	r3, [r8]
 800794c:	9005      	str	r0, [sp, #20]
 800794e:	3307      	adds	r3, #7
 8007950:	f023 0307 	bic.w	r3, r3, #7
 8007954:	f103 0208 	add.w	r2, r3, #8
 8007958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800795c:	f8d4 b000 	ldr.w	fp, [r4]
 8007960:	f8c8 2000 	str.w	r2, [r8]
 8007964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800796c:	9307      	str	r3, [sp, #28]
 800796e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797a:	4b9c      	ldr	r3, [pc, #624]	@ (8007bec <_printf_float+0x2c8>)
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	f7f9 f8e4 	bl	8000b4c <__aeabi_dcmpun>
 8007984:	bb70      	cbnz	r0, 80079e4 <_printf_float+0xc0>
 8007986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800798a:	4b98      	ldr	r3, [pc, #608]	@ (8007bec <_printf_float+0x2c8>)
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	f7f9 f8be 	bl	8000b10 <__aeabi_dcmple>
 8007994:	bb30      	cbnz	r0, 80079e4 <_printf_float+0xc0>
 8007996:	2200      	movs	r2, #0
 8007998:	2300      	movs	r3, #0
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	f7f9 f8ad 	bl	8000afc <__aeabi_dcmplt>
 80079a2:	b110      	cbz	r0, 80079aa <_printf_float+0x86>
 80079a4:	232d      	movs	r3, #45	@ 0x2d
 80079a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079aa:	4a91      	ldr	r2, [pc, #580]	@ (8007bf0 <_printf_float+0x2cc>)
 80079ac:	4b91      	ldr	r3, [pc, #580]	@ (8007bf4 <_printf_float+0x2d0>)
 80079ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079b2:	bf94      	ite	ls
 80079b4:	4690      	movls	r8, r2
 80079b6:	4698      	movhi	r8, r3
 80079b8:	2303      	movs	r3, #3
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	f02b 0304 	bic.w	r3, fp, #4
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	f04f 0900 	mov.w	r9, #0
 80079c6:	9700      	str	r7, [sp, #0]
 80079c8:	4633      	mov	r3, r6
 80079ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f9d2 	bl	8007d78 <_printf_common>
 80079d4:	3001      	adds	r0, #1
 80079d6:	f040 808d 	bne.w	8007af4 <_printf_float+0x1d0>
 80079da:	f04f 30ff 	mov.w	r0, #4294967295
 80079de:	b00d      	add	sp, #52	@ 0x34
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f9 f8ae 	bl	8000b4c <__aeabi_dcmpun>
 80079f0:	b140      	cbz	r0, 8007a04 <_printf_float+0xe0>
 80079f2:	464b      	mov	r3, r9
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfbc      	itt	lt
 80079f8:	232d      	movlt	r3, #45	@ 0x2d
 80079fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079fe:	4a7e      	ldr	r2, [pc, #504]	@ (8007bf8 <_printf_float+0x2d4>)
 8007a00:	4b7e      	ldr	r3, [pc, #504]	@ (8007bfc <_printf_float+0x2d8>)
 8007a02:	e7d4      	b.n	80079ae <_printf_float+0x8a>
 8007a04:	6863      	ldr	r3, [r4, #4]
 8007a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a0a:	9206      	str	r2, [sp, #24]
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	d13b      	bne.n	8007a88 <_printf_float+0x164>
 8007a10:	2306      	movs	r3, #6
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	9303      	str	r3, [sp, #12]
 8007a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a24:	ab09      	add	r3, sp, #36	@ 0x24
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	6861      	ldr	r1, [r4, #4]
 8007a2a:	ec49 8b10 	vmov	d0, r8, r9
 8007a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff fed6 	bl	80077e4 <__cvt>
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a3c:	2b47      	cmp	r3, #71	@ 0x47
 8007a3e:	4680      	mov	r8, r0
 8007a40:	d129      	bne.n	8007a96 <_printf_float+0x172>
 8007a42:	1cc8      	adds	r0, r1, #3
 8007a44:	db02      	blt.n	8007a4c <_printf_float+0x128>
 8007a46:	6863      	ldr	r3, [r4, #4]
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	dd41      	ble.n	8007ad0 <_printf_float+0x1ac>
 8007a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a50:	fa5f fa8a 	uxtb.w	sl, sl
 8007a54:	3901      	subs	r1, #1
 8007a56:	4652      	mov	r2, sl
 8007a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a5e:	f7ff ff26 	bl	80078ae <__exponent>
 8007a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a64:	1813      	adds	r3, r2, r0
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	4681      	mov	r9, r0
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	dc02      	bgt.n	8007a74 <_printf_float+0x150>
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	07d2      	lsls	r2, r2, #31
 8007a72:	d501      	bpl.n	8007a78 <_printf_float+0x154>
 8007a74:	3301      	adds	r3, #1
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0a2      	beq.n	80079c6 <_printf_float+0xa2>
 8007a80:	232d      	movs	r3, #45	@ 0x2d
 8007a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a86:	e79e      	b.n	80079c6 <_printf_float+0xa2>
 8007a88:	9a06      	ldr	r2, [sp, #24]
 8007a8a:	2a47      	cmp	r2, #71	@ 0x47
 8007a8c:	d1c2      	bne.n	8007a14 <_printf_float+0xf0>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1c0      	bne.n	8007a14 <_printf_float+0xf0>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7bd      	b.n	8007a12 <_printf_float+0xee>
 8007a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a9a:	d9db      	bls.n	8007a54 <_printf_float+0x130>
 8007a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007aa0:	d118      	bne.n	8007ad4 <_printf_float+0x1b0>
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	dd0b      	ble.n	8007ac0 <_printf_float+0x19c>
 8007aa8:	6121      	str	r1, [r4, #16]
 8007aaa:	b913      	cbnz	r3, 8007ab2 <_printf_float+0x18e>
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	07d0      	lsls	r0, r2, #31
 8007ab0:	d502      	bpl.n	8007ab8 <_printf_float+0x194>
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	440b      	add	r3, r1
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aba:	f04f 0900 	mov.w	r9, #0
 8007abe:	e7db      	b.n	8007a78 <_printf_float+0x154>
 8007ac0:	b913      	cbnz	r3, 8007ac8 <_printf_float+0x1a4>
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	07d2      	lsls	r2, r2, #31
 8007ac6:	d501      	bpl.n	8007acc <_printf_float+0x1a8>
 8007ac8:	3302      	adds	r3, #2
 8007aca:	e7f4      	b.n	8007ab6 <_printf_float+0x192>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e7f2      	b.n	8007ab6 <_printf_float+0x192>
 8007ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	db05      	blt.n	8007ae6 <_printf_float+0x1c2>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	6121      	str	r1, [r4, #16]
 8007ade:	07d8      	lsls	r0, r3, #31
 8007ae0:	d5ea      	bpl.n	8007ab8 <_printf_float+0x194>
 8007ae2:	1c4b      	adds	r3, r1, #1
 8007ae4:	e7e7      	b.n	8007ab6 <_printf_float+0x192>
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	bfd4      	ite	le
 8007aea:	f1c1 0202 	rsble	r2, r1, #2
 8007aee:	2201      	movgt	r2, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	e7e0      	b.n	8007ab6 <_printf_float+0x192>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	055a      	lsls	r2, r3, #21
 8007af8:	d407      	bmi.n	8007b0a <_printf_float+0x1e6>
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	4642      	mov	r2, r8
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	d12b      	bne.n	8007b60 <_printf_float+0x23c>
 8007b08:	e767      	b.n	80079da <_printf_float+0xb6>
 8007b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b0e:	f240 80dd 	bls.w	8007ccc <_printf_float+0x3a8>
 8007b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f7f8 ffe5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d033      	beq.n	8007b8a <_printf_float+0x266>
 8007b22:	4a37      	ldr	r2, [pc, #220]	@ (8007c00 <_printf_float+0x2dc>)
 8007b24:	2301      	movs	r3, #1
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f43f af54 	beq.w	80079da <_printf_float+0xb6>
 8007b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b36:	4543      	cmp	r3, r8
 8007b38:	db02      	blt.n	8007b40 <_printf_float+0x21c>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	07d8      	lsls	r0, r3, #31
 8007b3e:	d50f      	bpl.n	8007b60 <_printf_float+0x23c>
 8007b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f af45 	beq.w	80079da <_printf_float+0xb6>
 8007b50:	f04f 0900 	mov.w	r9, #0
 8007b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b58:	f104 0a1a 	add.w	sl, r4, #26
 8007b5c:	45c8      	cmp	r8, r9
 8007b5e:	dc09      	bgt.n	8007b74 <_printf_float+0x250>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	079b      	lsls	r3, r3, #30
 8007b64:	f100 8103 	bmi.w	8007d6e <_printf_float+0x44a>
 8007b68:	68e0      	ldr	r0, [r4, #12]
 8007b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b6c:	4298      	cmp	r0, r3
 8007b6e:	bfb8      	it	lt
 8007b70:	4618      	movlt	r0, r3
 8007b72:	e734      	b.n	80079de <_printf_float+0xba>
 8007b74:	2301      	movs	r3, #1
 8007b76:	4652      	mov	r2, sl
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f43f af2b 	beq.w	80079da <_printf_float+0xb6>
 8007b84:	f109 0901 	add.w	r9, r9, #1
 8007b88:	e7e8      	b.n	8007b5c <_printf_float+0x238>
 8007b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc39      	bgt.n	8007c04 <_printf_float+0x2e0>
 8007b90:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <_printf_float+0x2dc>)
 8007b92:	2301      	movs	r3, #1
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f af1d 	beq.w	80079da <_printf_float+0xb6>
 8007ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8007ba8:	d102      	bne.n	8007bb0 <_printf_float+0x28c>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	d5d7      	bpl.n	8007b60 <_printf_float+0x23c>
 8007bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af0d 	beq.w	80079da <_printf_float+0xb6>
 8007bc0:	f04f 0a00 	mov.w	sl, #0
 8007bc4:	f104 0b1a 	add.w	fp, r4, #26
 8007bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bca:	425b      	negs	r3, r3
 8007bcc:	4553      	cmp	r3, sl
 8007bce:	dc01      	bgt.n	8007bd4 <_printf_float+0x2b0>
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	e793      	b.n	8007afc <_printf_float+0x1d8>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f aefb 	beq.w	80079da <_printf_float+0xb6>
 8007be4:	f10a 0a01 	add.w	sl, sl, #1
 8007be8:	e7ee      	b.n	8007bc8 <_printf_float+0x2a4>
 8007bea:	bf00      	nop
 8007bec:	7fefffff 	.word	0x7fefffff
 8007bf0:	0800acd8 	.word	0x0800acd8
 8007bf4:	0800acdc 	.word	0x0800acdc
 8007bf8:	0800ace0 	.word	0x0800ace0
 8007bfc:	0800ace4 	.word	0x0800ace4
 8007c00:	0800ace8 	.word	0x0800ace8
 8007c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c0a:	4553      	cmp	r3, sl
 8007c0c:	bfa8      	it	ge
 8007c0e:	4653      	movge	r3, sl
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	4699      	mov	r9, r3
 8007c14:	dc36      	bgt.n	8007c84 <_printf_float+0x360>
 8007c16:	f04f 0b00 	mov.w	fp, #0
 8007c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c1e:	f104 021a 	add.w	r2, r4, #26
 8007c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c24:	9306      	str	r3, [sp, #24]
 8007c26:	eba3 0309 	sub.w	r3, r3, r9
 8007c2a:	455b      	cmp	r3, fp
 8007c2c:	dc31      	bgt.n	8007c92 <_printf_float+0x36e>
 8007c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c30:	459a      	cmp	sl, r3
 8007c32:	dc3a      	bgt.n	8007caa <_printf_float+0x386>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d437      	bmi.n	8007caa <_printf_float+0x386>
 8007c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8007c40:	9b06      	ldr	r3, [sp, #24]
 8007c42:	ebaa 0303 	sub.w	r3, sl, r3
 8007c46:	4599      	cmp	r9, r3
 8007c48:	bfa8      	it	ge
 8007c4a:	4699      	movge	r9, r3
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	dc33      	bgt.n	8007cba <_printf_float+0x396>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c5a:	f104 0b1a 	add.w	fp, r4, #26
 8007c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c60:	ebaa 0303 	sub.w	r3, sl, r3
 8007c64:	eba3 0309 	sub.w	r3, r3, r9
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	f77f af79 	ble.w	8007b60 <_printf_float+0x23c>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	465a      	mov	r2, fp
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f aeae 	beq.w	80079da <_printf_float+0xb6>
 8007c7e:	f108 0801 	add.w	r8, r8, #1
 8007c82:	e7ec      	b.n	8007c5e <_printf_float+0x33a>
 8007c84:	4642      	mov	r2, r8
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d1c2      	bne.n	8007c16 <_printf_float+0x2f2>
 8007c90:	e6a3      	b.n	80079da <_printf_float+0xb6>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	9206      	str	r2, [sp, #24]
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f43f ae9c 	beq.w	80079da <_printf_float+0xb6>
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	f10b 0b01 	add.w	fp, fp, #1
 8007ca8:	e7bb      	b.n	8007c22 <_printf_float+0x2fe>
 8007caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d1c0      	bne.n	8007c3a <_printf_float+0x316>
 8007cb8:	e68f      	b.n	80079da <_printf_float+0xb6>
 8007cba:	9a06      	ldr	r2, [sp, #24]
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	4442      	add	r2, r8
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d1c3      	bne.n	8007c52 <_printf_float+0x32e>
 8007cca:	e686      	b.n	80079da <_printf_float+0xb6>
 8007ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cd0:	f1ba 0f01 	cmp.w	sl, #1
 8007cd4:	dc01      	bgt.n	8007cda <_printf_float+0x3b6>
 8007cd6:	07db      	lsls	r3, r3, #31
 8007cd8:	d536      	bpl.n	8007d48 <_printf_float+0x424>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4642      	mov	r2, r8
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f43f ae78 	beq.w	80079da <_printf_float+0xb6>
 8007cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f43f ae70 	beq.w	80079da <_printf_float+0xb6>
 8007cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d06:	f7f8 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d0a:	b9c0      	cbnz	r0, 8007d3e <_printf_float+0x41a>
 8007d0c:	4653      	mov	r3, sl
 8007d0e:	f108 0201 	add.w	r2, r8, #1
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d10c      	bne.n	8007d36 <_printf_float+0x412>
 8007d1c:	e65d      	b.n	80079da <_printf_float+0xb6>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	465a      	mov	r2, fp
 8007d22:	4631      	mov	r1, r6
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	f43f ae56 	beq.w	80079da <_printf_float+0xb6>
 8007d2e:	f108 0801 	add.w	r8, r8, #1
 8007d32:	45d0      	cmp	r8, sl
 8007d34:	dbf3      	blt.n	8007d1e <_printf_float+0x3fa>
 8007d36:	464b      	mov	r3, r9
 8007d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d3c:	e6df      	b.n	8007afe <_printf_float+0x1da>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	f104 0b1a 	add.w	fp, r4, #26
 8007d46:	e7f4      	b.n	8007d32 <_printf_float+0x40e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	e7e1      	b.n	8007d12 <_printf_float+0x3ee>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	464a      	mov	r2, r9
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f43f ae3e 	beq.w	80079da <_printf_float+0xb6>
 8007d5e:	f108 0801 	add.w	r8, r8, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	dcf0      	bgt.n	8007d4e <_printf_float+0x42a>
 8007d6c:	e6fc      	b.n	8007b68 <_printf_float+0x244>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0919 	add.w	r9, r4, #25
 8007d76:	e7f4      	b.n	8007d62 <_printf_float+0x43e>

08007d78 <_printf_common>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	4698      	mov	r8, r3
 8007d80:	688a      	ldr	r2, [r1, #8]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bfb8      	it	lt
 8007d8c:	4613      	movlt	r3, r2
 8007d8e:	6033      	str	r3, [r6, #0]
 8007d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d94:	4607      	mov	r7, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	b10a      	cbz	r2, 8007d9e <_printf_common+0x26>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	0699      	lsls	r1, r3, #26
 8007da2:	bf42      	ittt	mi
 8007da4:	6833      	ldrmi	r3, [r6, #0]
 8007da6:	3302      	addmi	r3, #2
 8007da8:	6033      	strmi	r3, [r6, #0]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d106      	bne.n	8007dc0 <_printf_common+0x48>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dc26      	bgt.n	8007e0e <_printf_common+0x96>
 8007dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	3b00      	subs	r3, #0
 8007dc8:	bf18      	it	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d42b      	bmi.n	8007e28 <_printf_common+0xb0>
 8007dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	47c8      	blx	r9
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d01e      	beq.n	8007e1c <_printf_common+0xa4>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	f003 0306 	and.w	r3, r3, #6
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	bf02      	ittt	eq
 8007dea:	68e5      	ldreq	r5, [r4, #12]
 8007dec:	6833      	ldreq	r3, [r6, #0]
 8007dee:	1aed      	subeq	r5, r5, r3
 8007df0:	68a3      	ldr	r3, [r4, #8]
 8007df2:	bf0c      	ite	eq
 8007df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df8:	2500      	movne	r5, #0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bfc4      	itt	gt
 8007dfe:	1a9b      	subgt	r3, r3, r2
 8007e00:	18ed      	addgt	r5, r5, r3
 8007e02:	2600      	movs	r6, #0
 8007e04:	341a      	adds	r4, #26
 8007e06:	42b5      	cmp	r5, r6
 8007e08:	d11a      	bne.n	8007e40 <_printf_common+0xc8>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e008      	b.n	8007e20 <_printf_common+0xa8>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4652      	mov	r2, sl
 8007e12:	4641      	mov	r1, r8
 8007e14:	4638      	mov	r0, r7
 8007e16:	47c8      	blx	r9
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d103      	bne.n	8007e24 <_printf_common+0xac>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e24:	3501      	adds	r5, #1
 8007e26:	e7c6      	b.n	8007db6 <_printf_common+0x3e>
 8007e28:	18e1      	adds	r1, r4, r3
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	2030      	movs	r0, #48	@ 0x30
 8007e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e32:	4422      	add	r2, r4
 8007e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	e7c7      	b.n	8007dd0 <_printf_common+0x58>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4622      	mov	r2, r4
 8007e44:	4641      	mov	r1, r8
 8007e46:	4638      	mov	r0, r7
 8007e48:	47c8      	blx	r9
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d0e6      	beq.n	8007e1c <_printf_common+0xa4>
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7d9      	b.n	8007e06 <_printf_common+0x8e>
	...

08007e54 <_printf_i>:
 8007e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	7e0f      	ldrb	r7, [r1, #24]
 8007e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e5c:	2f78      	cmp	r7, #120	@ 0x78
 8007e5e:	4691      	mov	r9, r2
 8007e60:	4680      	mov	r8, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	469a      	mov	sl, r3
 8007e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e6a:	d807      	bhi.n	8007e7c <_printf_i+0x28>
 8007e6c:	2f62      	cmp	r7, #98	@ 0x62
 8007e6e:	d80a      	bhi.n	8007e86 <_printf_i+0x32>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	f000 80d2 	beq.w	800801a <_printf_i+0x1c6>
 8007e76:	2f58      	cmp	r7, #88	@ 0x58
 8007e78:	f000 80b9 	beq.w	8007fee <_printf_i+0x19a>
 8007e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e84:	e03a      	b.n	8007efc <_printf_i+0xa8>
 8007e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e8a:	2b15      	cmp	r3, #21
 8007e8c:	d8f6      	bhi.n	8007e7c <_printf_i+0x28>
 8007e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e94 <_printf_i+0x40>)
 8007e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007f01 	.word	0x08007f01
 8007e9c:	08007e7d 	.word	0x08007e7d
 8007ea0:	08007e7d 	.word	0x08007e7d
 8007ea4:	08007e7d 	.word	0x08007e7d
 8007ea8:	08007e7d 	.word	0x08007e7d
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007e7d 	.word	0x08007e7d
 8007eb4:	08007e7d 	.word	0x08007e7d
 8007eb8:	08007e7d 	.word	0x08007e7d
 8007ebc:	08007e7d 	.word	0x08007e7d
 8007ec0:	08008001 	.word	0x08008001
 8007ec4:	08007f2b 	.word	0x08007f2b
 8007ec8:	08007fbb 	.word	0x08007fbb
 8007ecc:	08007e7d 	.word	0x08007e7d
 8007ed0:	08007e7d 	.word	0x08007e7d
 8007ed4:	08008023 	.word	0x08008023
 8007ed8:	08007e7d 	.word	0x08007e7d
 8007edc:	08007f2b 	.word	0x08007f2b
 8007ee0:	08007e7d 	.word	0x08007e7d
 8007ee4:	08007e7d 	.word	0x08007e7d
 8007ee8:	08007fc3 	.word	0x08007fc3
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6032      	str	r2, [r6, #0]
 8007ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007efc:	2301      	movs	r3, #1
 8007efe:	e09d      	b.n	800803c <_printf_i+0x1e8>
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	6820      	ldr	r0, [r4, #0]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	6031      	str	r1, [r6, #0]
 8007f08:	0606      	lsls	r6, r0, #24
 8007f0a:	d501      	bpl.n	8007f10 <_printf_i+0xbc>
 8007f0c:	681d      	ldr	r5, [r3, #0]
 8007f0e:	e003      	b.n	8007f18 <_printf_i+0xc4>
 8007f10:	0645      	lsls	r5, r0, #25
 8007f12:	d5fb      	bpl.n	8007f0c <_printf_i+0xb8>
 8007f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	da03      	bge.n	8007f24 <_printf_i+0xd0>
 8007f1c:	232d      	movs	r3, #45	@ 0x2d
 8007f1e:	426d      	negs	r5, r5
 8007f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f24:	4859      	ldr	r0, [pc, #356]	@ (800808c <_printf_i+0x238>)
 8007f26:	230a      	movs	r3, #10
 8007f28:	e011      	b.n	8007f4e <_printf_i+0xfa>
 8007f2a:	6821      	ldr	r1, [r4, #0]
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	0608      	lsls	r0, r1, #24
 8007f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f34:	d402      	bmi.n	8007f3c <_printf_i+0xe8>
 8007f36:	0649      	lsls	r1, r1, #25
 8007f38:	bf48      	it	mi
 8007f3a:	b2ad      	uxthmi	r5, r5
 8007f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f3e:	4853      	ldr	r0, [pc, #332]	@ (800808c <_printf_i+0x238>)
 8007f40:	6033      	str	r3, [r6, #0]
 8007f42:	bf14      	ite	ne
 8007f44:	230a      	movne	r3, #10
 8007f46:	2308      	moveq	r3, #8
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f4e:	6866      	ldr	r6, [r4, #4]
 8007f50:	60a6      	str	r6, [r4, #8]
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	bfa2      	ittt	ge
 8007f56:	6821      	ldrge	r1, [r4, #0]
 8007f58:	f021 0104 	bicge.w	r1, r1, #4
 8007f5c:	6021      	strge	r1, [r4, #0]
 8007f5e:	b90d      	cbnz	r5, 8007f64 <_printf_i+0x110>
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	d04b      	beq.n	8007ffc <_printf_i+0x1a8>
 8007f64:	4616      	mov	r6, r2
 8007f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f6e:	5dc7      	ldrb	r7, [r0, r7]
 8007f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f74:	462f      	mov	r7, r5
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	460d      	mov	r5, r1
 8007f7a:	d9f4      	bls.n	8007f66 <_printf_i+0x112>
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d10b      	bne.n	8007f98 <_printf_i+0x144>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	07df      	lsls	r7, r3, #31
 8007f84:	d508      	bpl.n	8007f98 <_printf_i+0x144>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	bfde      	ittt	le
 8007f8e:	2330      	movle	r3, #48	@ 0x30
 8007f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f98:	1b92      	subs	r2, r2, r6
 8007f9a:	6122      	str	r2, [r4, #16]
 8007f9c:	f8cd a000 	str.w	sl, [sp]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	aa03      	add	r2, sp, #12
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff fee6 	bl	8007d78 <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d14a      	bne.n	8008046 <_printf_i+0x1f2>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b004      	add	sp, #16
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f043 0320 	orr.w	r3, r3, #32
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	4833      	ldr	r0, [pc, #204]	@ (8008090 <_printf_i+0x23c>)
 8007fc4:	2778      	movs	r7, #120	@ 0x78
 8007fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	6831      	ldr	r1, [r6, #0]
 8007fce:	061f      	lsls	r7, r3, #24
 8007fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fd4:	d402      	bmi.n	8007fdc <_printf_i+0x188>
 8007fd6:	065f      	lsls	r7, r3, #25
 8007fd8:	bf48      	it	mi
 8007fda:	b2ad      	uxthmi	r5, r5
 8007fdc:	6031      	str	r1, [r6, #0]
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	bf44      	itt	mi
 8007fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe6:	6023      	strmi	r3, [r4, #0]
 8007fe8:	b11d      	cbz	r5, 8007ff2 <_printf_i+0x19e>
 8007fea:	2310      	movs	r3, #16
 8007fec:	e7ac      	b.n	8007f48 <_printf_i+0xf4>
 8007fee:	4827      	ldr	r0, [pc, #156]	@ (800808c <_printf_i+0x238>)
 8007ff0:	e7e9      	b.n	8007fc6 <_printf_i+0x172>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f023 0320 	bic.w	r3, r3, #32
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	e7f6      	b.n	8007fea <_printf_i+0x196>
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	e7bd      	b.n	8007f7c <_printf_i+0x128>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	6825      	ldr	r5, [r4, #0]
 8008004:	6961      	ldr	r1, [r4, #20]
 8008006:	1d18      	adds	r0, r3, #4
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	062e      	lsls	r6, r5, #24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	d501      	bpl.n	8008014 <_printf_i+0x1c0>
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	e002      	b.n	800801a <_printf_i+0x1c6>
 8008014:	0668      	lsls	r0, r5, #25
 8008016:	d5fb      	bpl.n	8008010 <_printf_i+0x1bc>
 8008018:	8019      	strh	r1, [r3, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	4616      	mov	r6, r2
 8008020:	e7bc      	b.n	8007f9c <_printf_i+0x148>
 8008022:	6833      	ldr	r3, [r6, #0]
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	6032      	str	r2, [r6, #0]
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	2100      	movs	r1, #0
 800802e:	4630      	mov	r0, r6
 8008030:	f7f8 f8de 	bl	80001f0 <memchr>
 8008034:	b108      	cbz	r0, 800803a <_printf_i+0x1e6>
 8008036:	1b80      	subs	r0, r0, r6
 8008038:	6060      	str	r0, [r4, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	2300      	movs	r3, #0
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008044:	e7aa      	b.n	8007f9c <_printf_i+0x148>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	4632      	mov	r2, r6
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d0ad      	beq.n	8007fb0 <_printf_i+0x15c>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	079b      	lsls	r3, r3, #30
 8008058:	d413      	bmi.n	8008082 <_printf_i+0x22e>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	4298      	cmp	r0, r3
 8008060:	bfb8      	it	lt
 8008062:	4618      	movlt	r0, r3
 8008064:	e7a6      	b.n	8007fb4 <_printf_i+0x160>
 8008066:	2301      	movs	r3, #1
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d09d      	beq.n	8007fb0 <_printf_i+0x15c>
 8008074:	3501      	adds	r5, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	9903      	ldr	r1, [sp, #12]
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	42ab      	cmp	r3, r5
 800807e:	dcf2      	bgt.n	8008066 <_printf_i+0x212>
 8008080:	e7eb      	b.n	800805a <_printf_i+0x206>
 8008082:	2500      	movs	r5, #0
 8008084:	f104 0619 	add.w	r6, r4, #25
 8008088:	e7f5      	b.n	8008076 <_printf_i+0x222>
 800808a:	bf00      	nop
 800808c:	0800acea 	.word	0x0800acea
 8008090:	0800acfb 	.word	0x0800acfb

08008094 <std>:
 8008094:	2300      	movs	r3, #0
 8008096:	b510      	push	{r4, lr}
 8008098:	4604      	mov	r4, r0
 800809a:	e9c0 3300 	strd	r3, r3, [r0]
 800809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a2:	6083      	str	r3, [r0, #8]
 80080a4:	8181      	strh	r1, [r0, #12]
 80080a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080a8:	81c2      	strh	r2, [r0, #14]
 80080aa:	6183      	str	r3, [r0, #24]
 80080ac:	4619      	mov	r1, r3
 80080ae:	2208      	movs	r2, #8
 80080b0:	305c      	adds	r0, #92	@ 0x5c
 80080b2:	f000 f93a 	bl	800832a <memset>
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x58>)
 80080b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x5c>)
 80080bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x60>)
 80080c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <std+0x64>)
 80080c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <std+0x68>)
 80080c8:	6224      	str	r4, [r4, #32]
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d006      	beq.n	80080dc <std+0x48>
 80080ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080d2:	4294      	cmp	r4, r2
 80080d4:	d002      	beq.n	80080dc <std+0x48>
 80080d6:	33d0      	adds	r3, #208	@ 0xd0
 80080d8:	429c      	cmp	r4, r3
 80080da:	d105      	bne.n	80080e8 <std+0x54>
 80080dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f000 b9ae 	b.w	8008444 <__retarget_lock_init_recursive>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	bf00      	nop
 80080ec:	080082a5 	.word	0x080082a5
 80080f0:	080082c7 	.word	0x080082c7
 80080f4:	080082ff 	.word	0x080082ff
 80080f8:	08008323 	.word	0x08008323
 80080fc:	200007c8 	.word	0x200007c8

08008100 <stdio_exit_handler>:
 8008100:	4a02      	ldr	r2, [pc, #8]	@ (800810c <stdio_exit_handler+0xc>)
 8008102:	4903      	ldr	r1, [pc, #12]	@ (8008110 <stdio_exit_handler+0x10>)
 8008104:	4803      	ldr	r0, [pc, #12]	@ (8008114 <stdio_exit_handler+0x14>)
 8008106:	f000 b869 	b.w	80081dc <_fwalk_sglue>
 800810a:	bf00      	nop
 800810c:	20000020 	.word	0x20000020
 8008110:	08009ed5 	.word	0x08009ed5
 8008114:	20000030 	.word	0x20000030

08008118 <cleanup_stdio>:
 8008118:	6841      	ldr	r1, [r0, #4]
 800811a:	4b0c      	ldr	r3, [pc, #48]	@ (800814c <cleanup_stdio+0x34>)
 800811c:	4299      	cmp	r1, r3
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	d001      	beq.n	8008128 <cleanup_stdio+0x10>
 8008124:	f001 fed6 	bl	8009ed4 <_fflush_r>
 8008128:	68a1      	ldr	r1, [r4, #8]
 800812a:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <cleanup_stdio+0x38>)
 800812c:	4299      	cmp	r1, r3
 800812e:	d002      	beq.n	8008136 <cleanup_stdio+0x1e>
 8008130:	4620      	mov	r0, r4
 8008132:	f001 fecf 	bl	8009ed4 <_fflush_r>
 8008136:	68e1      	ldr	r1, [r4, #12]
 8008138:	4b06      	ldr	r3, [pc, #24]	@ (8008154 <cleanup_stdio+0x3c>)
 800813a:	4299      	cmp	r1, r3
 800813c:	d004      	beq.n	8008148 <cleanup_stdio+0x30>
 800813e:	4620      	mov	r0, r4
 8008140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008144:	f001 bec6 	b.w	8009ed4 <_fflush_r>
 8008148:	bd10      	pop	{r4, pc}
 800814a:	bf00      	nop
 800814c:	200007c8 	.word	0x200007c8
 8008150:	20000830 	.word	0x20000830
 8008154:	20000898 	.word	0x20000898

08008158 <global_stdio_init.part.0>:
 8008158:	b510      	push	{r4, lr}
 800815a:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <global_stdio_init.part.0+0x30>)
 800815c:	4c0b      	ldr	r4, [pc, #44]	@ (800818c <global_stdio_init.part.0+0x34>)
 800815e:	4a0c      	ldr	r2, [pc, #48]	@ (8008190 <global_stdio_init.part.0+0x38>)
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	4620      	mov	r0, r4
 8008164:	2200      	movs	r2, #0
 8008166:	2104      	movs	r1, #4
 8008168:	f7ff ff94 	bl	8008094 <std>
 800816c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008170:	2201      	movs	r2, #1
 8008172:	2109      	movs	r1, #9
 8008174:	f7ff ff8e 	bl	8008094 <std>
 8008178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800817c:	2202      	movs	r2, #2
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008182:	2112      	movs	r1, #18
 8008184:	f7ff bf86 	b.w	8008094 <std>
 8008188:	20000900 	.word	0x20000900
 800818c:	200007c8 	.word	0x200007c8
 8008190:	08008101 	.word	0x08008101

08008194 <__sfp_lock_acquire>:
 8008194:	4801      	ldr	r0, [pc, #4]	@ (800819c <__sfp_lock_acquire+0x8>)
 8008196:	f000 b956 	b.w	8008446 <__retarget_lock_acquire_recursive>
 800819a:	bf00      	nop
 800819c:	20000909 	.word	0x20000909

080081a0 <__sfp_lock_release>:
 80081a0:	4801      	ldr	r0, [pc, #4]	@ (80081a8 <__sfp_lock_release+0x8>)
 80081a2:	f000 b951 	b.w	8008448 <__retarget_lock_release_recursive>
 80081a6:	bf00      	nop
 80081a8:	20000909 	.word	0x20000909

080081ac <__sinit>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4604      	mov	r4, r0
 80081b0:	f7ff fff0 	bl	8008194 <__sfp_lock_acquire>
 80081b4:	6a23      	ldr	r3, [r4, #32]
 80081b6:	b11b      	cbz	r3, 80081c0 <__sinit+0x14>
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f7ff bff0 	b.w	80081a0 <__sfp_lock_release>
 80081c0:	4b04      	ldr	r3, [pc, #16]	@ (80081d4 <__sinit+0x28>)
 80081c2:	6223      	str	r3, [r4, #32]
 80081c4:	4b04      	ldr	r3, [pc, #16]	@ (80081d8 <__sinit+0x2c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f5      	bne.n	80081b8 <__sinit+0xc>
 80081cc:	f7ff ffc4 	bl	8008158 <global_stdio_init.part.0>
 80081d0:	e7f2      	b.n	80081b8 <__sinit+0xc>
 80081d2:	bf00      	nop
 80081d4:	08008119 	.word	0x08008119
 80081d8:	20000900 	.word	0x20000900

080081dc <_fwalk_sglue>:
 80081dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	4607      	mov	r7, r0
 80081e2:	4688      	mov	r8, r1
 80081e4:	4614      	mov	r4, r2
 80081e6:	2600      	movs	r6, #0
 80081e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ec:	f1b9 0901 	subs.w	r9, r9, #1
 80081f0:	d505      	bpl.n	80081fe <_fwalk_sglue+0x22>
 80081f2:	6824      	ldr	r4, [r4, #0]
 80081f4:	2c00      	cmp	r4, #0
 80081f6:	d1f7      	bne.n	80081e8 <_fwalk_sglue+0xc>
 80081f8:	4630      	mov	r0, r6
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d907      	bls.n	8008214 <_fwalk_sglue+0x38>
 8008204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008208:	3301      	adds	r3, #1
 800820a:	d003      	beq.n	8008214 <_fwalk_sglue+0x38>
 800820c:	4629      	mov	r1, r5
 800820e:	4638      	mov	r0, r7
 8008210:	47c0      	blx	r8
 8008212:	4306      	orrs	r6, r0
 8008214:	3568      	adds	r5, #104	@ 0x68
 8008216:	e7e9      	b.n	80081ec <_fwalk_sglue+0x10>

08008218 <iprintf>:
 8008218:	b40f      	push	{r0, r1, r2, r3}
 800821a:	b507      	push	{r0, r1, r2, lr}
 800821c:	4906      	ldr	r1, [pc, #24]	@ (8008238 <iprintf+0x20>)
 800821e:	ab04      	add	r3, sp, #16
 8008220:	6808      	ldr	r0, [r1, #0]
 8008222:	f853 2b04 	ldr.w	r2, [r3], #4
 8008226:	6881      	ldr	r1, [r0, #8]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	f001 fcb7 	bl	8009b9c <_vfiprintf_r>
 800822e:	b003      	add	sp, #12
 8008230:	f85d eb04 	ldr.w	lr, [sp], #4
 8008234:	b004      	add	sp, #16
 8008236:	4770      	bx	lr
 8008238:	2000002c 	.word	0x2000002c

0800823c <sniprintf>:
 800823c:	b40c      	push	{r2, r3}
 800823e:	b530      	push	{r4, r5, lr}
 8008240:	4b17      	ldr	r3, [pc, #92]	@ (80082a0 <sniprintf+0x64>)
 8008242:	1e0c      	subs	r4, r1, #0
 8008244:	681d      	ldr	r5, [r3, #0]
 8008246:	b09d      	sub	sp, #116	@ 0x74
 8008248:	da08      	bge.n	800825c <sniprintf+0x20>
 800824a:	238b      	movs	r3, #139	@ 0x8b
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f04f 30ff 	mov.w	r0, #4294967295
 8008252:	b01d      	add	sp, #116	@ 0x74
 8008254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008258:	b002      	add	sp, #8
 800825a:	4770      	bx	lr
 800825c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008260:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008264:	bf14      	ite	ne
 8008266:	f104 33ff 	addne.w	r3, r4, #4294967295
 800826a:	4623      	moveq	r3, r4
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	9307      	str	r3, [sp, #28]
 8008270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008274:	9002      	str	r0, [sp, #8]
 8008276:	9006      	str	r0, [sp, #24]
 8008278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800827c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800827e:	ab21      	add	r3, sp, #132	@ 0x84
 8008280:	a902      	add	r1, sp, #8
 8008282:	4628      	mov	r0, r5
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	f001 fb63 	bl	8009950 <_svfiprintf_r>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	bfbc      	itt	lt
 800828e:	238b      	movlt	r3, #139	@ 0x8b
 8008290:	602b      	strlt	r3, [r5, #0]
 8008292:	2c00      	cmp	r4, #0
 8008294:	d0dd      	beq.n	8008252 <sniprintf+0x16>
 8008296:	9b02      	ldr	r3, [sp, #8]
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e7d9      	b.n	8008252 <sniprintf+0x16>
 800829e:	bf00      	nop
 80082a0:	2000002c 	.word	0x2000002c

080082a4 <__sread>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	460c      	mov	r4, r1
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	f000 f86c 	bl	8008388 <_read_r>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	bfab      	itete	ge
 80082b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082b6:	89a3      	ldrhlt	r3, [r4, #12]
 80082b8:	181b      	addge	r3, r3, r0
 80082ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082be:	bfac      	ite	ge
 80082c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082c2:	81a3      	strhlt	r3, [r4, #12]
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <__swrite>:
 80082c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	461f      	mov	r7, r3
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	05db      	lsls	r3, r3, #23
 80082d0:	4605      	mov	r5, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	4616      	mov	r6, r2
 80082d6:	d505      	bpl.n	80082e4 <__swrite+0x1e>
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	2302      	movs	r3, #2
 80082de:	2200      	movs	r2, #0
 80082e0:	f000 f840 	bl	8008364 <_lseek_r>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	4628      	mov	r0, r5
 80082f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	f000 b867 	b.w	80083cc <_write_r>

080082fe <__sseek>:
 80082fe:	b510      	push	{r4, lr}
 8008300:	460c      	mov	r4, r1
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	f000 f82d 	bl	8008364 <_lseek_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	bf15      	itete	ne
 8008310:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800831a:	81a3      	strheq	r3, [r4, #12]
 800831c:	bf18      	it	ne
 800831e:	81a3      	strhne	r3, [r4, #12]
 8008320:	bd10      	pop	{r4, pc}

08008322 <__sclose>:
 8008322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008326:	f000 b80d 	b.w	8008344 <_close_r>

0800832a <memset>:
 800832a:	4402      	add	r2, r0
 800832c:	4603      	mov	r3, r0
 800832e:	4293      	cmp	r3, r2
 8008330:	d100      	bne.n	8008334 <memset+0xa>
 8008332:	4770      	bx	lr
 8008334:	f803 1b01 	strb.w	r1, [r3], #1
 8008338:	e7f9      	b.n	800832e <memset+0x4>
	...

0800833c <_localeconv_r>:
 800833c:	4800      	ldr	r0, [pc, #0]	@ (8008340 <_localeconv_r+0x4>)
 800833e:	4770      	bx	lr
 8008340:	2000016c 	.word	0x2000016c

08008344 <_close_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_close_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7fa ff72 	bl	8003238 <_close>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_close_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_close_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000904 	.word	0x20000904

08008364 <_lseek_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	@ (8008384 <_lseek_r+0x20>)
 8008368:	4604      	mov	r4, r0
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	2200      	movs	r2, #0
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f7fa ff87 	bl	8003286 <_lseek>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_lseek_r+0x1e>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_lseek_r+0x1e>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20000904 	.word	0x20000904

08008388 <_read_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d07      	ldr	r5, [pc, #28]	@ (80083a8 <_read_r+0x20>)
 800838c:	4604      	mov	r4, r0
 800838e:	4608      	mov	r0, r1
 8008390:	4611      	mov	r1, r2
 8008392:	2200      	movs	r2, #0
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	f7fa ff15 	bl	80031c6 <_read>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_read_r+0x1e>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_read_r+0x1e>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	20000904 	.word	0x20000904

080083ac <_sbrk_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d06      	ldr	r5, [pc, #24]	@ (80083c8 <_sbrk_r+0x1c>)
 80083b0:	2300      	movs	r3, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	602b      	str	r3, [r5, #0]
 80083b8:	f7fa ff72 	bl	80032a0 <_sbrk>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_sbrk_r+0x1a>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_sbrk_r+0x1a>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	20000904 	.word	0x20000904

080083cc <_write_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	@ (80083ec <_write_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7fa ff10 	bl	8003200 <_write>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_write_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_write_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20000904 	.word	0x20000904

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	@ (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000002c 	.word	0x2000002c

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008434 <__libc_init_array+0x38>)
 8008400:	4c0d      	ldr	r4, [pc, #52]	@ (8008438 <__libc_init_array+0x3c>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	2600      	movs	r6, #0
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	4d0b      	ldr	r5, [pc, #44]	@ (800843c <__libc_init_array+0x40>)
 800840e:	4c0c      	ldr	r4, [pc, #48]	@ (8008440 <__libc_init_array+0x44>)
 8008410:	f002 fb12 	bl	800aa38 <_init>
 8008414:	1b64      	subs	r4, r4, r5
 8008416:	10a4      	asrs	r4, r4, #2
 8008418:	2600      	movs	r6, #0
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	f855 3b04 	ldr.w	r3, [r5], #4
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	f855 3b04 	ldr.w	r3, [r5], #4
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	0800b0c0 	.word	0x0800b0c0
 8008438:	0800b0c0 	.word	0x0800b0c0
 800843c:	0800b0c0 	.word	0x0800b0c0
 8008440:	0800b0c4 	.word	0x0800b0c4

08008444 <__retarget_lock_init_recursive>:
 8008444:	4770      	bx	lr

08008446 <__retarget_lock_acquire_recursive>:
 8008446:	4770      	bx	lr

08008448 <__retarget_lock_release_recursive>:
 8008448:	4770      	bx	lr

0800844a <memcpy>:
 800844a:	440a      	add	r2, r1
 800844c:	4291      	cmp	r1, r2
 800844e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008452:	d100      	bne.n	8008456 <memcpy+0xc>
 8008454:	4770      	bx	lr
 8008456:	b510      	push	{r4, lr}
 8008458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800845c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008460:	4291      	cmp	r1, r2
 8008462:	d1f9      	bne.n	8008458 <memcpy+0xe>
 8008464:	bd10      	pop	{r4, pc}

08008466 <quorem>:
 8008466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	6903      	ldr	r3, [r0, #16]
 800846c:	690c      	ldr	r4, [r1, #16]
 800846e:	42a3      	cmp	r3, r4
 8008470:	4607      	mov	r7, r0
 8008472:	db7e      	blt.n	8008572 <quorem+0x10c>
 8008474:	3c01      	subs	r4, #1
 8008476:	f101 0814 	add.w	r8, r1, #20
 800847a:	00a3      	lsls	r3, r4, #2
 800847c:	f100 0514 	add.w	r5, r0, #20
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800848c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008490:	3301      	adds	r3, #1
 8008492:	429a      	cmp	r2, r3
 8008494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008498:	fbb2 f6f3 	udiv	r6, r2, r3
 800849c:	d32e      	bcc.n	80084fc <quorem+0x96>
 800849e:	f04f 0a00 	mov.w	sl, #0
 80084a2:	46c4      	mov	ip, r8
 80084a4:	46ae      	mov	lr, r5
 80084a6:	46d3      	mov	fp, sl
 80084a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084ac:	b298      	uxth	r0, r3
 80084ae:	fb06 a000 	mla	r0, r6, r0, sl
 80084b2:	0c02      	lsrs	r2, r0, #16
 80084b4:	0c1b      	lsrs	r3, r3, #16
 80084b6:	fb06 2303 	mla	r3, r6, r3, r2
 80084ba:	f8de 2000 	ldr.w	r2, [lr]
 80084be:	b280      	uxth	r0, r0
 80084c0:	b292      	uxth	r2, r2
 80084c2:	1a12      	subs	r2, r2, r0
 80084c4:	445a      	add	r2, fp
 80084c6:	f8de 0000 	ldr.w	r0, [lr]
 80084ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084d8:	b292      	uxth	r2, r2
 80084da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084de:	45e1      	cmp	r9, ip
 80084e0:	f84e 2b04 	str.w	r2, [lr], #4
 80084e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084e8:	d2de      	bcs.n	80084a8 <quorem+0x42>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	58eb      	ldr	r3, [r5, r3]
 80084ee:	b92b      	cbnz	r3, 80084fc <quorem+0x96>
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	3b04      	subs	r3, #4
 80084f4:	429d      	cmp	r5, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	d32f      	bcc.n	800855a <quorem+0xf4>
 80084fa:	613c      	str	r4, [r7, #16]
 80084fc:	4638      	mov	r0, r7
 80084fe:	f001 f8c3 	bl	8009688 <__mcmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	db25      	blt.n	8008552 <quorem+0xec>
 8008506:	4629      	mov	r1, r5
 8008508:	2000      	movs	r0, #0
 800850a:	f858 2b04 	ldr.w	r2, [r8], #4
 800850e:	f8d1 c000 	ldr.w	ip, [r1]
 8008512:	fa1f fe82 	uxth.w	lr, r2
 8008516:	fa1f f38c 	uxth.w	r3, ip
 800851a:	eba3 030e 	sub.w	r3, r3, lr
 800851e:	4403      	add	r3, r0
 8008520:	0c12      	lsrs	r2, r2, #16
 8008522:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008526:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008530:	45c1      	cmp	r9, r8
 8008532:	f841 3b04 	str.w	r3, [r1], #4
 8008536:	ea4f 4022 	mov.w	r0, r2, asr #16
 800853a:	d2e6      	bcs.n	800850a <quorem+0xa4>
 800853c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008544:	b922      	cbnz	r2, 8008550 <quorem+0xea>
 8008546:	3b04      	subs	r3, #4
 8008548:	429d      	cmp	r5, r3
 800854a:	461a      	mov	r2, r3
 800854c:	d30b      	bcc.n	8008566 <quorem+0x100>
 800854e:	613c      	str	r4, [r7, #16]
 8008550:	3601      	adds	r6, #1
 8008552:	4630      	mov	r0, r6
 8008554:	b003      	add	sp, #12
 8008556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	3b04      	subs	r3, #4
 800855e:	2a00      	cmp	r2, #0
 8008560:	d1cb      	bne.n	80084fa <quorem+0x94>
 8008562:	3c01      	subs	r4, #1
 8008564:	e7c6      	b.n	80084f4 <quorem+0x8e>
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	3b04      	subs	r3, #4
 800856a:	2a00      	cmp	r2, #0
 800856c:	d1ef      	bne.n	800854e <quorem+0xe8>
 800856e:	3c01      	subs	r4, #1
 8008570:	e7ea      	b.n	8008548 <quorem+0xe2>
 8008572:	2000      	movs	r0, #0
 8008574:	e7ee      	b.n	8008554 <quorem+0xee>
	...

08008578 <_dtoa_r>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	69c7      	ldr	r7, [r0, #28]
 800857e:	b099      	sub	sp, #100	@ 0x64
 8008580:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008584:	ec55 4b10 	vmov	r4, r5, d0
 8008588:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800858a:	9109      	str	r1, [sp, #36]	@ 0x24
 800858c:	4683      	mov	fp, r0
 800858e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008590:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008592:	b97f      	cbnz	r7, 80085b4 <_dtoa_r+0x3c>
 8008594:	2010      	movs	r0, #16
 8008596:	f7ff f86f 	bl	8007678 <malloc>
 800859a:	4602      	mov	r2, r0
 800859c:	f8cb 001c 	str.w	r0, [fp, #28]
 80085a0:	b920      	cbnz	r0, 80085ac <_dtoa_r+0x34>
 80085a2:	4ba7      	ldr	r3, [pc, #668]	@ (8008840 <_dtoa_r+0x2c8>)
 80085a4:	21ef      	movs	r1, #239	@ 0xef
 80085a6:	48a7      	ldr	r0, [pc, #668]	@ (8008844 <_dtoa_r+0x2cc>)
 80085a8:	f001 fd6a 	bl	800a080 <__assert_func>
 80085ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085b0:	6007      	str	r7, [r0, #0]
 80085b2:	60c7      	str	r7, [r0, #12]
 80085b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	b159      	cbz	r1, 80085d4 <_dtoa_r+0x5c>
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	604a      	str	r2, [r1, #4]
 80085c0:	2301      	movs	r3, #1
 80085c2:	4093      	lsls	r3, r2
 80085c4:	608b      	str	r3, [r1, #8]
 80085c6:	4658      	mov	r0, fp
 80085c8:	f000 fe24 	bl	8009214 <_Bfree>
 80085cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	1e2b      	subs	r3, r5, #0
 80085d6:	bfb9      	ittee	lt
 80085d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085dc:	9303      	strlt	r3, [sp, #12]
 80085de:	2300      	movge	r3, #0
 80085e0:	6033      	strge	r3, [r6, #0]
 80085e2:	9f03      	ldr	r7, [sp, #12]
 80085e4:	4b98      	ldr	r3, [pc, #608]	@ (8008848 <_dtoa_r+0x2d0>)
 80085e6:	bfbc      	itt	lt
 80085e8:	2201      	movlt	r2, #1
 80085ea:	6032      	strlt	r2, [r6, #0]
 80085ec:	43bb      	bics	r3, r7
 80085ee:	d112      	bne.n	8008616 <_dtoa_r+0x9e>
 80085f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80085f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085fc:	4323      	orrs	r3, r4
 80085fe:	f000 854d 	beq.w	800909c <_dtoa_r+0xb24>
 8008602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008604:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800885c <_dtoa_r+0x2e4>
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 854f 	beq.w	80090ac <_dtoa_r+0xb34>
 800860e:	f10a 0303 	add.w	r3, sl, #3
 8008612:	f000 bd49 	b.w	80090a8 <_dtoa_r+0xb30>
 8008616:	ed9d 7b02 	vldr	d7, [sp, #8]
 800861a:	2200      	movs	r2, #0
 800861c:	ec51 0b17 	vmov	r0, r1, d7
 8008620:	2300      	movs	r3, #0
 8008622:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008626:	f7f8 fa5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800862a:	4680      	mov	r8, r0
 800862c:	b158      	cbz	r0, 8008646 <_dtoa_r+0xce>
 800862e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008630:	2301      	movs	r3, #1
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008636:	b113      	cbz	r3, 800863e <_dtoa_r+0xc6>
 8008638:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800863a:	4b84      	ldr	r3, [pc, #528]	@ (800884c <_dtoa_r+0x2d4>)
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008860 <_dtoa_r+0x2e8>
 8008642:	f000 bd33 	b.w	80090ac <_dtoa_r+0xb34>
 8008646:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800864a:	aa16      	add	r2, sp, #88	@ 0x58
 800864c:	a917      	add	r1, sp, #92	@ 0x5c
 800864e:	4658      	mov	r0, fp
 8008650:	f001 f8ca 	bl	80097e8 <__d2b>
 8008654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008658:	4681      	mov	r9, r0
 800865a:	2e00      	cmp	r6, #0
 800865c:	d077      	beq.n	800874e <_dtoa_r+0x1d6>
 800865e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008660:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800866c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008678:	4619      	mov	r1, r3
 800867a:	2200      	movs	r2, #0
 800867c:	4b74      	ldr	r3, [pc, #464]	@ (8008850 <_dtoa_r+0x2d8>)
 800867e:	f7f7 fe13 	bl	80002a8 <__aeabi_dsub>
 8008682:	a369      	add	r3, pc, #420	@ (adr r3, 8008828 <_dtoa_r+0x2b0>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 ffc6 	bl	8000618 <__aeabi_dmul>
 800868c:	a368      	add	r3, pc, #416	@ (adr r3, 8008830 <_dtoa_r+0x2b8>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 fe0b 	bl	80002ac <__adddf3>
 8008696:	4604      	mov	r4, r0
 8008698:	4630      	mov	r0, r6
 800869a:	460d      	mov	r5, r1
 800869c:	f7f7 ff52 	bl	8000544 <__aeabi_i2d>
 80086a0:	a365      	add	r3, pc, #404	@ (adr r3, 8008838 <_dtoa_r+0x2c0>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 ffb7 	bl	8000618 <__aeabi_dmul>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f7 fdfb 	bl	80002ac <__adddf3>
 80086b6:	4604      	mov	r4, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	f7f8 fa5d 	bl	8000b78 <__aeabi_d2iz>
 80086be:	2200      	movs	r2, #0
 80086c0:	4607      	mov	r7, r0
 80086c2:	2300      	movs	r3, #0
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f8 fa18 	bl	8000afc <__aeabi_dcmplt>
 80086cc:	b140      	cbz	r0, 80086e0 <_dtoa_r+0x168>
 80086ce:	4638      	mov	r0, r7
 80086d0:	f7f7 ff38 	bl	8000544 <__aeabi_i2d>
 80086d4:	4622      	mov	r2, r4
 80086d6:	462b      	mov	r3, r5
 80086d8:	f7f8 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 80086dc:	b900      	cbnz	r0, 80086e0 <_dtoa_r+0x168>
 80086de:	3f01      	subs	r7, #1
 80086e0:	2f16      	cmp	r7, #22
 80086e2:	d851      	bhi.n	8008788 <_dtoa_r+0x210>
 80086e4:	4b5b      	ldr	r3, [pc, #364]	@ (8008854 <_dtoa_r+0x2dc>)
 80086e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086f2:	f7f8 fa03 	bl	8000afc <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d048      	beq.n	800878c <_dtoa_r+0x214>
 80086fa:	3f01      	subs	r7, #1
 80086fc:	2300      	movs	r3, #0
 80086fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008700:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008702:	1b9b      	subs	r3, r3, r6
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	bf44      	itt	mi
 8008708:	f1c3 0801 	rsbmi	r8, r3, #1
 800870c:	2300      	movmi	r3, #0
 800870e:	9208      	str	r2, [sp, #32]
 8008710:	bf54      	ite	pl
 8008712:	f04f 0800 	movpl.w	r8, #0
 8008716:	9308      	strmi	r3, [sp, #32]
 8008718:	2f00      	cmp	r7, #0
 800871a:	db39      	blt.n	8008790 <_dtoa_r+0x218>
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008720:	443b      	add	r3, r7
 8008722:	9308      	str	r3, [sp, #32]
 8008724:	2300      	movs	r3, #0
 8008726:	930a      	str	r3, [sp, #40]	@ 0x28
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	2b09      	cmp	r3, #9
 800872c:	d864      	bhi.n	80087f8 <_dtoa_r+0x280>
 800872e:	2b05      	cmp	r3, #5
 8008730:	bfc4      	itt	gt
 8008732:	3b04      	subgt	r3, #4
 8008734:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	f1a3 0302 	sub.w	r3, r3, #2
 800873c:	bfcc      	ite	gt
 800873e:	2400      	movgt	r4, #0
 8008740:	2401      	movle	r4, #1
 8008742:	2b03      	cmp	r3, #3
 8008744:	d863      	bhi.n	800880e <_dtoa_r+0x296>
 8008746:	e8df f003 	tbb	[pc, r3]
 800874a:	372a      	.short	0x372a
 800874c:	5535      	.short	0x5535
 800874e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008752:	441e      	add	r6, r3
 8008754:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008758:	2b20      	cmp	r3, #32
 800875a:	bfc1      	itttt	gt
 800875c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008760:	409f      	lslgt	r7, r3
 8008762:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008766:	fa24 f303 	lsrgt.w	r3, r4, r3
 800876a:	bfd6      	itet	le
 800876c:	f1c3 0320 	rsble	r3, r3, #32
 8008770:	ea47 0003 	orrgt.w	r0, r7, r3
 8008774:	fa04 f003 	lslle.w	r0, r4, r3
 8008778:	f7f7 fed4 	bl	8000524 <__aeabi_ui2d>
 800877c:	2201      	movs	r2, #1
 800877e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008782:	3e01      	subs	r6, #1
 8008784:	9214      	str	r2, [sp, #80]	@ 0x50
 8008786:	e777      	b.n	8008678 <_dtoa_r+0x100>
 8008788:	2301      	movs	r3, #1
 800878a:	e7b8      	b.n	80086fe <_dtoa_r+0x186>
 800878c:	9012      	str	r0, [sp, #72]	@ 0x48
 800878e:	e7b7      	b.n	8008700 <_dtoa_r+0x188>
 8008790:	427b      	negs	r3, r7
 8008792:	930a      	str	r3, [sp, #40]	@ 0x28
 8008794:	2300      	movs	r3, #0
 8008796:	eba8 0807 	sub.w	r8, r8, r7
 800879a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800879c:	e7c4      	b.n	8008728 <_dtoa_r+0x1b0>
 800879e:	2300      	movs	r3, #0
 80087a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc35      	bgt.n	8008814 <_dtoa_r+0x29c>
 80087a8:	2301      	movs	r3, #1
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	9307      	str	r3, [sp, #28]
 80087ae:	461a      	mov	r2, r3
 80087b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80087b2:	e00b      	b.n	80087cc <_dtoa_r+0x254>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e7f3      	b.n	80087a0 <_dtoa_r+0x228>
 80087b8:	2300      	movs	r3, #0
 80087ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	9307      	str	r3, [sp, #28]
 80087c8:	bfb8      	it	lt
 80087ca:	2301      	movlt	r3, #1
 80087cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087d0:	2100      	movs	r1, #0
 80087d2:	2204      	movs	r2, #4
 80087d4:	f102 0514 	add.w	r5, r2, #20
 80087d8:	429d      	cmp	r5, r3
 80087da:	d91f      	bls.n	800881c <_dtoa_r+0x2a4>
 80087dc:	6041      	str	r1, [r0, #4]
 80087de:	4658      	mov	r0, fp
 80087e0:	f000 fcd8 	bl	8009194 <_Balloc>
 80087e4:	4682      	mov	sl, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d13c      	bne.n	8008864 <_dtoa_r+0x2ec>
 80087ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008858 <_dtoa_r+0x2e0>)
 80087ec:	4602      	mov	r2, r0
 80087ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80087f2:	e6d8      	b.n	80085a6 <_dtoa_r+0x2e>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7e0      	b.n	80087ba <_dtoa_r+0x242>
 80087f8:	2401      	movs	r4, #1
 80087fa:	2300      	movs	r3, #0
 80087fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008800:	f04f 33ff 	mov.w	r3, #4294967295
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	2200      	movs	r2, #0
 800880a:	2312      	movs	r3, #18
 800880c:	e7d0      	b.n	80087b0 <_dtoa_r+0x238>
 800880e:	2301      	movs	r3, #1
 8008810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008812:	e7f5      	b.n	8008800 <_dtoa_r+0x288>
 8008814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	e7d7      	b.n	80087cc <_dtoa_r+0x254>
 800881c:	3101      	adds	r1, #1
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	e7d8      	b.n	80087d4 <_dtoa_r+0x25c>
 8008822:	bf00      	nop
 8008824:	f3af 8000 	nop.w
 8008828:	636f4361 	.word	0x636f4361
 800882c:	3fd287a7 	.word	0x3fd287a7
 8008830:	8b60c8b3 	.word	0x8b60c8b3
 8008834:	3fc68a28 	.word	0x3fc68a28
 8008838:	509f79fb 	.word	0x509f79fb
 800883c:	3fd34413 	.word	0x3fd34413
 8008840:	0800ad19 	.word	0x0800ad19
 8008844:	0800ad30 	.word	0x0800ad30
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	0800ace9 	.word	0x0800ace9
 8008850:	3ff80000 	.word	0x3ff80000
 8008854:	0800ae28 	.word	0x0800ae28
 8008858:	0800ad88 	.word	0x0800ad88
 800885c:	0800ad15 	.word	0x0800ad15
 8008860:	0800ace8 	.word	0x0800ace8
 8008864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008868:	6018      	str	r0, [r3, #0]
 800886a:	9b07      	ldr	r3, [sp, #28]
 800886c:	2b0e      	cmp	r3, #14
 800886e:	f200 80a4 	bhi.w	80089ba <_dtoa_r+0x442>
 8008872:	2c00      	cmp	r4, #0
 8008874:	f000 80a1 	beq.w	80089ba <_dtoa_r+0x442>
 8008878:	2f00      	cmp	r7, #0
 800887a:	dd33      	ble.n	80088e4 <_dtoa_r+0x36c>
 800887c:	4bad      	ldr	r3, [pc, #692]	@ (8008b34 <_dtoa_r+0x5bc>)
 800887e:	f007 020f 	and.w	r2, r7, #15
 8008882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008886:	ed93 7b00 	vldr	d7, [r3]
 800888a:	05f8      	lsls	r0, r7, #23
 800888c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008894:	d516      	bpl.n	80088c4 <_dtoa_r+0x34c>
 8008896:	4ba8      	ldr	r3, [pc, #672]	@ (8008b38 <_dtoa_r+0x5c0>)
 8008898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800889c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088a0:	f7f7 ffe4 	bl	800086c <__aeabi_ddiv>
 80088a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a8:	f004 040f 	and.w	r4, r4, #15
 80088ac:	2603      	movs	r6, #3
 80088ae:	4da2      	ldr	r5, [pc, #648]	@ (8008b38 <_dtoa_r+0x5c0>)
 80088b0:	b954      	cbnz	r4, 80088c8 <_dtoa_r+0x350>
 80088b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ba:	f7f7 ffd7 	bl	800086c <__aeabi_ddiv>
 80088be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c2:	e028      	b.n	8008916 <_dtoa_r+0x39e>
 80088c4:	2602      	movs	r6, #2
 80088c6:	e7f2      	b.n	80088ae <_dtoa_r+0x336>
 80088c8:	07e1      	lsls	r1, r4, #31
 80088ca:	d508      	bpl.n	80088de <_dtoa_r+0x366>
 80088cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088d4:	f7f7 fea0 	bl	8000618 <__aeabi_dmul>
 80088d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088dc:	3601      	adds	r6, #1
 80088de:	1064      	asrs	r4, r4, #1
 80088e0:	3508      	adds	r5, #8
 80088e2:	e7e5      	b.n	80088b0 <_dtoa_r+0x338>
 80088e4:	f000 80d2 	beq.w	8008a8c <_dtoa_r+0x514>
 80088e8:	427c      	negs	r4, r7
 80088ea:	4b92      	ldr	r3, [pc, #584]	@ (8008b34 <_dtoa_r+0x5bc>)
 80088ec:	4d92      	ldr	r5, [pc, #584]	@ (8008b38 <_dtoa_r+0x5c0>)
 80088ee:	f004 020f 	and.w	r2, r4, #15
 80088f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088fe:	f7f7 fe8b 	bl	8000618 <__aeabi_dmul>
 8008902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008906:	1124      	asrs	r4, r4, #4
 8008908:	2300      	movs	r3, #0
 800890a:	2602      	movs	r6, #2
 800890c:	2c00      	cmp	r4, #0
 800890e:	f040 80b2 	bne.w	8008a76 <_dtoa_r+0x4fe>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d3      	bne.n	80088be <_dtoa_r+0x346>
 8008916:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008918:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80b7 	beq.w	8008a90 <_dtoa_r+0x518>
 8008922:	4b86      	ldr	r3, [pc, #536]	@ (8008b3c <_dtoa_r+0x5c4>)
 8008924:	2200      	movs	r2, #0
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f8 f8e7 	bl	8000afc <__aeabi_dcmplt>
 800892e:	2800      	cmp	r0, #0
 8008930:	f000 80ae 	beq.w	8008a90 <_dtoa_r+0x518>
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80aa 	beq.w	8008a90 <_dtoa_r+0x518>
 800893c:	9b00      	ldr	r3, [sp, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd37      	ble.n	80089b2 <_dtoa_r+0x43a>
 8008942:	1e7b      	subs	r3, r7, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	4620      	mov	r0, r4
 8008948:	4b7d      	ldr	r3, [pc, #500]	@ (8008b40 <_dtoa_r+0x5c8>)
 800894a:	2200      	movs	r2, #0
 800894c:	4629      	mov	r1, r5
 800894e:	f7f7 fe63 	bl	8000618 <__aeabi_dmul>
 8008952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008956:	9c00      	ldr	r4, [sp, #0]
 8008958:	3601      	adds	r6, #1
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fdf2 	bl	8000544 <__aeabi_i2d>
 8008960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008964:	f7f7 fe58 	bl	8000618 <__aeabi_dmul>
 8008968:	4b76      	ldr	r3, [pc, #472]	@ (8008b44 <_dtoa_r+0x5cc>)
 800896a:	2200      	movs	r2, #0
 800896c:	f7f7 fc9e 	bl	80002ac <__adddf3>
 8008970:	4605      	mov	r5, r0
 8008972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008976:	2c00      	cmp	r4, #0
 8008978:	f040 808d 	bne.w	8008a96 <_dtoa_r+0x51e>
 800897c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008980:	4b71      	ldr	r3, [pc, #452]	@ (8008b48 <_dtoa_r+0x5d0>)
 8008982:	2200      	movs	r2, #0
 8008984:	f7f7 fc90 	bl	80002a8 <__aeabi_dsub>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008990:	462a      	mov	r2, r5
 8008992:	4633      	mov	r3, r6
 8008994:	f7f8 f8d0 	bl	8000b38 <__aeabi_dcmpgt>
 8008998:	2800      	cmp	r0, #0
 800899a:	f040 828b 	bne.w	8008eb4 <_dtoa_r+0x93c>
 800899e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a2:	462a      	mov	r2, r5
 80089a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089a8:	f7f8 f8a8 	bl	8000afc <__aeabi_dcmplt>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	f040 8128 	bne.w	8008c02 <_dtoa_r+0x68a>
 80089b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80089b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80089ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f2c0 815a 	blt.w	8008c76 <_dtoa_r+0x6fe>
 80089c2:	2f0e      	cmp	r7, #14
 80089c4:	f300 8157 	bgt.w	8008c76 <_dtoa_r+0x6fe>
 80089c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b34 <_dtoa_r+0x5bc>)
 80089ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ce:	ed93 7b00 	vldr	d7, [r3]
 80089d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	ed8d 7b00 	vstr	d7, [sp]
 80089da:	da03      	bge.n	80089e4 <_dtoa_r+0x46c>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f340 8101 	ble.w	8008be6 <_dtoa_r+0x66e>
 80089e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089e8:	4656      	mov	r6, sl
 80089ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f7 ff3b 	bl	800086c <__aeabi_ddiv>
 80089f6:	f7f8 f8bf 	bl	8000b78 <__aeabi_d2iz>
 80089fa:	4680      	mov	r8, r0
 80089fc:	f7f7 fda2 	bl	8000544 <__aeabi_i2d>
 8008a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a04:	f7f7 fe08 	bl	8000618 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a14:	f7f7 fc48 	bl	80002a8 <__aeabi_dsub>
 8008a18:	f806 4b01 	strb.w	r4, [r6], #1
 8008a1c:	9d07      	ldr	r5, [sp, #28]
 8008a1e:	eba6 040a 	sub.w	r4, r6, sl
 8008a22:	42a5      	cmp	r5, r4
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	f040 8117 	bne.w	8008c5a <_dtoa_r+0x6e2>
 8008a2c:	f7f7 fc3e 	bl	80002ac <__adddf3>
 8008a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	f7f8 f87e 	bl	8000b38 <__aeabi_dcmpgt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f040 80f9 	bne.w	8008c34 <_dtoa_r+0x6bc>
 8008a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f8 f84d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a4e:	b118      	cbz	r0, 8008a58 <_dtoa_r+0x4e0>
 8008a50:	f018 0f01 	tst.w	r8, #1
 8008a54:	f040 80ee 	bne.w	8008c34 <_dtoa_r+0x6bc>
 8008a58:	4649      	mov	r1, r9
 8008a5a:	4658      	mov	r0, fp
 8008a5c:	f000 fbda 	bl	8009214 <_Bfree>
 8008a60:	2300      	movs	r3, #0
 8008a62:	7033      	strb	r3, [r6, #0]
 8008a64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a66:	3701      	adds	r7, #1
 8008a68:	601f      	str	r7, [r3, #0]
 8008a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 831d 	beq.w	80090ac <_dtoa_r+0xb34>
 8008a72:	601e      	str	r6, [r3, #0]
 8008a74:	e31a      	b.n	80090ac <_dtoa_r+0xb34>
 8008a76:	07e2      	lsls	r2, r4, #31
 8008a78:	d505      	bpl.n	8008a86 <_dtoa_r+0x50e>
 8008a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a7e:	f7f7 fdcb 	bl	8000618 <__aeabi_dmul>
 8008a82:	3601      	adds	r6, #1
 8008a84:	2301      	movs	r3, #1
 8008a86:	1064      	asrs	r4, r4, #1
 8008a88:	3508      	adds	r5, #8
 8008a8a:	e73f      	b.n	800890c <_dtoa_r+0x394>
 8008a8c:	2602      	movs	r6, #2
 8008a8e:	e742      	b.n	8008916 <_dtoa_r+0x39e>
 8008a90:	9c07      	ldr	r4, [sp, #28]
 8008a92:	9704      	str	r7, [sp, #16]
 8008a94:	e761      	b.n	800895a <_dtoa_r+0x3e2>
 8008a96:	4b27      	ldr	r3, [pc, #156]	@ (8008b34 <_dtoa_r+0x5bc>)
 8008a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aa2:	4454      	add	r4, sl
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d053      	beq.n	8008b50 <_dtoa_r+0x5d8>
 8008aa8:	4928      	ldr	r1, [pc, #160]	@ (8008b4c <_dtoa_r+0x5d4>)
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f7f7 fede 	bl	800086c <__aeabi_ddiv>
 8008ab0:	4633      	mov	r3, r6
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	f7f7 fbf8 	bl	80002a8 <__aeabi_dsub>
 8008ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008abc:	4656      	mov	r6, sl
 8008abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac2:	f7f8 f859 	bl	8000b78 <__aeabi_d2iz>
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	f7f7 fd3c 	bl	8000544 <__aeabi_i2d>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad4:	f7f7 fbe8 	bl	80002a8 <__aeabi_dsub>
 8008ad8:	3530      	adds	r5, #48	@ 0x30
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ae2:	f806 5b01 	strb.w	r5, [r6], #1
 8008ae6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008aea:	f7f8 f807 	bl	8000afc <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d171      	bne.n	8008bd6 <_dtoa_r+0x65e>
 8008af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008af6:	4911      	ldr	r1, [pc, #68]	@ (8008b3c <_dtoa_r+0x5c4>)
 8008af8:	2000      	movs	r0, #0
 8008afa:	f7f7 fbd5 	bl	80002a8 <__aeabi_dsub>
 8008afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b02:	f7f7 fffb 	bl	8000afc <__aeabi_dcmplt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f040 8095 	bne.w	8008c36 <_dtoa_r+0x6be>
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	f43f af50 	beq.w	80089b2 <_dtoa_r+0x43a>
 8008b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b16:	4b0a      	ldr	r3, [pc, #40]	@ (8008b40 <_dtoa_r+0x5c8>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fd7d 	bl	8000618 <__aeabi_dmul>
 8008b1e:	4b08      	ldr	r3, [pc, #32]	@ (8008b40 <_dtoa_r+0x5c8>)
 8008b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b24:	2200      	movs	r2, #0
 8008b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2a:	f7f7 fd75 	bl	8000618 <__aeabi_dmul>
 8008b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b32:	e7c4      	b.n	8008abe <_dtoa_r+0x546>
 8008b34:	0800ae28 	.word	0x0800ae28
 8008b38:	0800ae00 	.word	0x0800ae00
 8008b3c:	3ff00000 	.word	0x3ff00000
 8008b40:	40240000 	.word	0x40240000
 8008b44:	401c0000 	.word	0x401c0000
 8008b48:	40140000 	.word	0x40140000
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7f7 fd60 	bl	8000618 <__aeabi_dmul>
 8008b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b5e:	4656      	mov	r6, sl
 8008b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b64:	f7f8 f808 	bl	8000b78 <__aeabi_d2iz>
 8008b68:	4605      	mov	r5, r0
 8008b6a:	f7f7 fceb 	bl	8000544 <__aeabi_i2d>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b76:	f7f7 fb97 	bl	80002a8 <__aeabi_dsub>
 8008b7a:	3530      	adds	r5, #48	@ 0x30
 8008b7c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	d124      	bne.n	8008bda <_dtoa_r+0x662>
 8008b90:	4bac      	ldr	r3, [pc, #688]	@ (8008e44 <_dtoa_r+0x8cc>)
 8008b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b96:	f7f7 fb89 	bl	80002ac <__adddf3>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba2:	f7f7 ffc9 	bl	8000b38 <__aeabi_dcmpgt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d145      	bne.n	8008c36 <_dtoa_r+0x6be>
 8008baa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bae:	49a5      	ldr	r1, [pc, #660]	@ (8008e44 <_dtoa_r+0x8cc>)
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f7f7 fb79 	bl	80002a8 <__aeabi_dsub>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bbe:	f7f7 ff9d 	bl	8000afc <__aeabi_dcmplt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f43f aef5 	beq.w	80089b2 <_dtoa_r+0x43a>
 8008bc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008bca:	1e73      	subs	r3, r6, #1
 8008bcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bd2:	2b30      	cmp	r3, #48	@ 0x30
 8008bd4:	d0f8      	beq.n	8008bc8 <_dtoa_r+0x650>
 8008bd6:	9f04      	ldr	r7, [sp, #16]
 8008bd8:	e73e      	b.n	8008a58 <_dtoa_r+0x4e0>
 8008bda:	4b9b      	ldr	r3, [pc, #620]	@ (8008e48 <_dtoa_r+0x8d0>)
 8008bdc:	f7f7 fd1c 	bl	8000618 <__aeabi_dmul>
 8008be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be4:	e7bc      	b.n	8008b60 <_dtoa_r+0x5e8>
 8008be6:	d10c      	bne.n	8008c02 <_dtoa_r+0x68a>
 8008be8:	4b98      	ldr	r3, [pc, #608]	@ (8008e4c <_dtoa_r+0x8d4>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf0:	f7f7 fd12 	bl	8000618 <__aeabi_dmul>
 8008bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf8:	f7f7 ff94 	bl	8000b24 <__aeabi_dcmpge>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f000 8157 	beq.w	8008eb0 <_dtoa_r+0x938>
 8008c02:	2400      	movs	r4, #0
 8008c04:	4625      	mov	r5, r4
 8008c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c08:	43db      	mvns	r3, r3
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	4656      	mov	r6, sl
 8008c0e:	2700      	movs	r7, #0
 8008c10:	4621      	mov	r1, r4
 8008c12:	4658      	mov	r0, fp
 8008c14:	f000 fafe 	bl	8009214 <_Bfree>
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	d0dc      	beq.n	8008bd6 <_dtoa_r+0x65e>
 8008c1c:	b12f      	cbz	r7, 8008c2a <_dtoa_r+0x6b2>
 8008c1e:	42af      	cmp	r7, r5
 8008c20:	d003      	beq.n	8008c2a <_dtoa_r+0x6b2>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4658      	mov	r0, fp
 8008c26:	f000 faf5 	bl	8009214 <_Bfree>
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	f000 faf1 	bl	8009214 <_Bfree>
 8008c32:	e7d0      	b.n	8008bd6 <_dtoa_r+0x65e>
 8008c34:	9704      	str	r7, [sp, #16]
 8008c36:	4633      	mov	r3, r6
 8008c38:	461e      	mov	r6, r3
 8008c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c3e:	2a39      	cmp	r2, #57	@ 0x39
 8008c40:	d107      	bne.n	8008c52 <_dtoa_r+0x6da>
 8008c42:	459a      	cmp	sl, r3
 8008c44:	d1f8      	bne.n	8008c38 <_dtoa_r+0x6c0>
 8008c46:	9a04      	ldr	r2, [sp, #16]
 8008c48:	3201      	adds	r2, #1
 8008c4a:	9204      	str	r2, [sp, #16]
 8008c4c:	2230      	movs	r2, #48	@ 0x30
 8008c4e:	f88a 2000 	strb.w	r2, [sl]
 8008c52:	781a      	ldrb	r2, [r3, #0]
 8008c54:	3201      	adds	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e7bd      	b.n	8008bd6 <_dtoa_r+0x65e>
 8008c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e48 <_dtoa_r+0x8d0>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f7f7 fcdb 	bl	8000618 <__aeabi_dmul>
 8008c62:	2200      	movs	r2, #0
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	460d      	mov	r5, r1
 8008c6a:	f7f7 ff3d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f aebb 	beq.w	80089ea <_dtoa_r+0x472>
 8008c74:	e6f0      	b.n	8008a58 <_dtoa_r+0x4e0>
 8008c76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	f000 80db 	beq.w	8008e34 <_dtoa_r+0x8bc>
 8008c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c80:	2a01      	cmp	r2, #1
 8008c82:	f300 80bf 	bgt.w	8008e04 <_dtoa_r+0x88c>
 8008c86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	f000 80b7 	beq.w	8008dfc <_dtoa_r+0x884>
 8008c8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c94:	4646      	mov	r6, r8
 8008c96:	9a08      	ldr	r2, [sp, #32]
 8008c98:	2101      	movs	r1, #1
 8008c9a:	441a      	add	r2, r3
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	4498      	add	r8, r3
 8008ca0:	9208      	str	r2, [sp, #32]
 8008ca2:	f000 fb6b 	bl	800937c <__i2b>
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	b15e      	cbz	r6, 8008cc2 <_dtoa_r+0x74a>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd08      	ble.n	8008cc2 <_dtoa_r+0x74a>
 8008cb0:	42b3      	cmp	r3, r6
 8008cb2:	9a08      	ldr	r2, [sp, #32]
 8008cb4:	bfa8      	it	ge
 8008cb6:	4633      	movge	r3, r6
 8008cb8:	eba8 0803 	sub.w	r8, r8, r3
 8008cbc:	1af6      	subs	r6, r6, r3
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cc4:	b1f3      	cbz	r3, 8008d04 <_dtoa_r+0x78c>
 8008cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80b7 	beq.w	8008e3c <_dtoa_r+0x8c4>
 8008cce:	b18c      	cbz	r4, 8008cf4 <_dtoa_r+0x77c>
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f000 fc11 	bl	80094fc <__pow5mult>
 8008cda:	464a      	mov	r2, r9
 8008cdc:	4601      	mov	r1, r0
 8008cde:	4605      	mov	r5, r0
 8008ce0:	4658      	mov	r0, fp
 8008ce2:	f000 fb61 	bl	80093a8 <__multiply>
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	4658      	mov	r0, fp
 8008cec:	f000 fa92 	bl	8009214 <_Bfree>
 8008cf0:	9b04      	ldr	r3, [sp, #16]
 8008cf2:	4699      	mov	r9, r3
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cf6:	1b1a      	subs	r2, r3, r4
 8008cf8:	d004      	beq.n	8008d04 <_dtoa_r+0x78c>
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	f000 fbfd 	bl	80094fc <__pow5mult>
 8008d02:	4681      	mov	r9, r0
 8008d04:	2101      	movs	r1, #1
 8008d06:	4658      	mov	r0, fp
 8008d08:	f000 fb38 	bl	800937c <__i2b>
 8008d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d0e:	4604      	mov	r4, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 81cf 	beq.w	80090b4 <_dtoa_r+0xb3c>
 8008d16:	461a      	mov	r2, r3
 8008d18:	4601      	mov	r1, r0
 8008d1a:	4658      	mov	r0, fp
 8008d1c:	f000 fbee 	bl	80094fc <__pow5mult>
 8008d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	4604      	mov	r4, r0
 8008d26:	f300 8095 	bgt.w	8008e54 <_dtoa_r+0x8dc>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8087 	bne.w	8008e40 <_dtoa_r+0x8c8>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 8089 	bne.w	8008e50 <_dtoa_r+0x8d8>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d44:	0d1b      	lsrs	r3, r3, #20
 8008d46:	051b      	lsls	r3, r3, #20
 8008d48:	b12b      	cbz	r3, 8008d56 <_dtoa_r+0x7de>
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	f108 0801 	add.w	r8, r8, #1
 8008d54:	2301      	movs	r3, #1
 8008d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 81b0 	beq.w	80090c0 <_dtoa_r+0xb48>
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d66:	6918      	ldr	r0, [r3, #16]
 8008d68:	f000 fabc 	bl	80092e4 <__hi0bits>
 8008d6c:	f1c0 0020 	rsb	r0, r0, #32
 8008d70:	9b08      	ldr	r3, [sp, #32]
 8008d72:	4418      	add	r0, r3
 8008d74:	f010 001f 	ands.w	r0, r0, #31
 8008d78:	d077      	beq.n	8008e6a <_dtoa_r+0x8f2>
 8008d7a:	f1c0 0320 	rsb	r3, r0, #32
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	dd6b      	ble.n	8008e5a <_dtoa_r+0x8e2>
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	f1c0 001c 	rsb	r0, r0, #28
 8008d88:	4403      	add	r3, r0
 8008d8a:	4480      	add	r8, r0
 8008d8c:	4406      	add	r6, r0
 8008d8e:	9308      	str	r3, [sp, #32]
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	dd05      	ble.n	8008da2 <_dtoa_r+0x82a>
 8008d96:	4649      	mov	r1, r9
 8008d98:	4642      	mov	r2, r8
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 fc08 	bl	80095b0 <__lshift>
 8008da0:	4681      	mov	r9, r0
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dd05      	ble.n	8008db4 <_dtoa_r+0x83c>
 8008da8:	4621      	mov	r1, r4
 8008daa:	461a      	mov	r2, r3
 8008dac:	4658      	mov	r0, fp
 8008dae:	f000 fbff 	bl	80095b0 <__lshift>
 8008db2:	4604      	mov	r4, r0
 8008db4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d059      	beq.n	8008e6e <_dtoa_r+0x8f6>
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	f000 fc63 	bl	8009688 <__mcmp>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	da53      	bge.n	8008e6e <_dtoa_r+0x8f6>
 8008dc6:	1e7b      	subs	r3, r7, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	4649      	mov	r1, r9
 8008dcc:	2300      	movs	r3, #0
 8008dce:	220a      	movs	r2, #10
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	f000 fa41 	bl	8009258 <__multadd>
 8008dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd8:	4681      	mov	r9, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 8172 	beq.w	80090c4 <_dtoa_r+0xb4c>
 8008de0:	2300      	movs	r3, #0
 8008de2:	4629      	mov	r1, r5
 8008de4:	220a      	movs	r2, #10
 8008de6:	4658      	mov	r0, fp
 8008de8:	f000 fa36 	bl	8009258 <__multadd>
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	4605      	mov	r5, r0
 8008df2:	dc67      	bgt.n	8008ec4 <_dtoa_r+0x94c>
 8008df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	dc41      	bgt.n	8008e7e <_dtoa_r+0x906>
 8008dfa:	e063      	b.n	8008ec4 <_dtoa_r+0x94c>
 8008dfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008dfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e02:	e746      	b.n	8008c92 <_dtoa_r+0x71a>
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	1e5c      	subs	r4, r3, #1
 8008e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	bfbf      	itttt	lt
 8008e0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e14:	1ae3      	sublt	r3, r4, r3
 8008e16:	bfb4      	ite	lt
 8008e18:	18d2      	addlt	r2, r2, r3
 8008e1a:	1b1c      	subge	r4, r3, r4
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	bfbc      	itt	lt
 8008e20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e22:	2400      	movlt	r4, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfb5      	itete	lt
 8008e28:	eba8 0603 	sublt.w	r6, r8, r3
 8008e2c:	9b07      	ldrge	r3, [sp, #28]
 8008e2e:	2300      	movlt	r3, #0
 8008e30:	4646      	movge	r6, r8
 8008e32:	e730      	b.n	8008c96 <_dtoa_r+0x71e>
 8008e34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e38:	4646      	mov	r6, r8
 8008e3a:	e735      	b.n	8008ca8 <_dtoa_r+0x730>
 8008e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e3e:	e75c      	b.n	8008cfa <_dtoa_r+0x782>
 8008e40:	2300      	movs	r3, #0
 8008e42:	e788      	b.n	8008d56 <_dtoa_r+0x7de>
 8008e44:	3fe00000 	.word	0x3fe00000
 8008e48:	40240000 	.word	0x40240000
 8008e4c:	40140000 	.word	0x40140000
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	e780      	b.n	8008d56 <_dtoa_r+0x7de>
 8008e54:	2300      	movs	r3, #0
 8008e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e58:	e782      	b.n	8008d60 <_dtoa_r+0x7e8>
 8008e5a:	d099      	beq.n	8008d90 <_dtoa_r+0x818>
 8008e5c:	9a08      	ldr	r2, [sp, #32]
 8008e5e:	331c      	adds	r3, #28
 8008e60:	441a      	add	r2, r3
 8008e62:	4498      	add	r8, r3
 8008e64:	441e      	add	r6, r3
 8008e66:	9208      	str	r2, [sp, #32]
 8008e68:	e792      	b.n	8008d90 <_dtoa_r+0x818>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	e7f6      	b.n	8008e5c <_dtoa_r+0x8e4>
 8008e6e:	9b07      	ldr	r3, [sp, #28]
 8008e70:	9704      	str	r7, [sp, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc20      	bgt.n	8008eb8 <_dtoa_r+0x940>
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	dd1e      	ble.n	8008ebc <_dtoa_r+0x944>
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f47f aec0 	bne.w	8008c06 <_dtoa_r+0x68e>
 8008e86:	4621      	mov	r1, r4
 8008e88:	2205      	movs	r2, #5
 8008e8a:	4658      	mov	r0, fp
 8008e8c:	f000 f9e4 	bl	8009258 <__multadd>
 8008e90:	4601      	mov	r1, r0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4648      	mov	r0, r9
 8008e96:	f000 fbf7 	bl	8009688 <__mcmp>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f77f aeb3 	ble.w	8008c06 <_dtoa_r+0x68e>
 8008ea0:	4656      	mov	r6, sl
 8008ea2:	2331      	movs	r3, #49	@ 0x31
 8008ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ea8:	9b04      	ldr	r3, [sp, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	e6ae      	b.n	8008c0e <_dtoa_r+0x696>
 8008eb0:	9c07      	ldr	r4, [sp, #28]
 8008eb2:	9704      	str	r7, [sp, #16]
 8008eb4:	4625      	mov	r5, r4
 8008eb6:	e7f3      	b.n	8008ea0 <_dtoa_r+0x928>
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 8104 	beq.w	80090cc <_dtoa_r+0xb54>
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	dd05      	ble.n	8008ed4 <_dtoa_r+0x95c>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4632      	mov	r2, r6
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 fb6f 	bl	80095b0 <__lshift>
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d05a      	beq.n	8008f90 <_dtoa_r+0xa18>
 8008eda:	6869      	ldr	r1, [r5, #4]
 8008edc:	4658      	mov	r0, fp
 8008ede:	f000 f959 	bl	8009194 <_Balloc>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	b928      	cbnz	r0, 8008ef2 <_dtoa_r+0x97a>
 8008ee6:	4b84      	ldr	r3, [pc, #528]	@ (80090f8 <_dtoa_r+0xb80>)
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008eee:	f7ff bb5a 	b.w	80085a6 <_dtoa_r+0x2e>
 8008ef2:	692a      	ldr	r2, [r5, #16]
 8008ef4:	3202      	adds	r2, #2
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	f105 010c 	add.w	r1, r5, #12
 8008efc:	300c      	adds	r0, #12
 8008efe:	f7ff faa4 	bl	800844a <memcpy>
 8008f02:	2201      	movs	r2, #1
 8008f04:	4631      	mov	r1, r6
 8008f06:	4658      	mov	r0, fp
 8008f08:	f000 fb52 	bl	80095b0 <__lshift>
 8008f0c:	f10a 0301 	add.w	r3, sl, #1
 8008f10:	9307      	str	r3, [sp, #28]
 8008f12:	9b00      	ldr	r3, [sp, #0]
 8008f14:	4453      	add	r3, sl
 8008f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	462f      	mov	r7, r5
 8008f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f22:	4605      	mov	r5, r0
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	4621      	mov	r1, r4
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	4648      	mov	r0, r9
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	f7ff fa9a 	bl	8008466 <quorem>
 8008f32:	4639      	mov	r1, r7
 8008f34:	9002      	str	r0, [sp, #8]
 8008f36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f3a:	4648      	mov	r0, r9
 8008f3c:	f000 fba4 	bl	8009688 <__mcmp>
 8008f40:	462a      	mov	r2, r5
 8008f42:	9008      	str	r0, [sp, #32]
 8008f44:	4621      	mov	r1, r4
 8008f46:	4658      	mov	r0, fp
 8008f48:	f000 fbba 	bl	80096c0 <__mdiff>
 8008f4c:	68c2      	ldr	r2, [r0, #12]
 8008f4e:	4606      	mov	r6, r0
 8008f50:	bb02      	cbnz	r2, 8008f94 <_dtoa_r+0xa1c>
 8008f52:	4601      	mov	r1, r0
 8008f54:	4648      	mov	r0, r9
 8008f56:	f000 fb97 	bl	8009688 <__mcmp>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4658      	mov	r0, fp
 8008f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f62:	f000 f957 	bl	8009214 <_Bfree>
 8008f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f6a:	9e07      	ldr	r6, [sp, #28]
 8008f6c:	ea43 0102 	orr.w	r1, r3, r2
 8008f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f72:	4319      	orrs	r1, r3
 8008f74:	d110      	bne.n	8008f98 <_dtoa_r+0xa20>
 8008f76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f7a:	d029      	beq.n	8008fd0 <_dtoa_r+0xa58>
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd02      	ble.n	8008f88 <_dtoa_r+0xa10>
 8008f82:	9b02      	ldr	r3, [sp, #8]
 8008f84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	f883 8000 	strb.w	r8, [r3]
 8008f8e:	e63f      	b.n	8008c10 <_dtoa_r+0x698>
 8008f90:	4628      	mov	r0, r5
 8008f92:	e7bb      	b.n	8008f0c <_dtoa_r+0x994>
 8008f94:	2201      	movs	r2, #1
 8008f96:	e7e1      	b.n	8008f5c <_dtoa_r+0x9e4>
 8008f98:	9b08      	ldr	r3, [sp, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	db04      	blt.n	8008fa8 <_dtoa_r+0xa30>
 8008f9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	d120      	bne.n	8008fea <_dtoa_r+0xa72>
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	dded      	ble.n	8008f88 <_dtoa_r+0xa10>
 8008fac:	4649      	mov	r1, r9
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4658      	mov	r0, fp
 8008fb2:	f000 fafd 	bl	80095b0 <__lshift>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4681      	mov	r9, r0
 8008fba:	f000 fb65 	bl	8009688 <__mcmp>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	dc03      	bgt.n	8008fca <_dtoa_r+0xa52>
 8008fc2:	d1e1      	bne.n	8008f88 <_dtoa_r+0xa10>
 8008fc4:	f018 0f01 	tst.w	r8, #1
 8008fc8:	d0de      	beq.n	8008f88 <_dtoa_r+0xa10>
 8008fca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fce:	d1d8      	bne.n	8008f82 <_dtoa_r+0xa0a>
 8008fd0:	9a00      	ldr	r2, [sp, #0]
 8008fd2:	2339      	movs	r3, #57	@ 0x39
 8008fd4:	7013      	strb	r3, [r2, #0]
 8008fd6:	4633      	mov	r3, r6
 8008fd8:	461e      	mov	r6, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fe0:	2a39      	cmp	r2, #57	@ 0x39
 8008fe2:	d052      	beq.n	800908a <_dtoa_r+0xb12>
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e612      	b.n	8008c10 <_dtoa_r+0x698>
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	dd07      	ble.n	8008ffe <_dtoa_r+0xa86>
 8008fee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ff2:	d0ed      	beq.n	8008fd0 <_dtoa_r+0xa58>
 8008ff4:	9a00      	ldr	r2, [sp, #0]
 8008ff6:	f108 0301 	add.w	r3, r8, #1
 8008ffa:	7013      	strb	r3, [r2, #0]
 8008ffc:	e608      	b.n	8008c10 <_dtoa_r+0x698>
 8008ffe:	9b07      	ldr	r3, [sp, #28]
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009008:	4293      	cmp	r3, r2
 800900a:	d028      	beq.n	800905e <_dtoa_r+0xae6>
 800900c:	4649      	mov	r1, r9
 800900e:	2300      	movs	r3, #0
 8009010:	220a      	movs	r2, #10
 8009012:	4658      	mov	r0, fp
 8009014:	f000 f920 	bl	8009258 <__multadd>
 8009018:	42af      	cmp	r7, r5
 800901a:	4681      	mov	r9, r0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	f04f 020a 	mov.w	r2, #10
 8009024:	4639      	mov	r1, r7
 8009026:	4658      	mov	r0, fp
 8009028:	d107      	bne.n	800903a <_dtoa_r+0xac2>
 800902a:	f000 f915 	bl	8009258 <__multadd>
 800902e:	4607      	mov	r7, r0
 8009030:	4605      	mov	r5, r0
 8009032:	9b07      	ldr	r3, [sp, #28]
 8009034:	3301      	adds	r3, #1
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	e774      	b.n	8008f24 <_dtoa_r+0x9ac>
 800903a:	f000 f90d 	bl	8009258 <__multadd>
 800903e:	4629      	mov	r1, r5
 8009040:	4607      	mov	r7, r0
 8009042:	2300      	movs	r3, #0
 8009044:	220a      	movs	r2, #10
 8009046:	4658      	mov	r0, fp
 8009048:	f000 f906 	bl	8009258 <__multadd>
 800904c:	4605      	mov	r5, r0
 800904e:	e7f0      	b.n	8009032 <_dtoa_r+0xaba>
 8009050:	9b00      	ldr	r3, [sp, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	bfcc      	ite	gt
 8009056:	461e      	movgt	r6, r3
 8009058:	2601      	movle	r6, #1
 800905a:	4456      	add	r6, sl
 800905c:	2700      	movs	r7, #0
 800905e:	4649      	mov	r1, r9
 8009060:	2201      	movs	r2, #1
 8009062:	4658      	mov	r0, fp
 8009064:	f000 faa4 	bl	80095b0 <__lshift>
 8009068:	4621      	mov	r1, r4
 800906a:	4681      	mov	r9, r0
 800906c:	f000 fb0c 	bl	8009688 <__mcmp>
 8009070:	2800      	cmp	r0, #0
 8009072:	dcb0      	bgt.n	8008fd6 <_dtoa_r+0xa5e>
 8009074:	d102      	bne.n	800907c <_dtoa_r+0xb04>
 8009076:	f018 0f01 	tst.w	r8, #1
 800907a:	d1ac      	bne.n	8008fd6 <_dtoa_r+0xa5e>
 800907c:	4633      	mov	r3, r6
 800907e:	461e      	mov	r6, r3
 8009080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009084:	2a30      	cmp	r2, #48	@ 0x30
 8009086:	d0fa      	beq.n	800907e <_dtoa_r+0xb06>
 8009088:	e5c2      	b.n	8008c10 <_dtoa_r+0x698>
 800908a:	459a      	cmp	sl, r3
 800908c:	d1a4      	bne.n	8008fd8 <_dtoa_r+0xa60>
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	3301      	adds	r3, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	2331      	movs	r3, #49	@ 0x31
 8009096:	f88a 3000 	strb.w	r3, [sl]
 800909a:	e5b9      	b.n	8008c10 <_dtoa_r+0x698>
 800909c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800909e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090fc <_dtoa_r+0xb84>
 80090a2:	b11b      	cbz	r3, 80090ac <_dtoa_r+0xb34>
 80090a4:	f10a 0308 	add.w	r3, sl, #8
 80090a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	4650      	mov	r0, sl
 80090ae:	b019      	add	sp, #100	@ 0x64
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	f77f ae37 	ble.w	8008d2a <_dtoa_r+0x7b2>
 80090bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090be:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c0:	2001      	movs	r0, #1
 80090c2:	e655      	b.n	8008d70 <_dtoa_r+0x7f8>
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f77f aed6 	ble.w	8008e78 <_dtoa_r+0x900>
 80090cc:	4656      	mov	r6, sl
 80090ce:	4621      	mov	r1, r4
 80090d0:	4648      	mov	r0, r9
 80090d2:	f7ff f9c8 	bl	8008466 <quorem>
 80090d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090da:	f806 8b01 	strb.w	r8, [r6], #1
 80090de:	9b00      	ldr	r3, [sp, #0]
 80090e0:	eba6 020a 	sub.w	r2, r6, sl
 80090e4:	4293      	cmp	r3, r2
 80090e6:	ddb3      	ble.n	8009050 <_dtoa_r+0xad8>
 80090e8:	4649      	mov	r1, r9
 80090ea:	2300      	movs	r3, #0
 80090ec:	220a      	movs	r2, #10
 80090ee:	4658      	mov	r0, fp
 80090f0:	f000 f8b2 	bl	8009258 <__multadd>
 80090f4:	4681      	mov	r9, r0
 80090f6:	e7ea      	b.n	80090ce <_dtoa_r+0xb56>
 80090f8:	0800ad88 	.word	0x0800ad88
 80090fc:	0800ad0c 	.word	0x0800ad0c

08009100 <_free_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4605      	mov	r5, r0
 8009104:	2900      	cmp	r1, #0
 8009106:	d041      	beq.n	800918c <_free_r+0x8c>
 8009108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910c:	1f0c      	subs	r4, r1, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfb8      	it	lt
 8009112:	18e4      	addlt	r4, r4, r3
 8009114:	f7fe fb5a 	bl	80077cc <__malloc_lock>
 8009118:	4a1d      	ldr	r2, [pc, #116]	@ (8009190 <_free_r+0x90>)
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x2c>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009128:	f7fe bb56 	b.w	80077d8 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x42>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	1821      	adds	r1, r4, r0
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1809      	addeq	r1, r1, r0
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x1e>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x4c>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x42>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1850      	adds	r0, r2, r1
 8009150:	42a0      	cmp	r0, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x6c>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	4401      	add	r1, r0
 8009158:	1850      	adds	r0, r2, r1
 800915a:	4283      	cmp	r3, r0
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x22>
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4408      	add	r0, r1
 8009168:	6010      	str	r0, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x22>
 800916c:	d902      	bls.n	8009174 <_free_r+0x74>
 800916e:	230c      	movs	r3, #12
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x22>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1809      	addeq	r1, r1, r0
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x22>
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	200007c4 	.word	0x200007c4

08009194 <_Balloc>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	69c6      	ldr	r6, [r0, #28]
 8009198:	4604      	mov	r4, r0
 800919a:	460d      	mov	r5, r1
 800919c:	b976      	cbnz	r6, 80091bc <_Balloc+0x28>
 800919e:	2010      	movs	r0, #16
 80091a0:	f7fe fa6a 	bl	8007678 <malloc>
 80091a4:	4602      	mov	r2, r0
 80091a6:	61e0      	str	r0, [r4, #28]
 80091a8:	b920      	cbnz	r0, 80091b4 <_Balloc+0x20>
 80091aa:	4b18      	ldr	r3, [pc, #96]	@ (800920c <_Balloc+0x78>)
 80091ac:	4818      	ldr	r0, [pc, #96]	@ (8009210 <_Balloc+0x7c>)
 80091ae:	216b      	movs	r1, #107	@ 0x6b
 80091b0:	f000 ff66 	bl	800a080 <__assert_func>
 80091b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091b8:	6006      	str	r6, [r0, #0]
 80091ba:	60c6      	str	r6, [r0, #12]
 80091bc:	69e6      	ldr	r6, [r4, #28]
 80091be:	68f3      	ldr	r3, [r6, #12]
 80091c0:	b183      	cbz	r3, 80091e4 <_Balloc+0x50>
 80091c2:	69e3      	ldr	r3, [r4, #28]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091ca:	b9b8      	cbnz	r0, 80091fc <_Balloc+0x68>
 80091cc:	2101      	movs	r1, #1
 80091ce:	fa01 f605 	lsl.w	r6, r1, r5
 80091d2:	1d72      	adds	r2, r6, #5
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 ff70 	bl	800a0bc <_calloc_r>
 80091dc:	b160      	cbz	r0, 80091f8 <_Balloc+0x64>
 80091de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091e2:	e00e      	b.n	8009202 <_Balloc+0x6e>
 80091e4:	2221      	movs	r2, #33	@ 0x21
 80091e6:	2104      	movs	r1, #4
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 ff67 	bl	800a0bc <_calloc_r>
 80091ee:	69e3      	ldr	r3, [r4, #28]
 80091f0:	60f0      	str	r0, [r6, #12]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e4      	bne.n	80091c2 <_Balloc+0x2e>
 80091f8:	2000      	movs	r0, #0
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	6802      	ldr	r2, [r0, #0]
 80091fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009202:	2300      	movs	r3, #0
 8009204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009208:	e7f7      	b.n	80091fa <_Balloc+0x66>
 800920a:	bf00      	nop
 800920c:	0800ad19 	.word	0x0800ad19
 8009210:	0800ad99 	.word	0x0800ad99

08009214 <_Bfree>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	69c6      	ldr	r6, [r0, #28]
 8009218:	4605      	mov	r5, r0
 800921a:	460c      	mov	r4, r1
 800921c:	b976      	cbnz	r6, 800923c <_Bfree+0x28>
 800921e:	2010      	movs	r0, #16
 8009220:	f7fe fa2a 	bl	8007678 <malloc>
 8009224:	4602      	mov	r2, r0
 8009226:	61e8      	str	r0, [r5, #28]
 8009228:	b920      	cbnz	r0, 8009234 <_Bfree+0x20>
 800922a:	4b09      	ldr	r3, [pc, #36]	@ (8009250 <_Bfree+0x3c>)
 800922c:	4809      	ldr	r0, [pc, #36]	@ (8009254 <_Bfree+0x40>)
 800922e:	218f      	movs	r1, #143	@ 0x8f
 8009230:	f000 ff26 	bl	800a080 <__assert_func>
 8009234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009238:	6006      	str	r6, [r0, #0]
 800923a:	60c6      	str	r6, [r0, #12]
 800923c:	b13c      	cbz	r4, 800924e <_Bfree+0x3a>
 800923e:	69eb      	ldr	r3, [r5, #28]
 8009240:	6862      	ldr	r2, [r4, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009248:	6021      	str	r1, [r4, #0]
 800924a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	0800ad19 	.word	0x0800ad19
 8009254:	0800ad99 	.word	0x0800ad99

08009258 <__multadd>:
 8009258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925c:	690d      	ldr	r5, [r1, #16]
 800925e:	4607      	mov	r7, r0
 8009260:	460c      	mov	r4, r1
 8009262:	461e      	mov	r6, r3
 8009264:	f101 0c14 	add.w	ip, r1, #20
 8009268:	2000      	movs	r0, #0
 800926a:	f8dc 3000 	ldr.w	r3, [ip]
 800926e:	b299      	uxth	r1, r3
 8009270:	fb02 6101 	mla	r1, r2, r1, r6
 8009274:	0c1e      	lsrs	r6, r3, #16
 8009276:	0c0b      	lsrs	r3, r1, #16
 8009278:	fb02 3306 	mla	r3, r2, r6, r3
 800927c:	b289      	uxth	r1, r1
 800927e:	3001      	adds	r0, #1
 8009280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009284:	4285      	cmp	r5, r0
 8009286:	f84c 1b04 	str.w	r1, [ip], #4
 800928a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800928e:	dcec      	bgt.n	800926a <__multadd+0x12>
 8009290:	b30e      	cbz	r6, 80092d6 <__multadd+0x7e>
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	42ab      	cmp	r3, r5
 8009296:	dc19      	bgt.n	80092cc <__multadd+0x74>
 8009298:	6861      	ldr	r1, [r4, #4]
 800929a:	4638      	mov	r0, r7
 800929c:	3101      	adds	r1, #1
 800929e:	f7ff ff79 	bl	8009194 <_Balloc>
 80092a2:	4680      	mov	r8, r0
 80092a4:	b928      	cbnz	r0, 80092b2 <__multadd+0x5a>
 80092a6:	4602      	mov	r2, r0
 80092a8:	4b0c      	ldr	r3, [pc, #48]	@ (80092dc <__multadd+0x84>)
 80092aa:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <__multadd+0x88>)
 80092ac:	21ba      	movs	r1, #186	@ 0xba
 80092ae:	f000 fee7 	bl	800a080 <__assert_func>
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	3202      	adds	r2, #2
 80092b6:	f104 010c 	add.w	r1, r4, #12
 80092ba:	0092      	lsls	r2, r2, #2
 80092bc:	300c      	adds	r0, #12
 80092be:	f7ff f8c4 	bl	800844a <memcpy>
 80092c2:	4621      	mov	r1, r4
 80092c4:	4638      	mov	r0, r7
 80092c6:	f7ff ffa5 	bl	8009214 <_Bfree>
 80092ca:	4644      	mov	r4, r8
 80092cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092d0:	3501      	adds	r5, #1
 80092d2:	615e      	str	r6, [r3, #20]
 80092d4:	6125      	str	r5, [r4, #16]
 80092d6:	4620      	mov	r0, r4
 80092d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092dc:	0800ad88 	.word	0x0800ad88
 80092e0:	0800ad99 	.word	0x0800ad99

080092e4 <__hi0bits>:
 80092e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092e8:	4603      	mov	r3, r0
 80092ea:	bf36      	itet	cc
 80092ec:	0403      	lslcc	r3, r0, #16
 80092ee:	2000      	movcs	r0, #0
 80092f0:	2010      	movcc	r0, #16
 80092f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092f6:	bf3c      	itt	cc
 80092f8:	021b      	lslcc	r3, r3, #8
 80092fa:	3008      	addcc	r0, #8
 80092fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009300:	bf3c      	itt	cc
 8009302:	011b      	lslcc	r3, r3, #4
 8009304:	3004      	addcc	r0, #4
 8009306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800930a:	bf3c      	itt	cc
 800930c:	009b      	lslcc	r3, r3, #2
 800930e:	3002      	addcc	r0, #2
 8009310:	2b00      	cmp	r3, #0
 8009312:	db05      	blt.n	8009320 <__hi0bits+0x3c>
 8009314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009318:	f100 0001 	add.w	r0, r0, #1
 800931c:	bf08      	it	eq
 800931e:	2020      	moveq	r0, #32
 8009320:	4770      	bx	lr

08009322 <__lo0bits>:
 8009322:	6803      	ldr	r3, [r0, #0]
 8009324:	4602      	mov	r2, r0
 8009326:	f013 0007 	ands.w	r0, r3, #7
 800932a:	d00b      	beq.n	8009344 <__lo0bits+0x22>
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d421      	bmi.n	8009374 <__lo0bits+0x52>
 8009330:	0798      	lsls	r0, r3, #30
 8009332:	bf49      	itett	mi
 8009334:	085b      	lsrmi	r3, r3, #1
 8009336:	089b      	lsrpl	r3, r3, #2
 8009338:	2001      	movmi	r0, #1
 800933a:	6013      	strmi	r3, [r2, #0]
 800933c:	bf5c      	itt	pl
 800933e:	6013      	strpl	r3, [r2, #0]
 8009340:	2002      	movpl	r0, #2
 8009342:	4770      	bx	lr
 8009344:	b299      	uxth	r1, r3
 8009346:	b909      	cbnz	r1, 800934c <__lo0bits+0x2a>
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	2010      	movs	r0, #16
 800934c:	b2d9      	uxtb	r1, r3
 800934e:	b909      	cbnz	r1, 8009354 <__lo0bits+0x32>
 8009350:	3008      	adds	r0, #8
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	0719      	lsls	r1, r3, #28
 8009356:	bf04      	itt	eq
 8009358:	091b      	lsreq	r3, r3, #4
 800935a:	3004      	addeq	r0, #4
 800935c:	0799      	lsls	r1, r3, #30
 800935e:	bf04      	itt	eq
 8009360:	089b      	lsreq	r3, r3, #2
 8009362:	3002      	addeq	r0, #2
 8009364:	07d9      	lsls	r1, r3, #31
 8009366:	d403      	bmi.n	8009370 <__lo0bits+0x4e>
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	f100 0001 	add.w	r0, r0, #1
 800936e:	d003      	beq.n	8009378 <__lo0bits+0x56>
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4770      	bx	lr
 8009374:	2000      	movs	r0, #0
 8009376:	4770      	bx	lr
 8009378:	2020      	movs	r0, #32
 800937a:	4770      	bx	lr

0800937c <__i2b>:
 800937c:	b510      	push	{r4, lr}
 800937e:	460c      	mov	r4, r1
 8009380:	2101      	movs	r1, #1
 8009382:	f7ff ff07 	bl	8009194 <_Balloc>
 8009386:	4602      	mov	r2, r0
 8009388:	b928      	cbnz	r0, 8009396 <__i2b+0x1a>
 800938a:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <__i2b+0x24>)
 800938c:	4805      	ldr	r0, [pc, #20]	@ (80093a4 <__i2b+0x28>)
 800938e:	f240 1145 	movw	r1, #325	@ 0x145
 8009392:	f000 fe75 	bl	800a080 <__assert_func>
 8009396:	2301      	movs	r3, #1
 8009398:	6144      	str	r4, [r0, #20]
 800939a:	6103      	str	r3, [r0, #16]
 800939c:	bd10      	pop	{r4, pc}
 800939e:	bf00      	nop
 80093a0:	0800ad88 	.word	0x0800ad88
 80093a4:	0800ad99 	.word	0x0800ad99

080093a8 <__multiply>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4614      	mov	r4, r2
 80093ae:	690a      	ldr	r2, [r1, #16]
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	bfa8      	it	ge
 80093b6:	4623      	movge	r3, r4
 80093b8:	460f      	mov	r7, r1
 80093ba:	bfa4      	itt	ge
 80093bc:	460c      	movge	r4, r1
 80093be:	461f      	movge	r7, r3
 80093c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80093c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80093c8:	68a3      	ldr	r3, [r4, #8]
 80093ca:	6861      	ldr	r1, [r4, #4]
 80093cc:	eb0a 0609 	add.w	r6, sl, r9
 80093d0:	42b3      	cmp	r3, r6
 80093d2:	b085      	sub	sp, #20
 80093d4:	bfb8      	it	lt
 80093d6:	3101      	addlt	r1, #1
 80093d8:	f7ff fedc 	bl	8009194 <_Balloc>
 80093dc:	b930      	cbnz	r0, 80093ec <__multiply+0x44>
 80093de:	4602      	mov	r2, r0
 80093e0:	4b44      	ldr	r3, [pc, #272]	@ (80094f4 <__multiply+0x14c>)
 80093e2:	4845      	ldr	r0, [pc, #276]	@ (80094f8 <__multiply+0x150>)
 80093e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093e8:	f000 fe4a 	bl	800a080 <__assert_func>
 80093ec:	f100 0514 	add.w	r5, r0, #20
 80093f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093f4:	462b      	mov	r3, r5
 80093f6:	2200      	movs	r2, #0
 80093f8:	4543      	cmp	r3, r8
 80093fa:	d321      	bcc.n	8009440 <__multiply+0x98>
 80093fc:	f107 0114 	add.w	r1, r7, #20
 8009400:	f104 0214 	add.w	r2, r4, #20
 8009404:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009408:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800940c:	9302      	str	r3, [sp, #8]
 800940e:	1b13      	subs	r3, r2, r4
 8009410:	3b15      	subs	r3, #21
 8009412:	f023 0303 	bic.w	r3, r3, #3
 8009416:	3304      	adds	r3, #4
 8009418:	f104 0715 	add.w	r7, r4, #21
 800941c:	42ba      	cmp	r2, r7
 800941e:	bf38      	it	cc
 8009420:	2304      	movcc	r3, #4
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	9103      	str	r1, [sp, #12]
 8009428:	428b      	cmp	r3, r1
 800942a:	d80c      	bhi.n	8009446 <__multiply+0x9e>
 800942c:	2e00      	cmp	r6, #0
 800942e:	dd03      	ble.n	8009438 <__multiply+0x90>
 8009430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05b      	beq.n	80094f0 <__multiply+0x148>
 8009438:	6106      	str	r6, [r0, #16]
 800943a:	b005      	add	sp, #20
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	f843 2b04 	str.w	r2, [r3], #4
 8009444:	e7d8      	b.n	80093f8 <__multiply+0x50>
 8009446:	f8b1 a000 	ldrh.w	sl, [r1]
 800944a:	f1ba 0f00 	cmp.w	sl, #0
 800944e:	d024      	beq.n	800949a <__multiply+0xf2>
 8009450:	f104 0e14 	add.w	lr, r4, #20
 8009454:	46a9      	mov	r9, r5
 8009456:	f04f 0c00 	mov.w	ip, #0
 800945a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800945e:	f8d9 3000 	ldr.w	r3, [r9]
 8009462:	fa1f fb87 	uxth.w	fp, r7
 8009466:	b29b      	uxth	r3, r3
 8009468:	fb0a 330b 	mla	r3, sl, fp, r3
 800946c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009470:	f8d9 7000 	ldr.w	r7, [r9]
 8009474:	4463      	add	r3, ip
 8009476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800947a:	fb0a c70b 	mla	r7, sl, fp, ip
 800947e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009482:	b29b      	uxth	r3, r3
 8009484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009488:	4572      	cmp	r2, lr
 800948a:	f849 3b04 	str.w	r3, [r9], #4
 800948e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009492:	d8e2      	bhi.n	800945a <__multiply+0xb2>
 8009494:	9b01      	ldr	r3, [sp, #4]
 8009496:	f845 c003 	str.w	ip, [r5, r3]
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094a0:	3104      	adds	r1, #4
 80094a2:	f1b9 0f00 	cmp.w	r9, #0
 80094a6:	d021      	beq.n	80094ec <__multiply+0x144>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	f104 0c14 	add.w	ip, r4, #20
 80094ae:	46ae      	mov	lr, r5
 80094b0:	f04f 0a00 	mov.w	sl, #0
 80094b4:	f8bc b000 	ldrh.w	fp, [ip]
 80094b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80094bc:	fb09 770b 	mla	r7, r9, fp, r7
 80094c0:	4457      	add	r7, sl
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80094c8:	f84e 3b04 	str.w	r3, [lr], #4
 80094cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094d4:	f8be 3000 	ldrh.w	r3, [lr]
 80094d8:	fb09 330a 	mla	r3, r9, sl, r3
 80094dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80094e0:	4562      	cmp	r2, ip
 80094e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094e6:	d8e5      	bhi.n	80094b4 <__multiply+0x10c>
 80094e8:	9f01      	ldr	r7, [sp, #4]
 80094ea:	51eb      	str	r3, [r5, r7]
 80094ec:	3504      	adds	r5, #4
 80094ee:	e799      	b.n	8009424 <__multiply+0x7c>
 80094f0:	3e01      	subs	r6, #1
 80094f2:	e79b      	b.n	800942c <__multiply+0x84>
 80094f4:	0800ad88 	.word	0x0800ad88
 80094f8:	0800ad99 	.word	0x0800ad99

080094fc <__pow5mult>:
 80094fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009500:	4615      	mov	r5, r2
 8009502:	f012 0203 	ands.w	r2, r2, #3
 8009506:	4607      	mov	r7, r0
 8009508:	460e      	mov	r6, r1
 800950a:	d007      	beq.n	800951c <__pow5mult+0x20>
 800950c:	4c25      	ldr	r4, [pc, #148]	@ (80095a4 <__pow5mult+0xa8>)
 800950e:	3a01      	subs	r2, #1
 8009510:	2300      	movs	r3, #0
 8009512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009516:	f7ff fe9f 	bl	8009258 <__multadd>
 800951a:	4606      	mov	r6, r0
 800951c:	10ad      	asrs	r5, r5, #2
 800951e:	d03d      	beq.n	800959c <__pow5mult+0xa0>
 8009520:	69fc      	ldr	r4, [r7, #28]
 8009522:	b97c      	cbnz	r4, 8009544 <__pow5mult+0x48>
 8009524:	2010      	movs	r0, #16
 8009526:	f7fe f8a7 	bl	8007678 <malloc>
 800952a:	4602      	mov	r2, r0
 800952c:	61f8      	str	r0, [r7, #28]
 800952e:	b928      	cbnz	r0, 800953c <__pow5mult+0x40>
 8009530:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <__pow5mult+0xac>)
 8009532:	481e      	ldr	r0, [pc, #120]	@ (80095ac <__pow5mult+0xb0>)
 8009534:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009538:	f000 fda2 	bl	800a080 <__assert_func>
 800953c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009540:	6004      	str	r4, [r0, #0]
 8009542:	60c4      	str	r4, [r0, #12]
 8009544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800954c:	b94c      	cbnz	r4, 8009562 <__pow5mult+0x66>
 800954e:	f240 2171 	movw	r1, #625	@ 0x271
 8009552:	4638      	mov	r0, r7
 8009554:	f7ff ff12 	bl	800937c <__i2b>
 8009558:	2300      	movs	r3, #0
 800955a:	f8c8 0008 	str.w	r0, [r8, #8]
 800955e:	4604      	mov	r4, r0
 8009560:	6003      	str	r3, [r0, #0]
 8009562:	f04f 0900 	mov.w	r9, #0
 8009566:	07eb      	lsls	r3, r5, #31
 8009568:	d50a      	bpl.n	8009580 <__pow5mult+0x84>
 800956a:	4631      	mov	r1, r6
 800956c:	4622      	mov	r2, r4
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ff1a 	bl	80093a8 <__multiply>
 8009574:	4631      	mov	r1, r6
 8009576:	4680      	mov	r8, r0
 8009578:	4638      	mov	r0, r7
 800957a:	f7ff fe4b 	bl	8009214 <_Bfree>
 800957e:	4646      	mov	r6, r8
 8009580:	106d      	asrs	r5, r5, #1
 8009582:	d00b      	beq.n	800959c <__pow5mult+0xa0>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	b938      	cbnz	r0, 8009598 <__pow5mult+0x9c>
 8009588:	4622      	mov	r2, r4
 800958a:	4621      	mov	r1, r4
 800958c:	4638      	mov	r0, r7
 800958e:	f7ff ff0b 	bl	80093a8 <__multiply>
 8009592:	6020      	str	r0, [r4, #0]
 8009594:	f8c0 9000 	str.w	r9, [r0]
 8009598:	4604      	mov	r4, r0
 800959a:	e7e4      	b.n	8009566 <__pow5mult+0x6a>
 800959c:	4630      	mov	r0, r6
 800959e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a2:	bf00      	nop
 80095a4:	0800adf4 	.word	0x0800adf4
 80095a8:	0800ad19 	.word	0x0800ad19
 80095ac:	0800ad99 	.word	0x0800ad99

080095b0 <__lshift>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	460c      	mov	r4, r1
 80095b6:	6849      	ldr	r1, [r1, #4]
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095be:	68a3      	ldr	r3, [r4, #8]
 80095c0:	4607      	mov	r7, r0
 80095c2:	4691      	mov	r9, r2
 80095c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095c8:	f108 0601 	add.w	r6, r8, #1
 80095cc:	42b3      	cmp	r3, r6
 80095ce:	db0b      	blt.n	80095e8 <__lshift+0x38>
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff fddf 	bl	8009194 <_Balloc>
 80095d6:	4605      	mov	r5, r0
 80095d8:	b948      	cbnz	r0, 80095ee <__lshift+0x3e>
 80095da:	4602      	mov	r2, r0
 80095dc:	4b28      	ldr	r3, [pc, #160]	@ (8009680 <__lshift+0xd0>)
 80095de:	4829      	ldr	r0, [pc, #164]	@ (8009684 <__lshift+0xd4>)
 80095e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095e4:	f000 fd4c 	bl	800a080 <__assert_func>
 80095e8:	3101      	adds	r1, #1
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	e7ee      	b.n	80095cc <__lshift+0x1c>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f100 0114 	add.w	r1, r0, #20
 80095f4:	f100 0210 	add.w	r2, r0, #16
 80095f8:	4618      	mov	r0, r3
 80095fa:	4553      	cmp	r3, sl
 80095fc:	db33      	blt.n	8009666 <__lshift+0xb6>
 80095fe:	6920      	ldr	r0, [r4, #16]
 8009600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009604:	f104 0314 	add.w	r3, r4, #20
 8009608:	f019 091f 	ands.w	r9, r9, #31
 800960c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009614:	d02b      	beq.n	800966e <__lshift+0xbe>
 8009616:	f1c9 0e20 	rsb	lr, r9, #32
 800961a:	468a      	mov	sl, r1
 800961c:	2200      	movs	r2, #0
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	fa00 f009 	lsl.w	r0, r0, r9
 8009624:	4310      	orrs	r0, r2
 8009626:	f84a 0b04 	str.w	r0, [sl], #4
 800962a:	f853 2b04 	ldr.w	r2, [r3], #4
 800962e:	459c      	cmp	ip, r3
 8009630:	fa22 f20e 	lsr.w	r2, r2, lr
 8009634:	d8f3      	bhi.n	800961e <__lshift+0x6e>
 8009636:	ebac 0304 	sub.w	r3, ip, r4
 800963a:	3b15      	subs	r3, #21
 800963c:	f023 0303 	bic.w	r3, r3, #3
 8009640:	3304      	adds	r3, #4
 8009642:	f104 0015 	add.w	r0, r4, #21
 8009646:	4584      	cmp	ip, r0
 8009648:	bf38      	it	cc
 800964a:	2304      	movcc	r3, #4
 800964c:	50ca      	str	r2, [r1, r3]
 800964e:	b10a      	cbz	r2, 8009654 <__lshift+0xa4>
 8009650:	f108 0602 	add.w	r6, r8, #2
 8009654:	3e01      	subs	r6, #1
 8009656:	4638      	mov	r0, r7
 8009658:	612e      	str	r6, [r5, #16]
 800965a:	4621      	mov	r1, r4
 800965c:	f7ff fdda 	bl	8009214 <_Bfree>
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	f842 0f04 	str.w	r0, [r2, #4]!
 800966a:	3301      	adds	r3, #1
 800966c:	e7c5      	b.n	80095fa <__lshift+0x4a>
 800966e:	3904      	subs	r1, #4
 8009670:	f853 2b04 	ldr.w	r2, [r3], #4
 8009674:	f841 2f04 	str.w	r2, [r1, #4]!
 8009678:	459c      	cmp	ip, r3
 800967a:	d8f9      	bhi.n	8009670 <__lshift+0xc0>
 800967c:	e7ea      	b.n	8009654 <__lshift+0xa4>
 800967e:	bf00      	nop
 8009680:	0800ad88 	.word	0x0800ad88
 8009684:	0800ad99 	.word	0x0800ad99

08009688 <__mcmp>:
 8009688:	690a      	ldr	r2, [r1, #16]
 800968a:	4603      	mov	r3, r0
 800968c:	6900      	ldr	r0, [r0, #16]
 800968e:	1a80      	subs	r0, r0, r2
 8009690:	b530      	push	{r4, r5, lr}
 8009692:	d10e      	bne.n	80096b2 <__mcmp+0x2a>
 8009694:	3314      	adds	r3, #20
 8009696:	3114      	adds	r1, #20
 8009698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800969c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096a8:	4295      	cmp	r5, r2
 80096aa:	d003      	beq.n	80096b4 <__mcmp+0x2c>
 80096ac:	d205      	bcs.n	80096ba <__mcmp+0x32>
 80096ae:	f04f 30ff 	mov.w	r0, #4294967295
 80096b2:	bd30      	pop	{r4, r5, pc}
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	d3f3      	bcc.n	80096a0 <__mcmp+0x18>
 80096b8:	e7fb      	b.n	80096b2 <__mcmp+0x2a>
 80096ba:	2001      	movs	r0, #1
 80096bc:	e7f9      	b.n	80096b2 <__mcmp+0x2a>
	...

080096c0 <__mdiff>:
 80096c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	4689      	mov	r9, r1
 80096c6:	4606      	mov	r6, r0
 80096c8:	4611      	mov	r1, r2
 80096ca:	4648      	mov	r0, r9
 80096cc:	4614      	mov	r4, r2
 80096ce:	f7ff ffdb 	bl	8009688 <__mcmp>
 80096d2:	1e05      	subs	r5, r0, #0
 80096d4:	d112      	bne.n	80096fc <__mdiff+0x3c>
 80096d6:	4629      	mov	r1, r5
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff fd5b 	bl	8009194 <_Balloc>
 80096de:	4602      	mov	r2, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__mdiff+0x2e>
 80096e2:	4b3f      	ldr	r3, [pc, #252]	@ (80097e0 <__mdiff+0x120>)
 80096e4:	f240 2137 	movw	r1, #567	@ 0x237
 80096e8:	483e      	ldr	r0, [pc, #248]	@ (80097e4 <__mdiff+0x124>)
 80096ea:	f000 fcc9 	bl	800a080 <__assert_func>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096f4:	4610      	mov	r0, r2
 80096f6:	b003      	add	sp, #12
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	bfbc      	itt	lt
 80096fe:	464b      	movlt	r3, r9
 8009700:	46a1      	movlt	r9, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009708:	bfba      	itte	lt
 800970a:	461c      	movlt	r4, r3
 800970c:	2501      	movlt	r5, #1
 800970e:	2500      	movge	r5, #0
 8009710:	f7ff fd40 	bl	8009194 <_Balloc>
 8009714:	4602      	mov	r2, r0
 8009716:	b918      	cbnz	r0, 8009720 <__mdiff+0x60>
 8009718:	4b31      	ldr	r3, [pc, #196]	@ (80097e0 <__mdiff+0x120>)
 800971a:	f240 2145 	movw	r1, #581	@ 0x245
 800971e:	e7e3      	b.n	80096e8 <__mdiff+0x28>
 8009720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009724:	6926      	ldr	r6, [r4, #16]
 8009726:	60c5      	str	r5, [r0, #12]
 8009728:	f109 0310 	add.w	r3, r9, #16
 800972c:	f109 0514 	add.w	r5, r9, #20
 8009730:	f104 0e14 	add.w	lr, r4, #20
 8009734:	f100 0b14 	add.w	fp, r0, #20
 8009738:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800973c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	46d9      	mov	r9, fp
 8009744:	f04f 0c00 	mov.w	ip, #0
 8009748:	9b01      	ldr	r3, [sp, #4]
 800974a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800974e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	fa1f f38a 	uxth.w	r3, sl
 8009758:	4619      	mov	r1, r3
 800975a:	b283      	uxth	r3, r0
 800975c:	1acb      	subs	r3, r1, r3
 800975e:	0c00      	lsrs	r0, r0, #16
 8009760:	4463      	add	r3, ip
 8009762:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009766:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009770:	4576      	cmp	r6, lr
 8009772:	f849 3b04 	str.w	r3, [r9], #4
 8009776:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800977a:	d8e5      	bhi.n	8009748 <__mdiff+0x88>
 800977c:	1b33      	subs	r3, r6, r4
 800977e:	3b15      	subs	r3, #21
 8009780:	f023 0303 	bic.w	r3, r3, #3
 8009784:	3415      	adds	r4, #21
 8009786:	3304      	adds	r3, #4
 8009788:	42a6      	cmp	r6, r4
 800978a:	bf38      	it	cc
 800978c:	2304      	movcc	r3, #4
 800978e:	441d      	add	r5, r3
 8009790:	445b      	add	r3, fp
 8009792:	461e      	mov	r6, r3
 8009794:	462c      	mov	r4, r5
 8009796:	4544      	cmp	r4, r8
 8009798:	d30e      	bcc.n	80097b8 <__mdiff+0xf8>
 800979a:	f108 0103 	add.w	r1, r8, #3
 800979e:	1b49      	subs	r1, r1, r5
 80097a0:	f021 0103 	bic.w	r1, r1, #3
 80097a4:	3d03      	subs	r5, #3
 80097a6:	45a8      	cmp	r8, r5
 80097a8:	bf38      	it	cc
 80097aa:	2100      	movcc	r1, #0
 80097ac:	440b      	add	r3, r1
 80097ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097b2:	b191      	cbz	r1, 80097da <__mdiff+0x11a>
 80097b4:	6117      	str	r7, [r2, #16]
 80097b6:	e79d      	b.n	80096f4 <__mdiff+0x34>
 80097b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80097bc:	46e6      	mov	lr, ip
 80097be:	0c08      	lsrs	r0, r1, #16
 80097c0:	fa1c fc81 	uxtah	ip, ip, r1
 80097c4:	4471      	add	r1, lr
 80097c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097ca:	b289      	uxth	r1, r1
 80097cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097d0:	f846 1b04 	str.w	r1, [r6], #4
 80097d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097d8:	e7dd      	b.n	8009796 <__mdiff+0xd6>
 80097da:	3f01      	subs	r7, #1
 80097dc:	e7e7      	b.n	80097ae <__mdiff+0xee>
 80097de:	bf00      	nop
 80097e0:	0800ad88 	.word	0x0800ad88
 80097e4:	0800ad99 	.word	0x0800ad99

080097e8 <__d2b>:
 80097e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097ec:	460f      	mov	r7, r1
 80097ee:	2101      	movs	r1, #1
 80097f0:	ec59 8b10 	vmov	r8, r9, d0
 80097f4:	4616      	mov	r6, r2
 80097f6:	f7ff fccd 	bl	8009194 <_Balloc>
 80097fa:	4604      	mov	r4, r0
 80097fc:	b930      	cbnz	r0, 800980c <__d2b+0x24>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b23      	ldr	r3, [pc, #140]	@ (8009890 <__d2b+0xa8>)
 8009802:	4824      	ldr	r0, [pc, #144]	@ (8009894 <__d2b+0xac>)
 8009804:	f240 310f 	movw	r1, #783	@ 0x30f
 8009808:	f000 fc3a 	bl	800a080 <__assert_func>
 800980c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009814:	b10d      	cbz	r5, 800981a <__d2b+0x32>
 8009816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f1b8 0300 	subs.w	r3, r8, #0
 8009820:	d023      	beq.n	800986a <__d2b+0x82>
 8009822:	4668      	mov	r0, sp
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	f7ff fd7c 	bl	8009322 <__lo0bits>
 800982a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800982e:	b1d0      	cbz	r0, 8009866 <__d2b+0x7e>
 8009830:	f1c0 0320 	rsb	r3, r0, #32
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	430b      	orrs	r3, r1
 800983a:	40c2      	lsrs	r2, r0
 800983c:	6163      	str	r3, [r4, #20]
 800983e:	9201      	str	r2, [sp, #4]
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	61a3      	str	r3, [r4, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf0c      	ite	eq
 8009848:	2201      	moveq	r2, #1
 800984a:	2202      	movne	r2, #2
 800984c:	6122      	str	r2, [r4, #16]
 800984e:	b1a5      	cbz	r5, 800987a <__d2b+0x92>
 8009850:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009854:	4405      	add	r5, r0
 8009856:	603d      	str	r5, [r7, #0]
 8009858:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800985c:	6030      	str	r0, [r6, #0]
 800985e:	4620      	mov	r0, r4
 8009860:	b003      	add	sp, #12
 8009862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009866:	6161      	str	r1, [r4, #20]
 8009868:	e7ea      	b.n	8009840 <__d2b+0x58>
 800986a:	a801      	add	r0, sp, #4
 800986c:	f7ff fd59 	bl	8009322 <__lo0bits>
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	6163      	str	r3, [r4, #20]
 8009874:	3020      	adds	r0, #32
 8009876:	2201      	movs	r2, #1
 8009878:	e7e8      	b.n	800984c <__d2b+0x64>
 800987a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800987e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009882:	6038      	str	r0, [r7, #0]
 8009884:	6918      	ldr	r0, [r3, #16]
 8009886:	f7ff fd2d 	bl	80092e4 <__hi0bits>
 800988a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800988e:	e7e5      	b.n	800985c <__d2b+0x74>
 8009890:	0800ad88 	.word	0x0800ad88
 8009894:	0800ad99 	.word	0x0800ad99

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	461f      	mov	r7, r3
 80098a0:	42be      	cmp	r6, r7
 80098a2:	680b      	ldr	r3, [r1, #0]
 80098a4:	4682      	mov	sl, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4690      	mov	r8, r2
 80098aa:	d82d      	bhi.n	8009908 <__ssputs_r+0x70>
 80098ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098b4:	d026      	beq.n	8009904 <__ssputs_r+0x6c>
 80098b6:	6965      	ldr	r5, [r4, #20]
 80098b8:	6909      	ldr	r1, [r1, #16]
 80098ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098be:	eba3 0901 	sub.w	r9, r3, r1
 80098c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c6:	1c7b      	adds	r3, r7, #1
 80098c8:	444b      	add	r3, r9
 80098ca:	106d      	asrs	r5, r5, #1
 80098cc:	429d      	cmp	r5, r3
 80098ce:	bf38      	it	cc
 80098d0:	461d      	movcc	r5, r3
 80098d2:	0553      	lsls	r3, r2, #21
 80098d4:	d527      	bpl.n	8009926 <__ssputs_r+0x8e>
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7fd fef8 	bl	80076cc <_malloc_r>
 80098dc:	4606      	mov	r6, r0
 80098de:	b360      	cbz	r0, 800993a <__ssputs_r+0xa2>
 80098e0:	6921      	ldr	r1, [r4, #16]
 80098e2:	464a      	mov	r2, r9
 80098e4:	f7fe fdb1 	bl	800844a <memcpy>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	6126      	str	r6, [r4, #16]
 80098f6:	6165      	str	r5, [r4, #20]
 80098f8:	444e      	add	r6, r9
 80098fa:	eba5 0509 	sub.w	r5, r5, r9
 80098fe:	6026      	str	r6, [r4, #0]
 8009900:	60a5      	str	r5, [r4, #8]
 8009902:	463e      	mov	r6, r7
 8009904:	42be      	cmp	r6, r7
 8009906:	d900      	bls.n	800990a <__ssputs_r+0x72>
 8009908:	463e      	mov	r6, r7
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	4632      	mov	r2, r6
 800990e:	4641      	mov	r1, r8
 8009910:	f000 fb9c 	bl	800a04c <memmove>
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	1b9b      	subs	r3, r3, r6
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	4433      	add	r3, r6
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	2000      	movs	r0, #0
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	462a      	mov	r2, r5
 8009928:	f000 fbee 	bl	800a108 <_realloc_r>
 800992c:	4606      	mov	r6, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	d1e0      	bne.n	80098f4 <__ssputs_r+0x5c>
 8009932:	6921      	ldr	r1, [r4, #16]
 8009934:	4650      	mov	r0, sl
 8009936:	f7ff fbe3 	bl	8009100 <_free_r>
 800993a:	230c      	movs	r3, #12
 800993c:	f8ca 3000 	str.w	r3, [sl]
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e7e9      	b.n	8009922 <__ssputs_r+0x8a>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	b09d      	sub	sp, #116	@ 0x74
 800995c:	4607      	mov	r7, r0
 800995e:	460d      	mov	r5, r1
 8009960:	4614      	mov	r4, r2
 8009962:	d510      	bpl.n	8009986 <_svfiprintf_r+0x36>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b973      	cbnz	r3, 8009986 <_svfiprintf_r+0x36>
 8009968:	2140      	movs	r1, #64	@ 0x40
 800996a:	f7fd feaf 	bl	80076cc <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b930      	cbnz	r0, 8009982 <_svfiprintf_r+0x32>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b01d      	add	sp, #116	@ 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	2340      	movs	r3, #64	@ 0x40
 8009984:	616b      	str	r3, [r5, #20]
 8009986:	2300      	movs	r3, #0
 8009988:	9309      	str	r3, [sp, #36]	@ 0x24
 800998a:	2320      	movs	r3, #32
 800998c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009990:	f8cd 800c 	str.w	r8, [sp, #12]
 8009994:	2330      	movs	r3, #48	@ 0x30
 8009996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b34 <_svfiprintf_r+0x1e4>
 800999a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800999e:	f04f 0901 	mov.w	r9, #1
 80099a2:	4623      	mov	r3, r4
 80099a4:	469a      	mov	sl, r3
 80099a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099aa:	b10a      	cbz	r2, 80099b0 <_svfiprintf_r+0x60>
 80099ac:	2a25      	cmp	r2, #37	@ 0x25
 80099ae:	d1f9      	bne.n	80099a4 <_svfiprintf_r+0x54>
 80099b0:	ebba 0b04 	subs.w	fp, sl, r4
 80099b4:	d00b      	beq.n	80099ce <_svfiprintf_r+0x7e>
 80099b6:	465b      	mov	r3, fp
 80099b8:	4622      	mov	r2, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ff6b 	bl	8009898 <__ssputs_r>
 80099c2:	3001      	adds	r0, #1
 80099c4:	f000 80a7 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ca:	445a      	add	r2, fp
 80099cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ce:	f89a 3000 	ldrb.w	r3, [sl]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 809f 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099d8:	2300      	movs	r3, #0
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e2:	f10a 0a01 	add.w	sl, sl, #1
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f0:	4654      	mov	r4, sl
 80099f2:	2205      	movs	r2, #5
 80099f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f8:	484e      	ldr	r0, [pc, #312]	@ (8009b34 <_svfiprintf_r+0x1e4>)
 80099fa:	f7f6 fbf9 	bl	80001f0 <memchr>
 80099fe:	9a04      	ldr	r2, [sp, #16]
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_svfiprintf_r+0xea>
 8009a02:	06d0      	lsls	r0, r2, #27
 8009a04:	bf44      	itt	mi
 8009a06:	2320      	movmi	r3, #32
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0c:	0711      	lsls	r1, r2, #28
 8009a0e:	bf44      	itt	mi
 8009a10:	232b      	movmi	r3, #43	@ 0x2b
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a16:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1c:	d015      	beq.n	8009a4a <_svfiprintf_r+0xfa>
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	4654      	mov	r4, sl
 8009a22:	2000      	movs	r0, #0
 8009a24:	f04f 0c0a 	mov.w	ip, #10
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2e:	3b30      	subs	r3, #48	@ 0x30
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d94b      	bls.n	8009acc <_svfiprintf_r+0x17c>
 8009a34:	b1b0      	cbz	r0, 8009a64 <_svfiprintf_r+0x114>
 8009a36:	9207      	str	r2, [sp, #28]
 8009a38:	e014      	b.n	8009a64 <_svfiprintf_r+0x114>
 8009a3a:	eba0 0308 	sub.w	r3, r0, r8
 8009a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a42:	4313      	orrs	r3, r2
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	46a2      	mov	sl, r4
 8009a48:	e7d2      	b.n	80099f0 <_svfiprintf_r+0xa0>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	9103      	str	r1, [sp, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	bfbb      	ittet	lt
 8009a56:	425b      	neglt	r3, r3
 8009a58:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5c:	9307      	strge	r3, [sp, #28]
 8009a5e:	9307      	strlt	r3, [sp, #28]
 8009a60:	bfb8      	it	lt
 8009a62:	9204      	strlt	r2, [sp, #16]
 8009a64:	7823      	ldrb	r3, [r4, #0]
 8009a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a68:	d10a      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a6a:	7863      	ldrb	r3, [r4, #1]
 8009a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6e:	d132      	bne.n	8009ad6 <_svfiprintf_r+0x186>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	9203      	str	r2, [sp, #12]
 8009a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a7c:	3402      	adds	r4, #2
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b44 <_svfiprintf_r+0x1f4>
 8009a84:	7821      	ldrb	r1, [r4, #0]
 8009a86:	2203      	movs	r2, #3
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f7f6 fbb1 	bl	80001f0 <memchr>
 8009a8e:	b138      	cbz	r0, 8009aa0 <_svfiprintf_r+0x150>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	eba0 000a 	sub.w	r0, r0, sl
 8009a96:	2240      	movs	r2, #64	@ 0x40
 8009a98:	4082      	lsls	r2, r0
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	4824      	ldr	r0, [pc, #144]	@ (8009b38 <_svfiprintf_r+0x1e8>)
 8009aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aaa:	2206      	movs	r2, #6
 8009aac:	f7f6 fba0 	bl	80001f0 <memchr>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d036      	beq.n	8009b22 <_svfiprintf_r+0x1d2>
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <_svfiprintf_r+0x1ec>)
 8009ab6:	bb1b      	cbnz	r3, 8009b00 <_svfiprintf_r+0x1b0>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	3307      	adds	r3, #7
 8009abc:	f023 0307 	bic.w	r3, r3, #7
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	4433      	add	r3, r6
 8009ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aca:	e76a      	b.n	80099a2 <_svfiprintf_r+0x52>
 8009acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7a8      	b.n	8009a28 <_svfiprintf_r+0xd8>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	4619      	mov	r1, r3
 8009ade:	f04f 0c0a 	mov.w	ip, #10
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae8:	3a30      	subs	r2, #48	@ 0x30
 8009aea:	2a09      	cmp	r2, #9
 8009aec:	d903      	bls.n	8009af6 <_svfiprintf_r+0x1a6>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0c6      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af2:	9105      	str	r1, [sp, #20]
 8009af4:	e7c4      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afa:	4604      	mov	r4, r0
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f0      	b.n	8009ae2 <_svfiprintf_r+0x192>
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b08:	a904      	add	r1, sp, #16
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7fd ff0a 	bl	8007924 <_printf_float>
 8009b10:	1c42      	adds	r2, r0, #1
 8009b12:	4606      	mov	r6, r0
 8009b14:	d1d6      	bne.n	8009ac4 <_svfiprintf_r+0x174>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	065b      	lsls	r3, r3, #25
 8009b1a:	f53f af2d 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b20:	e72c      	b.n	800997c <_svfiprintf_r+0x2c>
 8009b22:	ab03      	add	r3, sp, #12
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	462a      	mov	r2, r5
 8009b28:	4b05      	ldr	r3, [pc, #20]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b2a:	a904      	add	r1, sp, #16
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f7fe f991 	bl	8007e54 <_printf_i>
 8009b32:	e7ed      	b.n	8009b10 <_svfiprintf_r+0x1c0>
 8009b34:	0800aef0 	.word	0x0800aef0
 8009b38:	0800aefa 	.word	0x0800aefa
 8009b3c:	08007925 	.word	0x08007925
 8009b40:	08009899 	.word	0x08009899
 8009b44:	0800aef6 	.word	0x0800aef6

08009b48 <__sfputc_r>:
 8009b48:	6893      	ldr	r3, [r2, #8]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	b410      	push	{r4}
 8009b50:	6093      	str	r3, [r2, #8]
 8009b52:	da08      	bge.n	8009b66 <__sfputc_r+0x1e>
 8009b54:	6994      	ldr	r4, [r2, #24]
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	db01      	blt.n	8009b5e <__sfputc_r+0x16>
 8009b5a:	290a      	cmp	r1, #10
 8009b5c:	d103      	bne.n	8009b66 <__sfputc_r+0x1e>
 8009b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b62:	f000 b9df 	b.w	8009f24 <__swbuf_r>
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	1c58      	adds	r0, r3, #1
 8009b6a:	6010      	str	r0, [r2, #0]
 8009b6c:	7019      	strb	r1, [r3, #0]
 8009b6e:	4608      	mov	r0, r1
 8009b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <__sfputs_r>:
 8009b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	18d5      	adds	r5, r2, r3
 8009b80:	42ac      	cmp	r4, r5
 8009b82:	d101      	bne.n	8009b88 <__sfputs_r+0x12>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e007      	b.n	8009b98 <__sfputs_r+0x22>
 8009b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8c:	463a      	mov	r2, r7
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff ffda 	bl	8009b48 <__sfputc_r>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d1f3      	bne.n	8009b80 <__sfputs_r+0xa>
 8009b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b9c <_vfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	b09d      	sub	sp, #116	@ 0x74
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	4698      	mov	r8, r3
 8009ba8:	4606      	mov	r6, r0
 8009baa:	b118      	cbz	r0, 8009bb4 <_vfiprintf_r+0x18>
 8009bac:	6a03      	ldr	r3, [r0, #32]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x18>
 8009bb0:	f7fe fafc 	bl	80081ac <__sinit>
 8009bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb6:	07d9      	lsls	r1, r3, #31
 8009bb8:	d405      	bmi.n	8009bc6 <_vfiprintf_r+0x2a>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	059a      	lsls	r2, r3, #22
 8009bbe:	d402      	bmi.n	8009bc6 <_vfiprintf_r+0x2a>
 8009bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc2:	f7fe fc40 	bl	8008446 <__retarget_lock_acquire_recursive>
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	071b      	lsls	r3, r3, #28
 8009bca:	d501      	bpl.n	8009bd0 <_vfiprintf_r+0x34>
 8009bcc:	692b      	ldr	r3, [r5, #16]
 8009bce:	b99b      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x5c>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f000 f9e4 	bl	8009fa0 <__swsetup_r>
 8009bd8:	b170      	cbz	r0, 8009bf8 <_vfiprintf_r+0x5c>
 8009bda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bdc:	07dc      	lsls	r4, r3, #31
 8009bde:	d504      	bpl.n	8009bea <_vfiprintf_r+0x4e>
 8009be0:	f04f 30ff 	mov.w	r0, #4294967295
 8009be4:	b01d      	add	sp, #116	@ 0x74
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	89ab      	ldrh	r3, [r5, #12]
 8009bec:	0598      	lsls	r0, r3, #22
 8009bee:	d4f7      	bmi.n	8009be0 <_vfiprintf_r+0x44>
 8009bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bf2:	f7fe fc29 	bl	8008448 <__retarget_lock_release_recursive>
 8009bf6:	e7f3      	b.n	8009be0 <_vfiprintf_r+0x44>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c06:	2330      	movs	r3, #48	@ 0x30
 8009c08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009db8 <_vfiprintf_r+0x21c>
 8009c0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c10:	f04f 0901 	mov.w	r9, #1
 8009c14:	4623      	mov	r3, r4
 8009c16:	469a      	mov	sl, r3
 8009c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1c:	b10a      	cbz	r2, 8009c22 <_vfiprintf_r+0x86>
 8009c1e:	2a25      	cmp	r2, #37	@ 0x25
 8009c20:	d1f9      	bne.n	8009c16 <_vfiprintf_r+0x7a>
 8009c22:	ebba 0b04 	subs.w	fp, sl, r4
 8009c26:	d00b      	beq.n	8009c40 <_vfiprintf_r+0xa4>
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff ffa1 	bl	8009b76 <__sfputs_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	f000 80a7 	beq.w	8009d88 <_vfiprintf_r+0x1ec>
 8009c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c3c:	445a      	add	r2, fp
 8009c3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c40:	f89a 3000 	ldrb.w	r3, [sl]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 809f 	beq.w	8009d88 <_vfiprintf_r+0x1ec>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c54:	f10a 0a01 	add.w	sl, sl, #1
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	9307      	str	r3, [sp, #28]
 8009c5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c60:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c62:	4654      	mov	r4, sl
 8009c64:	2205      	movs	r2, #5
 8009c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6a:	4853      	ldr	r0, [pc, #332]	@ (8009db8 <_vfiprintf_r+0x21c>)
 8009c6c:	f7f6 fac0 	bl	80001f0 <memchr>
 8009c70:	9a04      	ldr	r2, [sp, #16]
 8009c72:	b9d8      	cbnz	r0, 8009cac <_vfiprintf_r+0x110>
 8009c74:	06d1      	lsls	r1, r2, #27
 8009c76:	bf44      	itt	mi
 8009c78:	2320      	movmi	r3, #32
 8009c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c7e:	0713      	lsls	r3, r2, #28
 8009c80:	bf44      	itt	mi
 8009c82:	232b      	movmi	r3, #43	@ 0x2b
 8009c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c88:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c8e:	d015      	beq.n	8009cbc <_vfiprintf_r+0x120>
 8009c90:	9a07      	ldr	r2, [sp, #28]
 8009c92:	4654      	mov	r4, sl
 8009c94:	2000      	movs	r0, #0
 8009c96:	f04f 0c0a 	mov.w	ip, #10
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca0:	3b30      	subs	r3, #48	@ 0x30
 8009ca2:	2b09      	cmp	r3, #9
 8009ca4:	d94b      	bls.n	8009d3e <_vfiprintf_r+0x1a2>
 8009ca6:	b1b0      	cbz	r0, 8009cd6 <_vfiprintf_r+0x13a>
 8009ca8:	9207      	str	r2, [sp, #28]
 8009caa:	e014      	b.n	8009cd6 <_vfiprintf_r+0x13a>
 8009cac:	eba0 0308 	sub.w	r3, r0, r8
 8009cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	46a2      	mov	sl, r4
 8009cba:	e7d2      	b.n	8009c62 <_vfiprintf_r+0xc6>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	1d19      	adds	r1, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	9103      	str	r1, [sp, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfbb      	ittet	lt
 8009cc8:	425b      	neglt	r3, r3
 8009cca:	f042 0202 	orrlt.w	r2, r2, #2
 8009cce:	9307      	strge	r3, [sp, #28]
 8009cd0:	9307      	strlt	r3, [sp, #28]
 8009cd2:	bfb8      	it	lt
 8009cd4:	9204      	strlt	r2, [sp, #16]
 8009cd6:	7823      	ldrb	r3, [r4, #0]
 8009cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cda:	d10a      	bne.n	8009cf2 <_vfiprintf_r+0x156>
 8009cdc:	7863      	ldrb	r3, [r4, #1]
 8009cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ce0:	d132      	bne.n	8009d48 <_vfiprintf_r+0x1ac>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	1d1a      	adds	r2, r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	9203      	str	r2, [sp, #12]
 8009cea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cee:	3402      	adds	r4, #2
 8009cf0:	9305      	str	r3, [sp, #20]
 8009cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009dc8 <_vfiprintf_r+0x22c>
 8009cf6:	7821      	ldrb	r1, [r4, #0]
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	f7f6 fa78 	bl	80001f0 <memchr>
 8009d00:	b138      	cbz	r0, 8009d12 <_vfiprintf_r+0x176>
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	eba0 000a 	sub.w	r0, r0, sl
 8009d08:	2240      	movs	r2, #64	@ 0x40
 8009d0a:	4082      	lsls	r2, r0
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	3401      	adds	r4, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d16:	4829      	ldr	r0, [pc, #164]	@ (8009dbc <_vfiprintf_r+0x220>)
 8009d18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d1c:	2206      	movs	r2, #6
 8009d1e:	f7f6 fa67 	bl	80001f0 <memchr>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d03f      	beq.n	8009da6 <_vfiprintf_r+0x20a>
 8009d26:	4b26      	ldr	r3, [pc, #152]	@ (8009dc0 <_vfiprintf_r+0x224>)
 8009d28:	bb1b      	cbnz	r3, 8009d72 <_vfiprintf_r+0x1d6>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	3307      	adds	r3, #7
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	3308      	adds	r3, #8
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d38:	443b      	add	r3, r7
 8009d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3c:	e76a      	b.n	8009c14 <_vfiprintf_r+0x78>
 8009d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d42:	460c      	mov	r4, r1
 8009d44:	2001      	movs	r0, #1
 8009d46:	e7a8      	b.n	8009c9a <_vfiprintf_r+0xfe>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	3401      	adds	r4, #1
 8009d4c:	9305      	str	r3, [sp, #20]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	f04f 0c0a 	mov.w	ip, #10
 8009d54:	4620      	mov	r0, r4
 8009d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d5a:	3a30      	subs	r2, #48	@ 0x30
 8009d5c:	2a09      	cmp	r2, #9
 8009d5e:	d903      	bls.n	8009d68 <_vfiprintf_r+0x1cc>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0c6      	beq.n	8009cf2 <_vfiprintf_r+0x156>
 8009d64:	9105      	str	r1, [sp, #20]
 8009d66:	e7c4      	b.n	8009cf2 <_vfiprintf_r+0x156>
 8009d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e7f0      	b.n	8009d54 <_vfiprintf_r+0x1b8>
 8009d72:	ab03      	add	r3, sp, #12
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	462a      	mov	r2, r5
 8009d78:	4b12      	ldr	r3, [pc, #72]	@ (8009dc4 <_vfiprintf_r+0x228>)
 8009d7a:	a904      	add	r1, sp, #16
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7fd fdd1 	bl	8007924 <_printf_float>
 8009d82:	4607      	mov	r7, r0
 8009d84:	1c78      	adds	r0, r7, #1
 8009d86:	d1d6      	bne.n	8009d36 <_vfiprintf_r+0x19a>
 8009d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d405      	bmi.n	8009d9a <_vfiprintf_r+0x1fe>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	059a      	lsls	r2, r3, #22
 8009d92:	d402      	bmi.n	8009d9a <_vfiprintf_r+0x1fe>
 8009d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d96:	f7fe fb57 	bl	8008448 <__retarget_lock_release_recursive>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	065b      	lsls	r3, r3, #25
 8009d9e:	f53f af1f 	bmi.w	8009be0 <_vfiprintf_r+0x44>
 8009da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da4:	e71e      	b.n	8009be4 <_vfiprintf_r+0x48>
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462a      	mov	r2, r5
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <_vfiprintf_r+0x228>)
 8009dae:	a904      	add	r1, sp, #16
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7fe f84f 	bl	8007e54 <_printf_i>
 8009db6:	e7e4      	b.n	8009d82 <_vfiprintf_r+0x1e6>
 8009db8:	0800aef0 	.word	0x0800aef0
 8009dbc:	0800aefa 	.word	0x0800aefa
 8009dc0:	08007925 	.word	0x08007925
 8009dc4:	08009b77 	.word	0x08009b77
 8009dc8:	0800aef6 	.word	0x0800aef6

08009dcc <__sflush_r>:
 8009dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	0716      	lsls	r6, r2, #28
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	d454      	bmi.n	8009e86 <__sflush_r+0xba>
 8009ddc:	684b      	ldr	r3, [r1, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc02      	bgt.n	8009de8 <__sflush_r+0x1c>
 8009de2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd48      	ble.n	8009e7a <__sflush_r+0xae>
 8009de8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d045      	beq.n	8009e7a <__sflush_r+0xae>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009df4:	682f      	ldr	r7, [r5, #0]
 8009df6:	6a21      	ldr	r1, [r4, #32]
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	d030      	beq.n	8009e5e <__sflush_r+0x92>
 8009dfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	0759      	lsls	r1, r3, #29
 8009e02:	d505      	bpl.n	8009e10 <__sflush_r+0x44>
 8009e04:	6863      	ldr	r3, [r4, #4]
 8009e06:	1ad2      	subs	r2, r2, r3
 8009e08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e0a:	b10b      	cbz	r3, 8009e10 <__sflush_r+0x44>
 8009e0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	2300      	movs	r3, #0
 8009e12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b0      	blx	r6
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	d106      	bne.n	8009e2e <__sflush_r+0x62>
 8009e20:	6829      	ldr	r1, [r5, #0]
 8009e22:	291d      	cmp	r1, #29
 8009e24:	d82b      	bhi.n	8009e7e <__sflush_r+0xb2>
 8009e26:	4a2a      	ldr	r2, [pc, #168]	@ (8009ed0 <__sflush_r+0x104>)
 8009e28:	410a      	asrs	r2, r1
 8009e2a:	07d6      	lsls	r6, r2, #31
 8009e2c:	d427      	bmi.n	8009e7e <__sflush_r+0xb2>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
 8009e32:	04d9      	lsls	r1, r3, #19
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	d504      	bpl.n	8009e44 <__sflush_r+0x78>
 8009e3a:	1c42      	adds	r2, r0, #1
 8009e3c:	d101      	bne.n	8009e42 <__sflush_r+0x76>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	b903      	cbnz	r3, 8009e44 <__sflush_r+0x78>
 8009e42:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	b1b9      	cbz	r1, 8009e7a <__sflush_r+0xae>
 8009e4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	d002      	beq.n	8009e58 <__sflush_r+0x8c>
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7ff f954 	bl	8009100 <_free_r>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e5c:	e00d      	b.n	8009e7a <__sflush_r+0xae>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b0      	blx	r6
 8009e64:	4602      	mov	r2, r0
 8009e66:	1c50      	adds	r0, r2, #1
 8009e68:	d1c9      	bne.n	8009dfe <__sflush_r+0x32>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0c6      	beq.n	8009dfe <__sflush_r+0x32>
 8009e70:	2b1d      	cmp	r3, #29
 8009e72:	d001      	beq.n	8009e78 <__sflush_r+0xac>
 8009e74:	2b16      	cmp	r3, #22
 8009e76:	d11e      	bne.n	8009eb6 <__sflush_r+0xea>
 8009e78:	602f      	str	r7, [r5, #0]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	e022      	b.n	8009ec4 <__sflush_r+0xf8>
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	e01b      	b.n	8009ebe <__sflush_r+0xf2>
 8009e86:	690f      	ldr	r7, [r1, #16]
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	d0f6      	beq.n	8009e7a <__sflush_r+0xae>
 8009e8c:	0793      	lsls	r3, r2, #30
 8009e8e:	680e      	ldr	r6, [r1, #0]
 8009e90:	bf08      	it	eq
 8009e92:	694b      	ldreq	r3, [r1, #20]
 8009e94:	600f      	str	r7, [r1, #0]
 8009e96:	bf18      	it	ne
 8009e98:	2300      	movne	r3, #0
 8009e9a:	eba6 0807 	sub.w	r8, r6, r7
 8009e9e:	608b      	str	r3, [r1, #8]
 8009ea0:	f1b8 0f00 	cmp.w	r8, #0
 8009ea4:	dde9      	ble.n	8009e7a <__sflush_r+0xae>
 8009ea6:	6a21      	ldr	r1, [r4, #32]
 8009ea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eaa:	4643      	mov	r3, r8
 8009eac:	463a      	mov	r2, r7
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b0      	blx	r6
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	dc08      	bgt.n	8009ec8 <__sflush_r+0xfc>
 8009eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec8:	4407      	add	r7, r0
 8009eca:	eba8 0800 	sub.w	r8, r8, r0
 8009ece:	e7e7      	b.n	8009ea0 <__sflush_r+0xd4>
 8009ed0:	dfbffffe 	.word	0xdfbffffe

08009ed4 <_fflush_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b913      	cbnz	r3, 8009ee4 <_fflush_r+0x10>
 8009ede:	2500      	movs	r5, #0
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	b118      	cbz	r0, 8009eee <_fflush_r+0x1a>
 8009ee6:	6a03      	ldr	r3, [r0, #32]
 8009ee8:	b90b      	cbnz	r3, 8009eee <_fflush_r+0x1a>
 8009eea:	f7fe f95f 	bl	80081ac <__sinit>
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0f3      	beq.n	8009ede <_fflush_r+0xa>
 8009ef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ef8:	07d0      	lsls	r0, r2, #31
 8009efa:	d404      	bmi.n	8009f06 <_fflush_r+0x32>
 8009efc:	0599      	lsls	r1, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_fflush_r+0x32>
 8009f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f02:	f7fe faa0 	bl	8008446 <__retarget_lock_acquire_recursive>
 8009f06:	4628      	mov	r0, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f7ff ff5f 	bl	8009dcc <__sflush_r>
 8009f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f10:	07da      	lsls	r2, r3, #31
 8009f12:	4605      	mov	r5, r0
 8009f14:	d4e4      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	d4e1      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f1e:	f7fe fa93 	bl	8008448 <__retarget_lock_release_recursive>
 8009f22:	e7dd      	b.n	8009ee0 <_fflush_r+0xc>

08009f24 <__swbuf_r>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	460e      	mov	r6, r1
 8009f28:	4614      	mov	r4, r2
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	b118      	cbz	r0, 8009f36 <__swbuf_r+0x12>
 8009f2e:	6a03      	ldr	r3, [r0, #32]
 8009f30:	b90b      	cbnz	r3, 8009f36 <__swbuf_r+0x12>
 8009f32:	f7fe f93b 	bl	80081ac <__sinit>
 8009f36:	69a3      	ldr	r3, [r4, #24]
 8009f38:	60a3      	str	r3, [r4, #8]
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	d501      	bpl.n	8009f44 <__swbuf_r+0x20>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	b943      	cbnz	r3, 8009f56 <__swbuf_r+0x32>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 f82a 	bl	8009fa0 <__swsetup_r>
 8009f4c:	b118      	cbz	r0, 8009f56 <__swbuf_r+0x32>
 8009f4e:	f04f 37ff 	mov.w	r7, #4294967295
 8009f52:	4638      	mov	r0, r7
 8009f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	6922      	ldr	r2, [r4, #16]
 8009f5a:	1a98      	subs	r0, r3, r2
 8009f5c:	6963      	ldr	r3, [r4, #20]
 8009f5e:	b2f6      	uxtb	r6, r6
 8009f60:	4283      	cmp	r3, r0
 8009f62:	4637      	mov	r7, r6
 8009f64:	dc05      	bgt.n	8009f72 <__swbuf_r+0x4e>
 8009f66:	4621      	mov	r1, r4
 8009f68:	4628      	mov	r0, r5
 8009f6a:	f7ff ffb3 	bl	8009ed4 <_fflush_r>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d1ed      	bne.n	8009f4e <__swbuf_r+0x2a>
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	60a3      	str	r3, [r4, #8]
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	6022      	str	r2, [r4, #0]
 8009f7e:	701e      	strb	r6, [r3, #0]
 8009f80:	6962      	ldr	r2, [r4, #20]
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d004      	beq.n	8009f92 <__swbuf_r+0x6e>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	07db      	lsls	r3, r3, #31
 8009f8c:	d5e1      	bpl.n	8009f52 <__swbuf_r+0x2e>
 8009f8e:	2e0a      	cmp	r6, #10
 8009f90:	d1df      	bne.n	8009f52 <__swbuf_r+0x2e>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4628      	mov	r0, r5
 8009f96:	f7ff ff9d 	bl	8009ed4 <_fflush_r>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0d9      	beq.n	8009f52 <__swbuf_r+0x2e>
 8009f9e:	e7d6      	b.n	8009f4e <__swbuf_r+0x2a>

08009fa0 <__swsetup_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4b29      	ldr	r3, [pc, #164]	@ (800a048 <__swsetup_r+0xa8>)
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b118      	cbz	r0, 8009fb4 <__swsetup_r+0x14>
 8009fac:	6a03      	ldr	r3, [r0, #32]
 8009fae:	b90b      	cbnz	r3, 8009fb4 <__swsetup_r+0x14>
 8009fb0:	f7fe f8fc 	bl	80081ac <__sinit>
 8009fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb8:	0719      	lsls	r1, r3, #28
 8009fba:	d422      	bmi.n	800a002 <__swsetup_r+0x62>
 8009fbc:	06da      	lsls	r2, r3, #27
 8009fbe:	d407      	bmi.n	8009fd0 <__swsetup_r+0x30>
 8009fc0:	2209      	movs	r2, #9
 8009fc2:	602a      	str	r2, [r5, #0]
 8009fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	e033      	b.n	800a038 <__swsetup_r+0x98>
 8009fd0:	0758      	lsls	r0, r3, #29
 8009fd2:	d512      	bpl.n	8009ffa <__swsetup_r+0x5a>
 8009fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fd6:	b141      	cbz	r1, 8009fea <__swsetup_r+0x4a>
 8009fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	d002      	beq.n	8009fe6 <__swsetup_r+0x46>
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f7ff f88d 	bl	8009100 <_free_r>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f043 0308 	orr.w	r3, r3, #8
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	b94b      	cbnz	r3, 800a01a <__swsetup_r+0x7a>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a00c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a010:	d003      	beq.n	800a01a <__swsetup_r+0x7a>
 800a012:	4621      	mov	r1, r4
 800a014:	4628      	mov	r0, r5
 800a016:	f000 f8eb 	bl	800a1f0 <__smakebuf_r>
 800a01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01e:	f013 0201 	ands.w	r2, r3, #1
 800a022:	d00a      	beq.n	800a03a <__swsetup_r+0x9a>
 800a024:	2200      	movs	r2, #0
 800a026:	60a2      	str	r2, [r4, #8]
 800a028:	6962      	ldr	r2, [r4, #20]
 800a02a:	4252      	negs	r2, r2
 800a02c:	61a2      	str	r2, [r4, #24]
 800a02e:	6922      	ldr	r2, [r4, #16]
 800a030:	b942      	cbnz	r2, 800a044 <__swsetup_r+0xa4>
 800a032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a036:	d1c5      	bne.n	8009fc4 <__swsetup_r+0x24>
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	0799      	lsls	r1, r3, #30
 800a03c:	bf58      	it	pl
 800a03e:	6962      	ldrpl	r2, [r4, #20]
 800a040:	60a2      	str	r2, [r4, #8]
 800a042:	e7f4      	b.n	800a02e <__swsetup_r+0x8e>
 800a044:	2000      	movs	r0, #0
 800a046:	e7f7      	b.n	800a038 <__swsetup_r+0x98>
 800a048:	2000002c 	.word	0x2000002c

0800a04c <memmove>:
 800a04c:	4288      	cmp	r0, r1
 800a04e:	b510      	push	{r4, lr}
 800a050:	eb01 0402 	add.w	r4, r1, r2
 800a054:	d902      	bls.n	800a05c <memmove+0x10>
 800a056:	4284      	cmp	r4, r0
 800a058:	4623      	mov	r3, r4
 800a05a:	d807      	bhi.n	800a06c <memmove+0x20>
 800a05c:	1e43      	subs	r3, r0, #1
 800a05e:	42a1      	cmp	r1, r4
 800a060:	d008      	beq.n	800a074 <memmove+0x28>
 800a062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a06a:	e7f8      	b.n	800a05e <memmove+0x12>
 800a06c:	4402      	add	r2, r0
 800a06e:	4601      	mov	r1, r0
 800a070:	428a      	cmp	r2, r1
 800a072:	d100      	bne.n	800a076 <memmove+0x2a>
 800a074:	bd10      	pop	{r4, pc}
 800a076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a07e:	e7f7      	b.n	800a070 <memmove+0x24>

0800a080 <__assert_func>:
 800a080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a082:	4614      	mov	r4, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4b09      	ldr	r3, [pc, #36]	@ (800a0ac <__assert_func+0x2c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4605      	mov	r5, r0
 800a08c:	68d8      	ldr	r0, [r3, #12]
 800a08e:	b954      	cbnz	r4, 800a0a6 <__assert_func+0x26>
 800a090:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <__assert_func+0x30>)
 800a092:	461c      	mov	r4, r3
 800a094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a098:	9100      	str	r1, [sp, #0]
 800a09a:	462b      	mov	r3, r5
 800a09c:	4905      	ldr	r1, [pc, #20]	@ (800a0b4 <__assert_func+0x34>)
 800a09e:	f000 f86f 	bl	800a180 <fiprintf>
 800a0a2:	f000 f903 	bl	800a2ac <abort>
 800a0a6:	4b04      	ldr	r3, [pc, #16]	@ (800a0b8 <__assert_func+0x38>)
 800a0a8:	e7f4      	b.n	800a094 <__assert_func+0x14>
 800a0aa:	bf00      	nop
 800a0ac:	2000002c 	.word	0x2000002c
 800a0b0:	0800af46 	.word	0x0800af46
 800a0b4:	0800af18 	.word	0x0800af18
 800a0b8:	0800af0b 	.word	0x0800af0b

0800a0bc <_calloc_r>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	fba1 5402 	umull	r5, r4, r1, r2
 800a0c2:	b93c      	cbnz	r4, 800a0d4 <_calloc_r+0x18>
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7fd fb01 	bl	80076cc <_malloc_r>
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <_calloc_r+0x1e>
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	220c      	movs	r2, #12
 800a0d6:	6002      	str	r2, [r0, #0]
 800a0d8:	e7f9      	b.n	800a0ce <_calloc_r+0x12>
 800a0da:	462a      	mov	r2, r5
 800a0dc:	4621      	mov	r1, r4
 800a0de:	f7fe f924 	bl	800832a <memset>
 800a0e2:	e7f5      	b.n	800a0d0 <_calloc_r+0x14>

0800a0e4 <__ascii_mbtowc>:
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	b901      	cbnz	r1, 800a0ea <__ascii_mbtowc+0x6>
 800a0e8:	a901      	add	r1, sp, #4
 800a0ea:	b142      	cbz	r2, 800a0fe <__ascii_mbtowc+0x1a>
 800a0ec:	b14b      	cbz	r3, 800a102 <__ascii_mbtowc+0x1e>
 800a0ee:	7813      	ldrb	r3, [r2, #0]
 800a0f0:	600b      	str	r3, [r1, #0]
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	1e10      	subs	r0, r2, #0
 800a0f6:	bf18      	it	ne
 800a0f8:	2001      	movne	r0, #1
 800a0fa:	b002      	add	sp, #8
 800a0fc:	4770      	bx	lr
 800a0fe:	4610      	mov	r0, r2
 800a100:	e7fb      	b.n	800a0fa <__ascii_mbtowc+0x16>
 800a102:	f06f 0001 	mvn.w	r0, #1
 800a106:	e7f8      	b.n	800a0fa <__ascii_mbtowc+0x16>

0800a108 <_realloc_r>:
 800a108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10c:	4680      	mov	r8, r0
 800a10e:	4615      	mov	r5, r2
 800a110:	460c      	mov	r4, r1
 800a112:	b921      	cbnz	r1, 800a11e <_realloc_r+0x16>
 800a114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a118:	4611      	mov	r1, r2
 800a11a:	f7fd bad7 	b.w	80076cc <_malloc_r>
 800a11e:	b92a      	cbnz	r2, 800a12c <_realloc_r+0x24>
 800a120:	f7fe ffee 	bl	8009100 <_free_r>
 800a124:	2400      	movs	r4, #0
 800a126:	4620      	mov	r0, r4
 800a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12c:	f000 f8c5 	bl	800a2ba <_malloc_usable_size_r>
 800a130:	4285      	cmp	r5, r0
 800a132:	4606      	mov	r6, r0
 800a134:	d802      	bhi.n	800a13c <_realloc_r+0x34>
 800a136:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a13a:	d8f4      	bhi.n	800a126 <_realloc_r+0x1e>
 800a13c:	4629      	mov	r1, r5
 800a13e:	4640      	mov	r0, r8
 800a140:	f7fd fac4 	bl	80076cc <_malloc_r>
 800a144:	4607      	mov	r7, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	d0ec      	beq.n	800a124 <_realloc_r+0x1c>
 800a14a:	42b5      	cmp	r5, r6
 800a14c:	462a      	mov	r2, r5
 800a14e:	4621      	mov	r1, r4
 800a150:	bf28      	it	cs
 800a152:	4632      	movcs	r2, r6
 800a154:	f7fe f979 	bl	800844a <memcpy>
 800a158:	4621      	mov	r1, r4
 800a15a:	4640      	mov	r0, r8
 800a15c:	f7fe ffd0 	bl	8009100 <_free_r>
 800a160:	463c      	mov	r4, r7
 800a162:	e7e0      	b.n	800a126 <_realloc_r+0x1e>

0800a164 <__ascii_wctomb>:
 800a164:	4603      	mov	r3, r0
 800a166:	4608      	mov	r0, r1
 800a168:	b141      	cbz	r1, 800a17c <__ascii_wctomb+0x18>
 800a16a:	2aff      	cmp	r2, #255	@ 0xff
 800a16c:	d904      	bls.n	800a178 <__ascii_wctomb+0x14>
 800a16e:	228a      	movs	r2, #138	@ 0x8a
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	4770      	bx	lr
 800a178:	700a      	strb	r2, [r1, #0]
 800a17a:	2001      	movs	r0, #1
 800a17c:	4770      	bx	lr
	...

0800a180 <fiprintf>:
 800a180:	b40e      	push	{r1, r2, r3}
 800a182:	b503      	push	{r0, r1, lr}
 800a184:	4601      	mov	r1, r0
 800a186:	ab03      	add	r3, sp, #12
 800a188:	4805      	ldr	r0, [pc, #20]	@ (800a1a0 <fiprintf+0x20>)
 800a18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a18e:	6800      	ldr	r0, [r0, #0]
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	f7ff fd03 	bl	8009b9c <_vfiprintf_r>
 800a196:	b002      	add	sp, #8
 800a198:	f85d eb04 	ldr.w	lr, [sp], #4
 800a19c:	b003      	add	sp, #12
 800a19e:	4770      	bx	lr
 800a1a0:	2000002c 	.word	0x2000002c

0800a1a4 <__swhatbuf_r>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	b096      	sub	sp, #88	@ 0x58
 800a1b0:	4615      	mov	r5, r2
 800a1b2:	461e      	mov	r6, r3
 800a1b4:	da0d      	bge.n	800a1d2 <__swhatbuf_r+0x2e>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1bc:	f04f 0100 	mov.w	r1, #0
 800a1c0:	bf14      	ite	ne
 800a1c2:	2340      	movne	r3, #64	@ 0x40
 800a1c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	6031      	str	r1, [r6, #0]
 800a1cc:	602b      	str	r3, [r5, #0]
 800a1ce:	b016      	add	sp, #88	@ 0x58
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	466a      	mov	r2, sp
 800a1d4:	f000 f848 	bl	800a268 <_fstat_r>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	dbec      	blt.n	800a1b6 <__swhatbuf_r+0x12>
 800a1dc:	9901      	ldr	r1, [sp, #4]
 800a1de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1e6:	4259      	negs	r1, r3
 800a1e8:	4159      	adcs	r1, r3
 800a1ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ee:	e7eb      	b.n	800a1c8 <__swhatbuf_r+0x24>

0800a1f0 <__smakebuf_r>:
 800a1f0:	898b      	ldrh	r3, [r1, #12]
 800a1f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1f4:	079d      	lsls	r5, r3, #30
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	d507      	bpl.n	800a20c <__smakebuf_r+0x1c>
 800a1fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	2301      	movs	r3, #1
 800a206:	6163      	str	r3, [r4, #20]
 800a208:	b003      	add	sp, #12
 800a20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20c:	ab01      	add	r3, sp, #4
 800a20e:	466a      	mov	r2, sp
 800a210:	f7ff ffc8 	bl	800a1a4 <__swhatbuf_r>
 800a214:	9f00      	ldr	r7, [sp, #0]
 800a216:	4605      	mov	r5, r0
 800a218:	4639      	mov	r1, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7fd fa56 	bl	80076cc <_malloc_r>
 800a220:	b948      	cbnz	r0, 800a236 <__smakebuf_r+0x46>
 800a222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a226:	059a      	lsls	r2, r3, #22
 800a228:	d4ee      	bmi.n	800a208 <__smakebuf_r+0x18>
 800a22a:	f023 0303 	bic.w	r3, r3, #3
 800a22e:	f043 0302 	orr.w	r3, r3, #2
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	e7e2      	b.n	800a1fc <__smakebuf_r+0xc>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	6020      	str	r0, [r4, #0]
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a246:	b15b      	cbz	r3, 800a260 <__smakebuf_r+0x70>
 800a248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a24c:	4630      	mov	r0, r6
 800a24e:	f000 f81d 	bl	800a28c <_isatty_r>
 800a252:	b128      	cbz	r0, 800a260 <__smakebuf_r+0x70>
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	f023 0303 	bic.w	r3, r3, #3
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	431d      	orrs	r5, r3
 800a264:	81a5      	strh	r5, [r4, #12]
 800a266:	e7cf      	b.n	800a208 <__smakebuf_r+0x18>

0800a268 <_fstat_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	@ (800a288 <_fstat_r+0x20>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	4611      	mov	r1, r2
 800a274:	602b      	str	r3, [r5, #0]
 800a276:	f7f8 ffeb 	bl	8003250 <_fstat>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d102      	bne.n	800a284 <_fstat_r+0x1c>
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	b103      	cbz	r3, 800a284 <_fstat_r+0x1c>
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	bf00      	nop
 800a288:	20000904 	.word	0x20000904

0800a28c <_isatty_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d06      	ldr	r5, [pc, #24]	@ (800a2a8 <_isatty_r+0x1c>)
 800a290:	2300      	movs	r3, #0
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	f7f8 ffea 	bl	8003270 <_isatty>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_isatty_r+0x1a>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_isatty_r+0x1a>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20000904 	.word	0x20000904

0800a2ac <abort>:
 800a2ac:	b508      	push	{r3, lr}
 800a2ae:	2006      	movs	r0, #6
 800a2b0:	f000 f834 	bl	800a31c <raise>
 800a2b4:	2001      	movs	r0, #1
 800a2b6:	f7f8 ff7b 	bl	80031b0 <_exit>

0800a2ba <_malloc_usable_size_r>:
 800a2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2be:	1f18      	subs	r0, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	bfbc      	itt	lt
 800a2c4:	580b      	ldrlt	r3, [r1, r0]
 800a2c6:	18c0      	addlt	r0, r0, r3
 800a2c8:	4770      	bx	lr

0800a2ca <_raise_r>:
 800a2ca:	291f      	cmp	r1, #31
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	d904      	bls.n	800a2de <_raise_r+0x14>
 800a2d4:	2316      	movs	r3, #22
 800a2d6:	6003      	str	r3, [r0, #0]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2e0:	b112      	cbz	r2, 800a2e8 <_raise_r+0x1e>
 800a2e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e6:	b94b      	cbnz	r3, 800a2fc <_raise_r+0x32>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 f831 	bl	800a350 <_getpid_r>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f8:	f000 b818 	b.w	800a32c <_kill_r>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d00a      	beq.n	800a316 <_raise_r+0x4c>
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	d103      	bne.n	800a30c <_raise_r+0x42>
 800a304:	2316      	movs	r3, #22
 800a306:	6003      	str	r3, [r0, #0]
 800a308:	2001      	movs	r0, #1
 800a30a:	e7e7      	b.n	800a2dc <_raise_r+0x12>
 800a30c:	2100      	movs	r1, #0
 800a30e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a312:	4620      	mov	r0, r4
 800a314:	4798      	blx	r3
 800a316:	2000      	movs	r0, #0
 800a318:	e7e0      	b.n	800a2dc <_raise_r+0x12>
	...

0800a31c <raise>:
 800a31c:	4b02      	ldr	r3, [pc, #8]	@ (800a328 <raise+0xc>)
 800a31e:	4601      	mov	r1, r0
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	f7ff bfd2 	b.w	800a2ca <_raise_r>
 800a326:	bf00      	nop
 800a328:	2000002c 	.word	0x2000002c

0800a32c <_kill_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d07      	ldr	r5, [pc, #28]	@ (800a34c <_kill_r+0x20>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	602b      	str	r3, [r5, #0]
 800a33a:	f7f8 ff29 	bl	8003190 <_kill>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d102      	bne.n	800a348 <_kill_r+0x1c>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	b103      	cbz	r3, 800a348 <_kill_r+0x1c>
 800a346:	6023      	str	r3, [r4, #0]
 800a348:	bd38      	pop	{r3, r4, r5, pc}
 800a34a:	bf00      	nop
 800a34c:	20000904 	.word	0x20000904

0800a350 <_getpid_r>:
 800a350:	f7f8 bf16 	b.w	8003180 <_getpid>

0800a354 <atan2>:
 800a354:	f000 b908 	b.w	800a568 <__ieee754_atan2>

0800a358 <sqrt>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	ed2d 8b02 	vpush	{d8}
 800a35e:	ec55 4b10 	vmov	r4, r5, d0
 800a362:	f000 f825 	bl	800a3b0 <__ieee754_sqrt>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	4620      	mov	r0, r4
 800a36c:	4629      	mov	r1, r5
 800a36e:	eeb0 8a40 	vmov.f32	s16, s0
 800a372:	eef0 8a60 	vmov.f32	s17, s1
 800a376:	f7f6 fbe9 	bl	8000b4c <__aeabi_dcmpun>
 800a37a:	b990      	cbnz	r0, 800a3a2 <sqrt+0x4a>
 800a37c:	2200      	movs	r2, #0
 800a37e:	2300      	movs	r3, #0
 800a380:	4620      	mov	r0, r4
 800a382:	4629      	mov	r1, r5
 800a384:	f7f6 fbba 	bl	8000afc <__aeabi_dcmplt>
 800a388:	b158      	cbz	r0, 800a3a2 <sqrt+0x4a>
 800a38a:	f7fe f831 	bl	80083f0 <__errno>
 800a38e:	2321      	movs	r3, #33	@ 0x21
 800a390:	6003      	str	r3, [r0, #0]
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	4610      	mov	r0, r2
 800a398:	4619      	mov	r1, r3
 800a39a:	f7f6 fa67 	bl	800086c <__aeabi_ddiv>
 800a39e:	ec41 0b18 	vmov	d8, r0, r1
 800a3a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a6:	eef0 0a68 	vmov.f32	s1, s17
 800a3aa:	ecbd 8b02 	vpop	{d8}
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}

0800a3b0 <__ieee754_sqrt>:
 800a3b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	4a68      	ldr	r2, [pc, #416]	@ (800a558 <__ieee754_sqrt+0x1a8>)
 800a3b6:	ec55 4b10 	vmov	r4, r5, d0
 800a3ba:	43aa      	bics	r2, r5
 800a3bc:	462b      	mov	r3, r5
 800a3be:	4621      	mov	r1, r4
 800a3c0:	d110      	bne.n	800a3e4 <__ieee754_sqrt+0x34>
 800a3c2:	4622      	mov	r2, r4
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 f926 	bl	8000618 <__aeabi_dmul>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f7f5 ff6a 	bl	80002ac <__adddf3>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	ec45 4b10 	vmov	d0, r4, r5
 800a3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	dc0e      	bgt.n	800a406 <__ieee754_sqrt+0x56>
 800a3e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a3ec:	4322      	orrs	r2, r4
 800a3ee:	d0f5      	beq.n	800a3dc <__ieee754_sqrt+0x2c>
 800a3f0:	b19d      	cbz	r5, 800a41a <__ieee754_sqrt+0x6a>
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f5 ff56 	bl	80002a8 <__aeabi_dsub>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	f7f6 fa34 	bl	800086c <__aeabi_ddiv>
 800a404:	e7e8      	b.n	800a3d8 <__ieee754_sqrt+0x28>
 800a406:	152a      	asrs	r2, r5, #20
 800a408:	d115      	bne.n	800a436 <__ieee754_sqrt+0x86>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e009      	b.n	800a422 <__ieee754_sqrt+0x72>
 800a40e:	0acb      	lsrs	r3, r1, #11
 800a410:	3a15      	subs	r2, #21
 800a412:	0549      	lsls	r1, r1, #21
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0fa      	beq.n	800a40e <__ieee754_sqrt+0x5e>
 800a418:	e7f7      	b.n	800a40a <__ieee754_sqrt+0x5a>
 800a41a:	462a      	mov	r2, r5
 800a41c:	e7fa      	b.n	800a414 <__ieee754_sqrt+0x64>
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	3001      	adds	r0, #1
 800a422:	02dc      	lsls	r4, r3, #11
 800a424:	d5fb      	bpl.n	800a41e <__ieee754_sqrt+0x6e>
 800a426:	1e44      	subs	r4, r0, #1
 800a428:	1b12      	subs	r2, r2, r4
 800a42a:	f1c0 0420 	rsb	r4, r0, #32
 800a42e:	fa21 f404 	lsr.w	r4, r1, r4
 800a432:	4323      	orrs	r3, r4
 800a434:	4081      	lsls	r1, r0
 800a436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a43a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a43e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a442:	07d2      	lsls	r2, r2, #31
 800a444:	bf5c      	itt	pl
 800a446:	005b      	lslpl	r3, r3, #1
 800a448:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a44c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a450:	bf58      	it	pl
 800a452:	0049      	lslpl	r1, r1, #1
 800a454:	2600      	movs	r6, #0
 800a456:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a45a:	106d      	asrs	r5, r5, #1
 800a45c:	0049      	lsls	r1, r1, #1
 800a45e:	2016      	movs	r0, #22
 800a460:	4632      	mov	r2, r6
 800a462:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a466:	1917      	adds	r7, r2, r4
 800a468:	429f      	cmp	r7, r3
 800a46a:	bfde      	ittt	le
 800a46c:	193a      	addle	r2, r7, r4
 800a46e:	1bdb      	suble	r3, r3, r7
 800a470:	1936      	addle	r6, r6, r4
 800a472:	0fcf      	lsrs	r7, r1, #31
 800a474:	3801      	subs	r0, #1
 800a476:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a47a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a47e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a482:	d1f0      	bne.n	800a466 <__ieee754_sqrt+0xb6>
 800a484:	4604      	mov	r4, r0
 800a486:	2720      	movs	r7, #32
 800a488:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a48c:	429a      	cmp	r2, r3
 800a48e:	eb00 0e0c 	add.w	lr, r0, ip
 800a492:	db02      	blt.n	800a49a <__ieee754_sqrt+0xea>
 800a494:	d113      	bne.n	800a4be <__ieee754_sqrt+0x10e>
 800a496:	458e      	cmp	lr, r1
 800a498:	d811      	bhi.n	800a4be <__ieee754_sqrt+0x10e>
 800a49a:	f1be 0f00 	cmp.w	lr, #0
 800a49e:	eb0e 000c 	add.w	r0, lr, ip
 800a4a2:	da42      	bge.n	800a52a <__ieee754_sqrt+0x17a>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	db40      	blt.n	800a52a <__ieee754_sqrt+0x17a>
 800a4a8:	f102 0801 	add.w	r8, r2, #1
 800a4ac:	1a9b      	subs	r3, r3, r2
 800a4ae:	458e      	cmp	lr, r1
 800a4b0:	bf88      	it	hi
 800a4b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a4b6:	eba1 010e 	sub.w	r1, r1, lr
 800a4ba:	4464      	add	r4, ip
 800a4bc:	4642      	mov	r2, r8
 800a4be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a4c2:	3f01      	subs	r7, #1
 800a4c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a4c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a4d0:	d1dc      	bne.n	800a48c <__ieee754_sqrt+0xdc>
 800a4d2:	4319      	orrs	r1, r3
 800a4d4:	d01b      	beq.n	800a50e <__ieee754_sqrt+0x15e>
 800a4d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a55c <__ieee754_sqrt+0x1ac>
 800a4da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a560 <__ieee754_sqrt+0x1b0>
 800a4de:	e9da 0100 	ldrd	r0, r1, [sl]
 800a4e2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a4e6:	f7f5 fedf 	bl	80002a8 <__aeabi_dsub>
 800a4ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	f7f6 fb0b 	bl	8000b10 <__aeabi_dcmple>
 800a4fa:	b140      	cbz	r0, 800a50e <__ieee754_sqrt+0x15e>
 800a4fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a500:	e9da 0100 	ldrd	r0, r1, [sl]
 800a504:	e9db 2300 	ldrd	r2, r3, [fp]
 800a508:	d111      	bne.n	800a52e <__ieee754_sqrt+0x17e>
 800a50a:	3601      	adds	r6, #1
 800a50c:	463c      	mov	r4, r7
 800a50e:	1072      	asrs	r2, r6, #1
 800a510:	0863      	lsrs	r3, r4, #1
 800a512:	07f1      	lsls	r1, r6, #31
 800a514:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a518:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a51c:	bf48      	it	mi
 800a51e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a522:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a526:	4618      	mov	r0, r3
 800a528:	e756      	b.n	800a3d8 <__ieee754_sqrt+0x28>
 800a52a:	4690      	mov	r8, r2
 800a52c:	e7be      	b.n	800a4ac <__ieee754_sqrt+0xfc>
 800a52e:	f7f5 febd 	bl	80002ac <__adddf3>
 800a532:	e9da 8900 	ldrd	r8, r9, [sl]
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f6 fadd 	bl	8000afc <__aeabi_dcmplt>
 800a542:	b120      	cbz	r0, 800a54e <__ieee754_sqrt+0x19e>
 800a544:	1ca0      	adds	r0, r4, #2
 800a546:	bf08      	it	eq
 800a548:	3601      	addeq	r6, #1
 800a54a:	3402      	adds	r4, #2
 800a54c:	e7df      	b.n	800a50e <__ieee754_sqrt+0x15e>
 800a54e:	1c63      	adds	r3, r4, #1
 800a550:	f023 0401 	bic.w	r4, r3, #1
 800a554:	e7db      	b.n	800a50e <__ieee754_sqrt+0x15e>
 800a556:	bf00      	nop
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	200001f0 	.word	0x200001f0
 800a560:	200001e8 	.word	0x200001e8
 800a564:	00000000 	.word	0x00000000

0800a568 <__ieee754_atan2>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	ec57 6b11 	vmov	r6, r7, d1
 800a570:	4273      	negs	r3, r6
 800a572:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a6f0 <__ieee754_atan2+0x188>
 800a576:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a57a:	4333      	orrs	r3, r6
 800a57c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a580:	4543      	cmp	r3, r8
 800a582:	ec51 0b10 	vmov	r0, r1, d0
 800a586:	4635      	mov	r5, r6
 800a588:	d809      	bhi.n	800a59e <__ieee754_atan2+0x36>
 800a58a:	4244      	negs	r4, r0
 800a58c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a590:	4304      	orrs	r4, r0
 800a592:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a596:	4544      	cmp	r4, r8
 800a598:	468e      	mov	lr, r1
 800a59a:	4681      	mov	r9, r0
 800a59c:	d907      	bls.n	800a5ae <__ieee754_atan2+0x46>
 800a59e:	4632      	mov	r2, r6
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	f7f5 fe83 	bl	80002ac <__adddf3>
 800a5a6:	ec41 0b10 	vmov	d0, r0, r1
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a5b2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a5b6:	4334      	orrs	r4, r6
 800a5b8:	d103      	bne.n	800a5c2 <__ieee754_atan2+0x5a>
 800a5ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5be:	f000 b89b 	b.w	800a6f8 <atan>
 800a5c2:	17bc      	asrs	r4, r7, #30
 800a5c4:	f004 0402 	and.w	r4, r4, #2
 800a5c8:	ea53 0909 	orrs.w	r9, r3, r9
 800a5cc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a5d0:	d107      	bne.n	800a5e2 <__ieee754_atan2+0x7a>
 800a5d2:	2c02      	cmp	r4, #2
 800a5d4:	d05f      	beq.n	800a696 <__ieee754_atan2+0x12e>
 800a5d6:	2c03      	cmp	r4, #3
 800a5d8:	d1e5      	bne.n	800a5a6 <__ieee754_atan2+0x3e>
 800a5da:	a141      	add	r1, pc, #260	@ (adr r1, 800a6e0 <__ieee754_atan2+0x178>)
 800a5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5e0:	e7e1      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a5e2:	4315      	orrs	r5, r2
 800a5e4:	d106      	bne.n	800a5f4 <__ieee754_atan2+0x8c>
 800a5e6:	f1be 0f00 	cmp.w	lr, #0
 800a5ea:	da5f      	bge.n	800a6ac <__ieee754_atan2+0x144>
 800a5ec:	a13e      	add	r1, pc, #248	@ (adr r1, 800a6e8 <__ieee754_atan2+0x180>)
 800a5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f2:	e7d8      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a5f4:	4542      	cmp	r2, r8
 800a5f6:	d10f      	bne.n	800a618 <__ieee754_atan2+0xb0>
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5fe:	d107      	bne.n	800a610 <__ieee754_atan2+0xa8>
 800a600:	2c02      	cmp	r4, #2
 800a602:	d84c      	bhi.n	800a69e <__ieee754_atan2+0x136>
 800a604:	4b34      	ldr	r3, [pc, #208]	@ (800a6d8 <__ieee754_atan2+0x170>)
 800a606:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a60a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a60e:	e7ca      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a610:	2c02      	cmp	r4, #2
 800a612:	d848      	bhi.n	800a6a6 <__ieee754_atan2+0x13e>
 800a614:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <__ieee754_atan2+0x174>)
 800a616:	e7f6      	b.n	800a606 <__ieee754_atan2+0x9e>
 800a618:	4543      	cmp	r3, r8
 800a61a:	d0e4      	beq.n	800a5e6 <__ieee754_atan2+0x7e>
 800a61c:	1a9b      	subs	r3, r3, r2
 800a61e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a622:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a626:	da1e      	bge.n	800a666 <__ieee754_atan2+0xfe>
 800a628:	2f00      	cmp	r7, #0
 800a62a:	da01      	bge.n	800a630 <__ieee754_atan2+0xc8>
 800a62c:	323c      	adds	r2, #60	@ 0x3c
 800a62e:	db1e      	blt.n	800a66e <__ieee754_atan2+0x106>
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	f7f6 f91a 	bl	800086c <__aeabi_ddiv>
 800a638:	ec41 0b10 	vmov	d0, r0, r1
 800a63c:	f000 f9f4 	bl	800aa28 <fabs>
 800a640:	f000 f85a 	bl	800a6f8 <atan>
 800a644:	ec51 0b10 	vmov	r0, r1, d0
 800a648:	2c01      	cmp	r4, #1
 800a64a:	d013      	beq.n	800a674 <__ieee754_atan2+0x10c>
 800a64c:	2c02      	cmp	r4, #2
 800a64e:	d015      	beq.n	800a67c <__ieee754_atan2+0x114>
 800a650:	2c00      	cmp	r4, #0
 800a652:	d0a8      	beq.n	800a5a6 <__ieee754_atan2+0x3e>
 800a654:	a318      	add	r3, pc, #96	@ (adr r3, 800a6b8 <__ieee754_atan2+0x150>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f7f5 fe25 	bl	80002a8 <__aeabi_dsub>
 800a65e:	a318      	add	r3, pc, #96	@ (adr r3, 800a6c0 <__ieee754_atan2+0x158>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	e014      	b.n	800a690 <__ieee754_atan2+0x128>
 800a666:	a118      	add	r1, pc, #96	@ (adr r1, 800a6c8 <__ieee754_atan2+0x160>)
 800a668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66c:	e7ec      	b.n	800a648 <__ieee754_atan2+0xe0>
 800a66e:	2000      	movs	r0, #0
 800a670:	2100      	movs	r1, #0
 800a672:	e7e9      	b.n	800a648 <__ieee754_atan2+0xe0>
 800a674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a678:	4619      	mov	r1, r3
 800a67a:	e794      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a67c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6b8 <__ieee754_atan2+0x150>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fe11 	bl	80002a8 <__aeabi_dsub>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	a10d      	add	r1, pc, #52	@ (adr r1, 800a6c0 <__ieee754_atan2+0x158>)
 800a68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a690:	f7f5 fe0a 	bl	80002a8 <__aeabi_dsub>
 800a694:	e787      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a696:	a10a      	add	r1, pc, #40	@ (adr r1, 800a6c0 <__ieee754_atan2+0x158>)
 800a698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a69c:	e783      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a69e:	a10c      	add	r1, pc, #48	@ (adr r1, 800a6d0 <__ieee754_atan2+0x168>)
 800a6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a4:	e77f      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	e77c      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a6ac:	a106      	add	r1, pc, #24	@ (adr r1, 800a6c8 <__ieee754_atan2+0x160>)
 800a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b2:	e778      	b.n	800a5a6 <__ieee754_atan2+0x3e>
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	33145c07 	.word	0x33145c07
 800a6bc:	3ca1a626 	.word	0x3ca1a626
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	400921fb 	.word	0x400921fb
 800a6c8:	54442d18 	.word	0x54442d18
 800a6cc:	3ff921fb 	.word	0x3ff921fb
 800a6d0:	54442d18 	.word	0x54442d18
 800a6d4:	3fe921fb 	.word	0x3fe921fb
 800a6d8:	0800b060 	.word	0x0800b060
 800a6dc:	0800b048 	.word	0x0800b048
 800a6e0:	54442d18 	.word	0x54442d18
 800a6e4:	c00921fb 	.word	0xc00921fb
 800a6e8:	54442d18 	.word	0x54442d18
 800a6ec:	bff921fb 	.word	0xbff921fb
 800a6f0:	7ff00000 	.word	0x7ff00000
 800a6f4:	00000000 	.word	0x00000000

0800a6f8 <atan>:
 800a6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ec55 4b10 	vmov	r4, r5, d0
 800a700:	4bbf      	ldr	r3, [pc, #764]	@ (800aa00 <atan+0x308>)
 800a702:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a706:	429e      	cmp	r6, r3
 800a708:	46ab      	mov	fp, r5
 800a70a:	d918      	bls.n	800a73e <atan+0x46>
 800a70c:	4bbd      	ldr	r3, [pc, #756]	@ (800aa04 <atan+0x30c>)
 800a70e:	429e      	cmp	r6, r3
 800a710:	d801      	bhi.n	800a716 <atan+0x1e>
 800a712:	d109      	bne.n	800a728 <atan+0x30>
 800a714:	b144      	cbz	r4, 800a728 <atan+0x30>
 800a716:	4622      	mov	r2, r4
 800a718:	462b      	mov	r3, r5
 800a71a:	4620      	mov	r0, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	f7f5 fdc5 	bl	80002ac <__adddf3>
 800a722:	4604      	mov	r4, r0
 800a724:	460d      	mov	r5, r1
 800a726:	e006      	b.n	800a736 <atan+0x3e>
 800a728:	f1bb 0f00 	cmp.w	fp, #0
 800a72c:	f340 812b 	ble.w	800a986 <atan+0x28e>
 800a730:	a597      	add	r5, pc, #604	@ (adr r5, 800a990 <atan+0x298>)
 800a732:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a736:	ec45 4b10 	vmov	d0, r4, r5
 800a73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73e:	4bb2      	ldr	r3, [pc, #712]	@ (800aa08 <atan+0x310>)
 800a740:	429e      	cmp	r6, r3
 800a742:	d813      	bhi.n	800a76c <atan+0x74>
 800a744:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a748:	429e      	cmp	r6, r3
 800a74a:	d80c      	bhi.n	800a766 <atan+0x6e>
 800a74c:	a392      	add	r3, pc, #584	@ (adr r3, 800a998 <atan+0x2a0>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	4620      	mov	r0, r4
 800a754:	4629      	mov	r1, r5
 800a756:	f7f5 fda9 	bl	80002ac <__adddf3>
 800a75a:	4bac      	ldr	r3, [pc, #688]	@ (800aa0c <atan+0x314>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	f7f6 f9eb 	bl	8000b38 <__aeabi_dcmpgt>
 800a762:	2800      	cmp	r0, #0
 800a764:	d1e7      	bne.n	800a736 <atan+0x3e>
 800a766:	f04f 3aff 	mov.w	sl, #4294967295
 800a76a:	e029      	b.n	800a7c0 <atan+0xc8>
 800a76c:	f000 f95c 	bl	800aa28 <fabs>
 800a770:	4ba7      	ldr	r3, [pc, #668]	@ (800aa10 <atan+0x318>)
 800a772:	429e      	cmp	r6, r3
 800a774:	ec55 4b10 	vmov	r4, r5, d0
 800a778:	f200 80bc 	bhi.w	800a8f4 <atan+0x1fc>
 800a77c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a780:	429e      	cmp	r6, r3
 800a782:	f200 809e 	bhi.w	800a8c2 <atan+0x1ca>
 800a786:	4622      	mov	r2, r4
 800a788:	462b      	mov	r3, r5
 800a78a:	4620      	mov	r0, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	f7f5 fd8d 	bl	80002ac <__adddf3>
 800a792:	4b9e      	ldr	r3, [pc, #632]	@ (800aa0c <atan+0x314>)
 800a794:	2200      	movs	r2, #0
 800a796:	f7f5 fd87 	bl	80002a8 <__aeabi_dsub>
 800a79a:	2200      	movs	r2, #0
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 fd80 	bl	80002ac <__adddf3>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f6 f85a 	bl	800086c <__aeabi_ddiv>
 800a7b8:	f04f 0a00 	mov.w	sl, #0
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f5 ff26 	bl	8000618 <__aeabi_dmul>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	f7f5 ff20 	bl	8000618 <__aeabi_dmul>
 800a7d8:	a371      	add	r3, pc, #452	@ (adr r3, 800a9a0 <atan+0x2a8>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	f7f5 ff19 	bl	8000618 <__aeabi_dmul>
 800a7e6:	a370      	add	r3, pc, #448	@ (adr r3, 800a9a8 <atan+0x2b0>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fd5e 	bl	80002ac <__adddf3>
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	f7f5 ff10 	bl	8000618 <__aeabi_dmul>
 800a7f8:	a36d      	add	r3, pc, #436	@ (adr r3, 800a9b0 <atan+0x2b8>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f5 fd55 	bl	80002ac <__adddf3>
 800a802:	4632      	mov	r2, r6
 800a804:	463b      	mov	r3, r7
 800a806:	f7f5 ff07 	bl	8000618 <__aeabi_dmul>
 800a80a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9b8 <atan+0x2c0>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f7f5 fd4c 	bl	80002ac <__adddf3>
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	f7f5 fefe 	bl	8000618 <__aeabi_dmul>
 800a81c:	a368      	add	r3, pc, #416	@ (adr r3, 800a9c0 <atan+0x2c8>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	f7f5 fd43 	bl	80002ac <__adddf3>
 800a826:	4632      	mov	r2, r6
 800a828:	463b      	mov	r3, r7
 800a82a:	f7f5 fef5 	bl	8000618 <__aeabi_dmul>
 800a82e:	a366      	add	r3, pc, #408	@ (adr r3, 800a9c8 <atan+0x2d0>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f7f5 fd3a 	bl	80002ac <__adddf3>
 800a838:	4642      	mov	r2, r8
 800a83a:	464b      	mov	r3, r9
 800a83c:	f7f5 feec 	bl	8000618 <__aeabi_dmul>
 800a840:	a363      	add	r3, pc, #396	@ (adr r3, 800a9d0 <atan+0x2d8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	4680      	mov	r8, r0
 800a848:	4689      	mov	r9, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fee3 	bl	8000618 <__aeabi_dmul>
 800a852:	a361      	add	r3, pc, #388	@ (adr r3, 800a9d8 <atan+0x2e0>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 fd26 	bl	80002a8 <__aeabi_dsub>
 800a85c:	4632      	mov	r2, r6
 800a85e:	463b      	mov	r3, r7
 800a860:	f7f5 feda 	bl	8000618 <__aeabi_dmul>
 800a864:	a35e      	add	r3, pc, #376	@ (adr r3, 800a9e0 <atan+0x2e8>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f7f5 fd1d 	bl	80002a8 <__aeabi_dsub>
 800a86e:	4632      	mov	r2, r6
 800a870:	463b      	mov	r3, r7
 800a872:	f7f5 fed1 	bl	8000618 <__aeabi_dmul>
 800a876:	a35c      	add	r3, pc, #368	@ (adr r3, 800a9e8 <atan+0x2f0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fd14 	bl	80002a8 <__aeabi_dsub>
 800a880:	4632      	mov	r2, r6
 800a882:	463b      	mov	r3, r7
 800a884:	f7f5 fec8 	bl	8000618 <__aeabi_dmul>
 800a888:	a359      	add	r3, pc, #356	@ (adr r3, 800a9f0 <atan+0x2f8>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fd0b 	bl	80002a8 <__aeabi_dsub>
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 febf 	bl	8000618 <__aeabi_dmul>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f5 fd03 	bl	80002ac <__adddf3>
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	f7f5 feb5 	bl	8000618 <__aeabi_dmul>
 800a8ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	d148      	bne.n	800a94a <atan+0x252>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f7f5 fcf4 	bl	80002a8 <__aeabi_dsub>
 800a8c0:	e72f      	b.n	800a722 <atan+0x2a>
 800a8c2:	4b52      	ldr	r3, [pc, #328]	@ (800aa0c <atan+0x314>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	f7f5 fced 	bl	80002a8 <__aeabi_dsub>
 800a8ce:	4b4f      	ldr	r3, [pc, #316]	@ (800aa0c <atan+0x314>)
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	460f      	mov	r7, r1
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f5 fce7 	bl	80002ac <__adddf3>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 ffc1 	bl	800086c <__aeabi_ddiv>
 800a8ea:	f04f 0a01 	mov.w	sl, #1
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	e765      	b.n	800a7c0 <atan+0xc8>
 800a8f4:	4b47      	ldr	r3, [pc, #284]	@ (800aa14 <atan+0x31c>)
 800a8f6:	429e      	cmp	r6, r3
 800a8f8:	d21c      	bcs.n	800a934 <atan+0x23c>
 800a8fa:	4b47      	ldr	r3, [pc, #284]	@ (800aa18 <atan+0x320>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f5 fcd1 	bl	80002a8 <__aeabi_dsub>
 800a906:	4b44      	ldr	r3, [pc, #272]	@ (800aa18 <atan+0x320>)
 800a908:	4606      	mov	r6, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	2200      	movs	r2, #0
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 fe81 	bl	8000618 <__aeabi_dmul>
 800a916:	4b3d      	ldr	r3, [pc, #244]	@ (800aa0c <atan+0x314>)
 800a918:	2200      	movs	r2, #0
 800a91a:	f7f5 fcc7 	bl	80002ac <__adddf3>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4630      	mov	r0, r6
 800a924:	4639      	mov	r1, r7
 800a926:	f7f5 ffa1 	bl	800086c <__aeabi_ddiv>
 800a92a:	f04f 0a02 	mov.w	sl, #2
 800a92e:	4604      	mov	r4, r0
 800a930:	460d      	mov	r5, r1
 800a932:	e745      	b.n	800a7c0 <atan+0xc8>
 800a934:	4622      	mov	r2, r4
 800a936:	462b      	mov	r3, r5
 800a938:	4938      	ldr	r1, [pc, #224]	@ (800aa1c <atan+0x324>)
 800a93a:	2000      	movs	r0, #0
 800a93c:	f7f5 ff96 	bl	800086c <__aeabi_ddiv>
 800a940:	f04f 0a03 	mov.w	sl, #3
 800a944:	4604      	mov	r4, r0
 800a946:	460d      	mov	r5, r1
 800a948:	e73a      	b.n	800a7c0 <atan+0xc8>
 800a94a:	4b35      	ldr	r3, [pc, #212]	@ (800aa20 <atan+0x328>)
 800a94c:	4e35      	ldr	r6, [pc, #212]	@ (800aa24 <atan+0x32c>)
 800a94e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fca7 	bl	80002a8 <__aeabi_dsub>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fca3 	bl	80002a8 <__aeabi_dsub>
 800a962:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a96e:	f7f5 fc9b 	bl	80002a8 <__aeabi_dsub>
 800a972:	f1bb 0f00 	cmp.w	fp, #0
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	f6bf aedc 	bge.w	800a736 <atan+0x3e>
 800a97e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a982:	461d      	mov	r5, r3
 800a984:	e6d7      	b.n	800a736 <atan+0x3e>
 800a986:	a51c      	add	r5, pc, #112	@ (adr r5, 800a9f8 <atan+0x300>)
 800a988:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a98c:	e6d3      	b.n	800a736 <atan+0x3e>
 800a98e:	bf00      	nop
 800a990:	54442d18 	.word	0x54442d18
 800a994:	3ff921fb 	.word	0x3ff921fb
 800a998:	8800759c 	.word	0x8800759c
 800a99c:	7e37e43c 	.word	0x7e37e43c
 800a9a0:	e322da11 	.word	0xe322da11
 800a9a4:	3f90ad3a 	.word	0x3f90ad3a
 800a9a8:	24760deb 	.word	0x24760deb
 800a9ac:	3fa97b4b 	.word	0x3fa97b4b
 800a9b0:	a0d03d51 	.word	0xa0d03d51
 800a9b4:	3fb10d66 	.word	0x3fb10d66
 800a9b8:	c54c206e 	.word	0xc54c206e
 800a9bc:	3fb745cd 	.word	0x3fb745cd
 800a9c0:	920083ff 	.word	0x920083ff
 800a9c4:	3fc24924 	.word	0x3fc24924
 800a9c8:	5555550d 	.word	0x5555550d
 800a9cc:	3fd55555 	.word	0x3fd55555
 800a9d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a9d4:	bfa2b444 	.word	0xbfa2b444
 800a9d8:	52defd9a 	.word	0x52defd9a
 800a9dc:	3fadde2d 	.word	0x3fadde2d
 800a9e0:	af749a6d 	.word	0xaf749a6d
 800a9e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a9e8:	fe231671 	.word	0xfe231671
 800a9ec:	3fbc71c6 	.word	0x3fbc71c6
 800a9f0:	9998ebc4 	.word	0x9998ebc4
 800a9f4:	3fc99999 	.word	0x3fc99999
 800a9f8:	54442d18 	.word	0x54442d18
 800a9fc:	bff921fb 	.word	0xbff921fb
 800aa00:	440fffff 	.word	0x440fffff
 800aa04:	7ff00000 	.word	0x7ff00000
 800aa08:	3fdbffff 	.word	0x3fdbffff
 800aa0c:	3ff00000 	.word	0x3ff00000
 800aa10:	3ff2ffff 	.word	0x3ff2ffff
 800aa14:	40038000 	.word	0x40038000
 800aa18:	3ff80000 	.word	0x3ff80000
 800aa1c:	bff00000 	.word	0xbff00000
 800aa20:	0800b078 	.word	0x0800b078
 800aa24:	0800b098 	.word	0x0800b098

0800aa28 <fabs>:
 800aa28:	ec51 0b10 	vmov	r0, r1, d0
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa32:	ec43 2b10 	vmov	d0, r2, r3
 800aa36:	4770      	bx	lr

0800aa38 <_init>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr

0800aa44 <_fini>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr
