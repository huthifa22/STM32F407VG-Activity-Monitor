
Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08008e58  08008e58  00009e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009320  08009320  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009320  08009320  0000a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009328  08009328  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009328  08009328  0000a328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800932c  0800932c  0000a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009330  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e0  2**0
                  CONTENTS
 10 .bss          000005bc  200001e0  200001e0  0000b1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  0000b1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010119  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b6  00000000  00000000  0001b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  0001dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  0001eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023718  00000000  00000000  0001f627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d97  00000000  00000000  00042d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3fbc  00000000  00000000  00054ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128a92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de4  00000000  00000000  00128ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  0012d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e3c 	.word	0x08008e3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008e3c 	.word	0x08008e3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LiquidCrystal_I2C_Init>:
#include "LiquidCrystal_I2C.h"

void LiquidCrystal_I2C_Init(LiquidCrystal_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t cols, uint8_t rows) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	71bb      	strb	r3, [r7, #6]
    lcd->hi2c = hi2c;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	601a      	str	r2, [r3, #0]
    lcd->Address = address << 1;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	711a      	strb	r2, [r3, #4]
    lcd->Cols = cols;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	715a      	strb	r2, [r3, #5]
    lcd->Rows = rows;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	7e3a      	ldrb	r2, [r7, #24]
 8000ec8:	719a      	strb	r2, [r3, #6]
    lcd->BacklightVal = LCD_BACKLIGHT;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	71da      	strb	r2, [r3, #7]
    lcd->DisplayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	721a      	strb	r2, [r3, #8]
    if (rows > 1) {
 8000ed6:	7e3b      	ldrb	r3, [r7, #24]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d906      	bls.n	8000eea <LiquidCrystal_I2C_Init+0x52>
        lcd->DisplayFunction |= LCD_2LINE;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	721a      	strb	r2, [r3, #8]
    }
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LiquidCrystal_I2C_Begin>:

void LiquidCrystal_I2C_Begin(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	4608      	mov	r0, r1
 8000f00:	4611      	mov	r1, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70bb      	strb	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
    lcd->NumLines = rows;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	78ba      	ldrb	r2, [r7, #2]
 8000f14:	72da      	strb	r2, [r3, #11]
    lcd->DisplayFunction |= charsize;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a1a      	ldrb	r2, [r3, #8]
 8000f1a:	787b      	ldrb	r3, [r7, #1]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	721a      	strb	r2, [r3, #8]

    HAL_Delay(50); // Wait for >40ms
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f001 f813 	bl	8001f50 <HAL_Delay>

    LiquidCrystal_I2C_ExpanderWrite(lcd, lcd->BacklightVal);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	79db      	ldrb	r3, [r3, #7]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f8f0 	bl	8001116 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1000);
 8000f36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f3a:	f001 f809 	bl	8001f50 <HAL_Delay>

    // Initialization sequence
    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000f3e:	2130      	movs	r1, #48	@ 0x30
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8d4 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8000f46:	2005      	movs	r0, #5
 8000f48:	f001 f802 	bl	8001f50 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000f4c:	2130      	movs	r1, #48	@ 0x30
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f8cd 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8000f54:	2005      	movs	r0, #5
 8000f56:	f000 fffb 	bl	8001f50 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000f5a:	2130      	movs	r1, #48	@ 0x30
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f8c6 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fff4 	bl	8001f50 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x02 << 4); // Finally, set to 4-bit interface
 8000f68:	2120      	movs	r1, #32
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f8bf 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>

    LiquidCrystal_I2C_Command(lcd, LCD_FUNCTIONSET | lcd->DisplayFunction);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7a1b      	ldrb	r3, [r3, #8]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f883 	bl	8001088 <LiquidCrystal_I2C_Command>

    lcd->DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2204      	movs	r2, #4
 8000f86:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Display(lcd);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f822 	bl	8000fd2 <LiquidCrystal_I2C_Display>

    LiquidCrystal_I2C_Clear(lcd);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f810 	bl	8000fb4 <LiquidCrystal_I2C_Clear>

    lcd->DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	729a      	strb	r2, [r3, #10]
    LiquidCrystal_I2C_Command(lcd, LCD_ENTRYMODESET | lcd->DisplayMode);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a9b      	ldrb	r3, [r3, #10]
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f86e 	bl	8001088 <LiquidCrystal_I2C_Command>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LiquidCrystal_I2C_Clear>:

void LiquidCrystal_I2C_Clear(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    LiquidCrystal_I2C_Command(lcd, LCD_CLEARDISPLAY);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f862 	bl	8001088 <LiquidCrystal_I2C_Command>
    HAL_Delay(2);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 ffc3 	bl	8001f50 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <LiquidCrystal_I2C_Display>:
void LiquidCrystal_I2C_NoDisplay(LiquidCrystal_I2C_HandleTypeDef *lcd) {
    lcd->DisplayControl &= ~LCD_DISPLAYON;
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void LiquidCrystal_I2C_Display(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    lcd->DisplayControl |= LCD_DISPLAYON;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a5b      	ldrb	r3, [r3, #9]
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a5b      	ldrb	r3, [r3, #9]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f847 	bl	8001088 <LiquidCrystal_I2C_Command>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <LiquidCrystal_I2C_SetCursor>:
    for (int i = 0; i < 8; i++) {
        LiquidCrystal_I2C_Send(lcd, charmap[i], Rs);
    }
}

void LiquidCrystal_I2C_SetCursor(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
 8001010:	4613      	mov	r3, r2
 8001012:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <LiquidCrystal_I2C_SetCursor+0x50>)
 8001016:	60fb      	str	r3, [r7, #12]
    if (row > lcd->NumLines) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7adb      	ldrb	r3, [r3, #11]
 800101c:	78ba      	ldrb	r2, [r7, #2]
 800101e:	429a      	cmp	r2, r3
 8001020:	d903      	bls.n	800102a <LiquidCrystal_I2C_SetCursor+0x26>
        row = lcd->NumLines - 1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7adb      	ldrb	r3, [r3, #11]
 8001026:	3b01      	subs	r3, #1
 8001028:	70bb      	strb	r3, [r7, #2]
    }
    LiquidCrystal_I2C_Command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800102a:	78bb      	ldrb	r3, [r7, #2]
 800102c:	3310      	adds	r3, #16
 800102e:	443b      	add	r3, r7
 8001030:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001040:	b25b      	sxtb	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f81e 	bl	8001088 <LiquidCrystal_I2C_Command>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	54144000 	.word	0x54144000

08001058 <LiquidCrystal_I2C_Print>:

void LiquidCrystal_I2C_Print(LiquidCrystal_I2C_HandleTypeDef *lcd, const char *str) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001062:	e008      	b.n	8001076 <LiquidCrystal_I2C_Print+0x1e>
        LiquidCrystal_I2C_Send(lcd, *str++, Rs);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	603a      	str	r2, [r7, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f819 	bl	80010a8 <LiquidCrystal_I2C_Send>
    while (*str) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f2      	bne.n	8001064 <LiquidCrystal_I2C_Print+0xc>
    }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <LiquidCrystal_I2C_Command>:

void LiquidCrystal_I2C_Command(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_Send(lcd, value, 0);
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f804 	bl	80010a8 <LiquidCrystal_I2C_Send>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LiquidCrystal_I2C_Send>:

void LiquidCrystal_I2C_Send(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value, uint8_t mode) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	4613      	mov	r3, r2
 80010b6:	70bb      	strb	r3, [r7, #2]
    uint8_t highnib = value & 0xf0;
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	f023 030f 	bic.w	r3, r3, #15
 80010be:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xf0;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	73bb      	strb	r3, [r7, #14]
    LiquidCrystal_I2C_Write4Bits(lcd, (highnib) | mode);
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	78bb      	ldrb	r3, [r7, #2]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f80c 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>
    LiquidCrystal_I2C_Write4Bits(lcd, (lownib) | mode);
 80010d6:	7bba      	ldrb	r2, [r7, #14]
 80010d8:	78bb      	ldrb	r3, [r7, #2]
 80010da:	4313      	orrs	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f804 	bl	80010ee <LiquidCrystal_I2C_Write4Bits>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <LiquidCrystal_I2C_Write4Bits>:

void LiquidCrystal_I2C_Write4Bits(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, value);
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f809 	bl	8001116 <LiquidCrystal_I2C_ExpanderWrite>
    LiquidCrystal_I2C_PulseEnable(lcd, value);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f821 	bl	8001150 <LiquidCrystal_I2C_PulseEnable>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <LiquidCrystal_I2C_ExpanderWrite>:

void LiquidCrystal_I2C_ExpanderWrite(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af02      	add	r7, sp, #8
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
    uint8_t data_t[1];
    data_t[0] = _data | lcd->BacklightVal;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	79da      	ldrb	r2, [r3, #7]
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	4313      	orrs	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->Address, data_t, 1, 1000);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	791b      	ldrb	r3, [r3, #4]
 8001136:	4619      	mov	r1, r3
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	f003 f87c 	bl	8004240 <HAL_I2C_Master_Transmit>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <LiquidCrystal_I2C_PulseEnable>:

void LiquidCrystal_I2C_PulseEnable(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data | En);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffd5 	bl	8001116 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f000 feef 	bl	8001f50 <HAL_Delay>
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data & ~En);
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffca 	bl	8001116 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 fee4 	bl	8001f50 <HAL_Delay>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <bno055_writeData>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	733b      	strb	r3, [r7, #12]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	2150      	movs	r1, #80	@ 0x50
 80011b6:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <bno055_writeData+0x44>)
 80011b8:	f003 f842 	bl	8004240 <HAL_I2C_Master_Transmit>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <bno055_writeData+0x3a>
        Error_Handler("BNO055 write failed", 1);
 80011c2:	2101      	movs	r1, #1
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <bno055_writeData+0x48>)
 80011c6:	f000 fb7d 	bl	80018c4 <Error_Handler>
    }
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001fc 	.word	0x200001fc
 80011d8:	08008e58 	.word	0x08008e58

080011dc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80011ec:	1dfa      	adds	r2, r7, #7
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	2150      	movs	r1, #80	@ 0x50
 80011f8:	480f      	ldr	r0, [pc, #60]	@ (8001238 <bno055_readData+0x5c>)
 80011fa:	f003 f821 	bl	8004240 <HAL_I2C_Master_Transmit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <bno055_readData+0x30>
        Error_Handler("BNO055 read address failed", 1);
 8001204:	2101      	movs	r1, #1
 8001206:	480d      	ldr	r0, [pc, #52]	@ (800123c <bno055_readData+0x60>)
 8001208:	f000 fb5c 	bl	80018c4 <Error_Handler>
    }
    if (HAL_I2C_Master_Receive(&i2c, BNO055_I2C_ADDR << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	b29b      	uxth	r3, r3
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	2150      	movs	r1, #80	@ 0x50
 800121a:	4807      	ldr	r0, [pc, #28]	@ (8001238 <bno055_readData+0x5c>)
 800121c:	f003 f90e 	bl	800443c <HAL_I2C_Master_Receive>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <bno055_readData+0x52>
        Error_Handler("BNO055 read data failed", 1);
 8001226:	2101      	movs	r1, #1
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <bno055_readData+0x64>)
 800122a:	f000 fb4b 	bl	80018c4 <Error_Handler>
    }
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001fc 	.word	0x200001fc
 800123c:	08008e6c 	.word	0x08008e6c
 8001240:	08008e88 	.word	0x08008e88

08001244 <bno055_delay>:

void bno055_delay(int time) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fe7e 	bl	8001f50 <HAL_Delay>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4619      	mov	r1, r3
 800126a:	2007      	movs	r0, #7
 800126c:	f7ff ff90 	bl	8001190 <bno055_writeData>
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4619      	mov	r1, r3
 8001286:	203d      	movs	r0, #61	@ 0x3d
 8001288:	f7ff ff82 	bl	8001190 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001292:	2013      	movs	r0, #19
 8001294:	f7ff ffd6 	bl	8001244 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001298:	e002      	b.n	80012a0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800129a:	2007      	movs	r0, #7
 800129c:	f7ff ffd2 	bl	8001244 <bno055_delay>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ffe3 	bl	8001278 <bno055_setOperationMode>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80012ba:	200c      	movs	r0, #12
 80012bc:	f7ff ffdc 	bl	8001278 <bno055_setOperationMode>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80012c8:	2120      	movs	r1, #32
 80012ca:	203f      	movs	r0, #63	@ 0x3f
 80012cc:	f7ff ff60 	bl	8001190 <bno055_writeData>
  bno055_delay(700);
 80012d0:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80012d4:	f7ff ffb6 	bl	8001244 <bno055_delay>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  bno055_reset();
 80012e2:	f7ff ffef 	bl	80012c4 <bno055_reset>

  uint8_t id = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff73 	bl	80011dc <bno055_readData>
  if (id != BNO055_ID) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80012fa:	d004      	beq.n	8001306 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <bno055_setup+0x4c>)
 8001302:	f005 fcfd 	bl	8006d00 <iprintf>
  }
  bno055_setPage(0);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffa8 	bl	800125c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800130c:	2100      	movs	r1, #0
 800130e:	203f      	movs	r0, #63	@ 0x3f
 8001310:	f7ff ff3e 	bl	8001190 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001314:	f7ff ffc8 	bl	80012a8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f7ff ff93 	bl	8001244 <bno055_delay>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	08008ea0 	.word	0x08008ea0

0800132c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800132c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001330:	b09e      	sub	sp, #120	@ 0x78
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff8e 	bl	800125c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001344:	2b20      	cmp	r3, #32
 8001346:	d108      	bne.n	800135a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001348:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800134c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001350:	2208      	movs	r2, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff42 	bl	80011dc <bno055_readData>
 8001358:	e007      	b.n	800136a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800135a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800135e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001362:	2206      	movs	r2, #6
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff39 	bl	80011dc <bno055_readData>

  double scale = 1;
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b8b      	ldr	r3, [pc, #556]	@ (800159c <bno055_getVector+0x270>)
 8001370:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001378:	2b0e      	cmp	r3, #14
 800137a:	d109      	bne.n	8001390 <bno055_getVector+0x64>
    scale = magScale;
 800137c:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <bno055_getVector+0x274>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8bf 	bl	8000504 <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800138e:	e03e      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001394:	2b08      	cmp	r3, #8
 8001396:	d007      	beq.n	80013a8 <bno055_getVector+0x7c>
 8001398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139c:	2b28      	cmp	r3, #40	@ 0x28
 800139e:	d003      	beq.n	80013a8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80013a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013a6:	d109      	bne.n	80013bc <bno055_getVector+0x90>
    scale = accelScale;
 80013a8:	4b7e      	ldr	r3, [pc, #504]	@ (80015a4 <bno055_getVector+0x278>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8a9 	bl	8000504 <__aeabi_ui2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013ba:	e028      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80013bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013c0:	2b14      	cmp	r3, #20
 80013c2:	d109      	bne.n	80013d8 <bno055_getVector+0xac>
    scale = angularRateScale;
 80013c4:	4b78      	ldr	r3, [pc, #480]	@ (80015a8 <bno055_getVector+0x27c>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f89b 	bl	8000504 <__aeabi_ui2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013d6:	e01a      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80013d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013dc:	2b1a      	cmp	r3, #26
 80013de:	d109      	bne.n	80013f4 <bno055_getVector+0xc8>
    scale = eulerScale;
 80013e0:	4b72      	ldr	r3, [pc, #456]	@ (80015ac <bno055_getVector+0x280>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f88d 	bl	8000504 <__aeabi_ui2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80013f2:	e00c      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80013f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d108      	bne.n	800140e <bno055_getVector+0xe2>
    scale = quaScale;
 80013fc:	4b6c      	ldr	r3, [pc, #432]	@ (80015b0 <bno055_getVector+0x284>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f87f 	bl	8000504 <__aeabi_ui2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800140e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001412:	2220      	movs	r2, #32
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f005 fcfb 	bl	8006e12 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001420:	2b20      	cmp	r3, #32
 8001422:	d150      	bne.n	80014c6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001424:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f874 	bl	8000524 <__aeabi_i2d>
 800143c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001440:	f7ff fa04 	bl	800084c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800144c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21b      	sxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f860 	bl	8000524 <__aeabi_i2d>
 8001464:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001474:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001490:	f7ff f9dc 	bl	800084c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800149c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f838 	bl	8000524 <__aeabi_i2d>
 80014b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014b8:	f7ff f9c8 	bl	800084c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80014c4:	e03b      	b.n	800153e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014c6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f823 	bl	8000524 <__aeabi_i2d>
 80014de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014e2:	f7ff f9b3 	bl	800084c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800150a:	f7ff f99f 	bl	800084c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001516:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fffb 	bl	8000524 <__aeabi_i2d>
 800152e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001532:	f7ff f98b 	bl	800084c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800153e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001542:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800154e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001552:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001556:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800155a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800155e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001562:	ec49 8b14 	vmov	d4, r8, r9
 8001566:	ec45 4b15 	vmov	d5, r4, r5
 800156a:	ec41 0b16 	vmov	d6, r0, r1
 800156e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001572:	eeb0 0a44 	vmov.f32	s0, s8
 8001576:	eef0 0a64 	vmov.f32	s1, s9
 800157a:	eeb0 1a45 	vmov.f32	s2, s10
 800157e:	eef0 1a65 	vmov.f32	s3, s11
 8001582:	eeb0 2a46 	vmov.f32	s4, s12
 8001586:	eef0 2a66 	vmov.f32	s5, s13
 800158a:	eeb0 3a47 	vmov.f32	s6, s14
 800158e:	eef0 3a67 	vmov.f32	s7, s15
 8001592:	3778      	adds	r7, #120	@ 0x78
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800159a:	bf00      	nop
 800159c:	3ff00000 	.word	0x3ff00000
 80015a0:	20000006 	.word	0x20000006
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000002 	.word	0x20000002
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008

080015b4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80015b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015b8:	b090      	sub	sp, #64	@ 0x40
 80015ba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80015bc:	201a      	movs	r0, #26
 80015be:	f7ff feb5 	bl	800132c <bno055_getVector>
 80015c2:	eeb0 4a40 	vmov.f32	s8, s0
 80015c6:	eef0 4a60 	vmov.f32	s9, s1
 80015ca:	eeb0 5a41 	vmov.f32	s10, s2
 80015ce:	eef0 5a61 	vmov.f32	s11, s3
 80015d2:	eeb0 6a42 	vmov.f32	s12, s4
 80015d6:	eef0 6a62 	vmov.f32	s13, s5
 80015da:	eeb0 7a43 	vmov.f32	s14, s6
 80015de:	eef0 7a63 	vmov.f32	s15, s7
 80015e2:	ed87 4b08 	vstr	d4, [r7, #32]
 80015e6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80015ea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80015ee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80015f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80015fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001602:	ec49 8b14 	vmov	d4, r8, r9
 8001606:	ec45 4b15 	vmov	d5, r4, r5
 800160a:	ec41 0b16 	vmov	d6, r0, r1
 800160e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001612:	eeb0 0a44 	vmov.f32	s0, s8
 8001616:	eef0 0a64 	vmov.f32	s1, s9
 800161a:	eeb0 1a45 	vmov.f32	s2, s10
 800161e:	eef0 1a65 	vmov.f32	s3, s11
 8001622:	eeb0 2a46 	vmov.f32	s4, s12
 8001626:	eef0 2a66 	vmov.f32	s5, s13
 800162a:	eeb0 3a47 	vmov.f32	s6, s14
 800162e:	eef0 3a67 	vmov.f32	s7, s15
 8001632:	3740      	adds	r7, #64	@ 0x40
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800163c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001640:	f3bf 8f4f 	dsb	sy
}
 8001644:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <__NVIC_SystemReset+0x24>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800164e:	4904      	ldr	r1, [pc, #16]	@ (8001660 <__NVIC_SystemReset+0x24>)
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_SystemReset+0x28>)
 8001652:	4313      	orrs	r3, r2
 8001654:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001656:	f3bf 8f4f 	dsb	sy
}
 800165a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <__NVIC_SystemReset+0x20>
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	05fa0004 	.word	0x05fa0004

08001668 <main>:
static void MX_I2C1_Init(void);

I2C_HandleTypeDef i2c;
LiquidCrystal_I2C_HandleTypeDef lcd, lcd2;

int main(void) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b0a0      	sub	sp, #128	@ 0x80
 800166c:	af02      	add	r7, sp, #8
    HAL_Init();
 800166e:	f000 fbfd 	bl	8001e6c <HAL_Init>
    SystemClock_Config();
 8001672:	f000 f9b7 	bl	80019e4 <SystemClock_Config>
    MX_GPIO_Init();
 8001676:	f000 f985 	bl	8001984 <MX_GPIO_Init>
    MX_I2C1_Init();
 800167a:	f000 f951 	bl	8001920 <MX_I2C1_Init>

    // Initialize LCD1 at 0x27
    LiquidCrystal_I2C_Init(&lcd, &i2c, 0x27, 20, 4);
 800167e:	2304      	movs	r3, #4
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2314      	movs	r3, #20
 8001684:	2227      	movs	r2, #39	@ 0x27
 8001686:	4986      	ldr	r1, [pc, #536]	@ (80018a0 <main+0x238>)
 8001688:	4886      	ldr	r0, [pc, #536]	@ (80018a4 <main+0x23c>)
 800168a:	f7ff fc05 	bl	8000e98 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd, 20, 4, LCD_5x8DOTS);
 800168e:	2300      	movs	r3, #0
 8001690:	2204      	movs	r2, #4
 8001692:	2114      	movs	r1, #20
 8001694:	4883      	ldr	r0, [pc, #524]	@ (80018a4 <main+0x23c>)
 8001696:	f7ff fc2e 	bl	8000ef6 <LiquidCrystal_I2C_Begin>

    // Initialize LCD2 at 0x20
    LiquidCrystal_I2C_Init(&lcd2, &i2c, 0x20, 20, 4);
 800169a:	2304      	movs	r3, #4
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2314      	movs	r3, #20
 80016a0:	2220      	movs	r2, #32
 80016a2:	497f      	ldr	r1, [pc, #508]	@ (80018a0 <main+0x238>)
 80016a4:	4880      	ldr	r0, [pc, #512]	@ (80018a8 <main+0x240>)
 80016a6:	f7ff fbf7 	bl	8000e98 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd2, 20, 4, LCD_5x8DOTS);
 80016aa:	2300      	movs	r3, #0
 80016ac:	2204      	movs	r2, #4
 80016ae:	2114      	movs	r1, #20
 80016b0:	487d      	ldr	r0, [pc, #500]	@ (80018a8 <main+0x240>)
 80016b2:	f7ff fc20 	bl	8000ef6 <LiquidCrystal_I2C_Begin>

    // Initialize BNO055
    bno055_setup();
 80016b6:	f7ff fe11 	bl	80012dc <bno055_setup>
    bno055_setOperationModeNDOF();
 80016ba:	f7ff fdfc 	bl	80012b6 <bno055_setOperationModeNDOF>

    char buffer[20];
    bno055_vector_t euler, prev_euler = {0}, diff_euler = {0};
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2220      	movs	r2, #32
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fba3 	bl	8006e12 <memset>
 80016cc:	463b      	mov	r3, r7
 80016ce:	2220      	movs	r2, #32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 fb9d 	bl	8006e12 <memset>

    while (1) {

        // Read Euler
        euler = bno055_getVectorEuler();
 80016d8:	f7ff ff6c 	bl	80015b4 <bno055_getVectorEuler>
 80016dc:	eeb0 4a40 	vmov.f32	s8, s0
 80016e0:	eef0 4a60 	vmov.f32	s9, s1
 80016e4:	eeb0 5a41 	vmov.f32	s10, s2
 80016e8:	eef0 5a61 	vmov.f32	s11, s3
 80016ec:	eeb0 6a42 	vmov.f32	s12, s4
 80016f0:	eef0 6a62 	vmov.f32	s13, s5
 80016f4:	eeb0 7a43 	vmov.f32	s14, s6
 80016f8:	eef0 7a63 	vmov.f32	s15, s7
 80016fc:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8001700:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8001704:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8001708:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

        // Check for changes
        if (euler.z != prev_euler.z || euler.y != prev_euler.y || euler.x != prev_euler.x) {
 800170c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001714:	f7ff f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d012      	beq.n	8001744 <main+0xdc>
 800171e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001722:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001726:	f7ff f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d009      	beq.n	8001744 <main+0xdc>
 8001730:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001734:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001738:	f7ff f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 80ac 	bne.w	800189c <main+0x234>
            // Calculate differences
            diff_euler.z = euler.z - prev_euler.z;
 8001744:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800174c:	f7fe fd9c 	bl	8000288 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2306 	strd	r2, r3, [r7, #24]
            diff_euler.y = euler.y - prev_euler.y;
 8001758:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800175c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001760:	f7fe fd92 	bl	8000288 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 2304 	strd	r2, r3, [r7, #16]
            diff_euler.x = euler.x - prev_euler.x;
 800176c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001774:	f7fe fd88 	bl	8000288 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 2302 	strd	r2, r3, [r7, #8]

            // Display Euler on LCD1
            LiquidCrystal_I2C_Clear(&lcd);
 8001780:	4848      	ldr	r0, [pc, #288]	@ (80018a4 <main+0x23c>)
 8001782:	f7ff fc17 	bl	8000fb4 <LiquidCrystal_I2C_Clear>
            LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	4846      	ldr	r0, [pc, #280]	@ (80018a4 <main+0x23c>)
 800178c:	f7ff fc3a 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Yaw: %.2f", euler.z);
 8001790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001794:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001798:	e9cd 2300 	strd	r2, r3, [sp]
 800179c:	4a43      	ldr	r2, [pc, #268]	@ (80018ac <main+0x244>)
 800179e:	2114      	movs	r1, #20
 80017a0:	f005 fac0 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd, buffer);
 80017a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017a8:	4619      	mov	r1, r3
 80017aa:	483e      	ldr	r0, [pc, #248]	@ (80018a4 <main+0x23c>)
 80017ac:	f7ff fc54 	bl	8001058 <LiquidCrystal_I2C_Print>

            LiquidCrystal_I2C_SetCursor(&lcd, 0, 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2100      	movs	r1, #0
 80017b4:	483b      	ldr	r0, [pc, #236]	@ (80018a4 <main+0x23c>)
 80017b6:	f7ff fc25 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Pitch: %.2f", euler.y);
 80017ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017be:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80017c2:	e9cd 2300 	strd	r2, r3, [sp]
 80017c6:	4a3a      	ldr	r2, [pc, #232]	@ (80018b0 <main+0x248>)
 80017c8:	2114      	movs	r1, #20
 80017ca:	f005 faab 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd, buffer);
 80017ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017d2:	4619      	mov	r1, r3
 80017d4:	4833      	ldr	r0, [pc, #204]	@ (80018a4 <main+0x23c>)
 80017d6:	f7ff fc3f 	bl	8001058 <LiquidCrystal_I2C_Print>

            LiquidCrystal_I2C_SetCursor(&lcd, 0, 2);
 80017da:	2202      	movs	r2, #2
 80017dc:	2100      	movs	r1, #0
 80017de:	4831      	ldr	r0, [pc, #196]	@ (80018a4 <main+0x23c>)
 80017e0:	f7ff fc10 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Roll: %.2f", euler.x);
 80017e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017e8:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80017ec:	e9cd 2300 	strd	r2, r3, [sp]
 80017f0:	4a30      	ldr	r2, [pc, #192]	@ (80018b4 <main+0x24c>)
 80017f2:	2114      	movs	r1, #20
 80017f4:	f005 fa96 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd, buffer);
 80017f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017fc:	4619      	mov	r1, r3
 80017fe:	4829      	ldr	r0, [pc, #164]	@ (80018a4 <main+0x23c>)
 8001800:	f7ff fc2a 	bl	8001058 <LiquidCrystal_I2C_Print>

            // Display differences on LCD2
            LiquidCrystal_I2C_Clear(&lcd2);
 8001804:	4828      	ldr	r0, [pc, #160]	@ (80018a8 <main+0x240>)
 8001806:	f7ff fbd5 	bl	8000fb4 <LiquidCrystal_I2C_Clear>
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	4826      	ldr	r0, [pc, #152]	@ (80018a8 <main+0x240>)
 8001810:	f7ff fbf8 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Yaw Diff: %.2f", diff_euler.z);
 8001814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001818:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800181c:	e9cd 2300 	strd	r2, r3, [sp]
 8001820:	4a25      	ldr	r2, [pc, #148]	@ (80018b8 <main+0x250>)
 8001822:	2114      	movs	r1, #20
 8001824:	f005 fa7e 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001828:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800182c:	4619      	mov	r1, r3
 800182e:	481e      	ldr	r0, [pc, #120]	@ (80018a8 <main+0x240>)
 8001830:	f7ff fc12 	bl	8001058 <LiquidCrystal_I2C_Print>

            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	2100      	movs	r1, #0
 8001838:	481b      	ldr	r0, [pc, #108]	@ (80018a8 <main+0x240>)
 800183a:	f7ff fbe3 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Pitch Diff: %.2f", diff_euler.y);
 800183e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001842:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001846:	e9cd 2300 	strd	r2, r3, [sp]
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <main+0x254>)
 800184c:	2114      	movs	r1, #20
 800184e:	f005 fa69 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001852:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001856:	4619      	mov	r1, r3
 8001858:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <main+0x240>)
 800185a:	f7ff fbfd 	bl	8001058 <LiquidCrystal_I2C_Print>

            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 2);
 800185e:	2202      	movs	r2, #2
 8001860:	2100      	movs	r1, #0
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <main+0x240>)
 8001864:	f7ff fbce 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Roll Diff: %.2f", diff_euler.x);
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001870:	e9cd 2300 	strd	r2, r3, [sp]
 8001874:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <main+0x258>)
 8001876:	2114      	movs	r1, #20
 8001878:	f005 fa54 	bl	8006d24 <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 800187c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001880:	4619      	mov	r1, r3
 8001882:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <main+0x240>)
 8001884:	f7ff fbe8 	bl	8001058 <LiquidCrystal_I2C_Print>

            prev_euler = euler;
 8001888:	f107 0420 	add.w	r4, r7, #32
 800188c:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        euler = bno055_getVectorEuler();
 800189c:	e71c      	b.n	80016d8 <main+0x70>
 800189e:	bf00      	nop
 80018a0:	200001fc 	.word	0x200001fc
 80018a4:	20000250 	.word	0x20000250
 80018a8:	2000025c 	.word	0x2000025c
 80018ac:	08008edc 	.word	0x08008edc
 80018b0:	08008ee8 	.word	0x08008ee8
 80018b4:	08008ef4 	.word	0x08008ef4
 80018b8:	08008f00 	.word	0x08008f00
 80018bc:	08008f10 	.word	0x08008f10
 80018c0:	08008f24 	.word	0x08008f24

080018c4 <Error_Handler>:
        }
    }
}

void Error_Handler(char *errorMessage, int lcdNumber) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    if (lcdNumber == 1) {
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10c      	bne.n	80018ee <Error_Handler+0x2a>
        LiquidCrystal_I2C_Clear(&lcd);
 80018d4:	4810      	ldr	r0, [pc, #64]	@ (8001918 <Error_Handler+0x54>)
 80018d6:	f7ff fb6d 	bl	8000fb4 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	480e      	ldr	r0, [pc, #56]	@ (8001918 <Error_Handler+0x54>)
 80018e0:	f7ff fb90 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd, errorMessage);
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	480c      	ldr	r0, [pc, #48]	@ (8001918 <Error_Handler+0x54>)
 80018e8:	f7ff fbb6 	bl	8001058 <LiquidCrystal_I2C_Print>
 80018ec:	e00e      	b.n	800190c <Error_Handler+0x48>
    } else if (lcdNumber == 2) {
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d10b      	bne.n	800190c <Error_Handler+0x48>
        LiquidCrystal_I2C_Clear(&lcd2);
 80018f4:	4809      	ldr	r0, [pc, #36]	@ (800191c <Error_Handler+0x58>)
 80018f6:	f7ff fb5d 	bl	8000fb4 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	4807      	ldr	r0, [pc, #28]	@ (800191c <Error_Handler+0x58>)
 8001900:	f7ff fb80 	bl	8001004 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd2, errorMessage);
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <Error_Handler+0x58>)
 8001908:	f7ff fba6 	bl	8001058 <LiquidCrystal_I2C_Print>
    }
    HAL_Delay(2000);
 800190c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001910:	f000 fb1e 	bl	8001f50 <HAL_Delay>
    NVIC_SystemReset();
 8001914:	f7ff fe92 	bl	800163c <__NVIC_SystemReset>
 8001918:	20000250 	.word	0x20000250
 800191c:	2000025c 	.word	0x2000025c

08001920 <MX_I2C1_Init>:
}

// I2C Configuration
static void MX_I2C1_Init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    i2c.Instance = I2C1;
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001926:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <MX_I2C1_Init+0x58>)
 8001928:	601a      	str	r2, [r3, #0]
    i2c.Init.ClockSpeed = 100000;
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <MX_I2C1_Init+0x54>)
 800192c:	4a13      	ldr	r2, [pc, #76]	@ (800197c <MX_I2C1_Init+0x5c>)
 800192e:	605a      	str	r2, [r3, #4]
    i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    i2c.Init.OwnAddress1 = 0;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <MX_I2C1_Init+0x54>)
 800193e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001942:	611a      	str	r2, [r3, #16]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2 = 0;
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <MX_I2C1_Init+0x54>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&i2c) != HAL_OK) {
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_I2C1_Init+0x54>)
 800195e:	f002 fb2b 	bl	8003fb8 <HAL_I2C_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <MX_I2C1_Init+0x50>
        Error_Handler("I2C Initialization Failed", 1);
 8001968:	2101      	movs	r1, #1
 800196a:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_I2C1_Init+0x60>)
 800196c:	f7ff ffaa 	bl	80018c4 <Error_Handler>
    }
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200001fc 	.word	0x200001fc
 8001978:	40005400 	.word	0x40005400
 800197c:	000186a0 	.word	0x000186a0
 8001980:	08008f34 	.word	0x08008f34

08001984 <MX_GPIO_Init>:

// SCL = PB6 and SDA = PB7 configurations
static void MX_GPIO_Init(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_GPIO_Init+0x58>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <MX_GPIO_Init+0x58>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <MX_GPIO_Init+0x58>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80019b4:	23c0      	movs	r3, #192	@ 0xc0
 80019b6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c4:	2304      	movs	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <MX_GPIO_Init+0x5c>)
 80019ce:	f000 fbc9 	bl	8002164 <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400

080019e4 <SystemClock_Config>:

// Sys Clock Configurations
void SystemClock_Config(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b092      	sub	sp, #72	@ 0x48
 80019e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 0318 	add.w	r3, r7, #24
 80019ee:	2230      	movs	r2, #48	@ 0x30
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f005 fa0d 	bl	8006e12 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <SystemClock_Config+0xb4>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <SystemClock_Config+0xb4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <SystemClock_Config+0xb4>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a2a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001a36:	2308      	movs	r3, #8
 8001a38:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001a3a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a44:	2307      	movs	r3, #7
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 faad 	bl	8004fac <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <SystemClock_Config+0x7c>
        Error_Handler("RCC Oscillator Configuration Failed", 2);
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4810      	ldr	r0, [pc, #64]	@ (8001a9c <SystemClock_Config+0xb8>)
 8001a5c:	f7ff ff32 	bl	80018c4 <Error_Handler>
    }
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a60:	230f      	movs	r3, #15
 8001a62:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a70:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fd0d 	bl	800549c <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <SystemClock_Config+0xac>
        Error_Handler("RCC Clock Configuration Failed", 2);
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <SystemClock_Config+0xbc>)
 8001a8c:	f7ff ff1a 	bl	80018c4 <Error_Handler>
    }
}
 8001a90:	bf00      	nop
 8001a92:	3748      	adds	r7, #72	@ 0x48
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08008f50 	.word	0x08008f50
 8001aa0:	08008f74 	.word	0x08008f74

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	f000 fb0a 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_I2C_MspInit+0xa4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d13b      	bne.n	8001b8e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b32:	2340      	movs	r3, #64	@ 0x40
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b36:	2312      	movs	r3, #18
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b42:	2304      	movs	r3, #4
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <HAL_I2C_MspInit+0xac>)
 8001b4e:	f000 fb09 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b56:	2312      	movs	r3, #18
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b62:	2304      	movs	r3, #4
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <HAL_I2C_MspInit+0xac>)
 8001b6e:	f000 faf9 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_I2C_MspInit+0xa8>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f989 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <OTG_FS_IRQHandler+0x10>)
 8001c0a:	f000 fc47 	bl	800249c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000270 	.word	0x20000270

08001c18 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <ITM_SendChar+0x48>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0e      	ldr	r2, [pc, #56]	@ (8001c60 <ITM_SendChar+0x48>)
 8001c28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <ITM_SendChar+0x4c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <ITM_SendChar+0x4c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001c3a:	bf00      	nop
 8001c3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f8      	beq.n	8001c3c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001c4a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000edfc 	.word	0xe000edfc
 8001c64:	e0000e00 	.word	0xe0000e00

08001c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_kill>:

int _kill(int pid, int sig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c82:	f005 f929 	bl	8006ed8 <__errno>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2216      	movs	r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffe7 	bl	8001c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001caa:	bf00      	nop
 8001cac:	e7fd      	b.n	8001caa <_exit+0x12>

08001cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e00a      	b.n	8001cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc0:	f3af 8000 	nop.w
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf0      	blt.n	8001cc0 <_read+0x12>
  }

  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e009      	b.n	8001d0e <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff88 	bl	8001c18 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf1      	blt.n	8001cfa <_write+0x12>
  }
  return len;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_close>:

int _close(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d48:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f005 f88e 	bl	8006ed8 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20020000 	.word	0x20020000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000268 	.word	0x20000268
 8001df0:	200007a0 	.word	0x200007a0

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e1c:	f7ff ffea 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	@ (8001e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e46:	f005 f84d 	bl	8006ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff fc0d 	bl	8001668 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e5c:	08009330 	.word	0x08009330
  ldr r2, =_sbss
 8001e60:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e64:	2000079c 	.word	0x2000079c

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f931 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fe00 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f93b 	bl	800214a <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 f911 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	20000010 	.word	0x20000010

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000014 	.word	0x20000014
 8001f34:	2000026c 	.word	0x2000026c

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000026c 	.word	0x2000026c

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014

08001f98 <__NVIC_SetPriorityGrouping>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_SetPriority>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	@ (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	@ (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	@ 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	@ 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff47 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e16b      	b.n	8002458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 815a 	bne.w	8002452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b4 	beq.w	8002452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b60      	ldr	r3, [pc, #384]	@ (8002470 <HAL_GPIO_Init+0x30c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002470 <HAL_GPIO_Init+0x30c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002470 <HAL_GPIO_Init+0x30c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a5b      	ldr	r2, [pc, #364]	@ (8002474 <HAL_GPIO_Init+0x310>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	@ (8002478 <HAL_GPIO_Init+0x314>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_GPIO_Init+0x318>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a50      	ldr	r2, [pc, #320]	@ (8002480 <HAL_GPIO_Init+0x31c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4f      	ldr	r2, [pc, #316]	@ (8002484 <HAL_GPIO_Init+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4e      	ldr	r2, [pc, #312]	@ (8002488 <HAL_GPIO_Init+0x324>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4d      	ldr	r2, [pc, #308]	@ (800248c <HAL_GPIO_Init+0x328>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4c      	ldr	r2, [pc, #304]	@ (8002490 <HAL_GPIO_Init+0x32c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4b      	ldr	r2, [pc, #300]	@ (8002494 <HAL_GPIO_Init+0x330>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x20a>
 800236a:	2307      	movs	r3, #7
 800236c:	e00e      	b.n	800238c <HAL_GPIO_Init+0x228>
 800236e:	2308      	movs	r3, #8
 8002370:	e00c      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002372:	2306      	movs	r3, #6
 8002374:	e00a      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002376:	2305      	movs	r3, #5
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237a:	2304      	movs	r3, #4
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x228>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	@ (8002474 <HAL_GPIO_Init+0x310>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_GPIO_Init+0x334>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a32      	ldr	r2, [pc, #200]	@ (8002498 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <HAL_GPIO_Init+0x334>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a27      	ldr	r2, [pc, #156]	@ (8002498 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_GPIO_Init+0x334>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002422:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_GPIO_Init+0x334>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f ae90 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40021400 	.word	0x40021400
 8002490:	40021800 	.word	0x40021800
 8002494:	40021c00 	.word	0x40021c00
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fb0c 	bl	8005ad0 <USB_GetMode>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 80fb 	bne.w	80026b6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 facf 	bl	8005a68 <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80f1 	beq.w	80026b4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fac6 	bl	8005a68 <USB_ReadInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024e6:	d104      	bne.n	80024f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fab6 	bl	8005a68 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002506:	d104      	bne.n	8002512 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002510:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 faa6 	bl	8005a68 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002522:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002526:	d104      	bne.n	8002532 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002530:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fa96 	bl	8005a68 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d103      	bne.n	800254e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2202      	movs	r2, #2
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fa88 	bl	8005a68 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800255e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002562:	d120      	bne.n	80025a6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800256c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800257e:	2110      	movs	r1, #16
 8002580:	6938      	ldr	r0, [r7, #16]
 8002582:	f003 f9b9 	bl	80058f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002586:	6938      	ldr	r0, [r7, #16]
 8002588:	f003 f9e8 	bl	800595c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7a5b      	ldrb	r3, [r3, #9]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d105      	bne.n	80025a0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f003 faa6 	bl	8005aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f003 fd5e 	bl	8006062 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fa5c 	bl	8005a68 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ba:	d102      	bne.n	80025c2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f001 fc87 	bl	8003ed0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fa4e 	bl	8005a68 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d106      	bne.n	80025e4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f003 fd27 	bl	800602a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fa3d 	bl	8005a68 <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025f8:	d139      	bne.n	800266e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fab1 	bl	8005b66 <USB_HC_ReadInterrupt>
 8002604:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e025      	b.n	8002658 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d018      	beq.n	8002652 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002636:	d106      	bne.n	8002646 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f859 	bl	80026f6 <HCD_HC_IN_IRQHandler>
 8002644:	e005      	b.n	8002652 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 febb 	bl	80033c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	795b      	ldrb	r3, [r3, #5]
 800265c:	461a      	mov	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4293      	cmp	r3, r2
 8002662:	d3d3      	bcc.n	800260c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f9f8 	bl	8005a68 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b10      	cmp	r3, #16
 8002680:	d101      	bne.n	8002686 <HAL_HCD_IRQHandler+0x1ea>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_HCD_IRQHandler+0x1ec>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d014      	beq.n	80026b6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0210 	bic.w	r2, r2, #16
 800269a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 fb38 	bl	8003d12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0210 	orr.w	r2, r2, #16
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	e000      	b.n	80026b6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80026b4:	bf00      	nop
    }
  }
}
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_HCD_Stop+0x16>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e00d      	b.n	80026ee <HAL_HCD_Stop+0x32>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fb72 	bl	8005dc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f003 f9ba 	bl	8005a8e <USB_ReadChInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11a      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2304      	movs	r3, #4
 8002734:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	334d      	adds	r3, #77	@ 0x4d
 8002746:	2207      	movs	r2, #7
 8002748:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fa18 	bl	8005b88 <USB_HC_Halt>
 8002758:	e09e      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 f993 	bl	8005a8e <USB_ReadChInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002772:	d11b      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002786:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334d      	adds	r3, #77	@ 0x4d
 8002798:	2208      	movs	r2, #8
 800279a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 f9ef 	bl	8005b88 <USB_HC_Halt>
 80027aa:	e075      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f96a 	bl	8005a8e <USB_ReadChInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d11a      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	2308      	movs	r3, #8
 80027d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334d      	adds	r3, #77	@ 0x4d
 80027e6:	2206      	movs	r2, #6
 80027e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 f9c8 	bl	8005b88 <USB_HC_Halt>
 80027f8:	e04e      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f943 	bl	8005a8e <USB_ReadChInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002812:	d11b      	bne.n	800284c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002826:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334d      	adds	r3, #77	@ 0x4d
 8002838:	2209      	movs	r2, #9
 800283a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f99f 	bl	8005b88 <USB_HC_Halt>
 800284a:	e025      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f003 f91a 	bl	8005a8e <USB_ReadChInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002860:	2b80      	cmp	r3, #128	@ 0x80
 8002862:	d119      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	334d      	adds	r3, #77	@ 0x4d
 8002886:	2207      	movs	r2, #7
 8002888:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f003 f978 	bl	8005b88 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 f8f4 	bl	8005a8e <USB_ReadChInterrupts>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b0:	d112      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f964 	bl	8005b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028d2:	6093      	str	r3, [r2, #8]
 80028d4:	f000 bd75 	b.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f8d4 	bl	8005a8e <USB_ReadChInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 8128 	bne.w	8002b42 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fe:	461a      	mov	r2, r3
 8002900:	2320      	movs	r3, #32
 8002902:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	331b      	adds	r3, #27
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d119      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	331b      	adds	r3, #27
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	0151      	lsls	r1, r2, #5
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	440a      	add	r2, r1
 8002944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	799b      	ldrb	r3, [r3, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01b      	beq.n	800298e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3330      	adds	r3, #48	@ 0x30
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	1ac9      	subs	r1, r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4403      	add	r3, r0
 800298a:	3338      	adds	r3, #56	@ 0x38
 800298c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334d      	adds	r3, #77	@ 0x4d
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3344      	adds	r3, #68	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2301      	movs	r3, #1
 80029c6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3326      	adds	r3, #38	@ 0x26
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3326      	adds	r3, #38	@ 0x26
 80029ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d110      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 f8c3 	bl	8005b88 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2310      	movs	r3, #16
 8002a12:	6093      	str	r3, [r2, #8]
 8002a14:	e03d      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3326      	adds	r3, #38	@ 0x26
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d00a      	beq.n	8002a42 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3326      	adds	r3, #38	@ 0x26
 8002a3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d127      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a60:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334c      	adds	r3, #76	@ 0x4c
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	334c      	adds	r3, #76	@ 0x4c
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f003 faf6 	bl	800607e <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	799b      	ldrb	r3, [r3, #6]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d13b      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3338      	adds	r3, #56	@ 0x38
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4403      	add	r3, r0
 8002aba:	3328      	adds	r3, #40	@ 0x28
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	440b      	add	r3, r1
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4403      	add	r3, r0
 8002ad0:	3328      	adds	r3, #40	@ 0x28
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8470 	beq.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	333c      	adds	r3, #60	@ 0x3c
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2d8      	uxtb	r0, r3
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	333c      	adds	r3, #60	@ 0x3c
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	f000 bc58 	b.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	333c      	adds	r3, #60	@ 0x3c
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2d8      	uxtb	r0, r3
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	333c      	adds	r3, #60	@ 0x3c
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	f000 bc40 	b.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 ff9f 	bl	8005a8e <USB_ReadChInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d131      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	2320      	movs	r3, #32
 8002b6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331a      	adds	r3, #26
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	f040 841f 	bne.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	331b      	adds	r3, #27
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	334d      	adds	r3, #77	@ 0x4d
 8002ba8:	2203      	movs	r2, #3
 8002baa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 ffe7 	bl	8005b88 <USB_HC_Halt>
 8002bba:	f000 bc02 	b.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 ff61 	bl	8005a8e <USB_ReadChInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	f040 8305 	bne.w	80031e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	2302      	movs	r3, #2
 8002be8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334d      	adds	r3, #77	@ 0x4d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d114      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334d      	adds	r3, #77	@ 0x4d
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334c      	adds	r3, #76	@ 0x4c
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e2cc      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	334d      	adds	r3, #77	@ 0x4d
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d114      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334d      	adds	r3, #77	@ 0x4d
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	@ 0x4c
 8002c64:	2205      	movs	r2, #5
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e2ac      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334d      	adds	r3, #77	@ 0x4d
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d00b      	beq.n	8002c98 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	@ 0x4d
 8002c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	f040 80a6 	bne.w	8002de4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334d      	adds	r3, #77	@ 0x4d
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3344      	adds	r3, #68	@ 0x44
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	3344      	adds	r3, #68	@ 0x44
 8002cce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3344      	adds	r3, #68	@ 0x44
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d943      	bls.n	8002d6e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	@ 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	331a      	adds	r3, #26
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d123      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	331b      	adds	r3, #27
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	331c      	adds	r3, #28
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d56:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	@ 0x4c
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d6c:	e229      	b.n	80031c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334c      	adds	r3, #76	@ 0x4c
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3326      	adds	r3, #38	@ 0x26
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3326      	adds	r3, #38	@ 0x26
 8002da8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	f040 8209 	bne.w	80031c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dc6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002de2:	e1ee      	b.n	80031c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	f040 80c8 	bne.w	8002f8c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334d      	adds	r3, #77	@ 0x4d
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331b      	adds	r3, #27
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 81ce 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3326      	adds	r3, #38	@ 0x26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d16b      	bne.n	8002f16 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3348      	adds	r3, #72	@ 0x48
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1c59      	adds	r1, r3, #1
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3348      	adds	r3, #72	@ 0x48
 8002e60:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3348      	adds	r3, #72	@ 0x48
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d943      	bls.n	8002f00 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3348      	adds	r3, #72	@ 0x48
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	331b      	adds	r3, #27
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3344      	adds	r3, #68	@ 0x44
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d809      	bhi.n	8002eca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	0151      	lsls	r1, r2, #5
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	440a      	add	r2, r1
 8002ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	334c      	adds	r3, #76	@ 0x4c
 8002efa:	2204      	movs	r2, #4
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e014      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	334c      	adds	r3, #76	@ 0x4c
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e009      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	334c      	adds	r3, #76	@ 0x4c
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3326      	adds	r3, #38	@ 0x26
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3326      	adds	r3, #38	@ 0x26
 8002f50:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 8136 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f6e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f76:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e11b      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334d      	adds	r3, #77	@ 0x4d
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	f040 8081 	bne.w	80030a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334d      	adds	r3, #77	@ 0x4d
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	331b      	adds	r3, #27
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 80fa 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	334c      	adds	r3, #76	@ 0x4c
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003002:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003022:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	440a      	add	r2, r1
 800303a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800303e:	f023 0320 	bic.w	r3, r3, #32
 8003042:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3326      	adds	r3, #38	@ 0x26
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3326      	adds	r3, #38	@ 0x26
 800306a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 80a9 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003088:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003090:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e08e      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	334d      	adds	r3, #77	@ 0x4d
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d143      	bne.n	8003144 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334d      	adds	r3, #77	@ 0x4d
 80030cc:	2202      	movs	r2, #2
 80030ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334c      	adds	r3, #76	@ 0x4c
 80030e0:	2202      	movs	r2, #2
 80030e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3326      	adds	r3, #38	@ 0x26
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3326      	adds	r3, #38	@ 0x26
 800310a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800310c:	2b02      	cmp	r3, #2
 800310e:	d159      	bne.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003126:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800312e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e03f      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b08      	cmp	r3, #8
 8003158:	d126      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	334d      	adds	r3, #77	@ 0x4d
 800316a:	2202      	movs	r2, #2
 800316c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3344      	adds	r3, #68	@ 0x44
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4403      	add	r3, r0
 800318e:	3344      	adds	r3, #68	@ 0x44
 8003190:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334c      	adds	r3, #76	@ 0x4c
 80031a2:	2204      	movs	r2, #4
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e00d      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f000 8100 	beq.w	80033c0 <HCD_HC_IN_IRQHandler+0xcca>
 80031c0:	e000      	b.n	80031c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	334c      	adds	r3, #76	@ 0x4c
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f002 ff4f 	bl	800607e <HAL_HCD_HC_NotifyURBChange_Callback>
 80031e0:	e0ef      	b.n	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fc4f 	bl	8005a8e <USB_ReadChInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d12f      	bne.n	800325a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	2340      	movs	r3, #64	@ 0x40
 800320a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	@ 0x4d
 800321c:	2205      	movs	r2, #5
 800321e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	331a      	adds	r3, #26
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3344      	adds	r3, #68	@ 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fc98 	bl	8005b88 <USB_HC_Halt>
 8003258:	e0b3      	b.n	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f002 fc13 	bl	8005a8e <USB_ReadChInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	f040 80a7 	bne.w	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3326      	adds	r3, #38	@ 0x26
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d11b      	bne.n	80032c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3344      	adds	r3, #68	@ 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	2204      	movs	r2, #4
 80032b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fc64 	bl	8005b88 <USB_HC_Halt>
 80032c0:	e03f      	b.n	8003342 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3326      	adds	r3, #38	@ 0x26
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3326      	adds	r3, #38	@ 0x26
 80032e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d129      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	@ 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	799b      	ldrb	r3, [r3, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HCD_HC_IN_IRQHandler+0xc2a>
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	331b      	adds	r3, #27
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	334d      	adds	r3, #77	@ 0x4d
 8003330:	2204      	movs	r2, #4
 8003332:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f002 fc23 	bl	8005b88 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	331b      	adds	r3, #27
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d129      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	331b      	adds	r3, #27
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	440a      	add	r2, r1
 8003382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2310      	movs	r3, #16
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	e000      	b.n	80033c2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f002 fb51 	bl	8005a8e <USB_ReadChInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d11b      	bne.n	800342e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	2304      	movs	r3, #4
 8003406:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334d      	adds	r3, #77	@ 0x4d
 8003418:	2207      	movs	r2, #7
 800341a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f002 fbaf 	bl	8005b88 <USB_HC_Halt>
 800342a:	f000 bc6f 	b.w	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fb29 	bl	8005a8e <USB_ReadChInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	f040 8082 	bne.w	800354c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	461a      	mov	r2, r3
 8003456:	2320      	movs	r3, #32
 8003458:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3319      	adds	r3, #25
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d124      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3319      	adds	r3, #25
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334c      	adds	r3, #76	@ 0x4c
 8003494:	2202      	movs	r2, #2
 8003496:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	334d      	adds	r3, #77	@ 0x4d
 80034a8:	2203      	movs	r2, #3
 80034aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fb67 	bl	8005b88 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	331a      	adds	r3, #26
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 841d 	bne.w	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	331b      	adds	r3, #27
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8411 	bne.w	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3326      	adds	r3, #38	@ 0x26
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d009      	beq.n	8003514 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331b      	adds	r3, #27
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	@ 0x4d
 8003524:	2203      	movs	r2, #3
 8003526:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f002 fb29 	bl	8005b88 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	3344      	adds	r3, #68	@ 0x44
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e3df      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f002 fa9a 	bl	8005a8e <USB_ReadChInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003564:	d111      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003578:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fb00 	bl	8005b88 <USB_HC_Halt>
 8003588:	e3c0      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f002 fa7b 	bl	8005a8e <USB_ReadChInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d168      	bne.n	8003674 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3344      	adds	r3, #68	@ 0x44
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fa65 	bl	8005a8e <USB_ReadChInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d112      	bne.n	80035f4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3319      	adds	r3, #25
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	2340      	movs	r3, #64	@ 0x40
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331b      	adds	r3, #27
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d019      	beq.n	800363e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	331b      	adds	r3, #27
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	440a      	add	r2, r1
 8003634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	2301      	movs	r3, #1
 800364e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	334d      	adds	r3, #77	@ 0x4d
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f002 fa8b 	bl	8005b88 <USB_HC_Halt>
 8003672:	e34b      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fa06 	bl	8005a8e <USB_ReadChInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d139      	bne.n	8003700 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	2205      	movs	r2, #5
 800369e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	331a      	adds	r3, #26
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3319      	adds	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3344      	adds	r3, #68	@ 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fa4e 	bl	8005b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	2340      	movs	r3, #64	@ 0x40
 80036fc:	6093      	str	r3, [r2, #8]
 80036fe:	e305      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f002 f9c0 	bl	8005a8e <USB_ReadChInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d11a      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	2308      	movs	r3, #8
 8003728:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	334d      	adds	r3, #77	@ 0x4d
 800373a:	2206      	movs	r2, #6
 800373c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fa1e 	bl	8005b88 <USB_HC_Halt>
 800374c:	e2de      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f002 f999 	bl	8005a8e <USB_ReadChInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d144      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3344      	adds	r3, #68	@ 0x44
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334d      	adds	r3, #77	@ 0x4d
 800378a:	2204      	movs	r2, #4
 800378c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3319      	adds	r3, #25
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d114      	bne.n	80037ce <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3318      	adds	r3, #24
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3319      	adds	r3, #25
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f002 f9d6 	bl	8005b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2310      	movs	r3, #16
 80037ec:	6093      	str	r3, [r2, #8]
 80037ee:	e28d      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 f948 	bl	8005a8e <USB_ReadChInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	2b80      	cmp	r3, #128	@ 0x80
 8003806:	d169      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	799b      	ldrb	r3, [r3, #6]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334d      	adds	r3, #77	@ 0x4d
 8003820:	2207      	movs	r2, #7
 8003822:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f002 f9ab 	bl	8005b88 <USB_HC_Halt>
 8003832:	e049      	b.n	80038c8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3344      	adds	r3, #68	@ 0x44
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4403      	add	r3, r0
 8003854:	3344      	adds	r3, #68	@ 0x44
 8003856:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3344      	adds	r3, #68	@ 0x44
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d922      	bls.n	80038b4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3344      	adds	r3, #68	@ 0x44
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	334c      	adds	r3, #76	@ 0x4c
 8003892:	2204      	movs	r2, #4
 8003894:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334c      	adds	r3, #76	@ 0x4c
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f002 fbe6 	bl	800607e <HAL_HCD_HC_NotifyURBChange_Callback>
 80038b2:	e009      	b.n	80038c8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	334c      	adds	r3, #76	@ 0x4c
 80038c4:	2202      	movs	r2, #2
 80038c6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d4:	461a      	mov	r2, r3
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	e217      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 f8d2 	bl	8005a8e <USB_ReadChInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f4:	d11b      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	334d      	adds	r3, #77	@ 0x4d
 8003906:	2209      	movs	r2, #9
 8003908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f002 f938 	bl	8005b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800392a:	6093      	str	r3, [r2, #8]
 800392c:	e1ee      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f002 f8a9 	bl	8005a8e <USB_ReadChInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	f040 81df 	bne.w	8003d06 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	2302      	movs	r3, #2
 8003958:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	334d      	adds	r3, #77	@ 0x4d
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	f040 8093 	bne.w	8003a98 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	334d      	adds	r3, #77	@ 0x4d
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334c      	adds	r3, #76	@ 0x4c
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3326      	adds	r3, #38	@ 0x26
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d00b      	beq.n	80039c8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3326      	adds	r3, #38	@ 0x26
 80039c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	f040 8190 	bne.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	799b      	ldrb	r3, [r3, #6]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d115      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	333d      	adds	r3, #61	@ 0x3d
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2d8      	uxtb	r0, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	333d      	adds	r3, #61	@ 0x3d
 80039f8:	4602      	mov	r2, r0
 80039fa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	799b      	ldrb	r3, [r3, #6]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 8171 	bne.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3334      	adds	r3, #52	@ 0x34
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8165 	beq.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3334      	adds	r3, #52	@ 0x34
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4403      	add	r3, r0
 8003a3e:	3328      	adds	r3, #40	@ 0x28
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	440b      	add	r3, r1
 8003a44:	1e59      	subs	r1, r3, #1
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4403      	add	r3, r0
 8003a54:	3328      	adds	r3, #40	@ 0x28
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 813f 	beq.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	333d      	adds	r3, #61	@ 0x3d
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	f083 0301 	eor.w	r3, r3, #1
 8003a82:	b2d8      	uxtb	r0, r3
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	333d      	adds	r3, #61	@ 0x3d
 8003a92:	4602      	mov	r2, r0
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e127      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334d      	adds	r3, #77	@ 0x4d
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d120      	bne.n	8003af0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	334d      	adds	r3, #77	@ 0x4d
 8003abe:	2202      	movs	r2, #2
 8003ac0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	331b      	adds	r3, #27
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 8107 	bne.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334c      	adds	r3, #76	@ 0x4c
 8003aea:	2202      	movs	r2, #2
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e0fb      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334d      	adds	r3, #77	@ 0x4d
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d13a      	bne.n	8003b7c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	334d      	adds	r3, #77	@ 0x4d
 8003b16:	2202      	movs	r2, #2
 8003b18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334c      	adds	r3, #76	@ 0x4c
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	331b      	adds	r3, #27
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 80d1 	bne.w	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	331b      	adds	r3, #27
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b78:	6053      	str	r3, [r2, #4]
 8003b7a:	e0b5      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334d      	adds	r3, #77	@ 0x4d
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d114      	bne.n	8003bbc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334c      	adds	r3, #76	@ 0x4c
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e095      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334d      	adds	r3, #77	@ 0x4d
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d114      	bne.n	8003bfc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334d      	adds	r3, #77	@ 0x4d
 8003be2:	2202      	movs	r2, #2
 8003be4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334c      	adds	r3, #76	@ 0x4c
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e075      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	334d      	adds	r3, #77	@ 0x4d
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b07      	cmp	r3, #7
 8003c10:	d00a      	beq.n	8003c28 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	334d      	adds	r3, #77	@ 0x4d
 8003c22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c24:	2b09      	cmp	r3, #9
 8003c26:	d170      	bne.n	8003d0a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	334d      	adds	r3, #77	@ 0x4d
 8003c38:	2202      	movs	r2, #2
 8003c3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3344      	adds	r3, #68	@ 0x44
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4403      	add	r3, r0
 8003c5c:	3344      	adds	r3, #68	@ 0x44
 8003c5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3344      	adds	r3, #68	@ 0x44
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d914      	bls.n	8003ca0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c9e:	e022      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	334c      	adds	r3, #76	@ 0x4c
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cd2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ce6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	334c      	adds	r3, #76	@ 0x4c
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f002 f9bd 	bl	800607e <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d04:	e002      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003d0a:	bf00      	nop
  }
}
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08a      	sub	sp, #40	@ 0x28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	0c5b      	lsrs	r3, r3, #17
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d004      	beq.n	8003d58 <HCD_RXQLVL_IRQHandler+0x46>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	f000 80b6 	beq.w	8003ec2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d56:	e0b7      	b.n	8003ec8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80b3 	beq.w	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	332c      	adds	r3, #44	@ 0x2c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a7 	beq.w	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3338      	adds	r3, #56	@ 0x38
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	18d1      	adds	r1, r2, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	3334      	adds	r3, #52	@ 0x34
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4299      	cmp	r1, r3
 8003da2:	f200 8083 	bhi.w	8003eac <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	332c      	adds	r3, #44	@ 0x2c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f001 fdf9 	bl	80059b8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	332c      	adds	r3, #44	@ 0x2c
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	18d1      	adds	r1, r2, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4403      	add	r3, r0
 8003dea:	332c      	adds	r3, #44	@ 0x2c
 8003dec:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3338      	adds	r3, #56	@ 0x38
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	18d1      	adds	r1, r2, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4403      	add	r3, r0
 8003e12:	3338      	adds	r3, #56	@ 0x38
 8003e14:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	0cdb      	lsrs	r3, r3, #19
 8003e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3328      	adds	r3, #40	@ 0x28
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d13f      	bne.n	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03c      	beq.n	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e62:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e6a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	333c      	adds	r3, #60	@ 0x3c
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2d8      	uxtb	r0, r3
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	333c      	adds	r3, #60	@ 0x3c
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	e00c      	b.n	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	334c      	adds	r3, #76	@ 0x4c
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
      break;
 8003ec0:	e001      	b.n	8003ec6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003ec6:	bf00      	nop
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3728      	adds	r7, #40	@ 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003efc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d10b      	bne.n	8003f20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f002 f897 	bl	8006046 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d132      	bne.n	8003f90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d126      	bne.n	8003f8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7a5b      	ldrb	r3, [r3, #9]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d113      	bne.n	8003f6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f4e:	d106      	bne.n	8003f5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2102      	movs	r1, #2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fdc8 	bl	8005aec <USB_InitFSLSPClkSel>
 8003f5c:	e011      	b.n	8003f82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 fdc1 	bl	8005aec <USB_InitFSLSPClkSel>
 8003f6a:	e00a      	b.n	8003f82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	79db      	ldrb	r3, [r3, #7]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f002 f889 	bl	800609a <HAL_HCD_PortEnabled_Callback>
 8003f88:	e002      	b.n	8003f90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f002 f893 	bl	80060b6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d103      	bne.n	8003fa2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 0320 	orr.w	r3, r3, #32
 8003fa0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6013      	str	r3, [r2, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e12b      	b.n	8004222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fd88 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	@ 0x24
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800400a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800401a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800401c:	f001 fc36 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8004020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4a81      	ldr	r2, [pc, #516]	@ (800422c <HAL_I2C_Init+0x274>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d807      	bhi.n	800403c <HAL_I2C_Init+0x84>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a80      	ldr	r2, [pc, #512]	@ (8004230 <HAL_I2C_Init+0x278>)
 8004030:	4293      	cmp	r3, r2
 8004032:	bf94      	ite	ls
 8004034:	2301      	movls	r3, #1
 8004036:	2300      	movhi	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e006      	b.n	800404a <HAL_I2C_Init+0x92>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a7d      	ldr	r2, [pc, #500]	@ (8004234 <HAL_I2C_Init+0x27c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	bf94      	ite	ls
 8004044:	2301      	movls	r3, #1
 8004046:	2300      	movhi	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0e7      	b.n	8004222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a78      	ldr	r2, [pc, #480]	@ (8004238 <HAL_I2C_Init+0x280>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0c9b      	lsrs	r3, r3, #18
 800405c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a6a      	ldr	r2, [pc, #424]	@ (800422c <HAL_I2C_Init+0x274>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d802      	bhi.n	800408c <HAL_I2C_Init+0xd4>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3301      	adds	r3, #1
 800408a:	e009      	b.n	80040a0 <HAL_I2C_Init+0xe8>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	4a69      	ldr	r2, [pc, #420]	@ (800423c <HAL_I2C_Init+0x284>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	3301      	adds	r3, #1
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	495c      	ldr	r1, [pc, #368]	@ (800422c <HAL_I2C_Init+0x274>)
 80040bc:	428b      	cmp	r3, r1
 80040be:	d819      	bhi.n	80040f4 <HAL_I2C_Init+0x13c>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e59      	subs	r1, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ce:	1c59      	adds	r1, r3, #1
 80040d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040d4:	400b      	ands	r3, r1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_I2C_Init+0x138>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1e59      	subs	r1, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ee:	e051      	b.n	8004194 <HAL_I2C_Init+0x1dc>
 80040f0:	2304      	movs	r3, #4
 80040f2:	e04f      	b.n	8004194 <HAL_I2C_Init+0x1dc>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d111      	bne.n	8004120 <HAL_I2C_Init+0x168>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e58      	subs	r0, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	440b      	add	r3, r1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e012      	b.n	8004146 <HAL_I2C_Init+0x18e>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e58      	subs	r0, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	0099      	lsls	r1, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	fbb0 f3f3 	udiv	r3, r0, r3
 8004136:	3301      	adds	r3, #1
 8004138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_Init+0x196>
 800414a:	2301      	movs	r3, #1
 800414c:	e022      	b.n	8004194 <HAL_I2C_Init+0x1dc>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10e      	bne.n	8004174 <HAL_I2C_Init+0x1bc>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1e58      	subs	r0, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	440b      	add	r3, r1
 8004164:	fbb0 f3f3 	udiv	r3, r0, r3
 8004168:	3301      	adds	r3, #1
 800416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004172:	e00f      	b.n	8004194 <HAL_I2C_Init+0x1dc>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1e58      	subs	r0, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	0099      	lsls	r1, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	fbb0 f3f3 	udiv	r3, r0, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	6809      	ldr	r1, [r1, #0]
 8004198:	4313      	orrs	r3, r2
 800419a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6911      	ldr	r1, [r2, #16]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68d2      	ldr	r2, [r2, #12]
 80041ce:	4311      	orrs	r1, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	000186a0 	.word	0x000186a0
 8004230:	001e847f 	.word	0x001e847f
 8004234:	003d08ff 	.word	0x003d08ff
 8004238:	431bde83 	.word	0x431bde83
 800423c:	10624dd3 	.word	0x10624dd3

08004240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	461a      	mov	r2, r3
 800424c:	460b      	mov	r3, r1
 800424e:	817b      	strh	r3, [r7, #10]
 8004250:	4613      	mov	r3, r2
 8004252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004254:	f7fd fe70 	bl	8001f38 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b20      	cmp	r3, #32
 8004264:	f040 80e0 	bne.w	8004428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2319      	movs	r3, #25
 800426e:	2201      	movs	r2, #1
 8004270:	4970      	ldr	r1, [pc, #448]	@ (8004434 <HAL_I2C_Master_Transmit+0x1f4>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fc64 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
 8004280:	e0d3      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_I2C_Master_Transmit+0x50>
 800428c:	2302      	movs	r3, #2
 800428e:	e0cc      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d007      	beq.n	80042b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2221      	movs	r2, #33	@ 0x21
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2210      	movs	r2, #16
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	893a      	ldrh	r2, [r7, #8]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a50      	ldr	r2, [pc, #320]	@ (8004438 <HAL_I2C_Master_Transmit+0x1f8>)
 80042f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042f8:	8979      	ldrh	r1, [r7, #10]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 face 	bl	80048a0 <I2C_MasterRequestWrite>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e08d      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004324:	e066      	b.n	80043f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6a39      	ldr	r1, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fd22 	bl	8004d74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b04      	cmp	r3, #4
 800433c:	d107      	bne.n	800434e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06b      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d11b      	bne.n	80043c8 <HAL_I2C_Master_Transmit+0x188>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d017      	beq.n	80043c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	6a39      	ldr	r1, [r7, #32]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fd19 	bl	8004e04 <I2C_WaitOnBTFFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d107      	bne.n	80043f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e01a      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d194      	bne.n	8004326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	00100002 	.word	0x00100002
 8004438:	ffff0000 	.word	0xffff0000

0800443c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	@ 0x30
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	461a      	mov	r2, r3
 8004448:	460b      	mov	r3, r1
 800444a:	817b      	strh	r3, [r7, #10]
 800444c:	4613      	mov	r3, r2
 800444e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004450:	f7fd fd72 	bl	8001f38 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	f040 8217 	bne.w	8004892 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2319      	movs	r3, #25
 800446a:	2201      	movs	r2, #1
 800446c:	497c      	ldr	r1, [pc, #496]	@ (8004660 <HAL_I2C_Master_Receive+0x224>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fb66 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	e20a      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_I2C_Master_Receive+0x50>
 8004488:	2302      	movs	r3, #2
 800448a:	e203      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d007      	beq.n	80044b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2222      	movs	r2, #34	@ 0x22
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2210      	movs	r2, #16
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004664 <HAL_I2C_Master_Receive+0x228>)
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044f4:	8979      	ldrh	r1, [r7, #10]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fa52 	bl	80049a4 <I2C_MasterRequestRead>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1c4      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e198      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d11b      	bne.n	800457a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e178      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457e:	2b02      	cmp	r3, #2
 8004580:	d11b      	bne.n	80045ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004590:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	e158      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e0:	e144      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	f200 80f1 	bhi.w	80047ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d123      	bne.n	800463c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fc4b 	bl	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e145      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800463a:	e117      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004640:	2b02      	cmp	r3, #2
 8004642:	d14e      	bne.n	80046e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	2200      	movs	r2, #0
 800464c:	4906      	ldr	r1, [pc, #24]	@ (8004668 <HAL_I2C_Master_Receive+0x22c>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fa76 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e11a      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
 800465e:	bf00      	nop
 8004660:	00100002 	.word	0x00100002
 8004664:	ffff0000 	.word	0xffff0000
 8004668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046e0:	e0c4      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	2200      	movs	r2, #0
 80046ea:	496c      	ldr	r1, [pc, #432]	@ (800489c <HAL_I2C_Master_Receive+0x460>)
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa27 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0cb      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	2200      	movs	r2, #0
 8004746:	4955      	ldr	r1, [pc, #340]	@ (800489c <HAL_I2C_Master_Receive+0x460>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f9f9 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e09d      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047cc:	e04e      	b.n	800486c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fb5e 	bl	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e058      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d124      	bne.n	800486c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004838:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f aeb6 	bne.w	80045e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	@ 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	00010004 	.word	0x00010004

080048a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d006      	beq.n	80048ca <I2C_MasterRequestWrite+0x2a>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d003      	beq.n	80048ca <I2C_MasterRequestWrite+0x2a>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048c8:	d108      	bne.n	80048dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e00b      	b.n	80048f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	2b12      	cmp	r3, #18
 80048e2:	d107      	bne.n	80048f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f91d 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491a:	d103      	bne.n	8004924 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e035      	b.n	8004994 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004930:	d108      	bne.n	8004944 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	e01b      	b.n	800497c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004944:	897b      	ldrh	r3, [r7, #10]
 8004946:	11db      	asrs	r3, r3, #7
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0306 	and.w	r3, r3, #6
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f063 030f 	orn	r3, r3, #15
 8004954:	b2da      	uxtb	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	490e      	ldr	r1, [pc, #56]	@ (800499c <I2C_MasterRequestWrite+0xfc>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f966 	bl	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e010      	b.n	8004994 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4907      	ldr	r1, [pc, #28]	@ (80049a0 <I2C_MasterRequestWrite+0x100>)
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f956 	bl	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	00010008 	.word	0x00010008
 80049a0:	00010002 	.word	0x00010002

080049a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	460b      	mov	r3, r1
 80049b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d006      	beq.n	80049de <I2C_MasterRequestRead+0x3a>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d003      	beq.n	80049de <I2C_MasterRequestRead+0x3a>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049dc:	d108      	bne.n	80049f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e00b      	b.n	8004a08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b11      	cmp	r3, #17
 80049f6:	d107      	bne.n	8004a08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f893 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2e:	d103      	bne.n	8004a38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e079      	b.n	8004b30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a44:	d108      	bne.n	8004a58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	611a      	str	r2, [r3, #16]
 8004a56:	e05f      	b.n	8004b18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a58:	897b      	ldrh	r3, [r7, #10]
 8004a5a:	11db      	asrs	r3, r3, #7
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0306 	and.w	r3, r3, #6
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f063 030f 	orn	r3, r3, #15
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4930      	ldr	r1, [pc, #192]	@ (8004b38 <I2C_MasterRequestRead+0x194>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f8dc 	bl	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e054      	b.n	8004b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4929      	ldr	r1, [pc, #164]	@ (8004b3c <I2C_MasterRequestRead+0x198>)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f8cc 	bl	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e044      	b.n	8004b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f831 	bl	8004b40 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af2:	d103      	bne.n	8004afc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e017      	b.n	8004b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b00:	897b      	ldrh	r3, [r7, #10]
 8004b02:	11db      	asrs	r3, r3, #7
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f063 030e 	orn	r3, r3, #14
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4907      	ldr	r1, [pc, #28]	@ (8004b3c <I2C_MasterRequestRead+0x198>)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f888 	bl	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	00010008 	.word	0x00010008
 8004b3c:	00010002 	.word	0x00010002

08004b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b50:	e048      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d044      	beq.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5a:	f7fd f9ed 	bl	8001f38 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d139      	bne.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10d      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	43da      	mvns	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	e00c      	b.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d116      	bne.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e023      	b.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10d      	bne.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	e00c      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	43da      	mvns	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d093      	beq.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c42:	e071      	b.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d123      	bne.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0204 	orr.w	r2, r3, #4
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e067      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d041      	beq.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca4:	f7fd f948 	bl	8001f38 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d302      	bcc.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d136      	bne.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10c      	bne.n	8004cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e00b      	b.n	8004cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e021      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10c      	bne.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e00b      	b.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f47f af6d 	bne.w	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d80:	e034      	b.n	8004dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f8e3 	bl	8004f4e <I2C_IsAcknowledgeFailed>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e034      	b.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d028      	beq.n	8004dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fd f8cd 	bl	8001f38 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d11d      	bne.n	8004dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dba:	2b80      	cmp	r3, #128	@ 0x80
 8004dbc:	d016      	beq.n	8004dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e007      	b.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df6:	2b80      	cmp	r3, #128	@ 0x80
 8004df8:	d1c3      	bne.n	8004d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e10:	e034      	b.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f89b 	bl	8004f4e <I2C_IsAcknowledgeFailed>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d028      	beq.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fd f885 	bl	8001f38 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d016      	beq.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d1c3      	bne.n	8004e12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ea0:	e049      	b.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d119      	bne.n	8004ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0210 	mvn.w	r2, #16
 8004eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e030      	b.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fd f828 	bl	8001f38 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11d      	bne.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d016      	beq.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e007      	b.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d1ae      	bne.n	8004ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f64:	d11b      	bne.n	8004f9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f043 0204 	orr.w	r2, r3, #4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e267      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	4b88      	ldr	r3, [pc, #544]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4b85      	ldr	r3, [pc, #532]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b82      	ldr	r3, [pc, #520]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e242      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b76      	ldr	r3, [pc, #472]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a75      	ldr	r2, [pc, #468]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b70      	ldr	r3, [pc, #448]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6f      	ldr	r2, [pc, #444]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b6d      	ldr	r3, [pc, #436]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6c      	ldr	r2, [pc, #432]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b69      	ldr	r3, [pc, #420]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a68      	ldr	r2, [pc, #416]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b66      	ldr	r3, [pc, #408]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a65      	ldr	r2, [pc, #404]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fc ff68 	bl	8001f38 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7fc ff64 	bl	8001f38 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e207      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fc ff54 	bl	8001f38 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005094:	f7fc ff50 	bl	8001f38 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	@ 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1f3      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b51      	ldr	r3, [pc, #324]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	4b4a      	ldr	r3, [pc, #296]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b47      	ldr	r3, [pc, #284]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	4b44      	ldr	r3, [pc, #272]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b41      	ldr	r3, [pc, #260]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1c7      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4937      	ldr	r1, [pc, #220]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b34      	ldr	r3, [pc, #208]	@ (80051f0 <HAL_RCC_OscConfig+0x244>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7fc ff09 	bl	8001f38 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512a:	f7fc ff05 	bl	8001f38 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1a8      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b2b      	ldr	r3, [pc, #172]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b28      	ldr	r3, [pc, #160]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4925      	ldr	r1, [pc, #148]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b24      	ldr	r3, [pc, #144]	@ (80051f0 <HAL_RCC_OscConfig+0x244>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fee8 	bl	8001f38 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516c:	f7fc fee4 	bl	8001f38 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e187      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d036      	beq.n	8005204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <HAL_RCC_OscConfig+0x248>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fc fec8 	bl	8001f38 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ac:	f7fc fec4 	bl	8001f38 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e167      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
 80051ca:	e01b      	b.n	8005204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCC_OscConfig+0x248>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fc feb1 	bl	8001f38 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	e00e      	b.n	80051f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051da:	f7fc fead 	bl	8001f38 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d907      	bls.n	80051f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e150      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
 80051ec:	40023800 	.word	0x40023800
 80051f0:	42470000 	.word	0x42470000
 80051f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	4b88      	ldr	r3, [pc, #544]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ea      	bne.n	80051da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8097 	beq.w	8005340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005216:	4b81      	ldr	r3, [pc, #516]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	4b7d      	ldr	r3, [pc, #500]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	4a7c      	ldr	r2, [pc, #496]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	@ 0x40
 8005232:	4b7a      	ldr	r3, [pc, #488]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005242:	4b77      	ldr	r3, [pc, #476]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d118      	bne.n	8005280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800524e:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a73      	ldr	r2, [pc, #460]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800525a:	f7fc fe6d 	bl	8001f38 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005262:	f7fc fe69 	bl	8001f38 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e10c      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	4b6a      	ldr	r3, [pc, #424]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <HAL_RCC_OscConfig+0x2ea>
 8005288:	4b64      	ldr	r3, [pc, #400]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528c:	4a63      	ldr	r2, [pc, #396]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6713      	str	r3, [r2, #112]	@ 0x70
 8005294:	e01c      	b.n	80052d0 <HAL_RCC_OscConfig+0x324>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b05      	cmp	r3, #5
 800529c:	d10c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x30c>
 800529e:	4b5f      	ldr	r3, [pc, #380]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	4a5e      	ldr	r2, [pc, #376]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052aa:	4b5c      	ldr	r3, [pc, #368]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	4a5b      	ldr	r2, [pc, #364]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b6:	e00b      	b.n	80052d0 <HAL_RCC_OscConfig+0x324>
 80052b8:	4b58      	ldr	r3, [pc, #352]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052bc:	4a57      	ldr	r2, [pc, #348]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c4:	4b55      	ldr	r3, [pc, #340]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	4a54      	ldr	r2, [pc, #336]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ca:	f023 0304 	bic.w	r3, r3, #4
 80052ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fc fe2e 	bl	8001f38 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e0:	f7fc fe2a 	bl	8001f38 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e0cb      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	4b49      	ldr	r3, [pc, #292]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0ee      	beq.n	80052e0 <HAL_RCC_OscConfig+0x334>
 8005302:	e014      	b.n	800532e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7fc fe18 	bl	8001f38 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7fc fe14 	bl	8001f38 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0b5      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005322:	4b3e      	ldr	r3, [pc, #248]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ee      	bne.n	800530c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b39      	ldr	r3, [pc, #228]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	4a38      	ldr	r2, [pc, #224]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80a1 	beq.w	800548c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800534a:	4b34      	ldr	r3, [pc, #208]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b08      	cmp	r3, #8
 8005354:	d05c      	beq.n	8005410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d141      	bne.n	80053e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b31      	ldr	r3, [pc, #196]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fc fde8 	bl	8001f38 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7fc fde4 	bl	8001f38 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e087      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b27      	ldr	r3, [pc, #156]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	491b      	ldr	r1, [pc, #108]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fc fdbd 	bl	8001f38 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fc fdb9 	bl	8001f38 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e05c      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d4:	4b11      	ldr	r3, [pc, #68]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x416>
 80053e0:	e054      	b.n	800548c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fc fda6 	bl	8001f38 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fc fda2 	bl	8001f38 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e045      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x444>
 800540e:	e03d      	b.n	800548c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e038      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
 800541c:	40023800 	.word	0x40023800
 8005420:	40007000 	.word	0x40007000
 8005424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005428:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4ec>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d028      	beq.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d121      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d11a      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800545e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005460:	4293      	cmp	r3, r2
 8005462:	d111      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	3b01      	subs	r3, #1
 8005472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0cc      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b68      	ldr	r3, [pc, #416]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90c      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b65      	ldr	r3, [pc, #404]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d044      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005556:	2b03      	cmp	r3, #3
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e067      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4934      	ldr	r1, [pc, #208]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7fc fcd4 	bl	8001f38 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fc fcd0 	bl	8001f38 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20c      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fc34 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	08008f94 	.word	0x08008f94
 8005660:	2000000c 	.word	0x2000000c
 8005664:	20000010 	.word	0x20000010

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800566c:	b094      	sub	sp, #80	@ 0x50
 800566e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	647b      	str	r3, [r7, #68]	@ 0x44
 8005674:	2300      	movs	r3, #0
 8005676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005678:	2300      	movs	r3, #0
 800567a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005680:	4b79      	ldr	r3, [pc, #484]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b08      	cmp	r3, #8
 800568a:	d00d      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x40>
 800568c:	2b08      	cmp	r3, #8
 800568e:	f200 80e1 	bhi.w	8005854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x34>
 8005696:	2b04      	cmp	r3, #4
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800569a:	e0db      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b73      	ldr	r3, [pc, #460]	@ (800586c <HAL_RCC_GetSysClockFreq+0x204>)
 800569e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80056a0:	e0db      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a2:	4b73      	ldr	r3, [pc, #460]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x208>)
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056a6:	e0d8      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d063      	beq.n	8005786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056be:	4b6a      	ldr	r3, [pc, #424]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	099b      	lsrs	r3, r3, #6
 80056c4:	2200      	movs	r2, #0
 80056c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ec:	0150      	lsls	r0, r2, #5
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4621      	mov	r1, r4
 80056f4:	1a51      	subs	r1, r2, r1
 80056f6:	6139      	str	r1, [r7, #16]
 80056f8:	4629      	mov	r1, r5
 80056fa:	eb63 0301 	sbc.w	r3, r3, r1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800570c:	4659      	mov	r1, fp
 800570e:	018b      	lsls	r3, r1, #6
 8005710:	4651      	mov	r1, sl
 8005712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005716:	4651      	mov	r1, sl
 8005718:	018a      	lsls	r2, r1, #6
 800571a:	4651      	mov	r1, sl
 800571c:	ebb2 0801 	subs.w	r8, r2, r1
 8005720:	4659      	mov	r1, fp
 8005722:	eb63 0901 	sbc.w	r9, r3, r1
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	4623      	mov	r3, r4
 8005740:	eb18 0303 	adds.w	r3, r8, r3
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	462b      	mov	r3, r5
 8005748:	eb49 0303 	adc.w	r3, r9, r3
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800575a:	4629      	mov	r1, r5
 800575c:	024b      	lsls	r3, r1, #9
 800575e:	4621      	mov	r1, r4
 8005760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005764:	4621      	mov	r1, r4
 8005766:	024a      	lsls	r2, r1, #9
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576e:	2200      	movs	r2, #0
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005778:	f7fb fa16 	bl	8000ba8 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4613      	mov	r3, r2
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005784:	e058      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	2200      	movs	r2, #0
 800578e:	4618      	mov	r0, r3
 8005790:	4611      	mov	r1, r2
 8005792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	2300      	movs	r3, #0
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
 800579c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	f04f 0000 	mov.w	r0, #0
 80057a8:	f04f 0100 	mov.w	r1, #0
 80057ac:	0159      	lsls	r1, r3, #5
 80057ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b2:	0150      	lsls	r0, r2, #5
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4641      	mov	r1, r8
 80057ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80057be:	4649      	mov	r1, r9
 80057c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057d8:	ebb2 040a 	subs.w	r4, r2, sl
 80057dc:	eb63 050b 	sbc.w	r5, r3, fp
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	00eb      	lsls	r3, r5, #3
 80057ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ee:	00e2      	lsls	r2, r4, #3
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	18e3      	adds	r3, r4, r3
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	464b      	mov	r3, r9
 80057fc:	eb45 0303 	adc.w	r3, r5, r3
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800580e:	4629      	mov	r1, r5
 8005810:	028b      	lsls	r3, r1, #10
 8005812:	4621      	mov	r1, r4
 8005814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005818:	4621      	mov	r1, r4
 800581a:	028a      	lsls	r2, r1, #10
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005822:	2200      	movs	r2, #0
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	61fa      	str	r2, [r7, #28]
 8005828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800582c:	f7fb f9bc 	bl	8000ba8 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	3301      	adds	r3, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800584a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005852:	e002      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <HAL_RCC_GetSysClockFreq+0x204>)
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800585a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800585c:	4618      	mov	r0, r3
 800585e:	3750      	adds	r7, #80	@ 0x50
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400
 8005870:	007a1200 	.word	0x007a1200

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b03      	ldr	r3, [pc, #12]	@ (8005888 <HAL_RCC_GetHCLKFreq+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c

0800588c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005890:	f7ff fff0 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	0a9b      	lsrs	r3, r3, #10
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40023800 	.word	0x40023800
 80058b0:	08008fa4 	.word	0x08008fa4

080058b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005912:	d901      	bls.n	8005918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e01b      	b.n	8005950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	daf2      	bge.n	8005906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	019b      	lsls	r3, r3, #6
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800593c:	d901      	bls.n	8005942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e006      	b.n	8005950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	d0f0      	beq.n	8005930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005974:	d901      	bls.n	800597a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e018      	b.n	80059ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	daf2      	bge.n	8005968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2210      	movs	r2, #16
 800598a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005998:	d901      	bls.n	800599e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e006      	b.n	80059ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d0f0      	beq.n	800598c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b08b      	sub	sp, #44	@ 0x2c
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	e014      	b.n	8005a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	3301      	adds	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	3301      	adds	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	3301      	adds	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	3301      	adds	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3e6      	bcc.n	80059e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a16:	8bfb      	ldrh	r3, [r7, #30]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01e      	beq.n	8005a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a26:	461a      	mov	r2, r3
 8005a28:	f107 0310 	add.w	r3, r7, #16
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	701a      	strb	r2, [r3, #0]
      i++;
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	3301      	adds	r3, #1
 8005a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a54:	8bfb      	ldrh	r3, [r7, #30]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ea      	bne.n	8005a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	372c      	adds	r7, #44	@ 0x2c
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0301 	and.w	r3, r3, #1
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b34:	461a      	mov	r2, r3
 8005b36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b3a:	6053      	str	r3, [r2, #4]
 8005b3c:	e00c      	b.n	8005b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d107      	bne.n	8005b54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005b50:	6053      	str	r3, [r2, #4]
 8005b52:	e001      	b.n	8005b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	b29b      	uxth	r3, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	@ 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	0c9b      	lsrs	r3, r3, #18
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	0fdb      	lsrs	r3, r3, #31
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	0fdb      	lsrs	r3, r3, #31
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d10d      	bne.n	8005c0a <USB_HC_Halt+0x82>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <USB_HC_Halt+0x82>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d002      	beq.n	8005c06 <USB_HC_Halt+0x7e>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d101      	bne.n	8005c0a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e0d8      	b.n	8005dbc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <USB_HC_Halt+0x8e>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d173      	bne.n	8005cfe <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c34:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d14a      	bne.n	8005cd8 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d133      	bne.n	8005cb6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c8c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c9a:	d82e      	bhi.n	8005cfa <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb2:	d0ec      	beq.n	8005c8e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cb4:	e081      	b.n	8005dba <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cd6:	e070      	b.n	8005dba <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cf6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cf8:	e05f      	b.n	8005dba <USB_HC_Halt+0x232>
            break;
 8005cfa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cfc:	e05d      	b.n	8005dba <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d1c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d133      	bne.n	8005d96 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d4c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d6c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d7a:	d81d      	bhi.n	8005db8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d92:	d0ec      	beq.n	8005d6e <USB_HC_Halt+0x1e6>
 8005d94:	e011      	b.n	8005dba <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e000      	b.n	8005dba <USB_HC_Halt+0x232>
          break;
 8005db8:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3724      	adds	r7, #36	@ 0x24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fd7a 	bl	80058d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005de2:	2110      	movs	r1, #16
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fd87 	bl	80058f8 <USB_FlushTxFifo>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fdb1 	bl	800595c <USB_FlushRxFifo>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e01f      	b.n	8005e4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b0f      	cmp	r3, #15
 8005e4e:	d9dc      	bls.n	8005e0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e034      	b.n	8005ec0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e9c:	d80c      	bhi.n	8005eb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eb4:	d0ec      	beq.n	8005e90 <USB_StopHost+0xc8>
 8005eb6:	e000      	b.n	8005eba <USB_StopHost+0xf2>
        break;
 8005eb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b0f      	cmp	r3, #15
 8005ec4:	d9c7      	bls.n	8005e56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fce9 	bl	80058b4 <USB_EnableGlobalInt>

  return ret;
 8005ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f804 	bl	8005f10 <USBH_HandleSof>
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b0b      	cmp	r3, #11
 8005f20:	d10a      	bne.n	8005f38 <USBH_HandleSof+0x28>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005f50:	bf00      	nop
}
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005f6c:	bf00      	nop
}
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f883 	bl	80060d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f80b 	bl	8005fee <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	795b      	ldrb	r3, [r3, #5]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f805 	bl	8005fee <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	2b0f      	cmp	r3, #15
 8005ffe:	d80d      	bhi.n	800601c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	33e0      	adds	r3, #224	@ 0xe0
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	33e0      	adds	r3, #224	@ 0xe0
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff ff57 	bl	8005eec <USBH_LL_IncTimer>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff8f 	bl	8005f78 <USBH_LL_Connect>
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff ff98 	bl	8005fa6 <USBH_LL_Disconnect>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
 800608a:	4613      	mov	r3, r2
 800608c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff49 	bl	8005f40 <USBH_LL_PortEnabled>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ff49 	bl	8005f5c <USBH_LL_PortDisabled>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fc fae7 	bl	80026bc <HAL_HCD_Stop>
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f807 	bl	8006108 <USBH_Get_USB_Status>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b03      	cmp	r3, #3
 800611a:	d817      	bhi.n	800614c <USBH_Get_USB_Status+0x44>
 800611c:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <USBH_Get_USB_Status+0x1c>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006135 	.word	0x08006135
 8006128:	0800613b 	.word	0x0800613b
 800612c:	08006141 	.word	0x08006141
 8006130:	08006147 	.word	0x08006147
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
    break;
 8006138:	e00b      	b.n	8006152 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800613a:	2302      	movs	r3, #2
 800613c:	73fb      	strb	r3, [r7, #15]
    break;
 800613e:	e008      	b.n	8006152 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
    break;
 8006144:	e005      	b.n	8006152 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006146:	2302      	movs	r3, #2
 8006148:	73fb      	strb	r3, [r7, #15]
    break;
 800614a:	e002      	b.n	8006152 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	73fb      	strb	r3, [r7, #15]
    break;
 8006150:	bf00      	nop
  }
  return usb_status;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <malloc>:
 8006160:	4b02      	ldr	r3, [pc, #8]	@ (800616c <malloc+0xc>)
 8006162:	4601      	mov	r1, r0
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f000 b825 	b.w	80061b4 <_malloc_r>
 800616a:	bf00      	nop
 800616c:	20000024 	.word	0x20000024

08006170 <sbrk_aligned>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0f      	ldr	r6, [pc, #60]	@ (80061b0 <sbrk_aligned+0x40>)
 8006174:	460c      	mov	r4, r1
 8006176:	6831      	ldr	r1, [r6, #0]
 8006178:	4605      	mov	r5, r0
 800617a:	b911      	cbnz	r1, 8006182 <sbrk_aligned+0x12>
 800617c:	f000 fe8a 	bl	8006e94 <_sbrk_r>
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fe85 	bl	8006e94 <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d103      	bne.n	8006196 <sbrk_aligned+0x26>
 800618e:	f04f 34ff 	mov.w	r4, #4294967295
 8006192:	4620      	mov	r0, r4
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	1cc4      	adds	r4, r0, #3
 8006198:	f024 0403 	bic.w	r4, r4, #3
 800619c:	42a0      	cmp	r0, r4
 800619e:	d0f8      	beq.n	8006192 <sbrk_aligned+0x22>
 80061a0:	1a21      	subs	r1, r4, r0
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 fe76 	bl	8006e94 <_sbrk_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d1f2      	bne.n	8006192 <sbrk_aligned+0x22>
 80061ac:	e7ef      	b.n	800618e <sbrk_aligned+0x1e>
 80061ae:	bf00      	nop
 80061b0:	20000650 	.word	0x20000650

080061b4 <_malloc_r>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	1ccd      	adds	r5, r1, #3
 80061ba:	f025 0503 	bic.w	r5, r5, #3
 80061be:	3508      	adds	r5, #8
 80061c0:	2d0c      	cmp	r5, #12
 80061c2:	bf38      	it	cc
 80061c4:	250c      	movcc	r5, #12
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	4606      	mov	r6, r0
 80061ca:	db01      	blt.n	80061d0 <_malloc_r+0x1c>
 80061cc:	42a9      	cmp	r1, r5
 80061ce:	d904      	bls.n	80061da <_malloc_r+0x26>
 80061d0:	230c      	movs	r3, #12
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062b0 <_malloc_r+0xfc>
 80061de:	f000 f869 	bl	80062b4 <__malloc_lock>
 80061e2:	f8d8 3000 	ldr.w	r3, [r8]
 80061e6:	461c      	mov	r4, r3
 80061e8:	bb44      	cbnz	r4, 800623c <_malloc_r+0x88>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff ffbf 	bl	8006170 <sbrk_aligned>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	4604      	mov	r4, r0
 80061f6:	d158      	bne.n	80062aa <_malloc_r+0xf6>
 80061f8:	f8d8 4000 	ldr.w	r4, [r8]
 80061fc:	4627      	mov	r7, r4
 80061fe:	2f00      	cmp	r7, #0
 8006200:	d143      	bne.n	800628a <_malloc_r+0xd6>
 8006202:	2c00      	cmp	r4, #0
 8006204:	d04b      	beq.n	800629e <_malloc_r+0xea>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	4639      	mov	r1, r7
 800620a:	4630      	mov	r0, r6
 800620c:	eb04 0903 	add.w	r9, r4, r3
 8006210:	f000 fe40 	bl	8006e94 <_sbrk_r>
 8006214:	4581      	cmp	r9, r0
 8006216:	d142      	bne.n	800629e <_malloc_r+0xea>
 8006218:	6821      	ldr	r1, [r4, #0]
 800621a:	1a6d      	subs	r5, r5, r1
 800621c:	4629      	mov	r1, r5
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff ffa6 	bl	8006170 <sbrk_aligned>
 8006224:	3001      	adds	r0, #1
 8006226:	d03a      	beq.n	800629e <_malloc_r+0xea>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	442b      	add	r3, r5
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	f8d8 3000 	ldr.w	r3, [r8]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	bb62      	cbnz	r2, 8006290 <_malloc_r+0xdc>
 8006236:	f8c8 7000 	str.w	r7, [r8]
 800623a:	e00f      	b.n	800625c <_malloc_r+0xa8>
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	1b52      	subs	r2, r2, r5
 8006240:	d420      	bmi.n	8006284 <_malloc_r+0xd0>
 8006242:	2a0b      	cmp	r2, #11
 8006244:	d917      	bls.n	8006276 <_malloc_r+0xc2>
 8006246:	1961      	adds	r1, r4, r5
 8006248:	42a3      	cmp	r3, r4
 800624a:	6025      	str	r5, [r4, #0]
 800624c:	bf18      	it	ne
 800624e:	6059      	strne	r1, [r3, #4]
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	bf08      	it	eq
 8006254:	f8c8 1000 	streq.w	r1, [r8]
 8006258:	5162      	str	r2, [r4, r5]
 800625a:	604b      	str	r3, [r1, #4]
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f82f 	bl	80062c0 <__malloc_unlock>
 8006262:	f104 000b 	add.w	r0, r4, #11
 8006266:	1d23      	adds	r3, r4, #4
 8006268:	f020 0007 	bic.w	r0, r0, #7
 800626c:	1ac2      	subs	r2, r0, r3
 800626e:	bf1c      	itt	ne
 8006270:	1a1b      	subne	r3, r3, r0
 8006272:	50a3      	strne	r3, [r4, r2]
 8006274:	e7af      	b.n	80061d6 <_malloc_r+0x22>
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	42a3      	cmp	r3, r4
 800627a:	bf0c      	ite	eq
 800627c:	f8c8 2000 	streq.w	r2, [r8]
 8006280:	605a      	strne	r2, [r3, #4]
 8006282:	e7eb      	b.n	800625c <_malloc_r+0xa8>
 8006284:	4623      	mov	r3, r4
 8006286:	6864      	ldr	r4, [r4, #4]
 8006288:	e7ae      	b.n	80061e8 <_malloc_r+0x34>
 800628a:	463c      	mov	r4, r7
 800628c:	687f      	ldr	r7, [r7, #4]
 800628e:	e7b6      	b.n	80061fe <_malloc_r+0x4a>
 8006290:	461a      	mov	r2, r3
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	42a3      	cmp	r3, r4
 8006296:	d1fb      	bne.n	8006290 <_malloc_r+0xdc>
 8006298:	2300      	movs	r3, #0
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	e7de      	b.n	800625c <_malloc_r+0xa8>
 800629e:	230c      	movs	r3, #12
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	4630      	mov	r0, r6
 80062a4:	f000 f80c 	bl	80062c0 <__malloc_unlock>
 80062a8:	e794      	b.n	80061d4 <_malloc_r+0x20>
 80062aa:	6005      	str	r5, [r0, #0]
 80062ac:	e7d6      	b.n	800625c <_malloc_r+0xa8>
 80062ae:	bf00      	nop
 80062b0:	20000654 	.word	0x20000654

080062b4 <__malloc_lock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	@ (80062bc <__malloc_lock+0x8>)
 80062b6:	f000 be3a 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	20000798 	.word	0x20000798

080062c0 <__malloc_unlock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	@ (80062c8 <__malloc_unlock+0x8>)
 80062c2:	f000 be35 	b.w	8006f30 <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	20000798 	.word	0x20000798

080062cc <__cvt>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	ec57 6b10 	vmov	r6, r7, d0
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	460c      	mov	r4, r1
 80062d8:	4619      	mov	r1, r3
 80062da:	463b      	mov	r3, r7
 80062dc:	bfbb      	ittet	lt
 80062de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062e2:	461f      	movlt	r7, r3
 80062e4:	2300      	movge	r3, #0
 80062e6:	232d      	movlt	r3, #45	@ 0x2d
 80062e8:	700b      	strb	r3, [r1, #0]
 80062ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062f0:	4691      	mov	r9, r2
 80062f2:	f023 0820 	bic.w	r8, r3, #32
 80062f6:	bfbc      	itt	lt
 80062f8:	4632      	movlt	r2, r6
 80062fa:	4616      	movlt	r6, r2
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006300:	d005      	beq.n	800630e <__cvt+0x42>
 8006302:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3e>
 8006308:	3401      	adds	r4, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x44>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	ec47 6b10 	vmov	d0, r6, r7
 800631c:	4653      	mov	r3, sl
 800631e:	4622      	mov	r2, r4
 8006320:	f000 fe9e 	bl	8007060 <_dtoa_r>
 8006324:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006328:	4605      	mov	r5, r0
 800632a:	d119      	bne.n	8006360 <__cvt+0x94>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d00e      	beq.n	8006350 <__cvt+0x84>
 8006332:	eb00 0904 	add.w	r9, r0, r4
 8006336:	2200      	movs	r2, #0
 8006338:	2300      	movs	r3, #0
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7fa fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006342:	b108      	cbz	r0, 8006348 <__cvt+0x7c>
 8006344:	f8cd 900c 	str.w	r9, [sp, #12]
 8006348:	2230      	movs	r2, #48	@ 0x30
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	454b      	cmp	r3, r9
 800634e:	d31e      	bcc.n	800638e <__cvt+0xc2>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006354:	1b5b      	subs	r3, r3, r5
 8006356:	4628      	mov	r0, r5
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	b004      	add	sp, #16
 800635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006360:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006364:	eb00 0904 	add.w	r9, r0, r4
 8006368:	d1e5      	bne.n	8006336 <__cvt+0x6a>
 800636a:	7803      	ldrb	r3, [r0, #0]
 800636c:	2b30      	cmp	r3, #48	@ 0x30
 800636e:	d10a      	bne.n	8006386 <__cvt+0xba>
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800637c:	b918      	cbnz	r0, 8006386 <__cvt+0xba>
 800637e:	f1c4 0401 	rsb	r4, r4, #1
 8006382:	f8ca 4000 	str.w	r4, [sl]
 8006386:	f8da 3000 	ldr.w	r3, [sl]
 800638a:	4499      	add	r9, r3
 800638c:	e7d3      	b.n	8006336 <__cvt+0x6a>
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	9103      	str	r1, [sp, #12]
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	e7d9      	b.n	800634a <__cvt+0x7e>

08006396 <__exponent>:
 8006396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006398:	2900      	cmp	r1, #0
 800639a:	bfba      	itte	lt
 800639c:	4249      	neglt	r1, r1
 800639e:	232d      	movlt	r3, #45	@ 0x2d
 80063a0:	232b      	movge	r3, #43	@ 0x2b
 80063a2:	2909      	cmp	r1, #9
 80063a4:	7002      	strb	r2, [r0, #0]
 80063a6:	7043      	strb	r3, [r0, #1]
 80063a8:	dd29      	ble.n	80063fe <__exponent+0x68>
 80063aa:	f10d 0307 	add.w	r3, sp, #7
 80063ae:	461d      	mov	r5, r3
 80063b0:	270a      	movs	r7, #10
 80063b2:	461a      	mov	r2, r3
 80063b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80063b8:	fb07 1416 	mls	r4, r7, r6, r1
 80063bc:	3430      	adds	r4, #48	@ 0x30
 80063be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063c2:	460c      	mov	r4, r1
 80063c4:	2c63      	cmp	r4, #99	@ 0x63
 80063c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063ca:	4631      	mov	r1, r6
 80063cc:	dcf1      	bgt.n	80063b2 <__exponent+0x1c>
 80063ce:	3130      	adds	r1, #48	@ 0x30
 80063d0:	1e94      	subs	r4, r2, #2
 80063d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063d6:	1c41      	adds	r1, r0, #1
 80063d8:	4623      	mov	r3, r4
 80063da:	42ab      	cmp	r3, r5
 80063dc:	d30a      	bcc.n	80063f4 <__exponent+0x5e>
 80063de:	f10d 0309 	add.w	r3, sp, #9
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	42ac      	cmp	r4, r5
 80063e6:	bf88      	it	hi
 80063e8:	2300      	movhi	r3, #0
 80063ea:	3302      	adds	r3, #2
 80063ec:	4403      	add	r3, r0
 80063ee:	1a18      	subs	r0, r3, r0
 80063f0:	b003      	add	sp, #12
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063fc:	e7ed      	b.n	80063da <__exponent+0x44>
 80063fe:	2330      	movs	r3, #48	@ 0x30
 8006400:	3130      	adds	r1, #48	@ 0x30
 8006402:	7083      	strb	r3, [r0, #2]
 8006404:	70c1      	strb	r1, [r0, #3]
 8006406:	1d03      	adds	r3, r0, #4
 8006408:	e7f1      	b.n	80063ee <__exponent+0x58>
	...

0800640c <_printf_float>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	b08d      	sub	sp, #52	@ 0x34
 8006412:	460c      	mov	r4, r1
 8006414:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006418:	4616      	mov	r6, r2
 800641a:	461f      	mov	r7, r3
 800641c:	4605      	mov	r5, r0
 800641e:	f000 fd01 	bl	8006e24 <_localeconv_r>
 8006422:	6803      	ldr	r3, [r0, #0]
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	4618      	mov	r0, r3
 8006428:	f7f9 ff22 	bl	8000270 <strlen>
 800642c:	2300      	movs	r3, #0
 800642e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006430:	f8d8 3000 	ldr.w	r3, [r8]
 8006434:	9005      	str	r0, [sp, #20]
 8006436:	3307      	adds	r3, #7
 8006438:	f023 0307 	bic.w	r3, r3, #7
 800643c:	f103 0208 	add.w	r2, r3, #8
 8006440:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006444:	f8d4 b000 	ldr.w	fp, [r4]
 8006448:	f8c8 2000 	str.w	r2, [r8]
 800644c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006450:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006454:	9307      	str	r3, [sp, #28]
 8006456:	f8cd 8018 	str.w	r8, [sp, #24]
 800645a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800645e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006462:	4b9c      	ldr	r3, [pc, #624]	@ (80066d4 <_printf_float+0x2c8>)
 8006464:	f04f 32ff 	mov.w	r2, #4294967295
 8006468:	f7fa fb60 	bl	8000b2c <__aeabi_dcmpun>
 800646c:	bb70      	cbnz	r0, 80064cc <_printf_float+0xc0>
 800646e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006472:	4b98      	ldr	r3, [pc, #608]	@ (80066d4 <_printf_float+0x2c8>)
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	f7fa fb3a 	bl	8000af0 <__aeabi_dcmple>
 800647c:	bb30      	cbnz	r0, 80064cc <_printf_float+0xc0>
 800647e:	2200      	movs	r2, #0
 8006480:	2300      	movs	r3, #0
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	f7fa fb29 	bl	8000adc <__aeabi_dcmplt>
 800648a:	b110      	cbz	r0, 8006492 <_printf_float+0x86>
 800648c:	232d      	movs	r3, #45	@ 0x2d
 800648e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006492:	4a91      	ldr	r2, [pc, #580]	@ (80066d8 <_printf_float+0x2cc>)
 8006494:	4b91      	ldr	r3, [pc, #580]	@ (80066dc <_printf_float+0x2d0>)
 8006496:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800649a:	bf94      	ite	ls
 800649c:	4690      	movls	r8, r2
 800649e:	4698      	movhi	r8, r3
 80064a0:	2303      	movs	r3, #3
 80064a2:	6123      	str	r3, [r4, #16]
 80064a4:	f02b 0304 	bic.w	r3, fp, #4
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f04f 0900 	mov.w	r9, #0
 80064ae:	9700      	str	r7, [sp, #0]
 80064b0:	4633      	mov	r3, r6
 80064b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064b4:	4621      	mov	r1, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 f9d2 	bl	8006860 <_printf_common>
 80064bc:	3001      	adds	r0, #1
 80064be:	f040 808d 	bne.w	80065dc <_printf_float+0x1d0>
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	b00d      	add	sp, #52	@ 0x34
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7fa fb2a 	bl	8000b2c <__aeabi_dcmpun>
 80064d8:	b140      	cbz	r0, 80064ec <_printf_float+0xe0>
 80064da:	464b      	mov	r3, r9
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfbc      	itt	lt
 80064e0:	232d      	movlt	r3, #45	@ 0x2d
 80064e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064e6:	4a7e      	ldr	r2, [pc, #504]	@ (80066e0 <_printf_float+0x2d4>)
 80064e8:	4b7e      	ldr	r3, [pc, #504]	@ (80066e4 <_printf_float+0x2d8>)
 80064ea:	e7d4      	b.n	8006496 <_printf_float+0x8a>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064f2:	9206      	str	r2, [sp, #24]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	d13b      	bne.n	8006570 <_printf_float+0x164>
 80064f8:	2306      	movs	r3, #6
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006500:	2300      	movs	r3, #0
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	ab0a      	add	r3, sp, #40	@ 0x28
 8006508:	e9cd a301 	strd	sl, r3, [sp, #4]
 800650c:	ab09      	add	r3, sp, #36	@ 0x24
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	6861      	ldr	r1, [r4, #4]
 8006512:	ec49 8b10 	vmov	d0, r8, r9
 8006516:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800651a:	4628      	mov	r0, r5
 800651c:	f7ff fed6 	bl	80062cc <__cvt>
 8006520:	9b06      	ldr	r3, [sp, #24]
 8006522:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006524:	2b47      	cmp	r3, #71	@ 0x47
 8006526:	4680      	mov	r8, r0
 8006528:	d129      	bne.n	800657e <_printf_float+0x172>
 800652a:	1cc8      	adds	r0, r1, #3
 800652c:	db02      	blt.n	8006534 <_printf_float+0x128>
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	4299      	cmp	r1, r3
 8006532:	dd41      	ble.n	80065b8 <_printf_float+0x1ac>
 8006534:	f1aa 0a02 	sub.w	sl, sl, #2
 8006538:	fa5f fa8a 	uxtb.w	sl, sl
 800653c:	3901      	subs	r1, #1
 800653e:	4652      	mov	r2, sl
 8006540:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006544:	9109      	str	r1, [sp, #36]	@ 0x24
 8006546:	f7ff ff26 	bl	8006396 <__exponent>
 800654a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800654c:	1813      	adds	r3, r2, r0
 800654e:	2a01      	cmp	r2, #1
 8006550:	4681      	mov	r9, r0
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	dc02      	bgt.n	800655c <_printf_float+0x150>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	07d2      	lsls	r2, r2, #31
 800655a:	d501      	bpl.n	8006560 <_printf_float+0x154>
 800655c:	3301      	adds	r3, #1
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0a2      	beq.n	80064ae <_printf_float+0xa2>
 8006568:	232d      	movs	r3, #45	@ 0x2d
 800656a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656e:	e79e      	b.n	80064ae <_printf_float+0xa2>
 8006570:	9a06      	ldr	r2, [sp, #24]
 8006572:	2a47      	cmp	r2, #71	@ 0x47
 8006574:	d1c2      	bne.n	80064fc <_printf_float+0xf0>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1c0      	bne.n	80064fc <_printf_float+0xf0>
 800657a:	2301      	movs	r3, #1
 800657c:	e7bd      	b.n	80064fa <_printf_float+0xee>
 800657e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006582:	d9db      	bls.n	800653c <_printf_float+0x130>
 8006584:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006588:	d118      	bne.n	80065bc <_printf_float+0x1b0>
 800658a:	2900      	cmp	r1, #0
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	dd0b      	ble.n	80065a8 <_printf_float+0x19c>
 8006590:	6121      	str	r1, [r4, #16]
 8006592:	b913      	cbnz	r3, 800659a <_printf_float+0x18e>
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	07d0      	lsls	r0, r2, #31
 8006598:	d502      	bpl.n	80065a0 <_printf_float+0x194>
 800659a:	3301      	adds	r3, #1
 800659c:	440b      	add	r3, r1
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065a2:	f04f 0900 	mov.w	r9, #0
 80065a6:	e7db      	b.n	8006560 <_printf_float+0x154>
 80065a8:	b913      	cbnz	r3, 80065b0 <_printf_float+0x1a4>
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	07d2      	lsls	r2, r2, #31
 80065ae:	d501      	bpl.n	80065b4 <_printf_float+0x1a8>
 80065b0:	3302      	adds	r3, #2
 80065b2:	e7f4      	b.n	800659e <_printf_float+0x192>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7f2      	b.n	800659e <_printf_float+0x192>
 80065b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065be:	4299      	cmp	r1, r3
 80065c0:	db05      	blt.n	80065ce <_printf_float+0x1c2>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	6121      	str	r1, [r4, #16]
 80065c6:	07d8      	lsls	r0, r3, #31
 80065c8:	d5ea      	bpl.n	80065a0 <_printf_float+0x194>
 80065ca:	1c4b      	adds	r3, r1, #1
 80065cc:	e7e7      	b.n	800659e <_printf_float+0x192>
 80065ce:	2900      	cmp	r1, #0
 80065d0:	bfd4      	ite	le
 80065d2:	f1c1 0202 	rsble	r2, r1, #2
 80065d6:	2201      	movgt	r2, #1
 80065d8:	4413      	add	r3, r2
 80065da:	e7e0      	b.n	800659e <_printf_float+0x192>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	055a      	lsls	r2, r3, #21
 80065e0:	d407      	bmi.n	80065f2 <_printf_float+0x1e6>
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	4642      	mov	r2, r8
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	d12b      	bne.n	8006648 <_printf_float+0x23c>
 80065f0:	e767      	b.n	80064c2 <_printf_float+0xb6>
 80065f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065f6:	f240 80dd 	bls.w	80067b4 <_printf_float+0x3a8>
 80065fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065fe:	2200      	movs	r2, #0
 8006600:	2300      	movs	r3, #0
 8006602:	f7fa fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8006606:	2800      	cmp	r0, #0
 8006608:	d033      	beq.n	8006672 <_printf_float+0x266>
 800660a:	4a37      	ldr	r2, [pc, #220]	@ (80066e8 <_printf_float+0x2dc>)
 800660c:	2301      	movs	r3, #1
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f af54 	beq.w	80064c2 <_printf_float+0xb6>
 800661a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800661e:	4543      	cmp	r3, r8
 8006620:	db02      	blt.n	8006628 <_printf_float+0x21c>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	07d8      	lsls	r0, r3, #31
 8006626:	d50f      	bpl.n	8006648 <_printf_float+0x23c>
 8006628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f af45 	beq.w	80064c2 <_printf_float+0xb6>
 8006638:	f04f 0900 	mov.w	r9, #0
 800663c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006640:	f104 0a1a 	add.w	sl, r4, #26
 8006644:	45c8      	cmp	r8, r9
 8006646:	dc09      	bgt.n	800665c <_printf_float+0x250>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	079b      	lsls	r3, r3, #30
 800664c:	f100 8103 	bmi.w	8006856 <_printf_float+0x44a>
 8006650:	68e0      	ldr	r0, [r4, #12]
 8006652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006654:	4298      	cmp	r0, r3
 8006656:	bfb8      	it	lt
 8006658:	4618      	movlt	r0, r3
 800665a:	e734      	b.n	80064c6 <_printf_float+0xba>
 800665c:	2301      	movs	r3, #1
 800665e:	4652      	mov	r2, sl
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f af2b 	beq.w	80064c2 <_printf_float+0xb6>
 800666c:	f109 0901 	add.w	r9, r9, #1
 8006670:	e7e8      	b.n	8006644 <_printf_float+0x238>
 8006672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	dc39      	bgt.n	80066ec <_printf_float+0x2e0>
 8006678:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <_printf_float+0x2dc>)
 800667a:	2301      	movs	r3, #1
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f af1d 	beq.w	80064c2 <_printf_float+0xb6>
 8006688:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800668c:	ea59 0303 	orrs.w	r3, r9, r3
 8006690:	d102      	bne.n	8006698 <_printf_float+0x28c>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	07d9      	lsls	r1, r3, #31
 8006696:	d5d7      	bpl.n	8006648 <_printf_float+0x23c>
 8006698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	f43f af0d 	beq.w	80064c2 <_printf_float+0xb6>
 80066a8:	f04f 0a00 	mov.w	sl, #0
 80066ac:	f104 0b1a 	add.w	fp, r4, #26
 80066b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b2:	425b      	negs	r3, r3
 80066b4:	4553      	cmp	r3, sl
 80066b6:	dc01      	bgt.n	80066bc <_printf_float+0x2b0>
 80066b8:	464b      	mov	r3, r9
 80066ba:	e793      	b.n	80065e4 <_printf_float+0x1d8>
 80066bc:	2301      	movs	r3, #1
 80066be:	465a      	mov	r2, fp
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f aefb 	beq.w	80064c2 <_printf_float+0xb6>
 80066cc:	f10a 0a01 	add.w	sl, sl, #1
 80066d0:	e7ee      	b.n	80066b0 <_printf_float+0x2a4>
 80066d2:	bf00      	nop
 80066d4:	7fefffff 	.word	0x7fefffff
 80066d8:	08008fac 	.word	0x08008fac
 80066dc:	08008fb0 	.word	0x08008fb0
 80066e0:	08008fb4 	.word	0x08008fb4
 80066e4:	08008fb8 	.word	0x08008fb8
 80066e8:	08008fbc 	.word	0x08008fbc
 80066ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066f2:	4553      	cmp	r3, sl
 80066f4:	bfa8      	it	ge
 80066f6:	4653      	movge	r3, sl
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	4699      	mov	r9, r3
 80066fc:	dc36      	bgt.n	800676c <_printf_float+0x360>
 80066fe:	f04f 0b00 	mov.w	fp, #0
 8006702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006706:	f104 021a 	add.w	r2, r4, #26
 800670a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800670c:	9306      	str	r3, [sp, #24]
 800670e:	eba3 0309 	sub.w	r3, r3, r9
 8006712:	455b      	cmp	r3, fp
 8006714:	dc31      	bgt.n	800677a <_printf_float+0x36e>
 8006716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006718:	459a      	cmp	sl, r3
 800671a:	dc3a      	bgt.n	8006792 <_printf_float+0x386>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07da      	lsls	r2, r3, #31
 8006720:	d437      	bmi.n	8006792 <_printf_float+0x386>
 8006722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006724:	ebaa 0903 	sub.w	r9, sl, r3
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	ebaa 0303 	sub.w	r3, sl, r3
 800672e:	4599      	cmp	r9, r3
 8006730:	bfa8      	it	ge
 8006732:	4699      	movge	r9, r3
 8006734:	f1b9 0f00 	cmp.w	r9, #0
 8006738:	dc33      	bgt.n	80067a2 <_printf_float+0x396>
 800673a:	f04f 0800 	mov.w	r8, #0
 800673e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006742:	f104 0b1a 	add.w	fp, r4, #26
 8006746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006748:	ebaa 0303 	sub.w	r3, sl, r3
 800674c:	eba3 0309 	sub.w	r3, r3, r9
 8006750:	4543      	cmp	r3, r8
 8006752:	f77f af79 	ble.w	8006648 <_printf_float+0x23c>
 8006756:	2301      	movs	r3, #1
 8006758:	465a      	mov	r2, fp
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	f43f aeae 	beq.w	80064c2 <_printf_float+0xb6>
 8006766:	f108 0801 	add.w	r8, r8, #1
 800676a:	e7ec      	b.n	8006746 <_printf_float+0x33a>
 800676c:	4642      	mov	r2, r8
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	d1c2      	bne.n	80066fe <_printf_float+0x2f2>
 8006778:	e6a3      	b.n	80064c2 <_printf_float+0xb6>
 800677a:	2301      	movs	r3, #1
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	9206      	str	r2, [sp, #24]
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f ae9c 	beq.w	80064c2 <_printf_float+0xb6>
 800678a:	9a06      	ldr	r2, [sp, #24]
 800678c:	f10b 0b01 	add.w	fp, fp, #1
 8006790:	e7bb      	b.n	800670a <_printf_float+0x2fe>
 8006792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	d1c0      	bne.n	8006722 <_printf_float+0x316>
 80067a0:	e68f      	b.n	80064c2 <_printf_float+0xb6>
 80067a2:	9a06      	ldr	r2, [sp, #24]
 80067a4:	464b      	mov	r3, r9
 80067a6:	4442      	add	r2, r8
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	d1c3      	bne.n	800673a <_printf_float+0x32e>
 80067b2:	e686      	b.n	80064c2 <_printf_float+0xb6>
 80067b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067b8:	f1ba 0f01 	cmp.w	sl, #1
 80067bc:	dc01      	bgt.n	80067c2 <_printf_float+0x3b6>
 80067be:	07db      	lsls	r3, r3, #31
 80067c0:	d536      	bpl.n	8006830 <_printf_float+0x424>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4642      	mov	r2, r8
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	f43f ae78 	beq.w	80064c2 <_printf_float+0xb6>
 80067d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae70 	beq.w	80064c2 <_printf_float+0xb6>
 80067e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ee:	f7fa f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f2:	b9c0      	cbnz	r0, 8006826 <_printf_float+0x41a>
 80067f4:	4653      	mov	r3, sl
 80067f6:	f108 0201 	add.w	r2, r8, #1
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	d10c      	bne.n	800681e <_printf_float+0x412>
 8006804:	e65d      	b.n	80064c2 <_printf_float+0xb6>
 8006806:	2301      	movs	r3, #1
 8006808:	465a      	mov	r2, fp
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae56 	beq.w	80064c2 <_printf_float+0xb6>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	45d0      	cmp	r8, sl
 800681c:	dbf3      	blt.n	8006806 <_printf_float+0x3fa>
 800681e:	464b      	mov	r3, r9
 8006820:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006824:	e6df      	b.n	80065e6 <_printf_float+0x1da>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0b1a 	add.w	fp, r4, #26
 800682e:	e7f4      	b.n	800681a <_printf_float+0x40e>
 8006830:	2301      	movs	r3, #1
 8006832:	4642      	mov	r2, r8
 8006834:	e7e1      	b.n	80067fa <_printf_float+0x3ee>
 8006836:	2301      	movs	r3, #1
 8006838:	464a      	mov	r2, r9
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f ae3e 	beq.w	80064c2 <_printf_float+0xb6>
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	4543      	cmp	r3, r8
 8006852:	dcf0      	bgt.n	8006836 <_printf_float+0x42a>
 8006854:	e6fc      	b.n	8006650 <_printf_float+0x244>
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	f104 0919 	add.w	r9, r4, #25
 800685e:	e7f4      	b.n	800684a <_printf_float+0x43e>

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4698      	mov	r8, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	3b00      	subs	r3, #0
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068bc:	4641      	mov	r1, r8
 80068be:	4638      	mov	r0, r7
 80068c0:	47c8      	blx	r9
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	f003 0306 	and.w	r3, r3, #6
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf02      	ittt	eq
 80068d2:	68e5      	ldreq	r5, [r4, #12]
 80068d4:	6833      	ldreq	r3, [r6, #0]
 80068d6:	1aed      	subeq	r5, r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4641      	mov	r1, r8
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c8      	blx	r9
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	@ 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4641      	mov	r1, r8
 800692e:	4638      	mov	r0, r7
 8006930:	47c8      	blx	r9
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	7e0f      	ldrb	r7, [r1, #24]
 8006942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006944:	2f78      	cmp	r7, #120	@ 0x78
 8006946:	4691      	mov	r9, r2
 8006948:	4680      	mov	r8, r0
 800694a:	460c      	mov	r4, r1
 800694c:	469a      	mov	sl, r3
 800694e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	@ 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d2 	beq.w	8006b02 <_printf_i+0x1c6>
 800695e:	2f58      	cmp	r7, #88	@ 0x58
 8006960:	f000 80b9 	beq.w	8006ad6 <_printf_i+0x19a>
 8006964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a101      	add	r1, pc, #4	@ (adr r1, 800697c <_printf_i+0x40>)
 8006978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006ae9 	.word	0x08006ae9
 80069ac:	08006a13 	.word	0x08006a13
 80069b0:	08006aa3 	.word	0x08006aa3
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b0b 	.word	0x08006b0b
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a13 	.word	0x08006a13
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006aab 	.word	0x08006aab
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6032      	str	r2, [r6, #0]
 80069dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e09d      	b.n	8006b24 <_printf_i+0x1e8>
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	6031      	str	r1, [r6, #0]
 80069f0:	0606      	lsls	r6, r0, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xbc>
 80069f4:	681d      	ldr	r5, [r3, #0]
 80069f6:	e003      	b.n	8006a00 <_printf_i+0xc4>
 80069f8:	0645      	lsls	r5, r0, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xb8>
 80069fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	da03      	bge.n	8006a0c <_printf_i+0xd0>
 8006a04:	232d      	movs	r3, #45	@ 0x2d
 8006a06:	426d      	negs	r5, r5
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0c:	4859      	ldr	r0, [pc, #356]	@ (8006b74 <_printf_i+0x238>)
 8006a0e:	230a      	movs	r3, #10
 8006a10:	e011      	b.n	8006a36 <_printf_i+0xfa>
 8006a12:	6821      	ldr	r1, [r4, #0]
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	0608      	lsls	r0, r1, #24
 8006a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a1c:	d402      	bmi.n	8006a24 <_printf_i+0xe8>
 8006a1e:	0649      	lsls	r1, r1, #25
 8006a20:	bf48      	it	mi
 8006a22:	b2ad      	uxthmi	r5, r5
 8006a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a26:	4853      	ldr	r0, [pc, #332]	@ (8006b74 <_printf_i+0x238>)
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	bf14      	ite	ne
 8006a2c:	230a      	movne	r3, #10
 8006a2e:	2308      	moveq	r3, #8
 8006a30:	2100      	movs	r1, #0
 8006a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a36:	6866      	ldr	r6, [r4, #4]
 8006a38:	60a6      	str	r6, [r4, #8]
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	bfa2      	ittt	ge
 8006a3e:	6821      	ldrge	r1, [r4, #0]
 8006a40:	f021 0104 	bicge.w	r1, r1, #4
 8006a44:	6021      	strge	r1, [r4, #0]
 8006a46:	b90d      	cbnz	r5, 8006a4c <_printf_i+0x110>
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	d04b      	beq.n	8006ae4 <_printf_i+0x1a8>
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a52:	fb03 5711 	mls	r7, r3, r1, r5
 8006a56:	5dc7      	ldrb	r7, [r0, r7]
 8006a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a5c:	462f      	mov	r7, r5
 8006a5e:	42bb      	cmp	r3, r7
 8006a60:	460d      	mov	r5, r1
 8006a62:	d9f4      	bls.n	8006a4e <_printf_i+0x112>
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d10b      	bne.n	8006a80 <_printf_i+0x144>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07df      	lsls	r7, r3, #31
 8006a6c:	d508      	bpl.n	8006a80 <_printf_i+0x144>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	6861      	ldr	r1, [r4, #4]
 8006a72:	4299      	cmp	r1, r3
 8006a74:	bfde      	ittt	le
 8006a76:	2330      	movle	r3, #48	@ 0x30
 8006a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a80:	1b92      	subs	r2, r2, r6
 8006a82:	6122      	str	r2, [r4, #16]
 8006a84:	f8cd a000 	str.w	sl, [sp]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	aa03      	add	r2, sp, #12
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7ff fee6 	bl	8006860 <_printf_common>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d14a      	bne.n	8006b2e <_printf_i+0x1f2>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	b004      	add	sp, #16
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f043 0320 	orr.w	r3, r3, #32
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	4833      	ldr	r0, [pc, #204]	@ (8006b78 <_printf_i+0x23c>)
 8006aac:	2778      	movs	r7, #120	@ 0x78
 8006aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	6831      	ldr	r1, [r6, #0]
 8006ab6:	061f      	lsls	r7, r3, #24
 8006ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006abc:	d402      	bmi.n	8006ac4 <_printf_i+0x188>
 8006abe:	065f      	lsls	r7, r3, #25
 8006ac0:	bf48      	it	mi
 8006ac2:	b2ad      	uxthmi	r5, r5
 8006ac4:	6031      	str	r1, [r6, #0]
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	bf44      	itt	mi
 8006aca:	f043 0320 	orrmi.w	r3, r3, #32
 8006ace:	6023      	strmi	r3, [r4, #0]
 8006ad0:	b11d      	cbz	r5, 8006ada <_printf_i+0x19e>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	e7ac      	b.n	8006a30 <_printf_i+0xf4>
 8006ad6:	4827      	ldr	r0, [pc, #156]	@ (8006b74 <_printf_i+0x238>)
 8006ad8:	e7e9      	b.n	8006aae <_printf_i+0x172>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f023 0320 	bic.w	r3, r3, #32
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	e7f6      	b.n	8006ad2 <_printf_i+0x196>
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	e7bd      	b.n	8006a64 <_printf_i+0x128>
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	6961      	ldr	r1, [r4, #20]
 8006aee:	1d18      	adds	r0, r3, #4
 8006af0:	6030      	str	r0, [r6, #0]
 8006af2:	062e      	lsls	r6, r5, #24
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0x1c0>
 8006af8:	6019      	str	r1, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <_printf_i+0x1c6>
 8006afc:	0668      	lsls	r0, r5, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0x1bc>
 8006b00:	8019      	strh	r1, [r3, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bc      	b.n	8006a84 <_printf_i+0x148>
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	6032      	str	r2, [r6, #0]
 8006b10:	681e      	ldr	r6, [r3, #0]
 8006b12:	6862      	ldr	r2, [r4, #4]
 8006b14:	2100      	movs	r1, #0
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7f9 fb5a 	bl	80001d0 <memchr>
 8006b1c:	b108      	cbz	r0, 8006b22 <_printf_i+0x1e6>
 8006b1e:	1b80      	subs	r0, r0, r6
 8006b20:	6060      	str	r0, [r4, #4]
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	2300      	movs	r3, #0
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b2c:	e7aa      	b.n	8006a84 <_printf_i+0x148>
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	4632      	mov	r2, r6
 8006b32:	4649      	mov	r1, r9
 8006b34:	4640      	mov	r0, r8
 8006b36:	47d0      	blx	sl
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d0ad      	beq.n	8006a98 <_printf_i+0x15c>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	079b      	lsls	r3, r3, #30
 8006b40:	d413      	bmi.n	8006b6a <_printf_i+0x22e>
 8006b42:	68e0      	ldr	r0, [r4, #12]
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	4298      	cmp	r0, r3
 8006b48:	bfb8      	it	lt
 8006b4a:	4618      	movlt	r0, r3
 8006b4c:	e7a6      	b.n	8006a9c <_printf_i+0x160>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	47d0      	blx	sl
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d09d      	beq.n	8006a98 <_printf_i+0x15c>
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	68e3      	ldr	r3, [r4, #12]
 8006b60:	9903      	ldr	r1, [sp, #12]
 8006b62:	1a5b      	subs	r3, r3, r1
 8006b64:	42ab      	cmp	r3, r5
 8006b66:	dcf2      	bgt.n	8006b4e <_printf_i+0x212>
 8006b68:	e7eb      	b.n	8006b42 <_printf_i+0x206>
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	f104 0619 	add.w	r6, r4, #25
 8006b70:	e7f5      	b.n	8006b5e <_printf_i+0x222>
 8006b72:	bf00      	nop
 8006b74:	08008fbe 	.word	0x08008fbe
 8006b78:	08008fcf 	.word	0x08008fcf

08006b7c <std>:
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	4604      	mov	r4, r0
 8006b82:	e9c0 3300 	strd	r3, r3, [r0]
 8006b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b8a:	6083      	str	r3, [r0, #8]
 8006b8c:	8181      	strh	r1, [r0, #12]
 8006b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b90:	81c2      	strh	r2, [r0, #14]
 8006b92:	6183      	str	r3, [r0, #24]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2208      	movs	r2, #8
 8006b98:	305c      	adds	r0, #92	@ 0x5c
 8006b9a:	f000 f93a 	bl	8006e12 <memset>
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <std+0x58>)
 8006ba0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <std+0x5c>)
 8006ba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bdc <std+0x60>)
 8006ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006baa:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <std+0x64>)
 8006bac:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bae:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <std+0x68>)
 8006bb0:	6224      	str	r4, [r4, #32]
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d006      	beq.n	8006bc4 <std+0x48>
 8006bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bba:	4294      	cmp	r4, r2
 8006bbc:	d002      	beq.n	8006bc4 <std+0x48>
 8006bbe:	33d0      	adds	r3, #208	@ 0xd0
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d105      	bne.n	8006bd0 <std+0x54>
 8006bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	f000 b9ae 	b.w	8006f2c <__retarget_lock_init_recursive>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08006d8d 	.word	0x08006d8d
 8006bd8:	08006daf 	.word	0x08006daf
 8006bdc:	08006de7 	.word	0x08006de7
 8006be0:	08006e0b 	.word	0x08006e0b
 8006be4:	20000658 	.word	0x20000658

08006be8 <stdio_exit_handler>:
 8006be8:	4a02      	ldr	r2, [pc, #8]	@ (8006bf4 <stdio_exit_handler+0xc>)
 8006bea:	4903      	ldr	r1, [pc, #12]	@ (8006bf8 <stdio_exit_handler+0x10>)
 8006bec:	4803      	ldr	r0, [pc, #12]	@ (8006bfc <stdio_exit_handler+0x14>)
 8006bee:	f000 b869 	b.w	8006cc4 <_fwalk_sglue>
 8006bf2:	bf00      	nop
 8006bf4:	20000018 	.word	0x20000018
 8006bf8:	080089bd 	.word	0x080089bd
 8006bfc:	20000028 	.word	0x20000028

08006c00 <cleanup_stdio>:
 8006c00:	6841      	ldr	r1, [r0, #4]
 8006c02:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <cleanup_stdio+0x34>)
 8006c04:	4299      	cmp	r1, r3
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
 8006c0a:	d001      	beq.n	8006c10 <cleanup_stdio+0x10>
 8006c0c:	f001 fed6 	bl	80089bc <_fflush_r>
 8006c10:	68a1      	ldr	r1, [r4, #8]
 8006c12:	4b09      	ldr	r3, [pc, #36]	@ (8006c38 <cleanup_stdio+0x38>)
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d002      	beq.n	8006c1e <cleanup_stdio+0x1e>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fecf 	bl	80089bc <_fflush_r>
 8006c1e:	68e1      	ldr	r1, [r4, #12]
 8006c20:	4b06      	ldr	r3, [pc, #24]	@ (8006c3c <cleanup_stdio+0x3c>)
 8006c22:	4299      	cmp	r1, r3
 8006c24:	d004      	beq.n	8006c30 <cleanup_stdio+0x30>
 8006c26:	4620      	mov	r0, r4
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f001 bec6 	b.w	80089bc <_fflush_r>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	bf00      	nop
 8006c34:	20000658 	.word	0x20000658
 8006c38:	200006c0 	.word	0x200006c0
 8006c3c:	20000728 	.word	0x20000728

08006c40 <global_stdio_init.part.0>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <global_stdio_init.part.0+0x30>)
 8006c44:	4c0b      	ldr	r4, [pc, #44]	@ (8006c74 <global_stdio_init.part.0+0x34>)
 8006c46:	4a0c      	ldr	r2, [pc, #48]	@ (8006c78 <global_stdio_init.part.0+0x38>)
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2104      	movs	r1, #4
 8006c50:	f7ff ff94 	bl	8006b7c <std>
 8006c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c58:	2201      	movs	r2, #1
 8006c5a:	2109      	movs	r1, #9
 8006c5c:	f7ff ff8e 	bl	8006b7c <std>
 8006c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c64:	2202      	movs	r2, #2
 8006c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6a:	2112      	movs	r1, #18
 8006c6c:	f7ff bf86 	b.w	8006b7c <std>
 8006c70:	20000790 	.word	0x20000790
 8006c74:	20000658 	.word	0x20000658
 8006c78:	08006be9 	.word	0x08006be9

08006c7c <__sfp_lock_acquire>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	@ (8006c84 <__sfp_lock_acquire+0x8>)
 8006c7e:	f000 b956 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006c82:	bf00      	nop
 8006c84:	20000799 	.word	0x20000799

08006c88 <__sfp_lock_release>:
 8006c88:	4801      	ldr	r0, [pc, #4]	@ (8006c90 <__sfp_lock_release+0x8>)
 8006c8a:	f000 b951 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006c8e:	bf00      	nop
 8006c90:	20000799 	.word	0x20000799

08006c94 <__sinit>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4604      	mov	r4, r0
 8006c98:	f7ff fff0 	bl	8006c7c <__sfp_lock_acquire>
 8006c9c:	6a23      	ldr	r3, [r4, #32]
 8006c9e:	b11b      	cbz	r3, 8006ca8 <__sinit+0x14>
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	f7ff bff0 	b.w	8006c88 <__sfp_lock_release>
 8006ca8:	4b04      	ldr	r3, [pc, #16]	@ (8006cbc <__sinit+0x28>)
 8006caa:	6223      	str	r3, [r4, #32]
 8006cac:	4b04      	ldr	r3, [pc, #16]	@ (8006cc0 <__sinit+0x2c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f5      	bne.n	8006ca0 <__sinit+0xc>
 8006cb4:	f7ff ffc4 	bl	8006c40 <global_stdio_init.part.0>
 8006cb8:	e7f2      	b.n	8006ca0 <__sinit+0xc>
 8006cba:	bf00      	nop
 8006cbc:	08006c01 	.word	0x08006c01
 8006cc0:	20000790 	.word	0x20000790

08006cc4 <_fwalk_sglue>:
 8006cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc8:	4607      	mov	r7, r0
 8006cca:	4688      	mov	r8, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	2600      	movs	r6, #0
 8006cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cd8:	d505      	bpl.n	8006ce6 <_fwalk_sglue+0x22>
 8006cda:	6824      	ldr	r4, [r4, #0]
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	d1f7      	bne.n	8006cd0 <_fwalk_sglue+0xc>
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d907      	bls.n	8006cfc <_fwalk_sglue+0x38>
 8006cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	d003      	beq.n	8006cfc <_fwalk_sglue+0x38>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	47c0      	blx	r8
 8006cfa:	4306      	orrs	r6, r0
 8006cfc:	3568      	adds	r5, #104	@ 0x68
 8006cfe:	e7e9      	b.n	8006cd4 <_fwalk_sglue+0x10>

08006d00 <iprintf>:
 8006d00:	b40f      	push	{r0, r1, r2, r3}
 8006d02:	b507      	push	{r0, r1, r2, lr}
 8006d04:	4906      	ldr	r1, [pc, #24]	@ (8006d20 <iprintf+0x20>)
 8006d06:	ab04      	add	r3, sp, #16
 8006d08:	6808      	ldr	r0, [r1, #0]
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	6881      	ldr	r1, [r0, #8]
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	f001 fcb7 	bl	8008684 <_vfiprintf_r>
 8006d16:	b003      	add	sp, #12
 8006d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d1c:	b004      	add	sp, #16
 8006d1e:	4770      	bx	lr
 8006d20:	20000024 	.word	0x20000024

08006d24 <sniprintf>:
 8006d24:	b40c      	push	{r2, r3}
 8006d26:	b530      	push	{r4, r5, lr}
 8006d28:	4b17      	ldr	r3, [pc, #92]	@ (8006d88 <sniprintf+0x64>)
 8006d2a:	1e0c      	subs	r4, r1, #0
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	b09d      	sub	sp, #116	@ 0x74
 8006d30:	da08      	bge.n	8006d44 <sniprintf+0x20>
 8006d32:	238b      	movs	r3, #139	@ 0x8b
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	b01d      	add	sp, #116	@ 0x74
 8006d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d40:	b002      	add	sp, #8
 8006d42:	4770      	bx	lr
 8006d44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d4c:	bf14      	ite	ne
 8006d4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d52:	4623      	moveq	r3, r4
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	9006      	str	r0, [sp, #24]
 8006d60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d66:	ab21      	add	r3, sp, #132	@ 0x84
 8006d68:	a902      	add	r1, sp, #8
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f001 fb63 	bl	8008438 <_svfiprintf_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	bfbc      	itt	lt
 8006d76:	238b      	movlt	r3, #139	@ 0x8b
 8006d78:	602b      	strlt	r3, [r5, #0]
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d0dd      	beq.n	8006d3a <sniprintf+0x16>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e7d9      	b.n	8006d3a <sniprintf+0x16>
 8006d86:	bf00      	nop
 8006d88:	20000024 	.word	0x20000024

08006d8c <__sread>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f000 f86c 	bl	8006e70 <_read_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	bfab      	itete	ge
 8006d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006da0:	181b      	addge	r3, r3, r0
 8006da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006da6:	bfac      	ite	ge
 8006da8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006daa:	81a3      	strhlt	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__swrite>:
 8006dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	05db      	lsls	r3, r3, #23
 8006db8:	4605      	mov	r5, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	d505      	bpl.n	8006dcc <__swrite+0x1e>
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f000 f840 	bl	8006e4c <_lseek_r>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	4632      	mov	r2, r6
 8006dda:	463b      	mov	r3, r7
 8006ddc:	4628      	mov	r0, r5
 8006dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	f000 b867 	b.w	8006eb4 <_write_r>

08006de6 <__sseek>:
 8006de6:	b510      	push	{r4, lr}
 8006de8:	460c      	mov	r4, r1
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 f82d 	bl	8006e4c <_lseek_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	bf15      	itete	ne
 8006df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e02:	81a3      	strheq	r3, [r4, #12]
 8006e04:	bf18      	it	ne
 8006e06:	81a3      	strhne	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__sclose>:
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 b80d 	b.w	8006e2c <_close_r>

08006e12 <memset>:
 8006e12:	4402      	add	r2, r0
 8006e14:	4603      	mov	r3, r0
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d100      	bne.n	8006e1c <memset+0xa>
 8006e1a:	4770      	bx	lr
 8006e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e20:	e7f9      	b.n	8006e16 <memset+0x4>
	...

08006e24 <_localeconv_r>:
 8006e24:	4800      	ldr	r0, [pc, #0]	@ (8006e28 <_localeconv_r+0x4>)
 8006e26:	4770      	bx	lr
 8006e28:	20000164 	.word	0x20000164

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_close_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fa ff72 	bl	8001d20 <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000794 	.word	0x20000794

08006e4c <_lseek_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	@ (8006e6c <_lseek_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fa ff87 	bl	8001d6e <_lseek>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_lseek_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_lseek_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000794 	.word	0x20000794

08006e70 <_read_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	@ (8006e90 <_read_r+0x20>)
 8006e74:	4604      	mov	r4, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	4611      	mov	r1, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7fa ff15 	bl	8001cae <_read>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_read_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_read_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	20000794 	.word	0x20000794

08006e94 <_sbrk_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	@ (8006eb0 <_sbrk_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fa ff72 	bl	8001d88 <_sbrk>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_sbrk_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_sbrk_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000794 	.word	0x20000794

08006eb4 <_write_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_write_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fa ff10 	bl	8001ce8 <_write>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_write_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_write_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20000794 	.word	0x20000794

08006ed8 <__errno>:
 8006ed8:	4b01      	ldr	r3, [pc, #4]	@ (8006ee0 <__errno+0x8>)
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000024 	.word	0x20000024

08006ee4 <__libc_init_array>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f1c <__libc_init_array+0x38>)
 8006ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f20 <__libc_init_array+0x3c>)
 8006eea:	1b64      	subs	r4, r4, r5
 8006eec:	10a4      	asrs	r4, r4, #2
 8006eee:	2600      	movs	r6, #0
 8006ef0:	42a6      	cmp	r6, r4
 8006ef2:	d109      	bne.n	8006f08 <__libc_init_array+0x24>
 8006ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8006f24 <__libc_init_array+0x40>)
 8006ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8006f28 <__libc_init_array+0x44>)
 8006ef8:	f001 ffa0 	bl	8008e3c <_init>
 8006efc:	1b64      	subs	r4, r4, r5
 8006efe:	10a4      	asrs	r4, r4, #2
 8006f00:	2600      	movs	r6, #0
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	d105      	bne.n	8006f12 <__libc_init_array+0x2e>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0c:	4798      	blx	r3
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7ee      	b.n	8006ef0 <__libc_init_array+0xc>
 8006f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f16:	4798      	blx	r3
 8006f18:	3601      	adds	r6, #1
 8006f1a:	e7f2      	b.n	8006f02 <__libc_init_array+0x1e>
 8006f1c:	08009328 	.word	0x08009328
 8006f20:	08009328 	.word	0x08009328
 8006f24:	08009328 	.word	0x08009328
 8006f28:	0800932c 	.word	0x0800932c

08006f2c <__retarget_lock_init_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_acquire_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_release_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <memcpy>:
 8006f32:	440a      	add	r2, r1
 8006f34:	4291      	cmp	r1, r2
 8006f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f3a:	d100      	bne.n	8006f3e <memcpy+0xc>
 8006f3c:	4770      	bx	lr
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f48:	4291      	cmp	r1, r2
 8006f4a:	d1f9      	bne.n	8006f40 <memcpy+0xe>
 8006f4c:	bd10      	pop	{r4, pc}

08006f4e <quorem>:
 8006f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f52:	6903      	ldr	r3, [r0, #16]
 8006f54:	690c      	ldr	r4, [r1, #16]
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	4607      	mov	r7, r0
 8006f5a:	db7e      	blt.n	800705a <quorem+0x10c>
 8006f5c:	3c01      	subs	r4, #1
 8006f5e:	f101 0814 	add.w	r8, r1, #20
 8006f62:	00a3      	lsls	r3, r4, #2
 8006f64:	f100 0514 	add.w	r5, r0, #20
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f84:	d32e      	bcc.n	8006fe4 <quorem+0x96>
 8006f86:	f04f 0a00 	mov.w	sl, #0
 8006f8a:	46c4      	mov	ip, r8
 8006f8c:	46ae      	mov	lr, r5
 8006f8e:	46d3      	mov	fp, sl
 8006f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f94:	b298      	uxth	r0, r3
 8006f96:	fb06 a000 	mla	r0, r6, r0, sl
 8006f9a:	0c02      	lsrs	r2, r0, #16
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	fb06 2303 	mla	r3, r6, r3, r2
 8006fa2:	f8de 2000 	ldr.w	r2, [lr]
 8006fa6:	b280      	uxth	r0, r0
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	1a12      	subs	r2, r2, r0
 8006fac:	445a      	add	r2, fp
 8006fae:	f8de 0000 	ldr.w	r0, [lr]
 8006fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fbc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fc6:	45e1      	cmp	r9, ip
 8006fc8:	f84e 2b04 	str.w	r2, [lr], #4
 8006fcc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fd0:	d2de      	bcs.n	8006f90 <quorem+0x42>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	58eb      	ldr	r3, [r5, r3]
 8006fd6:	b92b      	cbnz	r3, 8006fe4 <quorem+0x96>
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	d32f      	bcc.n	8007042 <quorem+0xf4>
 8006fe2:	613c      	str	r4, [r7, #16]
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f001 f8c3 	bl	8008170 <__mcmp>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	db25      	blt.n	800703a <quorem+0xec>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ff6:	f8d1 c000 	ldr.w	ip, [r1]
 8006ffa:	fa1f fe82 	uxth.w	lr, r2
 8006ffe:	fa1f f38c 	uxth.w	r3, ip
 8007002:	eba3 030e 	sub.w	r3, r3, lr
 8007006:	4403      	add	r3, r0
 8007008:	0c12      	lsrs	r2, r2, #16
 800700a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800700e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007012:	b29b      	uxth	r3, r3
 8007014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007018:	45c1      	cmp	r9, r8
 800701a:	f841 3b04 	str.w	r3, [r1], #4
 800701e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007022:	d2e6      	bcs.n	8006ff2 <quorem+0xa4>
 8007024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800702c:	b922      	cbnz	r2, 8007038 <quorem+0xea>
 800702e:	3b04      	subs	r3, #4
 8007030:	429d      	cmp	r5, r3
 8007032:	461a      	mov	r2, r3
 8007034:	d30b      	bcc.n	800704e <quorem+0x100>
 8007036:	613c      	str	r4, [r7, #16]
 8007038:	3601      	adds	r6, #1
 800703a:	4630      	mov	r0, r6
 800703c:	b003      	add	sp, #12
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	3b04      	subs	r3, #4
 8007046:	2a00      	cmp	r2, #0
 8007048:	d1cb      	bne.n	8006fe2 <quorem+0x94>
 800704a:	3c01      	subs	r4, #1
 800704c:	e7c6      	b.n	8006fdc <quorem+0x8e>
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	3b04      	subs	r3, #4
 8007052:	2a00      	cmp	r2, #0
 8007054:	d1ef      	bne.n	8007036 <quorem+0xe8>
 8007056:	3c01      	subs	r4, #1
 8007058:	e7ea      	b.n	8007030 <quorem+0xe2>
 800705a:	2000      	movs	r0, #0
 800705c:	e7ee      	b.n	800703c <quorem+0xee>
	...

08007060 <_dtoa_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	69c7      	ldr	r7, [r0, #28]
 8007066:	b099      	sub	sp, #100	@ 0x64
 8007068:	ed8d 0b02 	vstr	d0, [sp, #8]
 800706c:	ec55 4b10 	vmov	r4, r5, d0
 8007070:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007072:	9109      	str	r1, [sp, #36]	@ 0x24
 8007074:	4683      	mov	fp, r0
 8007076:	920e      	str	r2, [sp, #56]	@ 0x38
 8007078:	9313      	str	r3, [sp, #76]	@ 0x4c
 800707a:	b97f      	cbnz	r7, 800709c <_dtoa_r+0x3c>
 800707c:	2010      	movs	r0, #16
 800707e:	f7ff f86f 	bl	8006160 <malloc>
 8007082:	4602      	mov	r2, r0
 8007084:	f8cb 001c 	str.w	r0, [fp, #28]
 8007088:	b920      	cbnz	r0, 8007094 <_dtoa_r+0x34>
 800708a:	4ba7      	ldr	r3, [pc, #668]	@ (8007328 <_dtoa_r+0x2c8>)
 800708c:	21ef      	movs	r1, #239	@ 0xef
 800708e:	48a7      	ldr	r0, [pc, #668]	@ (800732c <_dtoa_r+0x2cc>)
 8007090:	f001 fd6a 	bl	8008b68 <__assert_func>
 8007094:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007098:	6007      	str	r7, [r0, #0]
 800709a:	60c7      	str	r7, [r0, #12]
 800709c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070a0:	6819      	ldr	r1, [r3, #0]
 80070a2:	b159      	cbz	r1, 80070bc <_dtoa_r+0x5c>
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	604a      	str	r2, [r1, #4]
 80070a8:	2301      	movs	r3, #1
 80070aa:	4093      	lsls	r3, r2
 80070ac:	608b      	str	r3, [r1, #8]
 80070ae:	4658      	mov	r0, fp
 80070b0:	f000 fe24 	bl	8007cfc <_Bfree>
 80070b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	1e2b      	subs	r3, r5, #0
 80070be:	bfb9      	ittee	lt
 80070c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070c4:	9303      	strlt	r3, [sp, #12]
 80070c6:	2300      	movge	r3, #0
 80070c8:	6033      	strge	r3, [r6, #0]
 80070ca:	9f03      	ldr	r7, [sp, #12]
 80070cc:	4b98      	ldr	r3, [pc, #608]	@ (8007330 <_dtoa_r+0x2d0>)
 80070ce:	bfbc      	itt	lt
 80070d0:	2201      	movlt	r2, #1
 80070d2:	6032      	strlt	r2, [r6, #0]
 80070d4:	43bb      	bics	r3, r7
 80070d6:	d112      	bne.n	80070fe <_dtoa_r+0x9e>
 80070d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070e4:	4323      	orrs	r3, r4
 80070e6:	f000 854d 	beq.w	8007b84 <_dtoa_r+0xb24>
 80070ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007344 <_dtoa_r+0x2e4>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 854f 	beq.w	8007b94 <_dtoa_r+0xb34>
 80070f6:	f10a 0303 	add.w	r3, sl, #3
 80070fa:	f000 bd49 	b.w	8007b90 <_dtoa_r+0xb30>
 80070fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	ec51 0b17 	vmov	r0, r1, d7
 8007108:	2300      	movs	r3, #0
 800710a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800710e:	f7f9 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007112:	4680      	mov	r8, r0
 8007114:	b158      	cbz	r0, 800712e <_dtoa_r+0xce>
 8007116:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007118:	2301      	movs	r3, #1
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800711e:	b113      	cbz	r3, 8007126 <_dtoa_r+0xc6>
 8007120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007122:	4b84      	ldr	r3, [pc, #528]	@ (8007334 <_dtoa_r+0x2d4>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007348 <_dtoa_r+0x2e8>
 800712a:	f000 bd33 	b.w	8007b94 <_dtoa_r+0xb34>
 800712e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007132:	aa16      	add	r2, sp, #88	@ 0x58
 8007134:	a917      	add	r1, sp, #92	@ 0x5c
 8007136:	4658      	mov	r0, fp
 8007138:	f001 f8ca 	bl	80082d0 <__d2b>
 800713c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007140:	4681      	mov	r9, r0
 8007142:	2e00      	cmp	r6, #0
 8007144:	d077      	beq.n	8007236 <_dtoa_r+0x1d6>
 8007146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007148:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800714c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007154:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007158:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800715c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007160:	4619      	mov	r1, r3
 8007162:	2200      	movs	r2, #0
 8007164:	4b74      	ldr	r3, [pc, #464]	@ (8007338 <_dtoa_r+0x2d8>)
 8007166:	f7f9 f88f 	bl	8000288 <__aeabi_dsub>
 800716a:	a369      	add	r3, pc, #420	@ (adr r3, 8007310 <_dtoa_r+0x2b0>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	a368      	add	r3, pc, #416	@ (adr r3, 8007318 <_dtoa_r+0x2b8>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f887 	bl	800028c <__adddf3>
 800717e:	4604      	mov	r4, r0
 8007180:	4630      	mov	r0, r6
 8007182:	460d      	mov	r5, r1
 8007184:	f7f9 f9ce 	bl	8000524 <__aeabi_i2d>
 8007188:	a365      	add	r3, pc, #404	@ (adr r3, 8007320 <_dtoa_r+0x2c0>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 f877 	bl	800028c <__adddf3>
 800719e:	4604      	mov	r4, r0
 80071a0:	460d      	mov	r5, r1
 80071a2:	f7f9 fcd9 	bl	8000b58 <__aeabi_d2iz>
 80071a6:	2200      	movs	r2, #0
 80071a8:	4607      	mov	r7, r0
 80071aa:	2300      	movs	r3, #0
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fc94 	bl	8000adc <__aeabi_dcmplt>
 80071b4:	b140      	cbz	r0, 80071c8 <_dtoa_r+0x168>
 80071b6:	4638      	mov	r0, r7
 80071b8:	f7f9 f9b4 	bl	8000524 <__aeabi_i2d>
 80071bc:	4622      	mov	r2, r4
 80071be:	462b      	mov	r3, r5
 80071c0:	f7f9 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c4:	b900      	cbnz	r0, 80071c8 <_dtoa_r+0x168>
 80071c6:	3f01      	subs	r7, #1
 80071c8:	2f16      	cmp	r7, #22
 80071ca:	d851      	bhi.n	8007270 <_dtoa_r+0x210>
 80071cc:	4b5b      	ldr	r3, [pc, #364]	@ (800733c <_dtoa_r+0x2dc>)
 80071ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071da:	f7f9 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d048      	beq.n	8007274 <_dtoa_r+0x214>
 80071e2:	3f01      	subs	r7, #1
 80071e4:	2300      	movs	r3, #0
 80071e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80071e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071ea:	1b9b      	subs	r3, r3, r6
 80071ec:	1e5a      	subs	r2, r3, #1
 80071ee:	bf44      	itt	mi
 80071f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80071f4:	2300      	movmi	r3, #0
 80071f6:	9208      	str	r2, [sp, #32]
 80071f8:	bf54      	ite	pl
 80071fa:	f04f 0800 	movpl.w	r8, #0
 80071fe:	9308      	strmi	r3, [sp, #32]
 8007200:	2f00      	cmp	r7, #0
 8007202:	db39      	blt.n	8007278 <_dtoa_r+0x218>
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007208:	443b      	add	r3, r7
 800720a:	9308      	str	r3, [sp, #32]
 800720c:	2300      	movs	r3, #0
 800720e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007212:	2b09      	cmp	r3, #9
 8007214:	d864      	bhi.n	80072e0 <_dtoa_r+0x280>
 8007216:	2b05      	cmp	r3, #5
 8007218:	bfc4      	itt	gt
 800721a:	3b04      	subgt	r3, #4
 800721c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800721e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007220:	f1a3 0302 	sub.w	r3, r3, #2
 8007224:	bfcc      	ite	gt
 8007226:	2400      	movgt	r4, #0
 8007228:	2401      	movle	r4, #1
 800722a:	2b03      	cmp	r3, #3
 800722c:	d863      	bhi.n	80072f6 <_dtoa_r+0x296>
 800722e:	e8df f003 	tbb	[pc, r3]
 8007232:	372a      	.short	0x372a
 8007234:	5535      	.short	0x5535
 8007236:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800723a:	441e      	add	r6, r3
 800723c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007240:	2b20      	cmp	r3, #32
 8007242:	bfc1      	itttt	gt
 8007244:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007248:	409f      	lslgt	r7, r3
 800724a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800724e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007252:	bfd6      	itet	le
 8007254:	f1c3 0320 	rsble	r3, r3, #32
 8007258:	ea47 0003 	orrgt.w	r0, r7, r3
 800725c:	fa04 f003 	lslle.w	r0, r4, r3
 8007260:	f7f9 f950 	bl	8000504 <__aeabi_ui2d>
 8007264:	2201      	movs	r2, #1
 8007266:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800726a:	3e01      	subs	r6, #1
 800726c:	9214      	str	r2, [sp, #80]	@ 0x50
 800726e:	e777      	b.n	8007160 <_dtoa_r+0x100>
 8007270:	2301      	movs	r3, #1
 8007272:	e7b8      	b.n	80071e6 <_dtoa_r+0x186>
 8007274:	9012      	str	r0, [sp, #72]	@ 0x48
 8007276:	e7b7      	b.n	80071e8 <_dtoa_r+0x188>
 8007278:	427b      	negs	r3, r7
 800727a:	930a      	str	r3, [sp, #40]	@ 0x28
 800727c:	2300      	movs	r3, #0
 800727e:	eba8 0807 	sub.w	r8, r8, r7
 8007282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007284:	e7c4      	b.n	8007210 <_dtoa_r+0x1b0>
 8007286:	2300      	movs	r3, #0
 8007288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800728a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	dc35      	bgt.n	80072fc <_dtoa_r+0x29c>
 8007290:	2301      	movs	r3, #1
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	461a      	mov	r2, r3
 8007298:	920e      	str	r2, [sp, #56]	@ 0x38
 800729a:	e00b      	b.n	80072b4 <_dtoa_r+0x254>
 800729c:	2301      	movs	r3, #1
 800729e:	e7f3      	b.n	8007288 <_dtoa_r+0x228>
 80072a0:	2300      	movs	r3, #0
 80072a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	9307      	str	r3, [sp, #28]
 80072b0:	bfb8      	it	lt
 80072b2:	2301      	movlt	r3, #1
 80072b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072b8:	2100      	movs	r1, #0
 80072ba:	2204      	movs	r2, #4
 80072bc:	f102 0514 	add.w	r5, r2, #20
 80072c0:	429d      	cmp	r5, r3
 80072c2:	d91f      	bls.n	8007304 <_dtoa_r+0x2a4>
 80072c4:	6041      	str	r1, [r0, #4]
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fcd8 	bl	8007c7c <_Balloc>
 80072cc:	4682      	mov	sl, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d13c      	bne.n	800734c <_dtoa_r+0x2ec>
 80072d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007340 <_dtoa_r+0x2e0>)
 80072d4:	4602      	mov	r2, r0
 80072d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80072da:	e6d8      	b.n	800708e <_dtoa_r+0x2e>
 80072dc:	2301      	movs	r3, #1
 80072de:	e7e0      	b.n	80072a2 <_dtoa_r+0x242>
 80072e0:	2401      	movs	r4, #1
 80072e2:	2300      	movs	r3, #0
 80072e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2312      	movs	r3, #18
 80072f4:	e7d0      	b.n	8007298 <_dtoa_r+0x238>
 80072f6:	2301      	movs	r3, #1
 80072f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072fa:	e7f5      	b.n	80072e8 <_dtoa_r+0x288>
 80072fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	9307      	str	r3, [sp, #28]
 8007302:	e7d7      	b.n	80072b4 <_dtoa_r+0x254>
 8007304:	3101      	adds	r1, #1
 8007306:	0052      	lsls	r2, r2, #1
 8007308:	e7d8      	b.n	80072bc <_dtoa_r+0x25c>
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w
 8007310:	636f4361 	.word	0x636f4361
 8007314:	3fd287a7 	.word	0x3fd287a7
 8007318:	8b60c8b3 	.word	0x8b60c8b3
 800731c:	3fc68a28 	.word	0x3fc68a28
 8007320:	509f79fb 	.word	0x509f79fb
 8007324:	3fd34413 	.word	0x3fd34413
 8007328:	08008fed 	.word	0x08008fed
 800732c:	08009004 	.word	0x08009004
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	08008fbd 	.word	0x08008fbd
 8007338:	3ff80000 	.word	0x3ff80000
 800733c:	08009100 	.word	0x08009100
 8007340:	0800905c 	.word	0x0800905c
 8007344:	08008fe9 	.word	0x08008fe9
 8007348:	08008fbc 	.word	0x08008fbc
 800734c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007350:	6018      	str	r0, [r3, #0]
 8007352:	9b07      	ldr	r3, [sp, #28]
 8007354:	2b0e      	cmp	r3, #14
 8007356:	f200 80a4 	bhi.w	80074a2 <_dtoa_r+0x442>
 800735a:	2c00      	cmp	r4, #0
 800735c:	f000 80a1 	beq.w	80074a2 <_dtoa_r+0x442>
 8007360:	2f00      	cmp	r7, #0
 8007362:	dd33      	ble.n	80073cc <_dtoa_r+0x36c>
 8007364:	4bad      	ldr	r3, [pc, #692]	@ (800761c <_dtoa_r+0x5bc>)
 8007366:	f007 020f 	and.w	r2, r7, #15
 800736a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800736e:	ed93 7b00 	vldr	d7, [r3]
 8007372:	05f8      	lsls	r0, r7, #23
 8007374:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007378:	ea4f 1427 	mov.w	r4, r7, asr #4
 800737c:	d516      	bpl.n	80073ac <_dtoa_r+0x34c>
 800737e:	4ba8      	ldr	r3, [pc, #672]	@ (8007620 <_dtoa_r+0x5c0>)
 8007380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007388:	f7f9 fa60 	bl	800084c <__aeabi_ddiv>
 800738c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007390:	f004 040f 	and.w	r4, r4, #15
 8007394:	2603      	movs	r6, #3
 8007396:	4da2      	ldr	r5, [pc, #648]	@ (8007620 <_dtoa_r+0x5c0>)
 8007398:	b954      	cbnz	r4, 80073b0 <_dtoa_r+0x350>
 800739a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800739e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a2:	f7f9 fa53 	bl	800084c <__aeabi_ddiv>
 80073a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073aa:	e028      	b.n	80073fe <_dtoa_r+0x39e>
 80073ac:	2602      	movs	r6, #2
 80073ae:	e7f2      	b.n	8007396 <_dtoa_r+0x336>
 80073b0:	07e1      	lsls	r1, r4, #31
 80073b2:	d508      	bpl.n	80073c6 <_dtoa_r+0x366>
 80073b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c4:	3601      	adds	r6, #1
 80073c6:	1064      	asrs	r4, r4, #1
 80073c8:	3508      	adds	r5, #8
 80073ca:	e7e5      	b.n	8007398 <_dtoa_r+0x338>
 80073cc:	f000 80d2 	beq.w	8007574 <_dtoa_r+0x514>
 80073d0:	427c      	negs	r4, r7
 80073d2:	4b92      	ldr	r3, [pc, #584]	@ (800761c <_dtoa_r+0x5bc>)
 80073d4:	4d92      	ldr	r5, [pc, #584]	@ (8007620 <_dtoa_r+0x5c0>)
 80073d6:	f004 020f 	and.w	r2, r4, #15
 80073da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ee:	1124      	asrs	r4, r4, #4
 80073f0:	2300      	movs	r3, #0
 80073f2:	2602      	movs	r6, #2
 80073f4:	2c00      	cmp	r4, #0
 80073f6:	f040 80b2 	bne.w	800755e <_dtoa_r+0x4fe>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1d3      	bne.n	80073a6 <_dtoa_r+0x346>
 80073fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007400:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80b7 	beq.w	8007578 <_dtoa_r+0x518>
 800740a:	4b86      	ldr	r3, [pc, #536]	@ (8007624 <_dtoa_r+0x5c4>)
 800740c:	2200      	movs	r2, #0
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fb63 	bl	8000adc <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f000 80ae 	beq.w	8007578 <_dtoa_r+0x518>
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80aa 	beq.w	8007578 <_dtoa_r+0x518>
 8007424:	9b00      	ldr	r3, [sp, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd37      	ble.n	800749a <_dtoa_r+0x43a>
 800742a:	1e7b      	subs	r3, r7, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	4620      	mov	r0, r4
 8007430:	4b7d      	ldr	r3, [pc, #500]	@ (8007628 <_dtoa_r+0x5c8>)
 8007432:	2200      	movs	r2, #0
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 f8df 	bl	80005f8 <__aeabi_dmul>
 800743a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800743e:	9c00      	ldr	r4, [sp, #0]
 8007440:	3601      	adds	r6, #1
 8007442:	4630      	mov	r0, r6
 8007444:	f7f9 f86e 	bl	8000524 <__aeabi_i2d>
 8007448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800744c:	f7f9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8007450:	4b76      	ldr	r3, [pc, #472]	@ (800762c <_dtoa_r+0x5cc>)
 8007452:	2200      	movs	r2, #0
 8007454:	f7f8 ff1a 	bl	800028c <__adddf3>
 8007458:	4605      	mov	r5, r0
 800745a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800745e:	2c00      	cmp	r4, #0
 8007460:	f040 808d 	bne.w	800757e <_dtoa_r+0x51e>
 8007464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007468:	4b71      	ldr	r3, [pc, #452]	@ (8007630 <_dtoa_r+0x5d0>)
 800746a:	2200      	movs	r2, #0
 800746c:	f7f8 ff0c 	bl	8000288 <__aeabi_dsub>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007478:	462a      	mov	r2, r5
 800747a:	4633      	mov	r3, r6
 800747c:	f7f9 fb4c 	bl	8000b18 <__aeabi_dcmpgt>
 8007480:	2800      	cmp	r0, #0
 8007482:	f040 828b 	bne.w	800799c <_dtoa_r+0x93c>
 8007486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748a:	462a      	mov	r2, r5
 800748c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007490:	f7f9 fb24 	bl	8000adc <__aeabi_dcmplt>
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 8128 	bne.w	80076ea <_dtoa_r+0x68a>
 800749a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800749e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80074a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f2c0 815a 	blt.w	800775e <_dtoa_r+0x6fe>
 80074aa:	2f0e      	cmp	r7, #14
 80074ac:	f300 8157 	bgt.w	800775e <_dtoa_r+0x6fe>
 80074b0:	4b5a      	ldr	r3, [pc, #360]	@ (800761c <_dtoa_r+0x5bc>)
 80074b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074b6:	ed93 7b00 	vldr	d7, [r3]
 80074ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	ed8d 7b00 	vstr	d7, [sp]
 80074c2:	da03      	bge.n	80074cc <_dtoa_r+0x46c>
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f340 8101 	ble.w	80076ce <_dtoa_r+0x66e>
 80074cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074d0:	4656      	mov	r6, sl
 80074d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 f9b7 	bl	800084c <__aeabi_ddiv>
 80074de:	f7f9 fb3b 	bl	8000b58 <__aeabi_d2iz>
 80074e2:	4680      	mov	r8, r0
 80074e4:	f7f9 f81e 	bl	8000524 <__aeabi_i2d>
 80074e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ec:	f7f9 f884 	bl	80005f8 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074fc:	f7f8 fec4 	bl	8000288 <__aeabi_dsub>
 8007500:	f806 4b01 	strb.w	r4, [r6], #1
 8007504:	9d07      	ldr	r5, [sp, #28]
 8007506:	eba6 040a 	sub.w	r4, r6, sl
 800750a:	42a5      	cmp	r5, r4
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	f040 8117 	bne.w	8007742 <_dtoa_r+0x6e2>
 8007514:	f7f8 feba 	bl	800028c <__adddf3>
 8007518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	f7f9 fafa 	bl	8000b18 <__aeabi_dcmpgt>
 8007524:	2800      	cmp	r0, #0
 8007526:	f040 80f9 	bne.w	800771c <_dtoa_r+0x6bc>
 800752a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800752e:	4620      	mov	r0, r4
 8007530:	4629      	mov	r1, r5
 8007532:	f7f9 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007536:	b118      	cbz	r0, 8007540 <_dtoa_r+0x4e0>
 8007538:	f018 0f01 	tst.w	r8, #1
 800753c:	f040 80ee 	bne.w	800771c <_dtoa_r+0x6bc>
 8007540:	4649      	mov	r1, r9
 8007542:	4658      	mov	r0, fp
 8007544:	f000 fbda 	bl	8007cfc <_Bfree>
 8007548:	2300      	movs	r3, #0
 800754a:	7033      	strb	r3, [r6, #0]
 800754c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800754e:	3701      	adds	r7, #1
 8007550:	601f      	str	r7, [r3, #0]
 8007552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 831d 	beq.w	8007b94 <_dtoa_r+0xb34>
 800755a:	601e      	str	r6, [r3, #0]
 800755c:	e31a      	b.n	8007b94 <_dtoa_r+0xb34>
 800755e:	07e2      	lsls	r2, r4, #31
 8007560:	d505      	bpl.n	800756e <_dtoa_r+0x50e>
 8007562:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007566:	f7f9 f847 	bl	80005f8 <__aeabi_dmul>
 800756a:	3601      	adds	r6, #1
 800756c:	2301      	movs	r3, #1
 800756e:	1064      	asrs	r4, r4, #1
 8007570:	3508      	adds	r5, #8
 8007572:	e73f      	b.n	80073f4 <_dtoa_r+0x394>
 8007574:	2602      	movs	r6, #2
 8007576:	e742      	b.n	80073fe <_dtoa_r+0x39e>
 8007578:	9c07      	ldr	r4, [sp, #28]
 800757a:	9704      	str	r7, [sp, #16]
 800757c:	e761      	b.n	8007442 <_dtoa_r+0x3e2>
 800757e:	4b27      	ldr	r3, [pc, #156]	@ (800761c <_dtoa_r+0x5bc>)
 8007580:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007586:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800758a:	4454      	add	r4, sl
 800758c:	2900      	cmp	r1, #0
 800758e:	d053      	beq.n	8007638 <_dtoa_r+0x5d8>
 8007590:	4928      	ldr	r1, [pc, #160]	@ (8007634 <_dtoa_r+0x5d4>)
 8007592:	2000      	movs	r0, #0
 8007594:	f7f9 f95a 	bl	800084c <__aeabi_ddiv>
 8007598:	4633      	mov	r3, r6
 800759a:	462a      	mov	r2, r5
 800759c:	f7f8 fe74 	bl	8000288 <__aeabi_dsub>
 80075a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075a4:	4656      	mov	r6, sl
 80075a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075aa:	f7f9 fad5 	bl	8000b58 <__aeabi_d2iz>
 80075ae:	4605      	mov	r5, r0
 80075b0:	f7f8 ffb8 	bl	8000524 <__aeabi_i2d>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	3530      	adds	r5, #48	@ 0x30
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075ca:	f806 5b01 	strb.w	r5, [r6], #1
 80075ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075d2:	f7f9 fa83 	bl	8000adc <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d171      	bne.n	80076be <_dtoa_r+0x65e>
 80075da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075de:	4911      	ldr	r1, [pc, #68]	@ (8007624 <_dtoa_r+0x5c4>)
 80075e0:	2000      	movs	r0, #0
 80075e2:	f7f8 fe51 	bl	8000288 <__aeabi_dsub>
 80075e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075ea:	f7f9 fa77 	bl	8000adc <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f040 8095 	bne.w	800771e <_dtoa_r+0x6be>
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	f43f af50 	beq.w	800749a <_dtoa_r+0x43a>
 80075fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <_dtoa_r+0x5c8>)
 8007600:	2200      	movs	r2, #0
 8007602:	f7f8 fff9 	bl	80005f8 <__aeabi_dmul>
 8007606:	4b08      	ldr	r3, [pc, #32]	@ (8007628 <_dtoa_r+0x5c8>)
 8007608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800760c:	2200      	movs	r2, #0
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	f7f8 fff1 	bl	80005f8 <__aeabi_dmul>
 8007616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761a:	e7c4      	b.n	80075a6 <_dtoa_r+0x546>
 800761c:	08009100 	.word	0x08009100
 8007620:	080090d8 	.word	0x080090d8
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	40240000 	.word	0x40240000
 800762c:	401c0000 	.word	0x401c0000
 8007630:	40140000 	.word	0x40140000
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007644:	9415      	str	r4, [sp, #84]	@ 0x54
 8007646:	4656      	mov	r6, sl
 8007648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764c:	f7f9 fa84 	bl	8000b58 <__aeabi_d2iz>
 8007650:	4605      	mov	r5, r0
 8007652:	f7f8 ff67 	bl	8000524 <__aeabi_i2d>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800765e:	f7f8 fe13 	bl	8000288 <__aeabi_dsub>
 8007662:	3530      	adds	r5, #48	@ 0x30
 8007664:	f806 5b01 	strb.w	r5, [r6], #1
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	42a6      	cmp	r6, r4
 800766e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	d124      	bne.n	80076c2 <_dtoa_r+0x662>
 8007678:	4bac      	ldr	r3, [pc, #688]	@ (800792c <_dtoa_r+0x8cc>)
 800767a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800767e:	f7f8 fe05 	bl	800028c <__adddf3>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768a:	f7f9 fa45 	bl	8000b18 <__aeabi_dcmpgt>
 800768e:	2800      	cmp	r0, #0
 8007690:	d145      	bne.n	800771e <_dtoa_r+0x6be>
 8007692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007696:	49a5      	ldr	r1, [pc, #660]	@ (800792c <_dtoa_r+0x8cc>)
 8007698:	2000      	movs	r0, #0
 800769a:	f7f8 fdf5 	bl	8000288 <__aeabi_dsub>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a6:	f7f9 fa19 	bl	8000adc <__aeabi_dcmplt>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f aef5 	beq.w	800749a <_dtoa_r+0x43a>
 80076b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80076b2:	1e73      	subs	r3, r6, #1
 80076b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80076b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076ba:	2b30      	cmp	r3, #48	@ 0x30
 80076bc:	d0f8      	beq.n	80076b0 <_dtoa_r+0x650>
 80076be:	9f04      	ldr	r7, [sp, #16]
 80076c0:	e73e      	b.n	8007540 <_dtoa_r+0x4e0>
 80076c2:	4b9b      	ldr	r3, [pc, #620]	@ (8007930 <_dtoa_r+0x8d0>)
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076cc:	e7bc      	b.n	8007648 <_dtoa_r+0x5e8>
 80076ce:	d10c      	bne.n	80076ea <_dtoa_r+0x68a>
 80076d0:	4b98      	ldr	r3, [pc, #608]	@ (8007934 <_dtoa_r+0x8d4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076d8:	f7f8 ff8e 	bl	80005f8 <__aeabi_dmul>
 80076dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076e0:	f7f9 fa10 	bl	8000b04 <__aeabi_dcmpge>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f000 8157 	beq.w	8007998 <_dtoa_r+0x938>
 80076ea:	2400      	movs	r4, #0
 80076ec:	4625      	mov	r5, r4
 80076ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f0:	43db      	mvns	r3, r3
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	4656      	mov	r6, sl
 80076f6:	2700      	movs	r7, #0
 80076f8:	4621      	mov	r1, r4
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fafe 	bl	8007cfc <_Bfree>
 8007700:	2d00      	cmp	r5, #0
 8007702:	d0dc      	beq.n	80076be <_dtoa_r+0x65e>
 8007704:	b12f      	cbz	r7, 8007712 <_dtoa_r+0x6b2>
 8007706:	42af      	cmp	r7, r5
 8007708:	d003      	beq.n	8007712 <_dtoa_r+0x6b2>
 800770a:	4639      	mov	r1, r7
 800770c:	4658      	mov	r0, fp
 800770e:	f000 faf5 	bl	8007cfc <_Bfree>
 8007712:	4629      	mov	r1, r5
 8007714:	4658      	mov	r0, fp
 8007716:	f000 faf1 	bl	8007cfc <_Bfree>
 800771a:	e7d0      	b.n	80076be <_dtoa_r+0x65e>
 800771c:	9704      	str	r7, [sp, #16]
 800771e:	4633      	mov	r3, r6
 8007720:	461e      	mov	r6, r3
 8007722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007726:	2a39      	cmp	r2, #57	@ 0x39
 8007728:	d107      	bne.n	800773a <_dtoa_r+0x6da>
 800772a:	459a      	cmp	sl, r3
 800772c:	d1f8      	bne.n	8007720 <_dtoa_r+0x6c0>
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	3201      	adds	r2, #1
 8007732:	9204      	str	r2, [sp, #16]
 8007734:	2230      	movs	r2, #48	@ 0x30
 8007736:	f88a 2000 	strb.w	r2, [sl]
 800773a:	781a      	ldrb	r2, [r3, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e7bd      	b.n	80076be <_dtoa_r+0x65e>
 8007742:	4b7b      	ldr	r3, [pc, #492]	@ (8007930 <_dtoa_r+0x8d0>)
 8007744:	2200      	movs	r2, #0
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	f7f9 f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f aebb 	beq.w	80074d2 <_dtoa_r+0x472>
 800775c:	e6f0      	b.n	8007540 <_dtoa_r+0x4e0>
 800775e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007760:	2a00      	cmp	r2, #0
 8007762:	f000 80db 	beq.w	800791c <_dtoa_r+0x8bc>
 8007766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007768:	2a01      	cmp	r2, #1
 800776a:	f300 80bf 	bgt.w	80078ec <_dtoa_r+0x88c>
 800776e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007770:	2a00      	cmp	r2, #0
 8007772:	f000 80b7 	beq.w	80078e4 <_dtoa_r+0x884>
 8007776:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800777a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800777c:	4646      	mov	r6, r8
 800777e:	9a08      	ldr	r2, [sp, #32]
 8007780:	2101      	movs	r1, #1
 8007782:	441a      	add	r2, r3
 8007784:	4658      	mov	r0, fp
 8007786:	4498      	add	r8, r3
 8007788:	9208      	str	r2, [sp, #32]
 800778a:	f000 fb6b 	bl	8007e64 <__i2b>
 800778e:	4605      	mov	r5, r0
 8007790:	b15e      	cbz	r6, 80077aa <_dtoa_r+0x74a>
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd08      	ble.n	80077aa <_dtoa_r+0x74a>
 8007798:	42b3      	cmp	r3, r6
 800779a:	9a08      	ldr	r2, [sp, #32]
 800779c:	bfa8      	it	ge
 800779e:	4633      	movge	r3, r6
 80077a0:	eba8 0803 	sub.w	r8, r8, r3
 80077a4:	1af6      	subs	r6, r6, r3
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	9308      	str	r3, [sp, #32]
 80077aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ac:	b1f3      	cbz	r3, 80077ec <_dtoa_r+0x78c>
 80077ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80b7 	beq.w	8007924 <_dtoa_r+0x8c4>
 80077b6:	b18c      	cbz	r4, 80077dc <_dtoa_r+0x77c>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4622      	mov	r2, r4
 80077bc:	4658      	mov	r0, fp
 80077be:	f000 fc11 	bl	8007fe4 <__pow5mult>
 80077c2:	464a      	mov	r2, r9
 80077c4:	4601      	mov	r1, r0
 80077c6:	4605      	mov	r5, r0
 80077c8:	4658      	mov	r0, fp
 80077ca:	f000 fb61 	bl	8007e90 <__multiply>
 80077ce:	4649      	mov	r1, r9
 80077d0:	9004      	str	r0, [sp, #16]
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fa92 	bl	8007cfc <_Bfree>
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	4699      	mov	r9, r3
 80077dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077de:	1b1a      	subs	r2, r3, r4
 80077e0:	d004      	beq.n	80077ec <_dtoa_r+0x78c>
 80077e2:	4649      	mov	r1, r9
 80077e4:	4658      	mov	r0, fp
 80077e6:	f000 fbfd 	bl	8007fe4 <__pow5mult>
 80077ea:	4681      	mov	r9, r0
 80077ec:	2101      	movs	r1, #1
 80077ee:	4658      	mov	r0, fp
 80077f0:	f000 fb38 	bl	8007e64 <__i2b>
 80077f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f6:	4604      	mov	r4, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 81cf 	beq.w	8007b9c <_dtoa_r+0xb3c>
 80077fe:	461a      	mov	r2, r3
 8007800:	4601      	mov	r1, r0
 8007802:	4658      	mov	r0, fp
 8007804:	f000 fbee 	bl	8007fe4 <__pow5mult>
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	2b01      	cmp	r3, #1
 800780c:	4604      	mov	r4, r0
 800780e:	f300 8095 	bgt.w	800793c <_dtoa_r+0x8dc>
 8007812:	9b02      	ldr	r3, [sp, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f040 8087 	bne.w	8007928 <_dtoa_r+0x8c8>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 8089 	bne.w	8007938 <_dtoa_r+0x8d8>
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800782c:	0d1b      	lsrs	r3, r3, #20
 800782e:	051b      	lsls	r3, r3, #20
 8007830:	b12b      	cbz	r3, 800783e <_dtoa_r+0x7de>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	3301      	adds	r3, #1
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	f108 0801 	add.w	r8, r8, #1
 800783c:	2301      	movs	r3, #1
 800783e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 81b0 	beq.w	8007ba8 <_dtoa_r+0xb48>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800784e:	6918      	ldr	r0, [r3, #16]
 8007850:	f000 fabc 	bl	8007dcc <__hi0bits>
 8007854:	f1c0 0020 	rsb	r0, r0, #32
 8007858:	9b08      	ldr	r3, [sp, #32]
 800785a:	4418      	add	r0, r3
 800785c:	f010 001f 	ands.w	r0, r0, #31
 8007860:	d077      	beq.n	8007952 <_dtoa_r+0x8f2>
 8007862:	f1c0 0320 	rsb	r3, r0, #32
 8007866:	2b04      	cmp	r3, #4
 8007868:	dd6b      	ble.n	8007942 <_dtoa_r+0x8e2>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	f1c0 001c 	rsb	r0, r0, #28
 8007870:	4403      	add	r3, r0
 8007872:	4480      	add	r8, r0
 8007874:	4406      	add	r6, r0
 8007876:	9308      	str	r3, [sp, #32]
 8007878:	f1b8 0f00 	cmp.w	r8, #0
 800787c:	dd05      	ble.n	800788a <_dtoa_r+0x82a>
 800787e:	4649      	mov	r1, r9
 8007880:	4642      	mov	r2, r8
 8007882:	4658      	mov	r0, fp
 8007884:	f000 fc08 	bl	8008098 <__lshift>
 8007888:	4681      	mov	r9, r0
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd05      	ble.n	800789c <_dtoa_r+0x83c>
 8007890:	4621      	mov	r1, r4
 8007892:	461a      	mov	r2, r3
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fbff 	bl	8008098 <__lshift>
 800789a:	4604      	mov	r4, r0
 800789c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d059      	beq.n	8007956 <_dtoa_r+0x8f6>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4648      	mov	r0, r9
 80078a6:	f000 fc63 	bl	8008170 <__mcmp>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	da53      	bge.n	8007956 <_dtoa_r+0x8f6>
 80078ae:	1e7b      	subs	r3, r7, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	4649      	mov	r1, r9
 80078b4:	2300      	movs	r3, #0
 80078b6:	220a      	movs	r2, #10
 80078b8:	4658      	mov	r0, fp
 80078ba:	f000 fa41 	bl	8007d40 <__multadd>
 80078be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078c0:	4681      	mov	r9, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 8172 	beq.w	8007bac <_dtoa_r+0xb4c>
 80078c8:	2300      	movs	r3, #0
 80078ca:	4629      	mov	r1, r5
 80078cc:	220a      	movs	r2, #10
 80078ce:	4658      	mov	r0, fp
 80078d0:	f000 fa36 	bl	8007d40 <__multadd>
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	4605      	mov	r5, r0
 80078da:	dc67      	bgt.n	80079ac <_dtoa_r+0x94c>
 80078dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dc41      	bgt.n	8007966 <_dtoa_r+0x906>
 80078e2:	e063      	b.n	80079ac <_dtoa_r+0x94c>
 80078e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078ea:	e746      	b.n	800777a <_dtoa_r+0x71a>
 80078ec:	9b07      	ldr	r3, [sp, #28]
 80078ee:	1e5c      	subs	r4, r3, #1
 80078f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	bfbf      	itttt	lt
 80078f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80078fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078fc:	1ae3      	sublt	r3, r4, r3
 80078fe:	bfb4      	ite	lt
 8007900:	18d2      	addlt	r2, r2, r3
 8007902:	1b1c      	subge	r4, r3, r4
 8007904:	9b07      	ldr	r3, [sp, #28]
 8007906:	bfbc      	itt	lt
 8007908:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800790a:	2400      	movlt	r4, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfb5      	itete	lt
 8007910:	eba8 0603 	sublt.w	r6, r8, r3
 8007914:	9b07      	ldrge	r3, [sp, #28]
 8007916:	2300      	movlt	r3, #0
 8007918:	4646      	movge	r6, r8
 800791a:	e730      	b.n	800777e <_dtoa_r+0x71e>
 800791c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800791e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007920:	4646      	mov	r6, r8
 8007922:	e735      	b.n	8007790 <_dtoa_r+0x730>
 8007924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007926:	e75c      	b.n	80077e2 <_dtoa_r+0x782>
 8007928:	2300      	movs	r3, #0
 800792a:	e788      	b.n	800783e <_dtoa_r+0x7de>
 800792c:	3fe00000 	.word	0x3fe00000
 8007930:	40240000 	.word	0x40240000
 8007934:	40140000 	.word	0x40140000
 8007938:	9b02      	ldr	r3, [sp, #8]
 800793a:	e780      	b.n	800783e <_dtoa_r+0x7de>
 800793c:	2300      	movs	r3, #0
 800793e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007940:	e782      	b.n	8007848 <_dtoa_r+0x7e8>
 8007942:	d099      	beq.n	8007878 <_dtoa_r+0x818>
 8007944:	9a08      	ldr	r2, [sp, #32]
 8007946:	331c      	adds	r3, #28
 8007948:	441a      	add	r2, r3
 800794a:	4498      	add	r8, r3
 800794c:	441e      	add	r6, r3
 800794e:	9208      	str	r2, [sp, #32]
 8007950:	e792      	b.n	8007878 <_dtoa_r+0x818>
 8007952:	4603      	mov	r3, r0
 8007954:	e7f6      	b.n	8007944 <_dtoa_r+0x8e4>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	9704      	str	r7, [sp, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc20      	bgt.n	80079a0 <_dtoa_r+0x940>
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007962:	2b02      	cmp	r3, #2
 8007964:	dd1e      	ble.n	80079a4 <_dtoa_r+0x944>
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f aec0 	bne.w	80076ee <_dtoa_r+0x68e>
 800796e:	4621      	mov	r1, r4
 8007970:	2205      	movs	r2, #5
 8007972:	4658      	mov	r0, fp
 8007974:	f000 f9e4 	bl	8007d40 <__multadd>
 8007978:	4601      	mov	r1, r0
 800797a:	4604      	mov	r4, r0
 800797c:	4648      	mov	r0, r9
 800797e:	f000 fbf7 	bl	8008170 <__mcmp>
 8007982:	2800      	cmp	r0, #0
 8007984:	f77f aeb3 	ble.w	80076ee <_dtoa_r+0x68e>
 8007988:	4656      	mov	r6, sl
 800798a:	2331      	movs	r3, #49	@ 0x31
 800798c:	f806 3b01 	strb.w	r3, [r6], #1
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	3301      	adds	r3, #1
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	e6ae      	b.n	80076f6 <_dtoa_r+0x696>
 8007998:	9c07      	ldr	r4, [sp, #28]
 800799a:	9704      	str	r7, [sp, #16]
 800799c:	4625      	mov	r5, r4
 800799e:	e7f3      	b.n	8007988 <_dtoa_r+0x928>
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8104 	beq.w	8007bb4 <_dtoa_r+0xb54>
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	dd05      	ble.n	80079bc <_dtoa_r+0x95c>
 80079b0:	4629      	mov	r1, r5
 80079b2:	4632      	mov	r2, r6
 80079b4:	4658      	mov	r0, fp
 80079b6:	f000 fb6f 	bl	8008098 <__lshift>
 80079ba:	4605      	mov	r5, r0
 80079bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d05a      	beq.n	8007a78 <_dtoa_r+0xa18>
 80079c2:	6869      	ldr	r1, [r5, #4]
 80079c4:	4658      	mov	r0, fp
 80079c6:	f000 f959 	bl	8007c7c <_Balloc>
 80079ca:	4606      	mov	r6, r0
 80079cc:	b928      	cbnz	r0, 80079da <_dtoa_r+0x97a>
 80079ce:	4b84      	ldr	r3, [pc, #528]	@ (8007be0 <_dtoa_r+0xb80>)
 80079d0:	4602      	mov	r2, r0
 80079d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079d6:	f7ff bb5a 	b.w	800708e <_dtoa_r+0x2e>
 80079da:	692a      	ldr	r2, [r5, #16]
 80079dc:	3202      	adds	r2, #2
 80079de:	0092      	lsls	r2, r2, #2
 80079e0:	f105 010c 	add.w	r1, r5, #12
 80079e4:	300c      	adds	r0, #12
 80079e6:	f7ff faa4 	bl	8006f32 <memcpy>
 80079ea:	2201      	movs	r2, #1
 80079ec:	4631      	mov	r1, r6
 80079ee:	4658      	mov	r0, fp
 80079f0:	f000 fb52 	bl	8008098 <__lshift>
 80079f4:	f10a 0301 	add.w	r3, sl, #1
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	4453      	add	r3, sl
 80079fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	462f      	mov	r7, r5
 8007a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4648      	mov	r0, r9
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	f7ff fa9a 	bl	8006f4e <quorem>
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	9002      	str	r0, [sp, #8]
 8007a1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a22:	4648      	mov	r0, r9
 8007a24:	f000 fba4 	bl	8008170 <__mcmp>
 8007a28:	462a      	mov	r2, r5
 8007a2a:	9008      	str	r0, [sp, #32]
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f000 fbba 	bl	80081a8 <__mdiff>
 8007a34:	68c2      	ldr	r2, [r0, #12]
 8007a36:	4606      	mov	r6, r0
 8007a38:	bb02      	cbnz	r2, 8007a7c <_dtoa_r+0xa1c>
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fb97 	bl	8008170 <__mcmp>
 8007a42:	4602      	mov	r2, r0
 8007a44:	4631      	mov	r1, r6
 8007a46:	4658      	mov	r0, fp
 8007a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a4a:	f000 f957 	bl	8007cfc <_Bfree>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a52:	9e07      	ldr	r6, [sp, #28]
 8007a54:	ea43 0102 	orr.w	r1, r3, r2
 8007a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a5a:	4319      	orrs	r1, r3
 8007a5c:	d110      	bne.n	8007a80 <_dtoa_r+0xa20>
 8007a5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a62:	d029      	beq.n	8007ab8 <_dtoa_r+0xa58>
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dd02      	ble.n	8007a70 <_dtoa_r+0xa10>
 8007a6a:	9b02      	ldr	r3, [sp, #8]
 8007a6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	f883 8000 	strb.w	r8, [r3]
 8007a76:	e63f      	b.n	80076f8 <_dtoa_r+0x698>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	e7bb      	b.n	80079f4 <_dtoa_r+0x994>
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	e7e1      	b.n	8007a44 <_dtoa_r+0x9e4>
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db04      	blt.n	8007a90 <_dtoa_r+0xa30>
 8007a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	d120      	bne.n	8007ad2 <_dtoa_r+0xa72>
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	dded      	ble.n	8007a70 <_dtoa_r+0xa10>
 8007a94:	4649      	mov	r1, r9
 8007a96:	2201      	movs	r2, #1
 8007a98:	4658      	mov	r0, fp
 8007a9a:	f000 fafd 	bl	8008098 <__lshift>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	f000 fb65 	bl	8008170 <__mcmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	dc03      	bgt.n	8007ab2 <_dtoa_r+0xa52>
 8007aaa:	d1e1      	bne.n	8007a70 <_dtoa_r+0xa10>
 8007aac:	f018 0f01 	tst.w	r8, #1
 8007ab0:	d0de      	beq.n	8007a70 <_dtoa_r+0xa10>
 8007ab2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ab6:	d1d8      	bne.n	8007a6a <_dtoa_r+0xa0a>
 8007ab8:	9a00      	ldr	r2, [sp, #0]
 8007aba:	2339      	movs	r3, #57	@ 0x39
 8007abc:	7013      	strb	r3, [r2, #0]
 8007abe:	4633      	mov	r3, r6
 8007ac0:	461e      	mov	r6, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ac8:	2a39      	cmp	r2, #57	@ 0x39
 8007aca:	d052      	beq.n	8007b72 <_dtoa_r+0xb12>
 8007acc:	3201      	adds	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e612      	b.n	80076f8 <_dtoa_r+0x698>
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	dd07      	ble.n	8007ae6 <_dtoa_r+0xa86>
 8007ad6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ada:	d0ed      	beq.n	8007ab8 <_dtoa_r+0xa58>
 8007adc:	9a00      	ldr	r2, [sp, #0]
 8007ade:	f108 0301 	add.w	r3, r8, #1
 8007ae2:	7013      	strb	r3, [r2, #0]
 8007ae4:	e608      	b.n	80076f8 <_dtoa_r+0x698>
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	9a07      	ldr	r2, [sp, #28]
 8007aea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d028      	beq.n	8007b46 <_dtoa_r+0xae6>
 8007af4:	4649      	mov	r1, r9
 8007af6:	2300      	movs	r3, #0
 8007af8:	220a      	movs	r2, #10
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 f920 	bl	8007d40 <__multadd>
 8007b00:	42af      	cmp	r7, r5
 8007b02:	4681      	mov	r9, r0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	f04f 020a 	mov.w	r2, #10
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4658      	mov	r0, fp
 8007b10:	d107      	bne.n	8007b22 <_dtoa_r+0xac2>
 8007b12:	f000 f915 	bl	8007d40 <__multadd>
 8007b16:	4607      	mov	r7, r0
 8007b18:	4605      	mov	r5, r0
 8007b1a:	9b07      	ldr	r3, [sp, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	9307      	str	r3, [sp, #28]
 8007b20:	e774      	b.n	8007a0c <_dtoa_r+0x9ac>
 8007b22:	f000 f90d 	bl	8007d40 <__multadd>
 8007b26:	4629      	mov	r1, r5
 8007b28:	4607      	mov	r7, r0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	220a      	movs	r2, #10
 8007b2e:	4658      	mov	r0, fp
 8007b30:	f000 f906 	bl	8007d40 <__multadd>
 8007b34:	4605      	mov	r5, r0
 8007b36:	e7f0      	b.n	8007b1a <_dtoa_r+0xaba>
 8007b38:	9b00      	ldr	r3, [sp, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bfcc      	ite	gt
 8007b3e:	461e      	movgt	r6, r3
 8007b40:	2601      	movle	r6, #1
 8007b42:	4456      	add	r6, sl
 8007b44:	2700      	movs	r7, #0
 8007b46:	4649      	mov	r1, r9
 8007b48:	2201      	movs	r2, #1
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f000 faa4 	bl	8008098 <__lshift>
 8007b50:	4621      	mov	r1, r4
 8007b52:	4681      	mov	r9, r0
 8007b54:	f000 fb0c 	bl	8008170 <__mcmp>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	dcb0      	bgt.n	8007abe <_dtoa_r+0xa5e>
 8007b5c:	d102      	bne.n	8007b64 <_dtoa_r+0xb04>
 8007b5e:	f018 0f01 	tst.w	r8, #1
 8007b62:	d1ac      	bne.n	8007abe <_dtoa_r+0xa5e>
 8007b64:	4633      	mov	r3, r6
 8007b66:	461e      	mov	r6, r3
 8007b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b6c:	2a30      	cmp	r2, #48	@ 0x30
 8007b6e:	d0fa      	beq.n	8007b66 <_dtoa_r+0xb06>
 8007b70:	e5c2      	b.n	80076f8 <_dtoa_r+0x698>
 8007b72:	459a      	cmp	sl, r3
 8007b74:	d1a4      	bne.n	8007ac0 <_dtoa_r+0xa60>
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	2331      	movs	r3, #49	@ 0x31
 8007b7e:	f88a 3000 	strb.w	r3, [sl]
 8007b82:	e5b9      	b.n	80076f8 <_dtoa_r+0x698>
 8007b84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007be4 <_dtoa_r+0xb84>
 8007b8a:	b11b      	cbz	r3, 8007b94 <_dtoa_r+0xb34>
 8007b8c:	f10a 0308 	add.w	r3, sl, #8
 8007b90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	4650      	mov	r0, sl
 8007b96:	b019      	add	sp, #100	@ 0x64
 8007b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	f77f ae37 	ble.w	8007812 <_dtoa_r+0x7b2>
 8007ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba8:	2001      	movs	r0, #1
 8007baa:	e655      	b.n	8007858 <_dtoa_r+0x7f8>
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f77f aed6 	ble.w	8007960 <_dtoa_r+0x900>
 8007bb4:	4656      	mov	r6, sl
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4648      	mov	r0, r9
 8007bba:	f7ff f9c8 	bl	8006f4e <quorem>
 8007bbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bc2:	f806 8b01 	strb.w	r8, [r6], #1
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	eba6 020a 	sub.w	r2, r6, sl
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	ddb3      	ble.n	8007b38 <_dtoa_r+0xad8>
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f000 f8b2 	bl	8007d40 <__multadd>
 8007bdc:	4681      	mov	r9, r0
 8007bde:	e7ea      	b.n	8007bb6 <_dtoa_r+0xb56>
 8007be0:	0800905c 	.word	0x0800905c
 8007be4:	08008fe0 	.word	0x08008fe0

08007be8 <_free_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d041      	beq.n	8007c74 <_free_r+0x8c>
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f0c      	subs	r4, r1, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	18e4      	addlt	r4, r4, r3
 8007bfc:	f7fe fb5a 	bl	80062b4 <__malloc_lock>
 8007c00:	4a1d      	ldr	r2, [pc, #116]	@ (8007c78 <_free_r+0x90>)
 8007c02:	6813      	ldr	r3, [r2, #0]
 8007c04:	b933      	cbnz	r3, 8007c14 <_free_r+0x2c>
 8007c06:	6063      	str	r3, [r4, #4]
 8007c08:	6014      	str	r4, [r2, #0]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c10:	f7fe bb56 	b.w	80062c0 <__malloc_unlock>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d908      	bls.n	8007c2a <_free_r+0x42>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf01      	itttt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	1809      	addeq	r1, r1, r0
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	e7ed      	b.n	8007c06 <_free_r+0x1e>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x4c>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x42>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1850      	adds	r0, r2, r1
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x6c>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	4401      	add	r1, r0
 8007c40:	1850      	adds	r0, r2, r1
 8007c42:	4283      	cmp	r3, r0
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1e0      	bne.n	8007c0a <_free_r+0x22>
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	4408      	add	r0, r1
 8007c50:	6010      	str	r0, [r2, #0]
 8007c52:	e7da      	b.n	8007c0a <_free_r+0x22>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x74>
 8007c56:	230c      	movs	r3, #12
 8007c58:	602b      	str	r3, [r5, #0]
 8007c5a:	e7d6      	b.n	8007c0a <_free_r+0x22>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	1821      	adds	r1, r4, r0
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf04      	itt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	bf04      	itt	eq
 8007c6c:	1809      	addeq	r1, r1, r0
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	6054      	str	r4, [r2, #4]
 8007c72:	e7ca      	b.n	8007c0a <_free_r+0x22>
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	20000654 	.word	0x20000654

08007c7c <_Balloc>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	69c6      	ldr	r6, [r0, #28]
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	b976      	cbnz	r6, 8007ca4 <_Balloc+0x28>
 8007c86:	2010      	movs	r0, #16
 8007c88:	f7fe fa6a 	bl	8006160 <malloc>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	61e0      	str	r0, [r4, #28]
 8007c90:	b920      	cbnz	r0, 8007c9c <_Balloc+0x20>
 8007c92:	4b18      	ldr	r3, [pc, #96]	@ (8007cf4 <_Balloc+0x78>)
 8007c94:	4818      	ldr	r0, [pc, #96]	@ (8007cf8 <_Balloc+0x7c>)
 8007c96:	216b      	movs	r1, #107	@ 0x6b
 8007c98:	f000 ff66 	bl	8008b68 <__assert_func>
 8007c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca0:	6006      	str	r6, [r0, #0]
 8007ca2:	60c6      	str	r6, [r0, #12]
 8007ca4:	69e6      	ldr	r6, [r4, #28]
 8007ca6:	68f3      	ldr	r3, [r6, #12]
 8007ca8:	b183      	cbz	r3, 8007ccc <_Balloc+0x50>
 8007caa:	69e3      	ldr	r3, [r4, #28]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cb2:	b9b8      	cbnz	r0, 8007ce4 <_Balloc+0x68>
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8007cba:	1d72      	adds	r2, r6, #5
 8007cbc:	0092      	lsls	r2, r2, #2
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 ff70 	bl	8008ba4 <_calloc_r>
 8007cc4:	b160      	cbz	r0, 8007ce0 <_Balloc+0x64>
 8007cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cca:	e00e      	b.n	8007cea <_Balloc+0x6e>
 8007ccc:	2221      	movs	r2, #33	@ 0x21
 8007cce:	2104      	movs	r1, #4
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 ff67 	bl	8008ba4 <_calloc_r>
 8007cd6:	69e3      	ldr	r3, [r4, #28]
 8007cd8:	60f0      	str	r0, [r6, #12]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e4      	bne.n	8007caa <_Balloc+0x2e>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	6802      	ldr	r2, [r0, #0]
 8007ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cea:	2300      	movs	r3, #0
 8007cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cf0:	e7f7      	b.n	8007ce2 <_Balloc+0x66>
 8007cf2:	bf00      	nop
 8007cf4:	08008fed 	.word	0x08008fed
 8007cf8:	0800906d 	.word	0x0800906d

08007cfc <_Bfree>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	69c6      	ldr	r6, [r0, #28]
 8007d00:	4605      	mov	r5, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	b976      	cbnz	r6, 8007d24 <_Bfree+0x28>
 8007d06:	2010      	movs	r0, #16
 8007d08:	f7fe fa2a 	bl	8006160 <malloc>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	61e8      	str	r0, [r5, #28]
 8007d10:	b920      	cbnz	r0, 8007d1c <_Bfree+0x20>
 8007d12:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <_Bfree+0x3c>)
 8007d14:	4809      	ldr	r0, [pc, #36]	@ (8007d3c <_Bfree+0x40>)
 8007d16:	218f      	movs	r1, #143	@ 0x8f
 8007d18:	f000 ff26 	bl	8008b68 <__assert_func>
 8007d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d20:	6006      	str	r6, [r0, #0]
 8007d22:	60c6      	str	r6, [r0, #12]
 8007d24:	b13c      	cbz	r4, 8007d36 <_Bfree+0x3a>
 8007d26:	69eb      	ldr	r3, [r5, #28]
 8007d28:	6862      	ldr	r2, [r4, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d30:	6021      	str	r1, [r4, #0]
 8007d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	08008fed 	.word	0x08008fed
 8007d3c:	0800906d 	.word	0x0800906d

08007d40 <__multadd>:
 8007d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d44:	690d      	ldr	r5, [r1, #16]
 8007d46:	4607      	mov	r7, r0
 8007d48:	460c      	mov	r4, r1
 8007d4a:	461e      	mov	r6, r3
 8007d4c:	f101 0c14 	add.w	ip, r1, #20
 8007d50:	2000      	movs	r0, #0
 8007d52:	f8dc 3000 	ldr.w	r3, [ip]
 8007d56:	b299      	uxth	r1, r3
 8007d58:	fb02 6101 	mla	r1, r2, r1, r6
 8007d5c:	0c1e      	lsrs	r6, r3, #16
 8007d5e:	0c0b      	lsrs	r3, r1, #16
 8007d60:	fb02 3306 	mla	r3, r2, r6, r3
 8007d64:	b289      	uxth	r1, r1
 8007d66:	3001      	adds	r0, #1
 8007d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d6c:	4285      	cmp	r5, r0
 8007d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d76:	dcec      	bgt.n	8007d52 <__multadd+0x12>
 8007d78:	b30e      	cbz	r6, 8007dbe <__multadd+0x7e>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dc19      	bgt.n	8007db4 <__multadd+0x74>
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	4638      	mov	r0, r7
 8007d84:	3101      	adds	r1, #1
 8007d86:	f7ff ff79 	bl	8007c7c <_Balloc>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	b928      	cbnz	r0, 8007d9a <__multadd+0x5a>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <__multadd+0x84>)
 8007d92:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <__multadd+0x88>)
 8007d94:	21ba      	movs	r1, #186	@ 0xba
 8007d96:	f000 fee7 	bl	8008b68 <__assert_func>
 8007d9a:	6922      	ldr	r2, [r4, #16]
 8007d9c:	3202      	adds	r2, #2
 8007d9e:	f104 010c 	add.w	r1, r4, #12
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	300c      	adds	r0, #12
 8007da6:	f7ff f8c4 	bl	8006f32 <memcpy>
 8007daa:	4621      	mov	r1, r4
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff ffa5 	bl	8007cfc <_Bfree>
 8007db2:	4644      	mov	r4, r8
 8007db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007db8:	3501      	adds	r5, #1
 8007dba:	615e      	str	r6, [r3, #20]
 8007dbc:	6125      	str	r5, [r4, #16]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	0800905c 	.word	0x0800905c
 8007dc8:	0800906d 	.word	0x0800906d

08007dcc <__hi0bits>:
 8007dcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	bf36      	itet	cc
 8007dd4:	0403      	lslcc	r3, r0, #16
 8007dd6:	2000      	movcs	r0, #0
 8007dd8:	2010      	movcc	r0, #16
 8007dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dde:	bf3c      	itt	cc
 8007de0:	021b      	lslcc	r3, r3, #8
 8007de2:	3008      	addcc	r0, #8
 8007de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007de8:	bf3c      	itt	cc
 8007dea:	011b      	lslcc	r3, r3, #4
 8007dec:	3004      	addcc	r0, #4
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	bf3c      	itt	cc
 8007df4:	009b      	lslcc	r3, r3, #2
 8007df6:	3002      	addcc	r0, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db05      	blt.n	8007e08 <__hi0bits+0x3c>
 8007dfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e00:	f100 0001 	add.w	r0, r0, #1
 8007e04:	bf08      	it	eq
 8007e06:	2020      	moveq	r0, #32
 8007e08:	4770      	bx	lr

08007e0a <__lo0bits>:
 8007e0a:	6803      	ldr	r3, [r0, #0]
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f013 0007 	ands.w	r0, r3, #7
 8007e12:	d00b      	beq.n	8007e2c <__lo0bits+0x22>
 8007e14:	07d9      	lsls	r1, r3, #31
 8007e16:	d421      	bmi.n	8007e5c <__lo0bits+0x52>
 8007e18:	0798      	lsls	r0, r3, #30
 8007e1a:	bf49      	itett	mi
 8007e1c:	085b      	lsrmi	r3, r3, #1
 8007e1e:	089b      	lsrpl	r3, r3, #2
 8007e20:	2001      	movmi	r0, #1
 8007e22:	6013      	strmi	r3, [r2, #0]
 8007e24:	bf5c      	itt	pl
 8007e26:	6013      	strpl	r3, [r2, #0]
 8007e28:	2002      	movpl	r0, #2
 8007e2a:	4770      	bx	lr
 8007e2c:	b299      	uxth	r1, r3
 8007e2e:	b909      	cbnz	r1, 8007e34 <__lo0bits+0x2a>
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	2010      	movs	r0, #16
 8007e34:	b2d9      	uxtb	r1, r3
 8007e36:	b909      	cbnz	r1, 8007e3c <__lo0bits+0x32>
 8007e38:	3008      	adds	r0, #8
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	0719      	lsls	r1, r3, #28
 8007e3e:	bf04      	itt	eq
 8007e40:	091b      	lsreq	r3, r3, #4
 8007e42:	3004      	addeq	r0, #4
 8007e44:	0799      	lsls	r1, r3, #30
 8007e46:	bf04      	itt	eq
 8007e48:	089b      	lsreq	r3, r3, #2
 8007e4a:	3002      	addeq	r0, #2
 8007e4c:	07d9      	lsls	r1, r3, #31
 8007e4e:	d403      	bmi.n	8007e58 <__lo0bits+0x4e>
 8007e50:	085b      	lsrs	r3, r3, #1
 8007e52:	f100 0001 	add.w	r0, r0, #1
 8007e56:	d003      	beq.n	8007e60 <__lo0bits+0x56>
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4770      	bx	lr
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	4770      	bx	lr
 8007e60:	2020      	movs	r0, #32
 8007e62:	4770      	bx	lr

08007e64 <__i2b>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	2101      	movs	r1, #1
 8007e6a:	f7ff ff07 	bl	8007c7c <_Balloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__i2b+0x1a>
 8007e72:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <__i2b+0x24>)
 8007e74:	4805      	ldr	r0, [pc, #20]	@ (8007e8c <__i2b+0x28>)
 8007e76:	f240 1145 	movw	r1, #325	@ 0x145
 8007e7a:	f000 fe75 	bl	8008b68 <__assert_func>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	6144      	str	r4, [r0, #20]
 8007e82:	6103      	str	r3, [r0, #16]
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	bf00      	nop
 8007e88:	0800905c 	.word	0x0800905c
 8007e8c:	0800906d 	.word	0x0800906d

08007e90 <__multiply>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4614      	mov	r4, r2
 8007e96:	690a      	ldr	r2, [r1, #16]
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	bfa8      	it	ge
 8007e9e:	4623      	movge	r3, r4
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	bfa4      	itt	ge
 8007ea4:	460c      	movge	r4, r1
 8007ea6:	461f      	movge	r7, r3
 8007ea8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007eac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007eb0:	68a3      	ldr	r3, [r4, #8]
 8007eb2:	6861      	ldr	r1, [r4, #4]
 8007eb4:	eb0a 0609 	add.w	r6, sl, r9
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	b085      	sub	sp, #20
 8007ebc:	bfb8      	it	lt
 8007ebe:	3101      	addlt	r1, #1
 8007ec0:	f7ff fedc 	bl	8007c7c <_Balloc>
 8007ec4:	b930      	cbnz	r0, 8007ed4 <__multiply+0x44>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	4b44      	ldr	r3, [pc, #272]	@ (8007fdc <__multiply+0x14c>)
 8007eca:	4845      	ldr	r0, [pc, #276]	@ (8007fe0 <__multiply+0x150>)
 8007ecc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ed0:	f000 fe4a 	bl	8008b68 <__assert_func>
 8007ed4:	f100 0514 	add.w	r5, r0, #20
 8007ed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007edc:	462b      	mov	r3, r5
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	d321      	bcc.n	8007f28 <__multiply+0x98>
 8007ee4:	f107 0114 	add.w	r1, r7, #20
 8007ee8:	f104 0214 	add.w	r2, r4, #20
 8007eec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ef0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	1b13      	subs	r3, r2, r4
 8007ef8:	3b15      	subs	r3, #21
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	3304      	adds	r3, #4
 8007f00:	f104 0715 	add.w	r7, r4, #21
 8007f04:	42ba      	cmp	r2, r7
 8007f06:	bf38      	it	cc
 8007f08:	2304      	movcc	r3, #4
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	9103      	str	r1, [sp, #12]
 8007f10:	428b      	cmp	r3, r1
 8007f12:	d80c      	bhi.n	8007f2e <__multiply+0x9e>
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	dd03      	ble.n	8007f20 <__multiply+0x90>
 8007f18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d05b      	beq.n	8007fd8 <__multiply+0x148>
 8007f20:	6106      	str	r6, [r0, #16]
 8007f22:	b005      	add	sp, #20
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	f843 2b04 	str.w	r2, [r3], #4
 8007f2c:	e7d8      	b.n	8007ee0 <__multiply+0x50>
 8007f2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f32:	f1ba 0f00 	cmp.w	sl, #0
 8007f36:	d024      	beq.n	8007f82 <__multiply+0xf2>
 8007f38:	f104 0e14 	add.w	lr, r4, #20
 8007f3c:	46a9      	mov	r9, r5
 8007f3e:	f04f 0c00 	mov.w	ip, #0
 8007f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f46:	f8d9 3000 	ldr.w	r3, [r9]
 8007f4a:	fa1f fb87 	uxth.w	fp, r7
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f58:	f8d9 7000 	ldr.w	r7, [r9]
 8007f5c:	4463      	add	r3, ip
 8007f5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f62:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f70:	4572      	cmp	r2, lr
 8007f72:	f849 3b04 	str.w	r3, [r9], #4
 8007f76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f7a:	d8e2      	bhi.n	8007f42 <__multiply+0xb2>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	f845 c003 	str.w	ip, [r5, r3]
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f88:	3104      	adds	r1, #4
 8007f8a:	f1b9 0f00 	cmp.w	r9, #0
 8007f8e:	d021      	beq.n	8007fd4 <__multiply+0x144>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	f104 0c14 	add.w	ip, r4, #20
 8007f96:	46ae      	mov	lr, r5
 8007f98:	f04f 0a00 	mov.w	sl, #0
 8007f9c:	f8bc b000 	ldrh.w	fp, [ip]
 8007fa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fa4:	fb09 770b 	mla	r7, r9, fp, r7
 8007fa8:	4457      	add	r7, sl
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8007fb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fbc:	f8be 3000 	ldrh.w	r3, [lr]
 8007fc0:	fb09 330a 	mla	r3, r9, sl, r3
 8007fc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fc8:	4562      	cmp	r2, ip
 8007fca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fce:	d8e5      	bhi.n	8007f9c <__multiply+0x10c>
 8007fd0:	9f01      	ldr	r7, [sp, #4]
 8007fd2:	51eb      	str	r3, [r5, r7]
 8007fd4:	3504      	adds	r5, #4
 8007fd6:	e799      	b.n	8007f0c <__multiply+0x7c>
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	e79b      	b.n	8007f14 <__multiply+0x84>
 8007fdc:	0800905c 	.word	0x0800905c
 8007fe0:	0800906d 	.word	0x0800906d

08007fe4 <__pow5mult>:
 8007fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	4615      	mov	r5, r2
 8007fea:	f012 0203 	ands.w	r2, r2, #3
 8007fee:	4607      	mov	r7, r0
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	d007      	beq.n	8008004 <__pow5mult+0x20>
 8007ff4:	4c25      	ldr	r4, [pc, #148]	@ (800808c <__pow5mult+0xa8>)
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffe:	f7ff fe9f 	bl	8007d40 <__multadd>
 8008002:	4606      	mov	r6, r0
 8008004:	10ad      	asrs	r5, r5, #2
 8008006:	d03d      	beq.n	8008084 <__pow5mult+0xa0>
 8008008:	69fc      	ldr	r4, [r7, #28]
 800800a:	b97c      	cbnz	r4, 800802c <__pow5mult+0x48>
 800800c:	2010      	movs	r0, #16
 800800e:	f7fe f8a7 	bl	8006160 <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	61f8      	str	r0, [r7, #28]
 8008016:	b928      	cbnz	r0, 8008024 <__pow5mult+0x40>
 8008018:	4b1d      	ldr	r3, [pc, #116]	@ (8008090 <__pow5mult+0xac>)
 800801a:	481e      	ldr	r0, [pc, #120]	@ (8008094 <__pow5mult+0xb0>)
 800801c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008020:	f000 fda2 	bl	8008b68 <__assert_func>
 8008024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008028:	6004      	str	r4, [r0, #0]
 800802a:	60c4      	str	r4, [r0, #12]
 800802c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008034:	b94c      	cbnz	r4, 800804a <__pow5mult+0x66>
 8008036:	f240 2171 	movw	r1, #625	@ 0x271
 800803a:	4638      	mov	r0, r7
 800803c:	f7ff ff12 	bl	8007e64 <__i2b>
 8008040:	2300      	movs	r3, #0
 8008042:	f8c8 0008 	str.w	r0, [r8, #8]
 8008046:	4604      	mov	r4, r0
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	f04f 0900 	mov.w	r9, #0
 800804e:	07eb      	lsls	r3, r5, #31
 8008050:	d50a      	bpl.n	8008068 <__pow5mult+0x84>
 8008052:	4631      	mov	r1, r6
 8008054:	4622      	mov	r2, r4
 8008056:	4638      	mov	r0, r7
 8008058:	f7ff ff1a 	bl	8007e90 <__multiply>
 800805c:	4631      	mov	r1, r6
 800805e:	4680      	mov	r8, r0
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff fe4b 	bl	8007cfc <_Bfree>
 8008066:	4646      	mov	r6, r8
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	d00b      	beq.n	8008084 <__pow5mult+0xa0>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	b938      	cbnz	r0, 8008080 <__pow5mult+0x9c>
 8008070:	4622      	mov	r2, r4
 8008072:	4621      	mov	r1, r4
 8008074:	4638      	mov	r0, r7
 8008076:	f7ff ff0b 	bl	8007e90 <__multiply>
 800807a:	6020      	str	r0, [r4, #0]
 800807c:	f8c0 9000 	str.w	r9, [r0]
 8008080:	4604      	mov	r4, r0
 8008082:	e7e4      	b.n	800804e <__pow5mult+0x6a>
 8008084:	4630      	mov	r0, r6
 8008086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808a:	bf00      	nop
 800808c:	080090c8 	.word	0x080090c8
 8008090:	08008fed 	.word	0x08008fed
 8008094:	0800906d 	.word	0x0800906d

08008098 <__lshift>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	6849      	ldr	r1, [r1, #4]
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	4607      	mov	r7, r0
 80080aa:	4691      	mov	r9, r2
 80080ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b0:	f108 0601 	add.w	r6, r8, #1
 80080b4:	42b3      	cmp	r3, r6
 80080b6:	db0b      	blt.n	80080d0 <__lshift+0x38>
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fddf 	bl	8007c7c <_Balloc>
 80080be:	4605      	mov	r5, r0
 80080c0:	b948      	cbnz	r0, 80080d6 <__lshift+0x3e>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b28      	ldr	r3, [pc, #160]	@ (8008168 <__lshift+0xd0>)
 80080c6:	4829      	ldr	r0, [pc, #164]	@ (800816c <__lshift+0xd4>)
 80080c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080cc:	f000 fd4c 	bl	8008b68 <__assert_func>
 80080d0:	3101      	adds	r1, #1
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	e7ee      	b.n	80080b4 <__lshift+0x1c>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f100 0114 	add.w	r1, r0, #20
 80080dc:	f100 0210 	add.w	r2, r0, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	4553      	cmp	r3, sl
 80080e4:	db33      	blt.n	800814e <__lshift+0xb6>
 80080e6:	6920      	ldr	r0, [r4, #16]
 80080e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ec:	f104 0314 	add.w	r3, r4, #20
 80080f0:	f019 091f 	ands.w	r9, r9, #31
 80080f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080fc:	d02b      	beq.n	8008156 <__lshift+0xbe>
 80080fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008102:	468a      	mov	sl, r1
 8008104:	2200      	movs	r2, #0
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	fa00 f009 	lsl.w	r0, r0, r9
 800810c:	4310      	orrs	r0, r2
 800810e:	f84a 0b04 	str.w	r0, [sl], #4
 8008112:	f853 2b04 	ldr.w	r2, [r3], #4
 8008116:	459c      	cmp	ip, r3
 8008118:	fa22 f20e 	lsr.w	r2, r2, lr
 800811c:	d8f3      	bhi.n	8008106 <__lshift+0x6e>
 800811e:	ebac 0304 	sub.w	r3, ip, r4
 8008122:	3b15      	subs	r3, #21
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	3304      	adds	r3, #4
 800812a:	f104 0015 	add.w	r0, r4, #21
 800812e:	4584      	cmp	ip, r0
 8008130:	bf38      	it	cc
 8008132:	2304      	movcc	r3, #4
 8008134:	50ca      	str	r2, [r1, r3]
 8008136:	b10a      	cbz	r2, 800813c <__lshift+0xa4>
 8008138:	f108 0602 	add.w	r6, r8, #2
 800813c:	3e01      	subs	r6, #1
 800813e:	4638      	mov	r0, r7
 8008140:	612e      	str	r6, [r5, #16]
 8008142:	4621      	mov	r1, r4
 8008144:	f7ff fdda 	bl	8007cfc <_Bfree>
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008152:	3301      	adds	r3, #1
 8008154:	e7c5      	b.n	80080e2 <__lshift+0x4a>
 8008156:	3904      	subs	r1, #4
 8008158:	f853 2b04 	ldr.w	r2, [r3], #4
 800815c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008160:	459c      	cmp	ip, r3
 8008162:	d8f9      	bhi.n	8008158 <__lshift+0xc0>
 8008164:	e7ea      	b.n	800813c <__lshift+0xa4>
 8008166:	bf00      	nop
 8008168:	0800905c 	.word	0x0800905c
 800816c:	0800906d 	.word	0x0800906d

08008170 <__mcmp>:
 8008170:	690a      	ldr	r2, [r1, #16]
 8008172:	4603      	mov	r3, r0
 8008174:	6900      	ldr	r0, [r0, #16]
 8008176:	1a80      	subs	r0, r0, r2
 8008178:	b530      	push	{r4, r5, lr}
 800817a:	d10e      	bne.n	800819a <__mcmp+0x2a>
 800817c:	3314      	adds	r3, #20
 800817e:	3114      	adds	r1, #20
 8008180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800818c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008190:	4295      	cmp	r5, r2
 8008192:	d003      	beq.n	800819c <__mcmp+0x2c>
 8008194:	d205      	bcs.n	80081a2 <__mcmp+0x32>
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	bd30      	pop	{r4, r5, pc}
 800819c:	42a3      	cmp	r3, r4
 800819e:	d3f3      	bcc.n	8008188 <__mcmp+0x18>
 80081a0:	e7fb      	b.n	800819a <__mcmp+0x2a>
 80081a2:	2001      	movs	r0, #1
 80081a4:	e7f9      	b.n	800819a <__mcmp+0x2a>
	...

080081a8 <__mdiff>:
 80081a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	4689      	mov	r9, r1
 80081ae:	4606      	mov	r6, r0
 80081b0:	4611      	mov	r1, r2
 80081b2:	4648      	mov	r0, r9
 80081b4:	4614      	mov	r4, r2
 80081b6:	f7ff ffdb 	bl	8008170 <__mcmp>
 80081ba:	1e05      	subs	r5, r0, #0
 80081bc:	d112      	bne.n	80081e4 <__mdiff+0x3c>
 80081be:	4629      	mov	r1, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff fd5b 	bl	8007c7c <_Balloc>
 80081c6:	4602      	mov	r2, r0
 80081c8:	b928      	cbnz	r0, 80081d6 <__mdiff+0x2e>
 80081ca:	4b3f      	ldr	r3, [pc, #252]	@ (80082c8 <__mdiff+0x120>)
 80081cc:	f240 2137 	movw	r1, #567	@ 0x237
 80081d0:	483e      	ldr	r0, [pc, #248]	@ (80082cc <__mdiff+0x124>)
 80081d2:	f000 fcc9 	bl	8008b68 <__assert_func>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081dc:	4610      	mov	r0, r2
 80081de:	b003      	add	sp, #12
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	bfbc      	itt	lt
 80081e6:	464b      	movlt	r3, r9
 80081e8:	46a1      	movlt	r9, r4
 80081ea:	4630      	mov	r0, r6
 80081ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081f0:	bfba      	itte	lt
 80081f2:	461c      	movlt	r4, r3
 80081f4:	2501      	movlt	r5, #1
 80081f6:	2500      	movge	r5, #0
 80081f8:	f7ff fd40 	bl	8007c7c <_Balloc>
 80081fc:	4602      	mov	r2, r0
 80081fe:	b918      	cbnz	r0, 8008208 <__mdiff+0x60>
 8008200:	4b31      	ldr	r3, [pc, #196]	@ (80082c8 <__mdiff+0x120>)
 8008202:	f240 2145 	movw	r1, #581	@ 0x245
 8008206:	e7e3      	b.n	80081d0 <__mdiff+0x28>
 8008208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800820c:	6926      	ldr	r6, [r4, #16]
 800820e:	60c5      	str	r5, [r0, #12]
 8008210:	f109 0310 	add.w	r3, r9, #16
 8008214:	f109 0514 	add.w	r5, r9, #20
 8008218:	f104 0e14 	add.w	lr, r4, #20
 800821c:	f100 0b14 	add.w	fp, r0, #20
 8008220:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008224:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	46d9      	mov	r9, fp
 800822c:	f04f 0c00 	mov.w	ip, #0
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008236:	f853 af04 	ldr.w	sl, [r3, #4]!
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	fa1f f38a 	uxth.w	r3, sl
 8008240:	4619      	mov	r1, r3
 8008242:	b283      	uxth	r3, r0
 8008244:	1acb      	subs	r3, r1, r3
 8008246:	0c00      	lsrs	r0, r0, #16
 8008248:	4463      	add	r3, ip
 800824a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800824e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008252:	b29b      	uxth	r3, r3
 8008254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008258:	4576      	cmp	r6, lr
 800825a:	f849 3b04 	str.w	r3, [r9], #4
 800825e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008262:	d8e5      	bhi.n	8008230 <__mdiff+0x88>
 8008264:	1b33      	subs	r3, r6, r4
 8008266:	3b15      	subs	r3, #21
 8008268:	f023 0303 	bic.w	r3, r3, #3
 800826c:	3415      	adds	r4, #21
 800826e:	3304      	adds	r3, #4
 8008270:	42a6      	cmp	r6, r4
 8008272:	bf38      	it	cc
 8008274:	2304      	movcc	r3, #4
 8008276:	441d      	add	r5, r3
 8008278:	445b      	add	r3, fp
 800827a:	461e      	mov	r6, r3
 800827c:	462c      	mov	r4, r5
 800827e:	4544      	cmp	r4, r8
 8008280:	d30e      	bcc.n	80082a0 <__mdiff+0xf8>
 8008282:	f108 0103 	add.w	r1, r8, #3
 8008286:	1b49      	subs	r1, r1, r5
 8008288:	f021 0103 	bic.w	r1, r1, #3
 800828c:	3d03      	subs	r5, #3
 800828e:	45a8      	cmp	r8, r5
 8008290:	bf38      	it	cc
 8008292:	2100      	movcc	r1, #0
 8008294:	440b      	add	r3, r1
 8008296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800829a:	b191      	cbz	r1, 80082c2 <__mdiff+0x11a>
 800829c:	6117      	str	r7, [r2, #16]
 800829e:	e79d      	b.n	80081dc <__mdiff+0x34>
 80082a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80082a4:	46e6      	mov	lr, ip
 80082a6:	0c08      	lsrs	r0, r1, #16
 80082a8:	fa1c fc81 	uxtah	ip, ip, r1
 80082ac:	4471      	add	r1, lr
 80082ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082b2:	b289      	uxth	r1, r1
 80082b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082b8:	f846 1b04 	str.w	r1, [r6], #4
 80082bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082c0:	e7dd      	b.n	800827e <__mdiff+0xd6>
 80082c2:	3f01      	subs	r7, #1
 80082c4:	e7e7      	b.n	8008296 <__mdiff+0xee>
 80082c6:	bf00      	nop
 80082c8:	0800905c 	.word	0x0800905c
 80082cc:	0800906d 	.word	0x0800906d

080082d0 <__d2b>:
 80082d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	460f      	mov	r7, r1
 80082d6:	2101      	movs	r1, #1
 80082d8:	ec59 8b10 	vmov	r8, r9, d0
 80082dc:	4616      	mov	r6, r2
 80082de:	f7ff fccd 	bl	8007c7c <_Balloc>
 80082e2:	4604      	mov	r4, r0
 80082e4:	b930      	cbnz	r0, 80082f4 <__d2b+0x24>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b23      	ldr	r3, [pc, #140]	@ (8008378 <__d2b+0xa8>)
 80082ea:	4824      	ldr	r0, [pc, #144]	@ (800837c <__d2b+0xac>)
 80082ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80082f0:	f000 fc3a 	bl	8008b68 <__assert_func>
 80082f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082fc:	b10d      	cbz	r5, 8008302 <__d2b+0x32>
 80082fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	f1b8 0300 	subs.w	r3, r8, #0
 8008308:	d023      	beq.n	8008352 <__d2b+0x82>
 800830a:	4668      	mov	r0, sp
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	f7ff fd7c 	bl	8007e0a <__lo0bits>
 8008312:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008316:	b1d0      	cbz	r0, 800834e <__d2b+0x7e>
 8008318:	f1c0 0320 	rsb	r3, r0, #32
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	430b      	orrs	r3, r1
 8008322:	40c2      	lsrs	r2, r0
 8008324:	6163      	str	r3, [r4, #20]
 8008326:	9201      	str	r2, [sp, #4]
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	61a3      	str	r3, [r4, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	bf0c      	ite	eq
 8008330:	2201      	moveq	r2, #1
 8008332:	2202      	movne	r2, #2
 8008334:	6122      	str	r2, [r4, #16]
 8008336:	b1a5      	cbz	r5, 8008362 <__d2b+0x92>
 8008338:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800833c:	4405      	add	r5, r0
 800833e:	603d      	str	r5, [r7, #0]
 8008340:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008344:	6030      	str	r0, [r6, #0]
 8008346:	4620      	mov	r0, r4
 8008348:	b003      	add	sp, #12
 800834a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800834e:	6161      	str	r1, [r4, #20]
 8008350:	e7ea      	b.n	8008328 <__d2b+0x58>
 8008352:	a801      	add	r0, sp, #4
 8008354:	f7ff fd59 	bl	8007e0a <__lo0bits>
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	6163      	str	r3, [r4, #20]
 800835c:	3020      	adds	r0, #32
 800835e:	2201      	movs	r2, #1
 8008360:	e7e8      	b.n	8008334 <__d2b+0x64>
 8008362:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008366:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800836a:	6038      	str	r0, [r7, #0]
 800836c:	6918      	ldr	r0, [r3, #16]
 800836e:	f7ff fd2d 	bl	8007dcc <__hi0bits>
 8008372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008376:	e7e5      	b.n	8008344 <__d2b+0x74>
 8008378:	0800905c 	.word	0x0800905c
 800837c:	0800906d 	.word	0x0800906d

08008380 <__ssputs_r>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	688e      	ldr	r6, [r1, #8]
 8008386:	461f      	mov	r7, r3
 8008388:	42be      	cmp	r6, r7
 800838a:	680b      	ldr	r3, [r1, #0]
 800838c:	4682      	mov	sl, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4690      	mov	r8, r2
 8008392:	d82d      	bhi.n	80083f0 <__ssputs_r+0x70>
 8008394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008398:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800839c:	d026      	beq.n	80083ec <__ssputs_r+0x6c>
 800839e:	6965      	ldr	r5, [r4, #20]
 80083a0:	6909      	ldr	r1, [r1, #16]
 80083a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083a6:	eba3 0901 	sub.w	r9, r3, r1
 80083aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083ae:	1c7b      	adds	r3, r7, #1
 80083b0:	444b      	add	r3, r9
 80083b2:	106d      	asrs	r5, r5, #1
 80083b4:	429d      	cmp	r5, r3
 80083b6:	bf38      	it	cc
 80083b8:	461d      	movcc	r5, r3
 80083ba:	0553      	lsls	r3, r2, #21
 80083bc:	d527      	bpl.n	800840e <__ssputs_r+0x8e>
 80083be:	4629      	mov	r1, r5
 80083c0:	f7fd fef8 	bl	80061b4 <_malloc_r>
 80083c4:	4606      	mov	r6, r0
 80083c6:	b360      	cbz	r0, 8008422 <__ssputs_r+0xa2>
 80083c8:	6921      	ldr	r1, [r4, #16]
 80083ca:	464a      	mov	r2, r9
 80083cc:	f7fe fdb1 	bl	8006f32 <memcpy>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	6126      	str	r6, [r4, #16]
 80083de:	6165      	str	r5, [r4, #20]
 80083e0:	444e      	add	r6, r9
 80083e2:	eba5 0509 	sub.w	r5, r5, r9
 80083e6:	6026      	str	r6, [r4, #0]
 80083e8:	60a5      	str	r5, [r4, #8]
 80083ea:	463e      	mov	r6, r7
 80083ec:	42be      	cmp	r6, r7
 80083ee:	d900      	bls.n	80083f2 <__ssputs_r+0x72>
 80083f0:	463e      	mov	r6, r7
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	4632      	mov	r2, r6
 80083f6:	4641      	mov	r1, r8
 80083f8:	f000 fb9c 	bl	8008b34 <memmove>
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	1b9b      	subs	r3, r3, r6
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4433      	add	r3, r6
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	2000      	movs	r0, #0
 800840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840e:	462a      	mov	r2, r5
 8008410:	f000 fbee 	bl	8008bf0 <_realloc_r>
 8008414:	4606      	mov	r6, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	d1e0      	bne.n	80083dc <__ssputs_r+0x5c>
 800841a:	6921      	ldr	r1, [r4, #16]
 800841c:	4650      	mov	r0, sl
 800841e:	f7ff fbe3 	bl	8007be8 <_free_r>
 8008422:	230c      	movs	r3, #12
 8008424:	f8ca 3000 	str.w	r3, [sl]
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e7e9      	b.n	800840a <__ssputs_r+0x8a>
	...

08008438 <_svfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	4698      	mov	r8, r3
 800843e:	898b      	ldrh	r3, [r1, #12]
 8008440:	061b      	lsls	r3, r3, #24
 8008442:	b09d      	sub	sp, #116	@ 0x74
 8008444:	4607      	mov	r7, r0
 8008446:	460d      	mov	r5, r1
 8008448:	4614      	mov	r4, r2
 800844a:	d510      	bpl.n	800846e <_svfiprintf_r+0x36>
 800844c:	690b      	ldr	r3, [r1, #16]
 800844e:	b973      	cbnz	r3, 800846e <_svfiprintf_r+0x36>
 8008450:	2140      	movs	r1, #64	@ 0x40
 8008452:	f7fd feaf 	bl	80061b4 <_malloc_r>
 8008456:	6028      	str	r0, [r5, #0]
 8008458:	6128      	str	r0, [r5, #16]
 800845a:	b930      	cbnz	r0, 800846a <_svfiprintf_r+0x32>
 800845c:	230c      	movs	r3, #12
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	b01d      	add	sp, #116	@ 0x74
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	2340      	movs	r3, #64	@ 0x40
 800846c:	616b      	str	r3, [r5, #20]
 800846e:	2300      	movs	r3, #0
 8008470:	9309      	str	r3, [sp, #36]	@ 0x24
 8008472:	2320      	movs	r3, #32
 8008474:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008478:	f8cd 800c 	str.w	r8, [sp, #12]
 800847c:	2330      	movs	r3, #48	@ 0x30
 800847e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800861c <_svfiprintf_r+0x1e4>
 8008482:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008486:	f04f 0901 	mov.w	r9, #1
 800848a:	4623      	mov	r3, r4
 800848c:	469a      	mov	sl, r3
 800848e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008492:	b10a      	cbz	r2, 8008498 <_svfiprintf_r+0x60>
 8008494:	2a25      	cmp	r2, #37	@ 0x25
 8008496:	d1f9      	bne.n	800848c <_svfiprintf_r+0x54>
 8008498:	ebba 0b04 	subs.w	fp, sl, r4
 800849c:	d00b      	beq.n	80084b6 <_svfiprintf_r+0x7e>
 800849e:	465b      	mov	r3, fp
 80084a0:	4622      	mov	r2, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff ff6b 	bl	8008380 <__ssputs_r>
 80084aa:	3001      	adds	r0, #1
 80084ac:	f000 80a7 	beq.w	80085fe <_svfiprintf_r+0x1c6>
 80084b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b2:	445a      	add	r2, fp
 80084b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 809f 	beq.w	80085fe <_svfiprintf_r+0x1c6>
 80084c0:	2300      	movs	r3, #0
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295
 80084c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ca:	f10a 0a01 	add.w	sl, sl, #1
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	9307      	str	r3, [sp, #28]
 80084d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80084d8:	4654      	mov	r4, sl
 80084da:	2205      	movs	r2, #5
 80084dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e0:	484e      	ldr	r0, [pc, #312]	@ (800861c <_svfiprintf_r+0x1e4>)
 80084e2:	f7f7 fe75 	bl	80001d0 <memchr>
 80084e6:	9a04      	ldr	r2, [sp, #16]
 80084e8:	b9d8      	cbnz	r0, 8008522 <_svfiprintf_r+0xea>
 80084ea:	06d0      	lsls	r0, r2, #27
 80084ec:	bf44      	itt	mi
 80084ee:	2320      	movmi	r3, #32
 80084f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f4:	0711      	lsls	r1, r2, #28
 80084f6:	bf44      	itt	mi
 80084f8:	232b      	movmi	r3, #43	@ 0x2b
 80084fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008502:	2b2a      	cmp	r3, #42	@ 0x2a
 8008504:	d015      	beq.n	8008532 <_svfiprintf_r+0xfa>
 8008506:	9a07      	ldr	r2, [sp, #28]
 8008508:	4654      	mov	r4, sl
 800850a:	2000      	movs	r0, #0
 800850c:	f04f 0c0a 	mov.w	ip, #10
 8008510:	4621      	mov	r1, r4
 8008512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008516:	3b30      	subs	r3, #48	@ 0x30
 8008518:	2b09      	cmp	r3, #9
 800851a:	d94b      	bls.n	80085b4 <_svfiprintf_r+0x17c>
 800851c:	b1b0      	cbz	r0, 800854c <_svfiprintf_r+0x114>
 800851e:	9207      	str	r2, [sp, #28]
 8008520:	e014      	b.n	800854c <_svfiprintf_r+0x114>
 8008522:	eba0 0308 	sub.w	r3, r0, r8
 8008526:	fa09 f303 	lsl.w	r3, r9, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	46a2      	mov	sl, r4
 8008530:	e7d2      	b.n	80084d8 <_svfiprintf_r+0xa0>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	1d19      	adds	r1, r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	9103      	str	r1, [sp, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfbb      	ittet	lt
 800853e:	425b      	neglt	r3, r3
 8008540:	f042 0202 	orrlt.w	r2, r2, #2
 8008544:	9307      	strge	r3, [sp, #28]
 8008546:	9307      	strlt	r3, [sp, #28]
 8008548:	bfb8      	it	lt
 800854a:	9204      	strlt	r2, [sp, #16]
 800854c:	7823      	ldrb	r3, [r4, #0]
 800854e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008550:	d10a      	bne.n	8008568 <_svfiprintf_r+0x130>
 8008552:	7863      	ldrb	r3, [r4, #1]
 8008554:	2b2a      	cmp	r3, #42	@ 0x2a
 8008556:	d132      	bne.n	80085be <_svfiprintf_r+0x186>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	1d1a      	adds	r2, r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	9203      	str	r2, [sp, #12]
 8008560:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008564:	3402      	adds	r4, #2
 8008566:	9305      	str	r3, [sp, #20]
 8008568:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800862c <_svfiprintf_r+0x1f4>
 800856c:	7821      	ldrb	r1, [r4, #0]
 800856e:	2203      	movs	r2, #3
 8008570:	4650      	mov	r0, sl
 8008572:	f7f7 fe2d 	bl	80001d0 <memchr>
 8008576:	b138      	cbz	r0, 8008588 <_svfiprintf_r+0x150>
 8008578:	9b04      	ldr	r3, [sp, #16]
 800857a:	eba0 000a 	sub.w	r0, r0, sl
 800857e:	2240      	movs	r2, #64	@ 0x40
 8008580:	4082      	lsls	r2, r0
 8008582:	4313      	orrs	r3, r2
 8008584:	3401      	adds	r4, #1
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	4824      	ldr	r0, [pc, #144]	@ (8008620 <_svfiprintf_r+0x1e8>)
 800858e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008592:	2206      	movs	r2, #6
 8008594:	f7f7 fe1c 	bl	80001d0 <memchr>
 8008598:	2800      	cmp	r0, #0
 800859a:	d036      	beq.n	800860a <_svfiprintf_r+0x1d2>
 800859c:	4b21      	ldr	r3, [pc, #132]	@ (8008624 <_svfiprintf_r+0x1ec>)
 800859e:	bb1b      	cbnz	r3, 80085e8 <_svfiprintf_r+0x1b0>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	3307      	adds	r3, #7
 80085a4:	f023 0307 	bic.w	r3, r3, #7
 80085a8:	3308      	adds	r3, #8
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ae:	4433      	add	r3, r6
 80085b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b2:	e76a      	b.n	800848a <_svfiprintf_r+0x52>
 80085b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b8:	460c      	mov	r4, r1
 80085ba:	2001      	movs	r0, #1
 80085bc:	e7a8      	b.n	8008510 <_svfiprintf_r+0xd8>
 80085be:	2300      	movs	r3, #0
 80085c0:	3401      	adds	r4, #1
 80085c2:	9305      	str	r3, [sp, #20]
 80085c4:	4619      	mov	r1, r3
 80085c6:	f04f 0c0a 	mov.w	ip, #10
 80085ca:	4620      	mov	r0, r4
 80085cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d0:	3a30      	subs	r2, #48	@ 0x30
 80085d2:	2a09      	cmp	r2, #9
 80085d4:	d903      	bls.n	80085de <_svfiprintf_r+0x1a6>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0c6      	beq.n	8008568 <_svfiprintf_r+0x130>
 80085da:	9105      	str	r1, [sp, #20]
 80085dc:	e7c4      	b.n	8008568 <_svfiprintf_r+0x130>
 80085de:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e2:	4604      	mov	r4, r0
 80085e4:	2301      	movs	r3, #1
 80085e6:	e7f0      	b.n	80085ca <_svfiprintf_r+0x192>
 80085e8:	ab03      	add	r3, sp, #12
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	462a      	mov	r2, r5
 80085ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008628 <_svfiprintf_r+0x1f0>)
 80085f0:	a904      	add	r1, sp, #16
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7fd ff0a 	bl	800640c <_printf_float>
 80085f8:	1c42      	adds	r2, r0, #1
 80085fa:	4606      	mov	r6, r0
 80085fc:	d1d6      	bne.n	80085ac <_svfiprintf_r+0x174>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	065b      	lsls	r3, r3, #25
 8008602:	f53f af2d 	bmi.w	8008460 <_svfiprintf_r+0x28>
 8008606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008608:	e72c      	b.n	8008464 <_svfiprintf_r+0x2c>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4b05      	ldr	r3, [pc, #20]	@ (8008628 <_svfiprintf_r+0x1f0>)
 8008612:	a904      	add	r1, sp, #16
 8008614:	4638      	mov	r0, r7
 8008616:	f7fe f991 	bl	800693c <_printf_i>
 800861a:	e7ed      	b.n	80085f8 <_svfiprintf_r+0x1c0>
 800861c:	080091c8 	.word	0x080091c8
 8008620:	080091d2 	.word	0x080091d2
 8008624:	0800640d 	.word	0x0800640d
 8008628:	08008381 	.word	0x08008381
 800862c:	080091ce 	.word	0x080091ce

08008630 <__sfputc_r>:
 8008630:	6893      	ldr	r3, [r2, #8]
 8008632:	3b01      	subs	r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	b410      	push	{r4}
 8008638:	6093      	str	r3, [r2, #8]
 800863a:	da08      	bge.n	800864e <__sfputc_r+0x1e>
 800863c:	6994      	ldr	r4, [r2, #24]
 800863e:	42a3      	cmp	r3, r4
 8008640:	db01      	blt.n	8008646 <__sfputc_r+0x16>
 8008642:	290a      	cmp	r1, #10
 8008644:	d103      	bne.n	800864e <__sfputc_r+0x1e>
 8008646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864a:	f000 b9df 	b.w	8008a0c <__swbuf_r>
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	1c58      	adds	r0, r3, #1
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	7019      	strb	r1, [r3, #0]
 8008656:	4608      	mov	r0, r1
 8008658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865c:	4770      	bx	lr

0800865e <__sfputs_r>:
 800865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008660:	4606      	mov	r6, r0
 8008662:	460f      	mov	r7, r1
 8008664:	4614      	mov	r4, r2
 8008666:	18d5      	adds	r5, r2, r3
 8008668:	42ac      	cmp	r4, r5
 800866a:	d101      	bne.n	8008670 <__sfputs_r+0x12>
 800866c:	2000      	movs	r0, #0
 800866e:	e007      	b.n	8008680 <__sfputs_r+0x22>
 8008670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008674:	463a      	mov	r2, r7
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ffda 	bl	8008630 <__sfputc_r>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d1f3      	bne.n	8008668 <__sfputs_r+0xa>
 8008680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008684 <_vfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	460d      	mov	r5, r1
 800868a:	b09d      	sub	sp, #116	@ 0x74
 800868c:	4614      	mov	r4, r2
 800868e:	4698      	mov	r8, r3
 8008690:	4606      	mov	r6, r0
 8008692:	b118      	cbz	r0, 800869c <_vfiprintf_r+0x18>
 8008694:	6a03      	ldr	r3, [r0, #32]
 8008696:	b90b      	cbnz	r3, 800869c <_vfiprintf_r+0x18>
 8008698:	f7fe fafc 	bl	8006c94 <__sinit>
 800869c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800869e:	07d9      	lsls	r1, r3, #31
 80086a0:	d405      	bmi.n	80086ae <_vfiprintf_r+0x2a>
 80086a2:	89ab      	ldrh	r3, [r5, #12]
 80086a4:	059a      	lsls	r2, r3, #22
 80086a6:	d402      	bmi.n	80086ae <_vfiprintf_r+0x2a>
 80086a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086aa:	f7fe fc40 	bl	8006f2e <__retarget_lock_acquire_recursive>
 80086ae:	89ab      	ldrh	r3, [r5, #12]
 80086b0:	071b      	lsls	r3, r3, #28
 80086b2:	d501      	bpl.n	80086b8 <_vfiprintf_r+0x34>
 80086b4:	692b      	ldr	r3, [r5, #16]
 80086b6:	b99b      	cbnz	r3, 80086e0 <_vfiprintf_r+0x5c>
 80086b8:	4629      	mov	r1, r5
 80086ba:	4630      	mov	r0, r6
 80086bc:	f000 f9e4 	bl	8008a88 <__swsetup_r>
 80086c0:	b170      	cbz	r0, 80086e0 <_vfiprintf_r+0x5c>
 80086c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086c4:	07dc      	lsls	r4, r3, #31
 80086c6:	d504      	bpl.n	80086d2 <_vfiprintf_r+0x4e>
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	b01d      	add	sp, #116	@ 0x74
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	0598      	lsls	r0, r3, #22
 80086d6:	d4f7      	bmi.n	80086c8 <_vfiprintf_r+0x44>
 80086d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086da:	f7fe fc29 	bl	8006f30 <__retarget_lock_release_recursive>
 80086de:	e7f3      	b.n	80086c8 <_vfiprintf_r+0x44>
 80086e0:	2300      	movs	r3, #0
 80086e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e4:	2320      	movs	r3, #32
 80086e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ee:	2330      	movs	r3, #48	@ 0x30
 80086f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088a0 <_vfiprintf_r+0x21c>
 80086f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086f8:	f04f 0901 	mov.w	r9, #1
 80086fc:	4623      	mov	r3, r4
 80086fe:	469a      	mov	sl, r3
 8008700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008704:	b10a      	cbz	r2, 800870a <_vfiprintf_r+0x86>
 8008706:	2a25      	cmp	r2, #37	@ 0x25
 8008708:	d1f9      	bne.n	80086fe <_vfiprintf_r+0x7a>
 800870a:	ebba 0b04 	subs.w	fp, sl, r4
 800870e:	d00b      	beq.n	8008728 <_vfiprintf_r+0xa4>
 8008710:	465b      	mov	r3, fp
 8008712:	4622      	mov	r2, r4
 8008714:	4629      	mov	r1, r5
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ffa1 	bl	800865e <__sfputs_r>
 800871c:	3001      	adds	r0, #1
 800871e:	f000 80a7 	beq.w	8008870 <_vfiprintf_r+0x1ec>
 8008722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008724:	445a      	add	r2, fp
 8008726:	9209      	str	r2, [sp, #36]	@ 0x24
 8008728:	f89a 3000 	ldrb.w	r3, [sl]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 809f 	beq.w	8008870 <_vfiprintf_r+0x1ec>
 8008732:	2300      	movs	r3, #0
 8008734:	f04f 32ff 	mov.w	r2, #4294967295
 8008738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800873c:	f10a 0a01 	add.w	sl, sl, #1
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	9307      	str	r3, [sp, #28]
 8008744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008748:	931a      	str	r3, [sp, #104]	@ 0x68
 800874a:	4654      	mov	r4, sl
 800874c:	2205      	movs	r2, #5
 800874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008752:	4853      	ldr	r0, [pc, #332]	@ (80088a0 <_vfiprintf_r+0x21c>)
 8008754:	f7f7 fd3c 	bl	80001d0 <memchr>
 8008758:	9a04      	ldr	r2, [sp, #16]
 800875a:	b9d8      	cbnz	r0, 8008794 <_vfiprintf_r+0x110>
 800875c:	06d1      	lsls	r1, r2, #27
 800875e:	bf44      	itt	mi
 8008760:	2320      	movmi	r3, #32
 8008762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008766:	0713      	lsls	r3, r2, #28
 8008768:	bf44      	itt	mi
 800876a:	232b      	movmi	r3, #43	@ 0x2b
 800876c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008770:	f89a 3000 	ldrb.w	r3, [sl]
 8008774:	2b2a      	cmp	r3, #42	@ 0x2a
 8008776:	d015      	beq.n	80087a4 <_vfiprintf_r+0x120>
 8008778:	9a07      	ldr	r2, [sp, #28]
 800877a:	4654      	mov	r4, sl
 800877c:	2000      	movs	r0, #0
 800877e:	f04f 0c0a 	mov.w	ip, #10
 8008782:	4621      	mov	r1, r4
 8008784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008788:	3b30      	subs	r3, #48	@ 0x30
 800878a:	2b09      	cmp	r3, #9
 800878c:	d94b      	bls.n	8008826 <_vfiprintf_r+0x1a2>
 800878e:	b1b0      	cbz	r0, 80087be <_vfiprintf_r+0x13a>
 8008790:	9207      	str	r2, [sp, #28]
 8008792:	e014      	b.n	80087be <_vfiprintf_r+0x13a>
 8008794:	eba0 0308 	sub.w	r3, r0, r8
 8008798:	fa09 f303 	lsl.w	r3, r9, r3
 800879c:	4313      	orrs	r3, r2
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	46a2      	mov	sl, r4
 80087a2:	e7d2      	b.n	800874a <_vfiprintf_r+0xc6>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	1d19      	adds	r1, r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	9103      	str	r1, [sp, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bfbb      	ittet	lt
 80087b0:	425b      	neglt	r3, r3
 80087b2:	f042 0202 	orrlt.w	r2, r2, #2
 80087b6:	9307      	strge	r3, [sp, #28]
 80087b8:	9307      	strlt	r3, [sp, #28]
 80087ba:	bfb8      	it	lt
 80087bc:	9204      	strlt	r2, [sp, #16]
 80087be:	7823      	ldrb	r3, [r4, #0]
 80087c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087c2:	d10a      	bne.n	80087da <_vfiprintf_r+0x156>
 80087c4:	7863      	ldrb	r3, [r4, #1]
 80087c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c8:	d132      	bne.n	8008830 <_vfiprintf_r+0x1ac>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	9203      	str	r2, [sp, #12]
 80087d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087d6:	3402      	adds	r4, #2
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088b0 <_vfiprintf_r+0x22c>
 80087de:	7821      	ldrb	r1, [r4, #0]
 80087e0:	2203      	movs	r2, #3
 80087e2:	4650      	mov	r0, sl
 80087e4:	f7f7 fcf4 	bl	80001d0 <memchr>
 80087e8:	b138      	cbz	r0, 80087fa <_vfiprintf_r+0x176>
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	eba0 000a 	sub.w	r0, r0, sl
 80087f0:	2240      	movs	r2, #64	@ 0x40
 80087f2:	4082      	lsls	r2, r0
 80087f4:	4313      	orrs	r3, r2
 80087f6:	3401      	adds	r4, #1
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	4829      	ldr	r0, [pc, #164]	@ (80088a4 <_vfiprintf_r+0x220>)
 8008800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008804:	2206      	movs	r2, #6
 8008806:	f7f7 fce3 	bl	80001d0 <memchr>
 800880a:	2800      	cmp	r0, #0
 800880c:	d03f      	beq.n	800888e <_vfiprintf_r+0x20a>
 800880e:	4b26      	ldr	r3, [pc, #152]	@ (80088a8 <_vfiprintf_r+0x224>)
 8008810:	bb1b      	cbnz	r3, 800885a <_vfiprintf_r+0x1d6>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	3307      	adds	r3, #7
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	3308      	adds	r3, #8
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	443b      	add	r3, r7
 8008822:	9309      	str	r3, [sp, #36]	@ 0x24
 8008824:	e76a      	b.n	80086fc <_vfiprintf_r+0x78>
 8008826:	fb0c 3202 	mla	r2, ip, r2, r3
 800882a:	460c      	mov	r4, r1
 800882c:	2001      	movs	r0, #1
 800882e:	e7a8      	b.n	8008782 <_vfiprintf_r+0xfe>
 8008830:	2300      	movs	r3, #0
 8008832:	3401      	adds	r4, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	4619      	mov	r1, r3
 8008838:	f04f 0c0a 	mov.w	ip, #10
 800883c:	4620      	mov	r0, r4
 800883e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008842:	3a30      	subs	r2, #48	@ 0x30
 8008844:	2a09      	cmp	r2, #9
 8008846:	d903      	bls.n	8008850 <_vfiprintf_r+0x1cc>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0c6      	beq.n	80087da <_vfiprintf_r+0x156>
 800884c:	9105      	str	r1, [sp, #20]
 800884e:	e7c4      	b.n	80087da <_vfiprintf_r+0x156>
 8008850:	fb0c 2101 	mla	r1, ip, r1, r2
 8008854:	4604      	mov	r4, r0
 8008856:	2301      	movs	r3, #1
 8008858:	e7f0      	b.n	800883c <_vfiprintf_r+0x1b8>
 800885a:	ab03      	add	r3, sp, #12
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	462a      	mov	r2, r5
 8008860:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <_vfiprintf_r+0x228>)
 8008862:	a904      	add	r1, sp, #16
 8008864:	4630      	mov	r0, r6
 8008866:	f7fd fdd1 	bl	800640c <_printf_float>
 800886a:	4607      	mov	r7, r0
 800886c:	1c78      	adds	r0, r7, #1
 800886e:	d1d6      	bne.n	800881e <_vfiprintf_r+0x19a>
 8008870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008872:	07d9      	lsls	r1, r3, #31
 8008874:	d405      	bmi.n	8008882 <_vfiprintf_r+0x1fe>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	059a      	lsls	r2, r3, #22
 800887a:	d402      	bmi.n	8008882 <_vfiprintf_r+0x1fe>
 800887c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800887e:	f7fe fb57 	bl	8006f30 <__retarget_lock_release_recursive>
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	065b      	lsls	r3, r3, #25
 8008886:	f53f af1f 	bmi.w	80086c8 <_vfiprintf_r+0x44>
 800888a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800888c:	e71e      	b.n	80086cc <_vfiprintf_r+0x48>
 800888e:	ab03      	add	r3, sp, #12
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	462a      	mov	r2, r5
 8008894:	4b05      	ldr	r3, [pc, #20]	@ (80088ac <_vfiprintf_r+0x228>)
 8008896:	a904      	add	r1, sp, #16
 8008898:	4630      	mov	r0, r6
 800889a:	f7fe f84f 	bl	800693c <_printf_i>
 800889e:	e7e4      	b.n	800886a <_vfiprintf_r+0x1e6>
 80088a0:	080091c8 	.word	0x080091c8
 80088a4:	080091d2 	.word	0x080091d2
 80088a8:	0800640d 	.word	0x0800640d
 80088ac:	0800865f 	.word	0x0800865f
 80088b0:	080091ce 	.word	0x080091ce

080088b4 <__sflush_r>:
 80088b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	0716      	lsls	r6, r2, #28
 80088be:	4605      	mov	r5, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	d454      	bmi.n	800896e <__sflush_r+0xba>
 80088c4:	684b      	ldr	r3, [r1, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc02      	bgt.n	80088d0 <__sflush_r+0x1c>
 80088ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd48      	ble.n	8008962 <__sflush_r+0xae>
 80088d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d045      	beq.n	8008962 <__sflush_r+0xae>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088dc:	682f      	ldr	r7, [r5, #0]
 80088de:	6a21      	ldr	r1, [r4, #32]
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	d030      	beq.n	8008946 <__sflush_r+0x92>
 80088e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	0759      	lsls	r1, r3, #29
 80088ea:	d505      	bpl.n	80088f8 <__sflush_r+0x44>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088f2:	b10b      	cbz	r3, 80088f8 <__sflush_r+0x44>
 80088f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088fc:	6a21      	ldr	r1, [r4, #32]
 80088fe:	4628      	mov	r0, r5
 8008900:	47b0      	blx	r6
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	d106      	bne.n	8008916 <__sflush_r+0x62>
 8008908:	6829      	ldr	r1, [r5, #0]
 800890a:	291d      	cmp	r1, #29
 800890c:	d82b      	bhi.n	8008966 <__sflush_r+0xb2>
 800890e:	4a2a      	ldr	r2, [pc, #168]	@ (80089b8 <__sflush_r+0x104>)
 8008910:	410a      	asrs	r2, r1
 8008912:	07d6      	lsls	r6, r2, #31
 8008914:	d427      	bmi.n	8008966 <__sflush_r+0xb2>
 8008916:	2200      	movs	r2, #0
 8008918:	6062      	str	r2, [r4, #4]
 800891a:	04d9      	lsls	r1, r3, #19
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	d504      	bpl.n	800892c <__sflush_r+0x78>
 8008922:	1c42      	adds	r2, r0, #1
 8008924:	d101      	bne.n	800892a <__sflush_r+0x76>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b903      	cbnz	r3, 800892c <__sflush_r+0x78>
 800892a:	6560      	str	r0, [r4, #84]	@ 0x54
 800892c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800892e:	602f      	str	r7, [r5, #0]
 8008930:	b1b9      	cbz	r1, 8008962 <__sflush_r+0xae>
 8008932:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008936:	4299      	cmp	r1, r3
 8008938:	d002      	beq.n	8008940 <__sflush_r+0x8c>
 800893a:	4628      	mov	r0, r5
 800893c:	f7ff f954 	bl	8007be8 <_free_r>
 8008940:	2300      	movs	r3, #0
 8008942:	6363      	str	r3, [r4, #52]	@ 0x34
 8008944:	e00d      	b.n	8008962 <__sflush_r+0xae>
 8008946:	2301      	movs	r3, #1
 8008948:	4628      	mov	r0, r5
 800894a:	47b0      	blx	r6
 800894c:	4602      	mov	r2, r0
 800894e:	1c50      	adds	r0, r2, #1
 8008950:	d1c9      	bne.n	80088e6 <__sflush_r+0x32>
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0c6      	beq.n	80088e6 <__sflush_r+0x32>
 8008958:	2b1d      	cmp	r3, #29
 800895a:	d001      	beq.n	8008960 <__sflush_r+0xac>
 800895c:	2b16      	cmp	r3, #22
 800895e:	d11e      	bne.n	800899e <__sflush_r+0xea>
 8008960:	602f      	str	r7, [r5, #0]
 8008962:	2000      	movs	r0, #0
 8008964:	e022      	b.n	80089ac <__sflush_r+0xf8>
 8008966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800896a:	b21b      	sxth	r3, r3
 800896c:	e01b      	b.n	80089a6 <__sflush_r+0xf2>
 800896e:	690f      	ldr	r7, [r1, #16]
 8008970:	2f00      	cmp	r7, #0
 8008972:	d0f6      	beq.n	8008962 <__sflush_r+0xae>
 8008974:	0793      	lsls	r3, r2, #30
 8008976:	680e      	ldr	r6, [r1, #0]
 8008978:	bf08      	it	eq
 800897a:	694b      	ldreq	r3, [r1, #20]
 800897c:	600f      	str	r7, [r1, #0]
 800897e:	bf18      	it	ne
 8008980:	2300      	movne	r3, #0
 8008982:	eba6 0807 	sub.w	r8, r6, r7
 8008986:	608b      	str	r3, [r1, #8]
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	dde9      	ble.n	8008962 <__sflush_r+0xae>
 800898e:	6a21      	ldr	r1, [r4, #32]
 8008990:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008992:	4643      	mov	r3, r8
 8008994:	463a      	mov	r2, r7
 8008996:	4628      	mov	r0, r5
 8008998:	47b0      	blx	r6
 800899a:	2800      	cmp	r0, #0
 800899c:	dc08      	bgt.n	80089b0 <__sflush_r+0xfc>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	4407      	add	r7, r0
 80089b2:	eba8 0800 	sub.w	r8, r8, r0
 80089b6:	e7e7      	b.n	8008988 <__sflush_r+0xd4>
 80089b8:	dfbffffe 	.word	0xdfbffffe

080089bc <_fflush_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	4605      	mov	r5, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b913      	cbnz	r3, 80089cc <_fflush_r+0x10>
 80089c6:	2500      	movs	r5, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	b118      	cbz	r0, 80089d6 <_fflush_r+0x1a>
 80089ce:	6a03      	ldr	r3, [r0, #32]
 80089d0:	b90b      	cbnz	r3, 80089d6 <_fflush_r+0x1a>
 80089d2:	f7fe f95f 	bl	8006c94 <__sinit>
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f3      	beq.n	80089c6 <_fflush_r+0xa>
 80089de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089e0:	07d0      	lsls	r0, r2, #31
 80089e2:	d404      	bmi.n	80089ee <_fflush_r+0x32>
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_fflush_r+0x32>
 80089e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ea:	f7fe faa0 	bl	8006f2e <__retarget_lock_acquire_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4621      	mov	r1, r4
 80089f2:	f7ff ff5f 	bl	80088b4 <__sflush_r>
 80089f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089f8:	07da      	lsls	r2, r3, #31
 80089fa:	4605      	mov	r5, r0
 80089fc:	d4e4      	bmi.n	80089c8 <_fflush_r+0xc>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4e1      	bmi.n	80089c8 <_fflush_r+0xc>
 8008a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a06:	f7fe fa93 	bl	8006f30 <__retarget_lock_release_recursive>
 8008a0a:	e7dd      	b.n	80089c8 <_fflush_r+0xc>

08008a0c <__swbuf_r>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	460e      	mov	r6, r1
 8008a10:	4614      	mov	r4, r2
 8008a12:	4605      	mov	r5, r0
 8008a14:	b118      	cbz	r0, 8008a1e <__swbuf_r+0x12>
 8008a16:	6a03      	ldr	r3, [r0, #32]
 8008a18:	b90b      	cbnz	r3, 8008a1e <__swbuf_r+0x12>
 8008a1a:	f7fe f93b 	bl	8006c94 <__sinit>
 8008a1e:	69a3      	ldr	r3, [r4, #24]
 8008a20:	60a3      	str	r3, [r4, #8]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	071a      	lsls	r2, r3, #28
 8008a26:	d501      	bpl.n	8008a2c <__swbuf_r+0x20>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	b943      	cbnz	r3, 8008a3e <__swbuf_r+0x32>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f82a 	bl	8008a88 <__swsetup_r>
 8008a34:	b118      	cbz	r0, 8008a3e <__swbuf_r+0x32>
 8008a36:	f04f 37ff 	mov.w	r7, #4294967295
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	6922      	ldr	r2, [r4, #16]
 8008a42:	1a98      	subs	r0, r3, r2
 8008a44:	6963      	ldr	r3, [r4, #20]
 8008a46:	b2f6      	uxtb	r6, r6
 8008a48:	4283      	cmp	r3, r0
 8008a4a:	4637      	mov	r7, r6
 8008a4c:	dc05      	bgt.n	8008a5a <__swbuf_r+0x4e>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f7ff ffb3 	bl	80089bc <_fflush_r>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d1ed      	bne.n	8008a36 <__swbuf_r+0x2a>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	701e      	strb	r6, [r3, #0]
 8008a68:	6962      	ldr	r2, [r4, #20]
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d004      	beq.n	8008a7a <__swbuf_r+0x6e>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	07db      	lsls	r3, r3, #31
 8008a74:	d5e1      	bpl.n	8008a3a <__swbuf_r+0x2e>
 8008a76:	2e0a      	cmp	r6, #10
 8008a78:	d1df      	bne.n	8008a3a <__swbuf_r+0x2e>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f7ff ff9d 	bl	80089bc <_fflush_r>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d0d9      	beq.n	8008a3a <__swbuf_r+0x2e>
 8008a86:	e7d6      	b.n	8008a36 <__swbuf_r+0x2a>

08008a88 <__swsetup_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <__swsetup_r+0xa8>)
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	460c      	mov	r4, r1
 8008a92:	b118      	cbz	r0, 8008a9c <__swsetup_r+0x14>
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b90b      	cbnz	r3, 8008a9c <__swsetup_r+0x14>
 8008a98:	f7fe f8fc 	bl	8006c94 <__sinit>
 8008a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa0:	0719      	lsls	r1, r3, #28
 8008aa2:	d422      	bmi.n	8008aea <__swsetup_r+0x62>
 8008aa4:	06da      	lsls	r2, r3, #27
 8008aa6:	d407      	bmi.n	8008ab8 <__swsetup_r+0x30>
 8008aa8:	2209      	movs	r2, #9
 8008aaa:	602a      	str	r2, [r5, #0]
 8008aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	e033      	b.n	8008b20 <__swsetup_r+0x98>
 8008ab8:	0758      	lsls	r0, r3, #29
 8008aba:	d512      	bpl.n	8008ae2 <__swsetup_r+0x5a>
 8008abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008abe:	b141      	cbz	r1, 8008ad2 <__swsetup_r+0x4a>
 8008ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d002      	beq.n	8008ace <__swsetup_r+0x46>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7ff f88d 	bl	8007be8 <_free_r>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	2300      	movs	r3, #0
 8008adc:	6063      	str	r3, [r4, #4]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f043 0308 	orr.w	r3, r3, #8
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	b94b      	cbnz	r3, 8008b02 <__swsetup_r+0x7a>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af8:	d003      	beq.n	8008b02 <__swsetup_r+0x7a>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 f8eb 	bl	8008cd8 <__smakebuf_r>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	f013 0201 	ands.w	r2, r3, #1
 8008b0a:	d00a      	beq.n	8008b22 <__swsetup_r+0x9a>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	60a2      	str	r2, [r4, #8]
 8008b10:	6962      	ldr	r2, [r4, #20]
 8008b12:	4252      	negs	r2, r2
 8008b14:	61a2      	str	r2, [r4, #24]
 8008b16:	6922      	ldr	r2, [r4, #16]
 8008b18:	b942      	cbnz	r2, 8008b2c <__swsetup_r+0xa4>
 8008b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b1e:	d1c5      	bne.n	8008aac <__swsetup_r+0x24>
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	0799      	lsls	r1, r3, #30
 8008b24:	bf58      	it	pl
 8008b26:	6962      	ldrpl	r2, [r4, #20]
 8008b28:	60a2      	str	r2, [r4, #8]
 8008b2a:	e7f4      	b.n	8008b16 <__swsetup_r+0x8e>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7f7      	b.n	8008b20 <__swsetup_r+0x98>
 8008b30:	20000024 	.word	0x20000024

08008b34 <memmove>:
 8008b34:	4288      	cmp	r0, r1
 8008b36:	b510      	push	{r4, lr}
 8008b38:	eb01 0402 	add.w	r4, r1, r2
 8008b3c:	d902      	bls.n	8008b44 <memmove+0x10>
 8008b3e:	4284      	cmp	r4, r0
 8008b40:	4623      	mov	r3, r4
 8008b42:	d807      	bhi.n	8008b54 <memmove+0x20>
 8008b44:	1e43      	subs	r3, r0, #1
 8008b46:	42a1      	cmp	r1, r4
 8008b48:	d008      	beq.n	8008b5c <memmove+0x28>
 8008b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b52:	e7f8      	b.n	8008b46 <memmove+0x12>
 8008b54:	4402      	add	r2, r0
 8008b56:	4601      	mov	r1, r0
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	d100      	bne.n	8008b5e <memmove+0x2a>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b66:	e7f7      	b.n	8008b58 <memmove+0x24>

08008b68 <__assert_func>:
 8008b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <__assert_func+0x2c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4605      	mov	r5, r0
 8008b74:	68d8      	ldr	r0, [r3, #12]
 8008b76:	b954      	cbnz	r4, 8008b8e <__assert_func+0x26>
 8008b78:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <__assert_func+0x30>)
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b80:	9100      	str	r1, [sp, #0]
 8008b82:	462b      	mov	r3, r5
 8008b84:	4905      	ldr	r1, [pc, #20]	@ (8008b9c <__assert_func+0x34>)
 8008b86:	f000 f86f 	bl	8008c68 <fiprintf>
 8008b8a:	f000 f903 	bl	8008d94 <abort>
 8008b8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <__assert_func+0x38>)
 8008b90:	e7f4      	b.n	8008b7c <__assert_func+0x14>
 8008b92:	bf00      	nop
 8008b94:	20000024 	.word	0x20000024
 8008b98:	0800921e 	.word	0x0800921e
 8008b9c:	080091f0 	.word	0x080091f0
 8008ba0:	080091e3 	.word	0x080091e3

08008ba4 <_calloc_r>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	fba1 5402 	umull	r5, r4, r1, r2
 8008baa:	b93c      	cbnz	r4, 8008bbc <_calloc_r+0x18>
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7fd fb01 	bl	80061b4 <_malloc_r>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	b928      	cbnz	r0, 8008bc2 <_calloc_r+0x1e>
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	4630      	mov	r0, r6
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	220c      	movs	r2, #12
 8008bbe:	6002      	str	r2, [r0, #0]
 8008bc0:	e7f9      	b.n	8008bb6 <_calloc_r+0x12>
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f7fe f924 	bl	8006e12 <memset>
 8008bca:	e7f5      	b.n	8008bb8 <_calloc_r+0x14>

08008bcc <__ascii_mbtowc>:
 8008bcc:	b082      	sub	sp, #8
 8008bce:	b901      	cbnz	r1, 8008bd2 <__ascii_mbtowc+0x6>
 8008bd0:	a901      	add	r1, sp, #4
 8008bd2:	b142      	cbz	r2, 8008be6 <__ascii_mbtowc+0x1a>
 8008bd4:	b14b      	cbz	r3, 8008bea <__ascii_mbtowc+0x1e>
 8008bd6:	7813      	ldrb	r3, [r2, #0]
 8008bd8:	600b      	str	r3, [r1, #0]
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	1e10      	subs	r0, r2, #0
 8008bde:	bf18      	it	ne
 8008be0:	2001      	movne	r0, #1
 8008be2:	b002      	add	sp, #8
 8008be4:	4770      	bx	lr
 8008be6:	4610      	mov	r0, r2
 8008be8:	e7fb      	b.n	8008be2 <__ascii_mbtowc+0x16>
 8008bea:	f06f 0001 	mvn.w	r0, #1
 8008bee:	e7f8      	b.n	8008be2 <__ascii_mbtowc+0x16>

08008bf0 <_realloc_r>:
 8008bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	4615      	mov	r5, r2
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	b921      	cbnz	r1, 8008c06 <_realloc_r+0x16>
 8008bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c00:	4611      	mov	r1, r2
 8008c02:	f7fd bad7 	b.w	80061b4 <_malloc_r>
 8008c06:	b92a      	cbnz	r2, 8008c14 <_realloc_r+0x24>
 8008c08:	f7fe ffee 	bl	8007be8 <_free_r>
 8008c0c:	2400      	movs	r4, #0
 8008c0e:	4620      	mov	r0, r4
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	f000 f8c5 	bl	8008da2 <_malloc_usable_size_r>
 8008c18:	4285      	cmp	r5, r0
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	d802      	bhi.n	8008c24 <_realloc_r+0x34>
 8008c1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c22:	d8f4      	bhi.n	8008c0e <_realloc_r+0x1e>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7fd fac4 	bl	80061b4 <_malloc_r>
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d0ec      	beq.n	8008c0c <_realloc_r+0x1c>
 8008c32:	42b5      	cmp	r5, r6
 8008c34:	462a      	mov	r2, r5
 8008c36:	4621      	mov	r1, r4
 8008c38:	bf28      	it	cs
 8008c3a:	4632      	movcs	r2, r6
 8008c3c:	f7fe f979 	bl	8006f32 <memcpy>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4640      	mov	r0, r8
 8008c44:	f7fe ffd0 	bl	8007be8 <_free_r>
 8008c48:	463c      	mov	r4, r7
 8008c4a:	e7e0      	b.n	8008c0e <_realloc_r+0x1e>

08008c4c <__ascii_wctomb>:
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	b141      	cbz	r1, 8008c64 <__ascii_wctomb+0x18>
 8008c52:	2aff      	cmp	r2, #255	@ 0xff
 8008c54:	d904      	bls.n	8008c60 <__ascii_wctomb+0x14>
 8008c56:	228a      	movs	r2, #138	@ 0x8a
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	4770      	bx	lr
 8008c60:	700a      	strb	r2, [r1, #0]
 8008c62:	2001      	movs	r0, #1
 8008c64:	4770      	bx	lr
	...

08008c68 <fiprintf>:
 8008c68:	b40e      	push	{r1, r2, r3}
 8008c6a:	b503      	push	{r0, r1, lr}
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	ab03      	add	r3, sp, #12
 8008c70:	4805      	ldr	r0, [pc, #20]	@ (8008c88 <fiprintf+0x20>)
 8008c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c76:	6800      	ldr	r0, [r0, #0]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f7ff fd03 	bl	8008684 <_vfiprintf_r>
 8008c7e:	b002      	add	sp, #8
 8008c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c84:	b003      	add	sp, #12
 8008c86:	4770      	bx	lr
 8008c88:	20000024 	.word	0x20000024

08008c8c <__swhatbuf_r>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	2900      	cmp	r1, #0
 8008c96:	b096      	sub	sp, #88	@ 0x58
 8008c98:	4615      	mov	r5, r2
 8008c9a:	461e      	mov	r6, r3
 8008c9c:	da0d      	bge.n	8008cba <__swhatbuf_r+0x2e>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ca4:	f04f 0100 	mov.w	r1, #0
 8008ca8:	bf14      	ite	ne
 8008caa:	2340      	movne	r3, #64	@ 0x40
 8008cac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	6031      	str	r1, [r6, #0]
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	b016      	add	sp, #88	@ 0x58
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
 8008cba:	466a      	mov	r2, sp
 8008cbc:	f000 f848 	bl	8008d50 <_fstat_r>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	dbec      	blt.n	8008c9e <__swhatbuf_r+0x12>
 8008cc4:	9901      	ldr	r1, [sp, #4]
 8008cc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cce:	4259      	negs	r1, r3
 8008cd0:	4159      	adcs	r1, r3
 8008cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cd6:	e7eb      	b.n	8008cb0 <__swhatbuf_r+0x24>

08008cd8 <__smakebuf_r>:
 8008cd8:	898b      	ldrh	r3, [r1, #12]
 8008cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cdc:	079d      	lsls	r5, r3, #30
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	d507      	bpl.n	8008cf4 <__smakebuf_r+0x1c>
 8008ce4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	2301      	movs	r3, #1
 8008cee:	6163      	str	r3, [r4, #20]
 8008cf0:	b003      	add	sp, #12
 8008cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf4:	ab01      	add	r3, sp, #4
 8008cf6:	466a      	mov	r2, sp
 8008cf8:	f7ff ffc8 	bl	8008c8c <__swhatbuf_r>
 8008cfc:	9f00      	ldr	r7, [sp, #0]
 8008cfe:	4605      	mov	r5, r0
 8008d00:	4639      	mov	r1, r7
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7fd fa56 	bl	80061b4 <_malloc_r>
 8008d08:	b948      	cbnz	r0, 8008d1e <__smakebuf_r+0x46>
 8008d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0e:	059a      	lsls	r2, r3, #22
 8008d10:	d4ee      	bmi.n	8008cf0 <__smakebuf_r+0x18>
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	f043 0302 	orr.w	r3, r3, #2
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	e7e2      	b.n	8008ce4 <__smakebuf_r+0xc>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	6020      	str	r0, [r4, #0]
 8008d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d2e:	b15b      	cbz	r3, 8008d48 <__smakebuf_r+0x70>
 8008d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 f81d 	bl	8008d74 <_isatty_r>
 8008d3a:	b128      	cbz	r0, 8008d48 <__smakebuf_r+0x70>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	431d      	orrs	r5, r3
 8008d4c:	81a5      	strh	r5, [r4, #12]
 8008d4e:	e7cf      	b.n	8008cf0 <__smakebuf_r+0x18>

08008d50 <_fstat_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	@ (8008d70 <_fstat_r+0x20>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f7f8 ffeb 	bl	8001d38 <_fstat>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d102      	bne.n	8008d6c <_fstat_r+0x1c>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	b103      	cbz	r3, 8008d6c <_fstat_r+0x1c>
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000794 	.word	0x20000794

08008d74 <_isatty_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d06      	ldr	r5, [pc, #24]	@ (8008d90 <_isatty_r+0x1c>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	f7f8 ffea 	bl	8001d58 <_isatty>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_isatty_r+0x1a>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_isatty_r+0x1a>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20000794 	.word	0x20000794

08008d94 <abort>:
 8008d94:	b508      	push	{r3, lr}
 8008d96:	2006      	movs	r0, #6
 8008d98:	f000 f834 	bl	8008e04 <raise>
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	f7f8 ff7b 	bl	8001c98 <_exit>

08008da2 <_malloc_usable_size_r>:
 8008da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da6:	1f18      	subs	r0, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbc      	itt	lt
 8008dac:	580b      	ldrlt	r3, [r1, r0]
 8008dae:	18c0      	addlt	r0, r0, r3
 8008db0:	4770      	bx	lr

08008db2 <_raise_r>:
 8008db2:	291f      	cmp	r1, #31
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4605      	mov	r5, r0
 8008db8:	460c      	mov	r4, r1
 8008dba:	d904      	bls.n	8008dc6 <_raise_r+0x14>
 8008dbc:	2316      	movs	r3, #22
 8008dbe:	6003      	str	r3, [r0, #0]
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dc8:	b112      	cbz	r2, 8008dd0 <_raise_r+0x1e>
 8008dca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dce:	b94b      	cbnz	r3, 8008de4 <_raise_r+0x32>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 f831 	bl	8008e38 <_getpid_r>
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	4601      	mov	r1, r0
 8008dda:	4628      	mov	r0, r5
 8008ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de0:	f000 b818 	b.w	8008e14 <_kill_r>
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d00a      	beq.n	8008dfe <_raise_r+0x4c>
 8008de8:	1c59      	adds	r1, r3, #1
 8008dea:	d103      	bne.n	8008df4 <_raise_r+0x42>
 8008dec:	2316      	movs	r3, #22
 8008dee:	6003      	str	r3, [r0, #0]
 8008df0:	2001      	movs	r0, #1
 8008df2:	e7e7      	b.n	8008dc4 <_raise_r+0x12>
 8008df4:	2100      	movs	r1, #0
 8008df6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4798      	blx	r3
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e7e0      	b.n	8008dc4 <_raise_r+0x12>
	...

08008e04 <raise>:
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <raise+0xc>)
 8008e06:	4601      	mov	r1, r0
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f7ff bfd2 	b.w	8008db2 <_raise_r>
 8008e0e:	bf00      	nop
 8008e10:	20000024 	.word	0x20000024

08008e14 <_kill_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d07      	ldr	r5, [pc, #28]	@ (8008e34 <_kill_r+0x20>)
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	f7f8 ff29 	bl	8001c78 <_kill>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d102      	bne.n	8008e30 <_kill_r+0x1c>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	b103      	cbz	r3, 8008e30 <_kill_r+0x1c>
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	bd38      	pop	{r3, r4, r5, pc}
 8008e32:	bf00      	nop
 8008e34:	20000794 	.word	0x20000794

08008e38 <_getpid_r>:
 8008e38:	f7f8 bf16 	b.w	8001c68 <_getpid>

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
