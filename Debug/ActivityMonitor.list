
ActivityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009500  08009500  0000a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c0  080099c0  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099c0  080099c0  0000a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c8  080099c8  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c8  080099c8  0000a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099cc  080099cc  0000a9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080099d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e0  2**0
                  CONTENTS
 10 .bss          000005bc  200001e0  200001e0  0000b1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  0000b1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001025f  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c8  00000000  00000000  0001b46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  0001de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  0001ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023756  00000000  00000000  0001f77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d67  00000000  00000000  00042ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4868  00000000  00000000  00054c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001294a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e10  00000000  00000000  001294e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  0012e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094e4 	.word	0x080094e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080094e4 	.word	0x080094e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <LiquidCrystal_I2C_Init>:
#include "LiquidCrystal_I2C.h"

void LiquidCrystal_I2C_Init(LiquidCrystal_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t cols, uint8_t rows) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	460b      	mov	r3, r1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71bb      	strb	r3, [r7, #6]
    lcd->hi2c = hi2c;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
    lcd->Address = address << 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	711a      	strb	r2, [r3, #4]
    lcd->Cols = cols;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	715a      	strb	r2, [r3, #5]
    lcd->Rows = rows;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	7e3a      	ldrb	r2, [r7, #24]
 8000f68:	719a      	strb	r2, [r3, #6]
    lcd->BacklightVal = LCD_BACKLIGHT;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	721a      	strb	r2, [r3, #8]
    if (rows > 1) {
 8000f76:	7e3b      	ldrb	r3, [r7, #24]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d906      	bls.n	8000f8a <LiquidCrystal_I2C_Init+0x52>
        lcd->DisplayFunction |= LCD_2LINE;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	7a1b      	ldrb	r3, [r3, #8]
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	721a      	strb	r2, [r3, #8]
    }
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LiquidCrystal_I2C_Begin>:

void LiquidCrystal_I2C_Begin(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70bb      	strb	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
    lcd->NumLines = rows;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	78ba      	ldrb	r2, [r7, #2]
 8000fb4:	72da      	strb	r2, [r3, #11]
    lcd->DisplayFunction |= charsize;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7a1a      	ldrb	r2, [r3, #8]
 8000fba:	787b      	ldrb	r3, [r7, #1]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	721a      	strb	r2, [r3, #8]

    HAL_Delay(50); // Wait for >40ms
 8000fc4:	2032      	movs	r0, #50	@ 0x32
 8000fc6:	f001 fb17 	bl	80025f8 <HAL_Delay>

    LiquidCrystal_I2C_ExpanderWrite(lcd, lcd->BacklightVal);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	79db      	ldrb	r3, [r3, #7]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8f0 	bl	80011b6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fda:	f001 fb0d 	bl	80025f8 <HAL_Delay>

    // Initialization sequence
    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000fde:	2130      	movs	r1, #48	@ 0x30
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f8d4 	bl	800118e <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 fb06 	bl	80025f8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000fec:	2130      	movs	r1, #48	@ 0x30
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f8cd 	bl	800118e <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(5); // Wait min 4.1ms
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f001 faff 	bl	80025f8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x03 << 4);
 8000ffa:	2130      	movs	r1, #48	@ 0x30
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f8c6 	bl	800118e <LiquidCrystal_I2C_Write4Bits>
    HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f001 faf8 	bl	80025f8 <HAL_Delay>

    LiquidCrystal_I2C_Write4Bits(lcd, 0x02 << 4); // Finally, set to 4-bit interface
 8001008:	2120      	movs	r1, #32
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f8bf 	bl	800118e <LiquidCrystal_I2C_Write4Bits>

    LiquidCrystal_I2C_Command(lcd, LCD_FUNCTIONSET | lcd->DisplayFunction);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7a1b      	ldrb	r3, [r3, #8]
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f883 	bl	8001128 <LiquidCrystal_I2C_Command>

    lcd->DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2204      	movs	r2, #4
 8001026:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Display(lcd);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f822 	bl	8001072 <LiquidCrystal_I2C_Display>

    LiquidCrystal_I2C_Clear(lcd);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f810 	bl	8001054 <LiquidCrystal_I2C_Clear>

    lcd->DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2202      	movs	r2, #2
 8001038:	729a      	strb	r2, [r3, #10]
    LiquidCrystal_I2C_Command(lcd, LCD_ENTRYMODESET | lcd->DisplayMode);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f86e 	bl	8001128 <LiquidCrystal_I2C_Command>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <LiquidCrystal_I2C_Clear>:

void LiquidCrystal_I2C_Clear(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    LiquidCrystal_I2C_Command(lcd, LCD_CLEARDISPLAY);
 800105c:	2101      	movs	r1, #1
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f862 	bl	8001128 <LiquidCrystal_I2C_Command>
    HAL_Delay(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f001 fac7 	bl	80025f8 <HAL_Delay>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <LiquidCrystal_I2C_Display>:
void LiquidCrystal_I2C_NoDisplay(LiquidCrystal_I2C_HandleTypeDef *lcd) {
    lcd->DisplayControl &= ~LCD_DISPLAYON;
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void LiquidCrystal_I2C_Display(LiquidCrystal_I2C_HandleTypeDef *lcd) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    lcd->DisplayControl |= LCD_DISPLAYON;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	725a      	strb	r2, [r3, #9]
    LiquidCrystal_I2C_Command(lcd, LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7a5b      	ldrb	r3, [r3, #9]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f847 	bl	8001128 <LiquidCrystal_I2C_Command>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <LiquidCrystal_I2C_SetCursor>:
    for (int i = 0; i < 8; i++) {
        LiquidCrystal_I2C_Send(lcd, charmap[i], Rs);
    }
}

void LiquidCrystal_I2C_SetCursor(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	4613      	mov	r3, r2
 80010b2:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <LiquidCrystal_I2C_SetCursor+0x50>)
 80010b6:	60fb      	str	r3, [r7, #12]
    if (row > lcd->NumLines) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7adb      	ldrb	r3, [r3, #11]
 80010bc:	78ba      	ldrb	r2, [r7, #2]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d903      	bls.n	80010ca <LiquidCrystal_I2C_SetCursor+0x26>
        row = lcd->NumLines - 1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7adb      	ldrb	r3, [r3, #11]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	70bb      	strb	r3, [r7, #2]
    }
    LiquidCrystal_I2C_Command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	3310      	adds	r3, #16
 80010ce:	443b      	add	r3, r7
 80010d0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f81e 	bl	8001128 <LiquidCrystal_I2C_Command>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	54144000 	.word	0x54144000

080010f8 <LiquidCrystal_I2C_Print>:

void LiquidCrystal_I2C_Print(LiquidCrystal_I2C_HandleTypeDef *lcd, const char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001102:	e008      	b.n	8001116 <LiquidCrystal_I2C_Print+0x1e>
        LiquidCrystal_I2C_Send(lcd, *str++, Rs);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	603a      	str	r2, [r7, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f819 	bl	8001148 <LiquidCrystal_I2C_Send>
    while (*str) {
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f2      	bne.n	8001104 <LiquidCrystal_I2C_Print+0xc>
    }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <LiquidCrystal_I2C_Command>:

void LiquidCrystal_I2C_Command(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_Send(lcd, value, 0);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f804 	bl	8001148 <LiquidCrystal_I2C_Send>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LiquidCrystal_I2C_Send>:

void LiquidCrystal_I2C_Send(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value, uint8_t mode) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
    uint8_t highnib = value & 0xf0;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xf0;
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	73bb      	strb	r3, [r7, #14]
    LiquidCrystal_I2C_Write4Bits(lcd, (highnib) | mode);
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	4313      	orrs	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f80c 	bl	800118e <LiquidCrystal_I2C_Write4Bits>
    LiquidCrystal_I2C_Write4Bits(lcd, (lownib) | mode);
 8001176:	7bba      	ldrb	r2, [r7, #14]
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	4313      	orrs	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f804 	bl	800118e <LiquidCrystal_I2C_Write4Bits>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <LiquidCrystal_I2C_Write4Bits>:

void LiquidCrystal_I2C_Write4Bits(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t value) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, value);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f809 	bl	80011b6 <LiquidCrystal_I2C_ExpanderWrite>
    LiquidCrystal_I2C_PulseEnable(lcd, value);
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f821 	bl	80011f0 <LiquidCrystal_I2C_PulseEnable>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <LiquidCrystal_I2C_ExpanderWrite>:

void LiquidCrystal_I2C_ExpanderWrite(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
    uint8_t data_t[1];
    data_t[0] = _data | lcd->BacklightVal;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	79da      	ldrb	r2, [r3, #7]
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->Address, data_t, 1, 1000);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f107 020c 	add.w	r2, r7, #12
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	f003 fb80 	bl	80048e8 <HAL_I2C_Master_Transmit>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LiquidCrystal_I2C_PulseEnable>:

void LiquidCrystal_I2C_PulseEnable(LiquidCrystal_I2C_HandleTypeDef *lcd, uint8_t _data) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data | En);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffd5 	bl	80011b6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f001 f9f3 	bl	80025f8 <HAL_Delay>
    LiquidCrystal_I2C_ExpanderWrite(lcd, _data & ~En);
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffca 	bl	80011b6 <LiquidCrystal_I2C_ExpanderWrite>
    HAL_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f001 f9e8 	bl	80025f8 <HAL_Delay>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <bno055_writeData>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	733b      	strb	r3, [r7, #12]
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2302      	movs	r3, #2
 8001254:	2150      	movs	r1, #80	@ 0x50
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <bno055_writeData+0x44>)
 8001258:	f003 fb46 	bl	80048e8 <HAL_I2C_Master_Transmit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <bno055_writeData+0x3a>
        Error_Handler("BNO055 write failed", 1);
 8001262:	2101      	movs	r1, #1
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <bno055_writeData+0x48>)
 8001266:	f000 fe81 	bl	8001f6c <Error_Handler>
    }
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001fc 	.word	0x200001fc
 8001278:	08009500 	.word	0x08009500

0800127c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&i2c, BNO055_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800128c:	1dfa      	adds	r2, r7, #7
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	2150      	movs	r1, #80	@ 0x50
 8001298:	480f      	ldr	r0, [pc, #60]	@ (80012d8 <bno055_readData+0x5c>)
 800129a:	f003 fb25 	bl	80048e8 <HAL_I2C_Master_Transmit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <bno055_readData+0x30>
        Error_Handler("BNO055 read address failed", 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <bno055_readData+0x60>)
 80012a8:	f000 fe60 	bl	8001f6c <Error_Handler>
    }
    if (HAL_I2C_Master_Receive(&i2c, BNO055_I2C_ADDR << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	2150      	movs	r1, #80	@ 0x50
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <bno055_readData+0x5c>)
 80012bc:	f003 fc12 	bl	8004ae4 <HAL_I2C_Master_Receive>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <bno055_readData+0x52>
        Error_Handler("BNO055 read data failed", 1);
 80012c6:	2101      	movs	r1, #1
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <bno055_readData+0x64>)
 80012ca:	f000 fe4f 	bl	8001f6c <Error_Handler>
    }
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001fc 	.word	0x200001fc
 80012dc:	08009514 	.word	0x08009514
 80012e0:	08009530 	.word	0x08009530

080012e4 <bno055_delay>:

void bno055_delay(int time) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f982 	bl	80025f8 <HAL_Delay>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4619      	mov	r1, r3
 800130a:	2007      	movs	r0, #7
 800130c:	f7ff ff90 	bl	8001230 <bno055_writeData>
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4619      	mov	r1, r3
 8001326:	203d      	movs	r0, #61	@ 0x3d
 8001328:	f7ff ff82 	bl	8001230 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001332:	2013      	movs	r0, #19
 8001334:	f7ff ffd6 	bl	80012e4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001338:	e002      	b.n	8001340 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800133a:	2007      	movs	r0, #7
 800133c:	f7ff ffd2 	bl	80012e4 <bno055_delay>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff ffe3 	bl	8001318 <bno055_setOperationMode>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800135a:	200c      	movs	r0, #12
 800135c:	f7ff ffdc 	bl	8001318 <bno055_setOperationMode>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001368:	2120      	movs	r1, #32
 800136a:	203f      	movs	r0, #63	@ 0x3f
 800136c:	f7ff ff60 	bl	8001230 <bno055_writeData>
  bno055_delay(700);
 8001370:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001374:	f7ff ffb6 	bl	80012e4 <bno055_delay>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <bno055_getTemp>:

int8_t bno055_getTemp() {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ffba 	bl	80012fc <bno055_setPage>
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	2034      	movs	r0, #52	@ 0x34
 8001390:	f7ff ff74 	bl	800127c <bno055_readData>
  return t;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	b25b      	sxtb	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <bno055_setup>:

void bno055_setup() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  bno055_reset();
 80013a6:	f7ff ffdd 	bl	8001364 <bno055_reset>

  uint8_t id = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff61 	bl	800127c <bno055_readData>
  if (id != BNO055_ID) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80013be:	d004      	beq.n	80013ca <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4809      	ldr	r0, [pc, #36]	@ (80013ec <bno055_setup+0x4c>)
 80013c6:	f005 ffef 	bl	80073a8 <iprintf>
  }
  bno055_setPage(0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff96 	bl	80012fc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	203f      	movs	r0, #63	@ 0x3f
 80013d4:	f7ff ff2c 	bl	8001230 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80013d8:	f7ff ffb6 	bl	8001348 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80013dc:	200a      	movs	r0, #10
 80013de:	f7ff ff81 	bl	80012e4 <bno055_delay>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08009548 	.word	0x08009548

080013f0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80013f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013f4:	b09e      	sub	sp, #120	@ 0x78
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff7c 	bl	80012fc <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001408:	2b20      	cmp	r3, #32
 800140a:	d108      	bne.n	800141e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800140c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001414:	2208      	movs	r2, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff30 	bl	800127c <bno055_readData>
 800141c:	e007      	b.n	800142e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800141e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001426:	2206      	movs	r2, #6
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff27 	bl	800127c <bno055_readData>

  double scale = 1;
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b8b      	ldr	r3, [pc, #556]	@ (8001660 <bno055_getVector+0x270>)
 8001434:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143c:	2b0e      	cmp	r3, #14
 800143e:	d109      	bne.n	8001454 <bno055_getVector+0x64>
    scale = magScale;
 8001440:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <bno055_getVector+0x274>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f85d 	bl	8000504 <__aeabi_ui2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001452:	e03e      	b.n	80014d2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001458:	2b08      	cmp	r3, #8
 800145a:	d007      	beq.n	800146c <bno055_getVector+0x7c>
 800145c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001460:	2b28      	cmp	r3, #40	@ 0x28
 8001462:	d003      	beq.n	800146c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001468:	2b2e      	cmp	r3, #46	@ 0x2e
 800146a:	d109      	bne.n	8001480 <bno055_getVector+0x90>
    scale = accelScale;
 800146c:	4b7e      	ldr	r3, [pc, #504]	@ (8001668 <bno055_getVector+0x278>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f847 	bl	8000504 <__aeabi_ui2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800147e:	e028      	b.n	80014d2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001484:	2b14      	cmp	r3, #20
 8001486:	d109      	bne.n	800149c <bno055_getVector+0xac>
    scale = angularRateScale;
 8001488:	4b78      	ldr	r3, [pc, #480]	@ (800166c <bno055_getVector+0x27c>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f839 	bl	8000504 <__aeabi_ui2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800149a:	e01a      	b.n	80014d2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 800149c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014a0:	2b1a      	cmp	r3, #26
 80014a2:	d109      	bne.n	80014b8 <bno055_getVector+0xc8>
    scale = eulerScale;
 80014a4:	4b72      	ldr	r3, [pc, #456]	@ (8001670 <bno055_getVector+0x280>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f82b 	bl	8000504 <__aeabi_ui2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80014b6:	e00c      	b.n	80014d2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80014b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d108      	bne.n	80014d2 <bno055_getVector+0xe2>
    scale = quaScale;
 80014c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <bno055_getVector+0x284>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f81d 	bl	8000504 <__aeabi_ui2d>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d6:	2220      	movs	r2, #32
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 ffed 	bl	80074ba <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80014e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d150      	bne.n	800158a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014e8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f812 	bl	8000524 <__aeabi_i2d>
 8001500:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001510:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21b      	sxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fffe 	bl	8000524 <__aeabi_i2d>
 8001528:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800152c:	f7ff f98e 	bl	800084c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001538:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffea 	bl	8000524 <__aeabi_i2d>
 8001550:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001554:	f7ff f97a 	bl	800084c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001560:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001588:	e03b      	b.n	8001602 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800158a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21b      	sxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffc1 	bl	8000524 <__aeabi_i2d>
 80015a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015a6:	f7ff f951 	bl	800084c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80015b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015ce:	f7ff f93d 	bl	800084c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80015da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff99 	bl	8000524 <__aeabi_i2d>
 80015f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015f6:	f7ff f929 	bl	800084c <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001602:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001606:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001616:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800161a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800161e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001622:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001626:	ec49 8b14 	vmov	d4, r8, r9
 800162a:	ec45 4b15 	vmov	d5, r4, r5
 800162e:	ec41 0b16 	vmov	d6, r0, r1
 8001632:	ec43 2b17 	vmov	d7, r2, r3
}
 8001636:	eeb0 0a44 	vmov.f32	s0, s8
 800163a:	eef0 0a64 	vmov.f32	s1, s9
 800163e:	eeb0 1a45 	vmov.f32	s2, s10
 8001642:	eef0 1a65 	vmov.f32	s3, s11
 8001646:	eeb0 2a46 	vmov.f32	s4, s12
 800164a:	eef0 2a66 	vmov.f32	s5, s13
 800164e:	eeb0 3a47 	vmov.f32	s6, s14
 8001652:	eef0 3a67 	vmov.f32	s7, s15
 8001656:	3778      	adds	r7, #120	@ 0x78
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800165e:	bf00      	nop
 8001660:	3ff00000 	.word	0x3ff00000
 8001664:	20000006 	.word	0x20000006
 8001668:	20000000 	.word	0x20000000
 800166c:	20000002 	.word	0x20000002
 8001670:	20000004 	.word	0x20000004
 8001674:	20000008 	.word	0x20000008

08001678 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b090      	sub	sp, #64	@ 0x40
 800167e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001680:	2008      	movs	r0, #8
 8001682:	f7ff feb5 	bl	80013f0 <bno055_getVector>
 8001686:	eeb0 4a40 	vmov.f32	s8, s0
 800168a:	eef0 4a60 	vmov.f32	s9, s1
 800168e:	eeb0 5a41 	vmov.f32	s10, s2
 8001692:	eef0 5a61 	vmov.f32	s11, s3
 8001696:	eeb0 6a42 	vmov.f32	s12, s4
 800169a:	eef0 6a62 	vmov.f32	s13, s5
 800169e:	eeb0 7a43 	vmov.f32	s14, s6
 80016a2:	eef0 7a63 	vmov.f32	s15, s7
 80016a6:	ed87 4b08 	vstr	d4, [r7, #32]
 80016aa:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80016ae:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80016b2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80016b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016ba:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80016be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016c6:	ec49 8b14 	vmov	d4, r8, r9
 80016ca:	ec45 4b15 	vmov	d5, r4, r5
 80016ce:	ec41 0b16 	vmov	d6, r0, r1
 80016d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d6:	eeb0 0a44 	vmov.f32	s0, s8
 80016da:	eef0 0a64 	vmov.f32	s1, s9
 80016de:	eeb0 1a45 	vmov.f32	s2, s10
 80016e2:	eef0 1a65 	vmov.f32	s3, s11
 80016e6:	eeb0 2a46 	vmov.f32	s4, s12
 80016ea:	eef0 2a66 	vmov.f32	s5, s13
 80016ee:	eeb0 3a47 	vmov.f32	s6, s14
 80016f2:	eef0 3a67 	vmov.f32	s7, s15
 80016f6:	3740      	adds	r7, #64	@ 0x40
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016fe <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 80016fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001702:	b090      	sub	sp, #64	@ 0x40
 8001704:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001706:	200e      	movs	r0, #14
 8001708:	f7ff fe72 	bl	80013f0 <bno055_getVector>
 800170c:	eeb0 4a40 	vmov.f32	s8, s0
 8001710:	eef0 4a60 	vmov.f32	s9, s1
 8001714:	eeb0 5a41 	vmov.f32	s10, s2
 8001718:	eef0 5a61 	vmov.f32	s11, s3
 800171c:	eeb0 6a42 	vmov.f32	s12, s4
 8001720:	eef0 6a62 	vmov.f32	s13, s5
 8001724:	eeb0 7a43 	vmov.f32	s14, s6
 8001728:	eef0 7a63 	vmov.f32	s15, s7
 800172c:	ed87 4b08 	vstr	d4, [r7, #32]
 8001730:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001734:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001738:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800173c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001740:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001744:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800174c:	ec49 8b14 	vmov	d4, r8, r9
 8001750:	ec45 4b15 	vmov	d5, r4, r5
 8001754:	ec41 0b16 	vmov	d6, r0, r1
 8001758:	ec43 2b17 	vmov	d7, r2, r3
}
 800175c:	eeb0 0a44 	vmov.f32	s0, s8
 8001760:	eef0 0a64 	vmov.f32	s1, s9
 8001764:	eeb0 1a45 	vmov.f32	s2, s10
 8001768:	eef0 1a65 	vmov.f32	s3, s11
 800176c:	eeb0 2a46 	vmov.f32	s4, s12
 8001770:	eef0 2a66 	vmov.f32	s5, s13
 8001774:	eeb0 3a47 	vmov.f32	s6, s14
 8001778:	eef0 3a67 	vmov.f32	s7, s15
 800177c:	3740      	adds	r7, #64	@ 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001784 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001788:	b090      	sub	sp, #64	@ 0x40
 800178a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800178c:	2014      	movs	r0, #20
 800178e:	f7ff fe2f 	bl	80013f0 <bno055_getVector>
 8001792:	eeb0 4a40 	vmov.f32	s8, s0
 8001796:	eef0 4a60 	vmov.f32	s9, s1
 800179a:	eeb0 5a41 	vmov.f32	s10, s2
 800179e:	eef0 5a61 	vmov.f32	s11, s3
 80017a2:	eeb0 6a42 	vmov.f32	s12, s4
 80017a6:	eef0 6a62 	vmov.f32	s13, s5
 80017aa:	eeb0 7a43 	vmov.f32	s14, s6
 80017ae:	eef0 7a63 	vmov.f32	s15, s7
 80017b2:	ed87 4b08 	vstr	d4, [r7, #32]
 80017b6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80017ba:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80017be:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80017c2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017c6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80017ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017d2:	ec49 8b14 	vmov	d4, r8, r9
 80017d6:	ec45 4b15 	vmov	d5, r4, r5
 80017da:	ec41 0b16 	vmov	d6, r0, r1
 80017de:	ec43 2b17 	vmov	d7, r2, r3
}
 80017e2:	eeb0 0a44 	vmov.f32	s0, s8
 80017e6:	eef0 0a64 	vmov.f32	s1, s9
 80017ea:	eeb0 1a45 	vmov.f32	s2, s10
 80017ee:	eef0 1a65 	vmov.f32	s3, s11
 80017f2:	eeb0 2a46 	vmov.f32	s4, s12
 80017f6:	eef0 2a66 	vmov.f32	s5, s13
 80017fa:	eeb0 3a47 	vmov.f32	s6, s14
 80017fe:	eef0 3a67 	vmov.f32	s7, s15
 8001802:	3740      	adds	r7, #64	@ 0x40
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800180a <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 800180a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180e:	b090      	sub	sp, #64	@ 0x40
 8001810:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001812:	201a      	movs	r0, #26
 8001814:	f7ff fdec 	bl	80013f0 <bno055_getVector>
 8001818:	eeb0 4a40 	vmov.f32	s8, s0
 800181c:	eef0 4a60 	vmov.f32	s9, s1
 8001820:	eeb0 5a41 	vmov.f32	s10, s2
 8001824:	eef0 5a61 	vmov.f32	s11, s3
 8001828:	eeb0 6a42 	vmov.f32	s12, s4
 800182c:	eef0 6a62 	vmov.f32	s13, s5
 8001830:	eeb0 7a43 	vmov.f32	s14, s6
 8001834:	eef0 7a63 	vmov.f32	s15, s7
 8001838:	ed87 4b08 	vstr	d4, [r7, #32]
 800183c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001840:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001844:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800184c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001850:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001858:	ec49 8b14 	vmov	d4, r8, r9
 800185c:	ec45 4b15 	vmov	d5, r4, r5
 8001860:	ec41 0b16 	vmov	d6, r0, r1
 8001864:	ec43 2b17 	vmov	d7, r2, r3
}
 8001868:	eeb0 0a44 	vmov.f32	s0, s8
 800186c:	eef0 0a64 	vmov.f32	s1, s9
 8001870:	eeb0 1a45 	vmov.f32	s2, s10
 8001874:	eef0 1a65 	vmov.f32	s3, s11
 8001878:	eeb0 2a46 	vmov.f32	s4, s12
 800187c:	eef0 2a66 	vmov.f32	s5, s13
 8001880:	eeb0 3a47 	vmov.f32	s6, s14
 8001884:	eef0 3a67 	vmov.f32	s7, s15
 8001888:	3740      	adds	r7, #64	@ 0x40
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001890 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001894:	b090      	sub	sp, #64	@ 0x40
 8001896:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001898:	2028      	movs	r0, #40	@ 0x28
 800189a:	f7ff fda9 	bl	80013f0 <bno055_getVector>
 800189e:	eeb0 4a40 	vmov.f32	s8, s0
 80018a2:	eef0 4a60 	vmov.f32	s9, s1
 80018a6:	eeb0 5a41 	vmov.f32	s10, s2
 80018aa:	eef0 5a61 	vmov.f32	s11, s3
 80018ae:	eeb0 6a42 	vmov.f32	s12, s4
 80018b2:	eef0 6a62 	vmov.f32	s13, s5
 80018b6:	eeb0 7a43 	vmov.f32	s14, s6
 80018ba:	eef0 7a63 	vmov.f32	s15, s7
 80018be:	ed87 4b08 	vstr	d4, [r7, #32]
 80018c2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80018c6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80018ca:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80018ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80018d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018de:	ec49 8b14 	vmov	d4, r8, r9
 80018e2:	ec45 4b15 	vmov	d5, r4, r5
 80018e6:	ec41 0b16 	vmov	d6, r0, r1
 80018ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80018ee:	eeb0 0a44 	vmov.f32	s0, s8
 80018f2:	eef0 0a64 	vmov.f32	s1, s9
 80018f6:	eeb0 1a45 	vmov.f32	s2, s10
 80018fa:	eef0 1a65 	vmov.f32	s3, s11
 80018fe:	eeb0 2a46 	vmov.f32	s4, s12
 8001902:	eef0 2a66 	vmov.f32	s5, s13
 8001906:	eeb0 3a47 	vmov.f32	s6, s14
 800190a:	eef0 3a67 	vmov.f32	s7, s15
 800190e:	3740      	adds	r7, #64	@ 0x40
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001916 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 8001916:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800191a:	b090      	sub	sp, #64	@ 0x40
 800191c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 800191e:	202e      	movs	r0, #46	@ 0x2e
 8001920:	f7ff fd66 	bl	80013f0 <bno055_getVector>
 8001924:	eeb0 4a40 	vmov.f32	s8, s0
 8001928:	eef0 4a60 	vmov.f32	s9, s1
 800192c:	eeb0 5a41 	vmov.f32	s10, s2
 8001930:	eef0 5a61 	vmov.f32	s11, s3
 8001934:	eeb0 6a42 	vmov.f32	s12, s4
 8001938:	eef0 6a62 	vmov.f32	s13, s5
 800193c:	eeb0 7a43 	vmov.f32	s14, s6
 8001940:	eef0 7a63 	vmov.f32	s15, s7
 8001944:	ed87 4b08 	vstr	d4, [r7, #32]
 8001948:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800194c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001950:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001958:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800195c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001964:	ec49 8b14 	vmov	d4, r8, r9
 8001968:	ec45 4b15 	vmov	d5, r4, r5
 800196c:	ec41 0b16 	vmov	d6, r0, r1
 8001970:	ec43 2b17 	vmov	d7, r2, r3
}
 8001974:	eeb0 0a44 	vmov.f32	s0, s8
 8001978:	eef0 0a64 	vmov.f32	s1, s9
 800197c:	eeb0 1a45 	vmov.f32	s2, s10
 8001980:	eef0 1a65 	vmov.f32	s3, s11
 8001984:	eeb0 2a46 	vmov.f32	s4, s12
 8001988:	eef0 2a66 	vmov.f32	s5, s13
 800198c:	eeb0 3a47 	vmov.f32	s6, s14
 8001990:	eef0 3a67 	vmov.f32	s7, s15
 8001994:	3740      	adds	r7, #64	@ 0x40
 8001996:	46bd      	mov	sp, r7
 8001998:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800199c <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorQuaternion() {
 800199c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019a0:	b090      	sub	sp, #64	@ 0x40
 80019a2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80019a4:	2020      	movs	r0, #32
 80019a6:	f7ff fd23 	bl	80013f0 <bno055_getVector>
 80019aa:	eeb0 4a40 	vmov.f32	s8, s0
 80019ae:	eef0 4a60 	vmov.f32	s9, s1
 80019b2:	eeb0 5a41 	vmov.f32	s10, s2
 80019b6:	eef0 5a61 	vmov.f32	s11, s3
 80019ba:	eeb0 6a42 	vmov.f32	s12, s4
 80019be:	eef0 6a62 	vmov.f32	s13, s5
 80019c2:	eeb0 7a43 	vmov.f32	s14, s6
 80019c6:	eef0 7a63 	vmov.f32	s15, s7
 80019ca:	ed87 4b08 	vstr	d4, [r7, #32]
 80019ce:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80019d2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80019d6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80019da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80019e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019ea:	ec49 8b14 	vmov	d4, r8, r9
 80019ee:	ec45 4b15 	vmov	d5, r4, r5
 80019f2:	ec41 0b16 	vmov	d6, r0, r1
 80019f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019fa:	eeb0 0a44 	vmov.f32	s0, s8
 80019fe:	eef0 0a64 	vmov.f32	s1, s9
 8001a02:	eeb0 1a45 	vmov.f32	s2, s10
 8001a06:	eef0 1a65 	vmov.f32	s3, s11
 8001a0a:	eeb0 2a46 	vmov.f32	s4, s12
 8001a0e:	eef0 2a66 	vmov.f32	s5, s13
 8001a12:	eeb0 3a47 	vmov.f32	s6, s14
 8001a16:	eef0 3a67 	vmov.f32	s7, s15
 8001a1a:	3740      	adds	r7, #64	@ 0x40
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001a24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a28:	f3bf 8f4f 	dsb	sy
}
 8001a2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <__NVIC_SystemReset+0x24>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a36:	4904      	ldr	r1, [pc, #16]	@ (8001a48 <__NVIC_SystemReset+0x24>)
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__NVIC_SystemReset+0x28>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a3e:	f3bf 8f4f 	dsb	sy
}
 8001a42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <__NVIC_SystemReset+0x20>
 8001a48:	e000ed00 	.word	0xe000ed00
 8001a4c:	05fa0004 	.word	0x05fa0004

08001a50 <main>:
static void MX_I2C1_Init(void);

I2C_HandleTypeDef i2c;
LiquidCrystal_I2C_HandleTypeDef lcd, lcd2;

int main(void) {
 8001a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a54:	b0c6      	sub	sp, #280	@ 0x118
 8001a56:	af02      	add	r7, sp, #8
    HAL_Init();
 8001a58:	f000 fd5c 	bl	8002514 <HAL_Init>
    SystemClock_Config();
 8001a5c:	f000 fb16 	bl	800208c <SystemClock_Config>
    MX_GPIO_Init();
 8001a60:	f000 fae4 	bl	800202c <MX_GPIO_Init>
    MX_I2C1_Init();
 8001a64:	f000 fab0 	bl	8001fc8 <MX_I2C1_Init>

    // Initialize LCD1 at 0x27
    LiquidCrystal_I2C_Init(&lcd, &i2c, 0x27, 20, 4);
 8001a68:	2304      	movs	r3, #4
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2314      	movs	r3, #20
 8001a6e:	2227      	movs	r2, #39	@ 0x27
 8001a70:	49d9      	ldr	r1, [pc, #868]	@ (8001dd8 <main+0x388>)
 8001a72:	48da      	ldr	r0, [pc, #872]	@ (8001ddc <main+0x38c>)
 8001a74:	f7ff fa60 	bl	8000f38 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd, 20, 4, LCD_5x8DOTS);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	2114      	movs	r1, #20
 8001a7e:	48d7      	ldr	r0, [pc, #860]	@ (8001ddc <main+0x38c>)
 8001a80:	f7ff fa89 	bl	8000f96 <LiquidCrystal_I2C_Begin>

    // Initialize LCD2 at 0x20
    LiquidCrystal_I2C_Init(&lcd2, &i2c, 0x20, 20, 4);
 8001a84:	2304      	movs	r3, #4
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2314      	movs	r3, #20
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	49d2      	ldr	r1, [pc, #840]	@ (8001dd8 <main+0x388>)
 8001a8e:	48d4      	ldr	r0, [pc, #848]	@ (8001de0 <main+0x390>)
 8001a90:	f7ff fa52 	bl	8000f38 <LiquidCrystal_I2C_Init>
    LiquidCrystal_I2C_Begin(&lcd2, 20, 4, LCD_5x8DOTS);
 8001a94:	2300      	movs	r3, #0
 8001a96:	2204      	movs	r2, #4
 8001a98:	2114      	movs	r1, #20
 8001a9a:	48d1      	ldr	r0, [pc, #836]	@ (8001de0 <main+0x390>)
 8001a9c:	f7ff fa7b 	bl	8000f96 <LiquidCrystal_I2C_Begin>

    // Initialize BNO055
    bno055_setup();
 8001aa0:	f7ff fc7e 	bl	80013a0 <bno055_setup>
    bno055_setOperationModeNDOF();
 8001aa4:	f7ff fc57 	bl	8001356 <bno055_setOperationModeNDOF>

    char buffer[20];
    bno055_vector_t accel, mag, gyro, euler, quaternion, linear_accel, gravity;
    int8_t temp_raw;
    float temperature_c, temperature_f;
    float prev_temperature_f = 0.0;
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    float prev_speed = 0.0;
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    float prev_linear_accel_x = 0.0;
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    while (1) {
        // Get Sensor Data
        accel = bno055_getVectorAccelerometer();
 8001ac0:	f7ff fdda 	bl	8001678 <bno055_getVectorAccelerometer>
 8001ac4:	eeb0 4a40 	vmov.f32	s8, s0
 8001ac8:	eef0 4a60 	vmov.f32	s9, s1
 8001acc:	eeb0 5a41 	vmov.f32	s10, s2
 8001ad0:	eef0 5a61 	vmov.f32	s11, s3
 8001ad4:	eeb0 6a42 	vmov.f32	s12, s4
 8001ad8:	eef0 6a62 	vmov.f32	s13, s5
 8001adc:	eeb0 7a43 	vmov.f32	s14, s6
 8001ae0:	eef0 7a63 	vmov.f32	s15, s7
 8001ae4:	ed87 4b30 	vstr	d4, [r7, #192]	@ 0xc0
 8001ae8:	ed87 5b32 	vstr	d5, [r7, #200]	@ 0xc8
 8001aec:	ed87 6b34 	vstr	d6, [r7, #208]	@ 0xd0
 8001af0:	ed87 7b36 	vstr	d7, [r7, #216]	@ 0xd8
        mag = bno055_getVectorMagnetometer();
 8001af4:	f7ff fe03 	bl	80016fe <bno055_getVectorMagnetometer>
 8001af8:	eeb0 4a40 	vmov.f32	s8, s0
 8001afc:	eef0 4a60 	vmov.f32	s9, s1
 8001b00:	eeb0 5a41 	vmov.f32	s10, s2
 8001b04:	eef0 5a61 	vmov.f32	s11, s3
 8001b08:	eeb0 6a42 	vmov.f32	s12, s4
 8001b0c:	eef0 6a62 	vmov.f32	s13, s5
 8001b10:	eeb0 7a43 	vmov.f32	s14, s6
 8001b14:	eef0 7a63 	vmov.f32	s15, s7
 8001b18:	ed87 4b28 	vstr	d4, [r7, #160]	@ 0xa0
 8001b1c:	ed87 5b2a 	vstr	d5, [r7, #168]	@ 0xa8
 8001b20:	ed87 6b2c 	vstr	d6, [r7, #176]	@ 0xb0
 8001b24:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8
        gyro = bno055_getVectorGyroscope();
 8001b28:	f7ff fe2c 	bl	8001784 <bno055_getVectorGyroscope>
 8001b2c:	eeb0 4a40 	vmov.f32	s8, s0
 8001b30:	eef0 4a60 	vmov.f32	s9, s1
 8001b34:	eeb0 5a41 	vmov.f32	s10, s2
 8001b38:	eef0 5a61 	vmov.f32	s11, s3
 8001b3c:	eeb0 6a42 	vmov.f32	s12, s4
 8001b40:	eef0 6a62 	vmov.f32	s13, s5
 8001b44:	eeb0 7a43 	vmov.f32	s14, s6
 8001b48:	eef0 7a63 	vmov.f32	s15, s7
 8001b4c:	ed87 4b20 	vstr	d4, [r7, #128]	@ 0x80
 8001b50:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8001b54:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8001b58:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98
        euler = bno055_getVectorEuler();
 8001b5c:	f7ff fe55 	bl	800180a <bno055_getVectorEuler>
 8001b60:	eeb0 4a40 	vmov.f32	s8, s0
 8001b64:	eef0 4a60 	vmov.f32	s9, s1
 8001b68:	eeb0 5a41 	vmov.f32	s10, s2
 8001b6c:	eef0 5a61 	vmov.f32	s11, s3
 8001b70:	eeb0 6a42 	vmov.f32	s12, s4
 8001b74:	eef0 6a62 	vmov.f32	s13, s5
 8001b78:	eeb0 7a43 	vmov.f32	s14, s6
 8001b7c:	eef0 7a63 	vmov.f32	s15, s7
 8001b80:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
 8001b84:	ed87 5b1a 	vstr	d5, [r7, #104]	@ 0x68
 8001b88:	ed87 6b1c 	vstr	d6, [r7, #112]	@ 0x70
 8001b8c:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
        quaternion = bno055_getVectorQuaternion();
 8001b90:	f7ff ff04 	bl	800199c <bno055_getVectorQuaternion>
 8001b94:	eeb0 4a40 	vmov.f32	s8, s0
 8001b98:	eef0 4a60 	vmov.f32	s9, s1
 8001b9c:	eeb0 5a41 	vmov.f32	s10, s2
 8001ba0:	eef0 5a61 	vmov.f32	s11, s3
 8001ba4:	eeb0 6a42 	vmov.f32	s12, s4
 8001ba8:	eef0 6a62 	vmov.f32	s13, s5
 8001bac:	eeb0 7a43 	vmov.f32	s14, s6
 8001bb0:	eef0 7a63 	vmov.f32	s15, s7
 8001bb4:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8001bb8:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8001bbc:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8001bc0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
        linear_accel = bno055_getVectorLinearAccel();
 8001bc4:	f7ff fe64 	bl	8001890 <bno055_getVectorLinearAccel>
 8001bc8:	eeb0 4a40 	vmov.f32	s8, s0
 8001bcc:	eef0 4a60 	vmov.f32	s9, s1
 8001bd0:	eeb0 5a41 	vmov.f32	s10, s2
 8001bd4:	eef0 5a61 	vmov.f32	s11, s3
 8001bd8:	eeb0 6a42 	vmov.f32	s12, s4
 8001bdc:	eef0 6a62 	vmov.f32	s13, s5
 8001be0:	eeb0 7a43 	vmov.f32	s14, s6
 8001be4:	eef0 7a63 	vmov.f32	s15, s7
 8001be8:	ed87 4b08 	vstr	d4, [r7, #32]
 8001bec:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001bf0:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001bf4:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        gravity = bno055_getVectorGravity();
 8001bf8:	f7ff fe8d 	bl	8001916 <bno055_getVectorGravity>
 8001bfc:	eeb0 4a40 	vmov.f32	s8, s0
 8001c00:	eef0 4a60 	vmov.f32	s9, s1
 8001c04:	eeb0 5a41 	vmov.f32	s10, s2
 8001c08:	eef0 5a61 	vmov.f32	s11, s3
 8001c0c:	eeb0 6a42 	vmov.f32	s12, s4
 8001c10:	eef0 6a62 	vmov.f32	s13, s5
 8001c14:	eeb0 7a43 	vmov.f32	s14, s6
 8001c18:	eef0 7a63 	vmov.f32	s15, s7
 8001c1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c24:	ed83 4b00 	vstr	d4, [r3]
 8001c28:	ed83 5b02 	vstr	d5, [r3, #8]
 8001c2c:	ed83 6b04 	vstr	d6, [r3, #16]
 8001c30:	ed83 7b06 	vstr	d7, [r3, #24]
        temp_raw = bno055_getTemp();
 8001c34:	f7ff fba2 	bl	800137c <bno055_getTemp>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

        // Convert to fahrenheit
        temperature_c = (float)temp_raw;
 8001c3e:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
        temperature_f = (temperature_c * 9.0 / 5.0) + 32.0;
 8001c4e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4b62      	ldr	r3, [pc, #392]	@ (8001de4 <main+0x394>)
 8001c5c:	f7fe fccc 	bl	80005f8 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001de8 <main+0x398>)
 8001c6e:	f7fe fded 	bl	800084c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <main+0x39c>)
 8001c80:	f7fe fb04 	bl	800028c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff8c 	bl	8000ba8 <__aeabi_d2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

        // Non-negative speed
        float speed = fabs(linear_accel.x);
 8001c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff83 	bl	8000ba8 <__aeabi_d2f>
 8001ca2:	ee07 0a90 	vmov	s15, r0
 8001ca6:	eef0 7ae7 	vabs.f32	s15, s15
 8001caa:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100

        // Current Activity
        if (fabs(linear_accel.x - prev_linear_accel_x) < ACCEL_CHANGE_THRESHOLD && fabs(gravity.x - prev_linear_accel_x) < ACCEL_CHANGE_THRESHOLD) {
 8001cae:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8001cb2:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001cb6:	f7fe fc47 	bl	8000548 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	f7fe fae1 	bl	8000288 <__aeabi_dsub>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4614      	mov	r4, r2
 8001ccc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001cd0:	a33f      	add	r3, pc, #252	@ (adr r3, 8001dd0 <main+0x380>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe feff 	bl	8000adc <__aeabi_dcmplt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d026      	beq.n	8001d32 <main+0x2e2>
 8001ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cec:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8001cf0:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001cf4:	f7fe fc28 	bl	8000548 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	4659      	mov	r1, fp
 8001d00:	f7fe fac2 	bl	8000288 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4690      	mov	r8, r2
 8001d0a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001d0e:	a330      	add	r3, pc, #192	@ (adr r3, 8001dd0 <main+0x380>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	4640      	mov	r0, r8
 8001d16:	4649      	mov	r1, r9
 8001d18:	f7fe fee0 	bl	8000adc <__aeabi_dcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <main+0x2e2>
            snprintf(buffer, sizeof(buffer), "Idle");
 8001d22:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d26:	4a32      	ldr	r2, [pc, #200]	@ (8001df0 <main+0x3a0>)
 8001d28:	2114      	movs	r1, #20
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fb4e 	bl	80073cc <sniprintf>
 8001d30:	e06f      	b.n	8001e12 <main+0x3c2>
        } else if (linear_accel.x >= 0.2 && linear_accel.x < 1.0) {
 8001d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d36:	a326      	add	r3, pc, #152	@ (adr r3, 8001dd0 <main+0x380>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fee2 	bl	8000b04 <__aeabi_dcmpge>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d011      	beq.n	8001d6a <main+0x31a>
 8001d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <main+0x3a4>)
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <main+0x31a>
            snprintf(buffer, sizeof(buffer), "Walking");
 8001d5a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d5e:	4a26      	ldr	r2, [pc, #152]	@ (8001df8 <main+0x3a8>)
 8001d60:	2114      	movs	r1, #20
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fb32 	bl	80073cc <sniprintf>
 8001d68:	e053      	b.n	8001e12 <main+0x3c2>
        } else if (linear_accel.x >= 1.0 && linear_accel.x < 2.0) {
 8001d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <main+0x3a4>)
 8001d74:	f7fe fec6 	bl	8000b04 <__aeabi_dcmpge>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <main+0x354>
 8001d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d8a:	f7fe fea7 	bl	8000adc <__aeabi_dcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <main+0x354>
            snprintf(buffer, sizeof(buffer), "Running");
 8001d94:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d98:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <main+0x3ac>)
 8001d9a:	2114      	movs	r1, #20
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 fb15 	bl	80073cc <sniprintf>
 8001da2:	e036      	b.n	8001e12 <main+0x3c2>
        } else if (linear_accel.x >= 2.0) {
 8001da4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db0:	f7fe fea8 	bl	8000b04 <__aeabi_dcmpge>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d024      	beq.n	8001e04 <main+0x3b4>
            snprintf(buffer, sizeof(buffer), "Stairs");
 8001dba:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <main+0x3b0>)
 8001dc0:	2114      	movs	r1, #20
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 fb02 	bl	80073cc <sniprintf>
 8001dc8:	e023      	b.n	8001e12 <main+0x3c2>
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	3fc99999 	.word	0x3fc99999
 8001dd8:	200001fc 	.word	0x200001fc
 8001ddc:	20000250 	.word	0x20000250
 8001de0:	2000025c 	.word	0x2000025c
 8001de4:	40220000 	.word	0x40220000
 8001de8:	40140000 	.word	0x40140000
 8001dec:	40400000 	.word	0x40400000
 8001df0:	08009584 	.word	0x08009584
 8001df4:	3ff00000 	.word	0x3ff00000
 8001df8:	0800958c 	.word	0x0800958c
 8001dfc:	08009594 	.word	0x08009594
 8001e00:	0800959c 	.word	0x0800959c
        } else {
            snprintf(buffer, sizeof(buffer), "Getting up");
 8001e04:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001e08:	4a53      	ldr	r2, [pc, #332]	@ (8001f58 <main+0x508>)
 8001e0a:	2114      	movs	r1, #20
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 fadd 	bl	80073cc <sniprintf>
        }

        prev_linear_accel_x = linear_accel.x;
 8001e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fec5 	bl	8000ba8 <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

        // Display activity on LCD1
        LiquidCrystal_I2C_Clear(&lcd);
 8001e24:	484d      	ldr	r0, [pc, #308]	@ (8001f5c <main+0x50c>)
 8001e26:	f7ff f915 	bl	8001054 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	484b      	ldr	r0, [pc, #300]	@ (8001f5c <main+0x50c>)
 8001e30:	f7ff f938 	bl	80010a4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd, buffer);
 8001e34:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4848      	ldr	r0, [pc, #288]	@ (8001f5c <main+0x50c>)
 8001e3c:	f7ff f95c 	bl	80010f8 <LiquidCrystal_I2C_Print>

        // Update if speed has changed a lot or is very low
        if (fabs(speed - prev_speed) > SPEED_CHANGE_THRESHOLD || speed < SPEED_CHANGE_THRESHOLD) {
 8001e40:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001e44:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e50:	ee17 0a90 	vmov	r0, s15
 8001e54:	f7fe fb78 	bl	8000548 <__aeabi_f2d>
 8001e58:	a33b      	add	r3, pc, #236	@ (adr r3, 8001f48 <main+0x4f8>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <main+0x430>
 8001e68:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_f2d>
 8001e70:	a335      	add	r3, pc, #212	@ (adr r3, 8001f48 <main+0x4f8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fe31 	bl	8000adc <__aeabi_dcmplt>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02c      	beq.n	8001eda <main+0x48a>
            if (speed < SPEED_CHANGE_THRESHOLD) {
 8001e80:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	a32f      	add	r3, pc, #188	@ (adr r3, 8001f48 <main+0x4f8>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fe25 	bl	8000adc <__aeabi_dcmplt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <main+0x450>
                speed = 0.0;
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            }
            prev_speed = speed;
 8001ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ea4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	482c      	ldr	r0, [pc, #176]	@ (8001f60 <main+0x510>)
 8001eae:	f7ff f8f9 	bl	80010a4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Your Speed: %.1f", speed);
 8001eb2:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001eb6:	f7fe fb47 	bl	8000548 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001ec2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ec6:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <main+0x514>)
 8001ec8:	2114      	movs	r1, #20
 8001eca:	f005 fa7f 	bl	80073cc <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001ece:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4822      	ldr	r0, [pc, #136]	@ (8001f60 <main+0x510>)
 8001ed6:	f7ff f90f 	bl	80010f8 <LiquidCrystal_I2C_Print>
        }

        // Update temp if change is greater than threshold
        if (fabs(temperature_f - prev_temperature_f) > TEMP_CHANGE_THRESHOLD) {
 8001eda:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8001ede:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee6:	eef0 7ae7 	vabs.f32	s15, s15
 8001eea:	ee17 0a90 	vmov	r0, s15
 8001eee:	f7fe fb2b 	bl	8000548 <__aeabi_f2d>
 8001ef2:	a317      	add	r3, pc, #92	@ (adr r3, 8001f50 <main+0x500>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fe0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01c      	beq.n	8001f3c <main+0x4ec>
            prev_temperature_f = temperature_f;
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            LiquidCrystal_I2C_SetCursor(&lcd2, 0, 1);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4814      	ldr	r0, [pc, #80]	@ (8001f60 <main+0x510>)
 8001f10:	f7ff f8c8 	bl	80010a4 <LiquidCrystal_I2C_SetCursor>
            snprintf(buffer, sizeof(buffer), "Temperature: %.1f F", temperature_f);
 8001f14:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001f18:	f7fe fb16 	bl	8000548 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001f24:	e9cd 2300 	strd	r2, r3, [sp]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	@ (8001f68 <main+0x518>)
 8001f2a:	2114      	movs	r1, #20
 8001f2c:	f005 fa4e 	bl	80073cc <sniprintf>
            LiquidCrystal_I2C_Print(&lcd2, buffer);
 8001f30:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001f34:	4619      	mov	r1, r3
 8001f36:	480a      	ldr	r0, [pc, #40]	@ (8001f60 <main+0x510>)
 8001f38:	f7ff f8de 	bl	80010f8 <LiquidCrystal_I2C_Print>
        }
        HAL_Delay(600);
 8001f3c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001f40:	f000 fb5a 	bl	80025f8 <HAL_Delay>
    while (1) {
 8001f44:	e5bc      	b.n	8001ac0 <main+0x70>
 8001f46:	bf00      	nop
 8001f48:	47ae147b 	.word	0x47ae147b
 8001f4c:	3f847ae1 	.word	0x3f847ae1
 8001f50:	9999999a 	.word	0x9999999a
 8001f54:	3fc99999 	.word	0x3fc99999
 8001f58:	080095a4 	.word	0x080095a4
 8001f5c:	20000250 	.word	0x20000250
 8001f60:	2000025c 	.word	0x2000025c
 8001f64:	080095b0 	.word	0x080095b0
 8001f68:	080095c4 	.word	0x080095c4

08001f6c <Error_Handler>:
    }
}

void Error_Handler(char *errorMessage, int lcdNumber) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    if (lcdNumber == 1) {
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <Error_Handler+0x2a>
        LiquidCrystal_I2C_Clear(&lcd);
 8001f7c:	4810      	ldr	r0, [pc, #64]	@ (8001fc0 <Error_Handler+0x54>)
 8001f7e:	f7ff f869 	bl	8001054 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <Error_Handler+0x54>)
 8001f88:	f7ff f88c 	bl	80010a4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd, errorMessage);
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <Error_Handler+0x54>)
 8001f90:	f7ff f8b2 	bl	80010f8 <LiquidCrystal_I2C_Print>
 8001f94:	e00e      	b.n	8001fb4 <Error_Handler+0x48>
    } else if (lcdNumber == 2) {
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d10b      	bne.n	8001fb4 <Error_Handler+0x48>
        LiquidCrystal_I2C_Clear(&lcd2);
 8001f9c:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <Error_Handler+0x58>)
 8001f9e:	f7ff f859 	bl	8001054 <LiquidCrystal_I2C_Clear>
        LiquidCrystal_I2C_SetCursor(&lcd2, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <Error_Handler+0x58>)
 8001fa8:	f7ff f87c 	bl	80010a4 <LiquidCrystal_I2C_SetCursor>
        LiquidCrystal_I2C_Print(&lcd2, errorMessage);
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <Error_Handler+0x58>)
 8001fb0:	f7ff f8a2 	bl	80010f8 <LiquidCrystal_I2C_Print>
    }
    HAL_Delay(2000);
 8001fb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fb8:	f000 fb1e 	bl	80025f8 <HAL_Delay>
    NVIC_SystemReset();
 8001fbc:	f7ff fd32 	bl	8001a24 <__NVIC_SystemReset>
 8001fc0:	20000250 	.word	0x20000250
 8001fc4:	2000025c 	.word	0x2000025c

08001fc8 <MX_I2C1_Init>:
}

// I2C Configuration
static void MX_I2C1_Init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    i2c.Instance = I2C1;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fce:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <MX_I2C1_Init+0x58>)
 8001fd0:	601a      	str	r2, [r3, #0]
    i2c.Init.ClockSpeed = 100000;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fd4:	4a13      	ldr	r2, [pc, #76]	@ (8002024 <MX_I2C1_Init+0x5c>)
 8001fd6:	605a      	str	r2, [r3, #4]
    i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    i2c.Init.OwnAddress1 = 0;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fe6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fea:	611a      	str	r2, [r3, #16]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <MX_I2C1_Init+0x54>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2 = 0;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <MX_I2C1_Init+0x54>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <MX_I2C1_Init+0x54>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <MX_I2C1_Init+0x54>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&i2c) != HAL_OK) {
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_I2C1_Init+0x54>)
 8002006:	f002 fb2b 	bl	8004660 <HAL_I2C_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <MX_I2C1_Init+0x50>
        Error_Handler("I2C Initialization Failed", 1);
 8002010:	2101      	movs	r1, #1
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_I2C1_Init+0x60>)
 8002014:	f7ff ffaa 	bl	8001f6c <Error_Handler>
    }
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200001fc 	.word	0x200001fc
 8002020:	40005400 	.word	0x40005400
 8002024:	000186a0 	.word	0x000186a0
 8002028:	080095d8 	.word	0x080095d8

0800202c <MX_GPIO_Init>:

// SCL = PB6 and SDA = PB7 configurations
static void MX_GPIO_Init(void) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <MX_GPIO_Init+0x58>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_GPIO_Init+0x58>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <MX_GPIO_Init+0x58>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800205c:	23c0      	movs	r3, #192	@ 0xc0
 800205e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002060:	2312      	movs	r3, #18
 8002062:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002068:	2302      	movs	r3, #2
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206c:	2304      	movs	r3, #4
 800206e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4804      	ldr	r0, [pc, #16]	@ (8002088 <MX_GPIO_Init+0x5c>)
 8002076:	f000 fbc9 	bl	800280c <HAL_GPIO_Init>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400

0800208c <SystemClock_Config>:

// Sys Clock Configurations
void SystemClock_Config(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	@ 0x48
 8002090:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	2230      	movs	r2, #48	@ 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f005 fa0d 	bl	80074ba <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <SystemClock_Config+0xb4>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <SystemClock_Config+0xb4>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <SystemClock_Config+0xb4>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020d2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d4:	2302      	movs	r3, #2
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 80020de:	2308      	movs	r3, #8
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 80020e2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80020ec:	2307      	movs	r3, #7
 80020ee:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 faad 	bl	8005654 <HAL_RCC_OscConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <SystemClock_Config+0x7c>
        Error_Handler("RCC Oscillator Configuration Failed", 2);
 8002100:	2102      	movs	r1, #2
 8002102:	4810      	ldr	r0, [pc, #64]	@ (8002144 <SystemClock_Config+0xb8>)
 8002104:	f7ff ff32 	bl	8001f6c <Error_Handler>
    }
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002108:	230f      	movs	r3, #15
 800210a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800210c:	2302      	movs	r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002114:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002118:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800211a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800211e:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2105      	movs	r1, #5
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fd0d 	bl	8005b44 <HAL_RCC_ClockConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <SystemClock_Config+0xac>
        Error_Handler("RCC Clock Configuration Failed", 2);
 8002130:	2102      	movs	r1, #2
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <SystemClock_Config+0xbc>)
 8002134:	f7ff ff1a 	bl	8001f6c <Error_Handler>
    }
}
 8002138:	bf00      	nop
 800213a:	3748      	adds	r7, #72	@ 0x48
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	080095f4 	.word	0x080095f4
 8002148:	08009618 	.word	0x08009618

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_MspInit+0x4c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <HAL_MspInit+0x4c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_MspInit+0x4c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <HAL_MspInit+0x4c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800218a:	2007      	movs	r0, #7
 800218c:	f000 fb0a 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	@ 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <HAL_I2C_MspInit+0xa4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d13b      	bne.n	8002236 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021da:	2340      	movs	r3, #64	@ 0x40
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ea:	2304      	movs	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4814      	ldr	r0, [pc, #80]	@ (8002248 <HAL_I2C_MspInit+0xac>)
 80021f6:	f000 fb09 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fe:	2312      	movs	r3, #18
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220a:	2304      	movs	r3, #4
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <HAL_I2C_MspInit+0xac>)
 8002216:	f000 faf9 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 8002224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_I2C_MspInit+0xa8>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	@ 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40005400 	.word	0x40005400
 8002244:	40023800 	.word	0x40023800
 8002248:	40020400 	.word	0x40020400

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <NMI_Handler+0x4>

08002254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <MemManage_Handler+0x4>

08002264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <UsageFault_Handler+0x4>

08002274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a2:	f000 f989 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <OTG_FS_IRQHandler+0x10>)
 80022b2:	f000 fc47 	bl	8002b44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000270 	.word	0x20000270

080022c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <ITM_SendChar+0x48>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <ITM_SendChar+0x48>)
 80022d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <ITM_SendChar+0x4c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <ITM_SendChar+0x4c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80022e2:	bf00      	nop
 80022e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f8      	beq.n	80022e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80022f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	6013      	str	r3, [r2, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000edfc 	.word	0xe000edfc
 800230c:	e0000e00 	.word	0xe0000e00

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_kill>:

int _kill(int pid, int sig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232a:	f005 f929 	bl	8007580 <__errno>
 800232e:	4603      	mov	r3, r0
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
  return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002352:	bf00      	nop
 8002354:	e7fd      	b.n	8002352 <_exit+0x12>

08002356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e00a      	b.n	800237e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002368:	f3af 8000 	nop.w
 800236c:	4601      	mov	r1, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf0      	blt.n	8002368 <_read+0x12>
  }

  return len;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e009      	b.n	80023b6 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff88 	bl	80022c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbf1      	blt.n	80023a2 <_write+0x12>
  }
  return len;
 80023be:	687b      	ldr	r3, [r7, #4]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_close>:

int _close(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_isatty>:

int _isatty(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f005 f88e 	bl	8007580 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20020000 	.word	0x20020000
 8002490:	00000400 	.word	0x00000400
 8002494:	20000268 	.word	0x20000268
 8002498:	200007a0 	.word	0x200007a0

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024c4:	f7ff ffea 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480c      	ldr	r0, [pc, #48]	@ (80024fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ca:	490d      	ldr	r1, [pc, #52]	@ (8002500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e0:	4c0a      	ldr	r4, [pc, #40]	@ (800250c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ee:	f005 f84d 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff faad 	bl	8001a50 <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002504:	080099d0 	.word	0x080099d0
  ldr r2, =_sbss
 8002508:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800250c:	2000079c 	.word	0x2000079c

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f931 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f808 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fe00 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_InitTick+0x54>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_InitTick+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f93b 	bl	80027f2 <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 f911 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	@ (80025b4 <HAL_InitTick+0x5c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	20000014 	.word	0x20000014
 80025b4:	20000010 	.word	0x20000010

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000014 	.word	0x20000014
 80025dc:	2000026c 	.word	0x2000026c

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000026c 	.word	0x2000026c

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000014 	.word	0x20000014

08002640 <__NVIC_SetPriorityGrouping>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_SetPriority>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff47 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff5c 	bl	8002688 <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff8e 	bl	80026f8 <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5d 	bl	80026a4 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffb0 	bl	8002760 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e16b      	b.n	8002b00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	f040 815a 	bne.w	8002afa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d005      	beq.n	800285e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	2b02      	cmp	r3, #2
 800285c:	d130      	bne.n	80028c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 0201 	and.w	r2, r3, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d017      	beq.n	80028fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d123      	bne.n	8002950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80b4 	beq.w	8002afa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b60      	ldr	r3, [pc, #384]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_GPIO_Init+0x310>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_GPIO_Init+0x314>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02b      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a51      	ldr	r2, [pc, #324]	@ (8002b24 <HAL_GPIO_Init+0x318>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a50      	ldr	r2, [pc, #320]	@ (8002b28 <HAL_GPIO_Init+0x31c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4f      	ldr	r2, [pc, #316]	@ (8002b2c <HAL_GPIO_Init+0x320>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x21a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b30 <HAL_GPIO_Init+0x324>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x216>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b34 <HAL_GPIO_Init+0x328>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x212>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	@ (8002b38 <HAL_GPIO_Init+0x32c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b3c <HAL_GPIO_Init+0x330>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x20a>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e00e      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a16:	2308      	movs	r3, #8
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4935      	ldr	r1, [pc, #212]	@ (8002b1c <HAL_GPIO_Init+0x310>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a32      	ldr	r2, [pc, #200]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b30      	ldr	r3, [pc, #192]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a27      	ldr	r2, [pc, #156]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aca:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f ae90 	bls.w	8002828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fb0c 	bl	8006178 <USB_GetMode>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f040 80fb 	bne.w	8002d5e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 facf 	bl	8006110 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80f1 	beq.w	8002d5c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fac6 	bl	8006110 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b8e:	d104      	bne.n	8002b9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fab6 	bl	8006110 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bae:	d104      	bne.n	8002bba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 faa6 	bl	8006110 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bce:	d104      	bne.n	8002bda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fa96 	bl	8006110 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d103      	bne.n	8002bf6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fa88 	bl	8006110 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c0a:	d120      	bne.n	8002c4e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c26:	2110      	movs	r1, #16
 8002c28:	6938      	ldr	r0, [r7, #16]
 8002c2a:	f003 f9b9 	bl	8005fa0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c2e:	6938      	ldr	r0, [r7, #16]
 8002c30:	f003 f9e8 	bl	8006004 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7a5b      	ldrb	r3, [r3, #9]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d105      	bne.n	8002c48 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 faa6 	bl	8006194 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f003 fd5e 	bl	800670a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fa5c 	bl	8006110 <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c62:	d102      	bne.n	8002c6a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f001 fc87 	bl	8004578 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fa4e 	bl	8006110 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d106      	bne.n	8002c8c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f003 fd27 	bl	80066d2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fa3d 	bl	8006110 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ca0:	d139      	bne.n	8002d16 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fab1 	bl	800620e <USB_HC_ReadInterrupt>
 8002cac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e025      	b.n	8002d00 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cde:	d106      	bne.n	8002cee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f859 	bl	8002d9e <HCD_HC_IN_IRQHandler>
 8002cec:	e005      	b.n	8002cfa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 febb 	bl	8003a70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	795b      	ldrb	r3, [r3, #5]
 8002d04:	461a      	mov	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d3d3      	bcc.n	8002cb4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 f9f8 	bl	8006110 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d101      	bne.n	8002d2e <HAL_HCD_IRQHandler+0x1ea>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_HCD_IRQHandler+0x1ec>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d014      	beq.n	8002d5e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0210 	bic.w	r2, r2, #16
 8002d42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f001 fb38 	bl	80043ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0210 	orr.w	r2, r2, #16
 8002d58:	619a      	str	r2, [r3, #24]
 8002d5a:	e000      	b.n	8002d5e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_HCD_Stop+0x16>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e00d      	b.n	8002d96 <HAL_HCD_Stop+0x32>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fb72 	bl	8006470 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 f9ba 	bl	8006136 <USB_ReadChInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11a      	bne.n	8002e02 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2304      	movs	r3, #4
 8002ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	334d      	adds	r3, #77	@ 0x4d
 8002dee:	2207      	movs	r2, #7
 8002df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fa18 	bl	8006230 <USB_HC_Halt>
 8002e00:	e09e      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 f993 	bl	8006136 <USB_ReadChInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1a:	d11b      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	334d      	adds	r3, #77	@ 0x4d
 8002e40:	2208      	movs	r2, #8
 8002e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 f9ef 	bl	8006230 <USB_HC_Halt>
 8002e52:	e075      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 f96a 	bl	8006136 <USB_ReadChInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d11a      	bne.n	8002ea2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	334d      	adds	r3, #77	@ 0x4d
 8002e8e:	2206      	movs	r2, #6
 8002e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f9c8 	bl	8006230 <USB_HC_Halt>
 8002ea0:	e04e      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 f943 	bl	8006136 <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eba:	d11b      	bne.n	8002ef4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334d      	adds	r3, #77	@ 0x4d
 8002ee0:	2209      	movs	r2, #9
 8002ee2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 f99f 	bl	8006230 <USB_HC_Halt>
 8002ef2:	e025      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 f91a 	bl	8006136 <USB_ReadChInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f08:	2b80      	cmp	r3, #128	@ 0x80
 8002f0a:	d119      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334d      	adds	r3, #77	@ 0x4d
 8002f2e:	2207      	movs	r2, #7
 8002f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f978 	bl	8006230 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f8f4 	bl	8006136 <USB_ReadChInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d112      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 f964 	bl	8006230 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f7a:	6093      	str	r3, [r2, #8]
 8002f7c:	f000 bd75 	b.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 f8d4 	bl	8006136 <USB_ReadChInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8128 	bne.w	80031ea <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	331b      	adds	r3, #27
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d119      	bne.n	8002ff6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	331b      	adds	r3, #27
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	799b      	ldrb	r3, [r3, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01b      	beq.n	8003036 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3330      	adds	r3, #48	@ 0x30
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	1ac9      	subs	r1, r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4403      	add	r3, r0
 8003032:	3338      	adds	r3, #56	@ 0x38
 8003034:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	@ 0x4d
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3344      	adds	r3, #68	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	461a      	mov	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3326      	adds	r3, #38	@ 0x26
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3326      	adds	r3, #38	@ 0x26
 8003096:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003098:	2b02      	cmp	r3, #2
 800309a:	d110      	bne.n	80030be <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 f8c3 	bl	8006230 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	2310      	movs	r3, #16
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e03d      	b.n	800313a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3326      	adds	r3, #38	@ 0x26
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d00a      	beq.n	80030ea <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3326      	adds	r3, #38	@ 0x26
 80030e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d127      	bne.n	800313a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	0151      	lsls	r1, r2, #5
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	440a      	add	r2, r1
 8003100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003104:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003108:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334c      	adds	r3, #76	@ 0x4c
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334c      	adds	r3, #76	@ 0x4c
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f003 faf6 	bl	8006726 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d13b      	bne.n	80031ba <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3338      	adds	r3, #56	@ 0x38
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4403      	add	r3, r0
 8003162:	3328      	adds	r3, #40	@ 0x28
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	440b      	add	r3, r1
 8003168:	1e59      	subs	r1, r3, #1
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	3328      	adds	r3, #40	@ 0x28
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8470 	beq.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	333c      	adds	r3, #60	@ 0x3c
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2d8      	uxtb	r0, r3
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	333c      	adds	r3, #60	@ 0x3c
 80031b2:	4602      	mov	r2, r0
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	f000 bc58 	b.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	333c      	adds	r3, #60	@ 0x3c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	f083 0301 	eor.w	r3, r3, #1
 80031d2:	b2d8      	uxtb	r0, r3
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	333c      	adds	r3, #60	@ 0x3c
 80031e2:	4602      	mov	r2, r0
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	f000 bc40 	b.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 ff9f 	bl	8006136 <USB_ReadChInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d131      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	2320      	movs	r3, #32
 8003212:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	331a      	adds	r3, #26
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 841f 	bne.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	331b      	adds	r3, #27
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f002 ffe7 	bl	8006230 <USB_HC_Halt>
 8003262:	f000 bc02 	b.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f002 ff61 	bl	8006136 <USB_ReadChInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 8305 	bne.w	800388a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	2302      	movs	r3, #2
 8003290:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334d      	adds	r3, #77	@ 0x4d
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d114      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334d      	adds	r3, #77	@ 0x4d
 80032b8:	2202      	movs	r2, #2
 80032ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334c      	adds	r3, #76	@ 0x4c
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e2cc      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d114      	bne.n	8003312 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334d      	adds	r3, #77	@ 0x4d
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	@ 0x4c
 800330c:	2205      	movs	r2, #5
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e2ac      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	@ 0x4d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b07      	cmp	r3, #7
 8003326:	d00b      	beq.n	8003340 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800333a:	2b09      	cmp	r3, #9
 800333c:	f040 80a6 	bne.w	800348c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334d      	adds	r3, #77	@ 0x4d
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3344      	adds	r3, #68	@ 0x44
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1c59      	adds	r1, r3, #1
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4403      	add	r3, r0
 8003374:	3344      	adds	r3, #68	@ 0x44
 8003376:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3344      	adds	r3, #68	@ 0x44
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d943      	bls.n	8003416 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3344      	adds	r3, #68	@ 0x44
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	331a      	adds	r3, #26
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d123      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	331b      	adds	r3, #27
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	331c      	adds	r3, #28
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	334c      	adds	r3, #76	@ 0x4c
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003414:	e229      	b.n	800386a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334c      	adds	r3, #76	@ 0x4c
 8003426:	2202      	movs	r2, #2
 8003428:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3326      	adds	r3, #38	@ 0x26
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3326      	adds	r3, #38	@ 0x26
 8003450:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003452:	2b02      	cmp	r3, #2
 8003454:	f040 8209 	bne.w	800386a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800346e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003476:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348a:	e1ee      	b.n	800386a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334d      	adds	r3, #77	@ 0x4d
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	f040 80c8 	bne.w	8003634 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	331b      	adds	r3, #27
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	f040 81ce 	bne.w	800386c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3326      	adds	r3, #38	@ 0x26
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d16b      	bne.n	80035be <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3348      	adds	r3, #72	@ 0x48
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	3348      	adds	r3, #72	@ 0x48
 8003508:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3348      	adds	r3, #72	@ 0x48
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d943      	bls.n	80035a8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3348      	adds	r3, #72	@ 0x48
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	331b      	adds	r3, #27
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	@ 0x44
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d809      	bhi.n	8003572 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331c      	adds	r3, #28
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	440a      	add	r2, r1
 8003588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800358c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003590:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	334c      	adds	r3, #76	@ 0x4c
 80035a2:	2204      	movs	r2, #4
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e014      	b.n	80035d2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e009      	b.n	80035d2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	334c      	adds	r3, #76	@ 0x4c
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3326      	adds	r3, #38	@ 0x26
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3326      	adds	r3, #38	@ 0x26
 80035f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	f040 8136 	bne.w	800386c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003616:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e11b      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334d      	adds	r3, #77	@ 0x4d
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b03      	cmp	r3, #3
 8003648:	f040 8081 	bne.w	800374e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	331b      	adds	r3, #27
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	f040 80fa 	bne.w	800386c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334c      	adds	r3, #76	@ 0x4c
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ca:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e6:	f023 0320 	bic.w	r3, r3, #32
 80036ea:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3326      	adds	r3, #38	@ 0x26
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3326      	adds	r3, #38	@ 0x26
 8003712:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003714:	2b02      	cmp	r3, #2
 8003716:	f040 80a9 	bne.w	800386c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003730:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003738:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e08e      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	334d      	adds	r3, #77	@ 0x4d
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d143      	bne.n	80037ec <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	@ 0x4c
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3326      	adds	r3, #38	@ 0x26
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	@ 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d159      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e03f      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334d      	adds	r3, #77	@ 0x4d
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d126      	bne.n	8003850 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	334d      	adds	r3, #77	@ 0x4d
 8003812:	2202      	movs	r2, #2
 8003814:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	@ 0x44
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	3344      	adds	r3, #68	@ 0x44
 8003838:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	2204      	movs	r2, #4
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e00d      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	334d      	adds	r3, #77	@ 0x4d
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	f000 8100 	beq.w	8003a68 <HCD_HC_IN_IRQHandler+0xcca>
 8003868:	e000      	b.n	800386c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800386a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	334c      	adds	r3, #76	@ 0x4c
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f002 ff4f 	bl	8006726 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003888:	e0ef      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fc4f 	bl	8006136 <USB_ReadChInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b40      	cmp	r3, #64	@ 0x40
 80038a0:	d12f      	bne.n	8003902 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	2340      	movs	r3, #64	@ 0x40
 80038b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	334d      	adds	r3, #77	@ 0x4d
 80038c4:	2205      	movs	r2, #5
 80038c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	331a      	adds	r3, #26
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3344      	adds	r3, #68	@ 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fc98 	bl	8006230 <USB_HC_Halt>
 8003900:	e0b3      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fc13 	bl	8006136 <USB_ReadChInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	f040 80a7 	bne.w	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3326      	adds	r3, #38	@ 0x26
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d11b      	bne.n	800396a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3344      	adds	r3, #68	@ 0x44
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	334d      	adds	r3, #77	@ 0x4d
 8003956:	2204      	movs	r2, #4
 8003958:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f002 fc64 	bl	8006230 <USB_HC_Halt>
 8003968:	e03f      	b.n	80039ea <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3326      	adds	r3, #38	@ 0x26
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3326      	adds	r3, #38	@ 0x26
 8003990:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003992:	2b02      	cmp	r3, #2
 8003994:	d129      	bne.n	80039ea <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3344      	adds	r3, #68	@ 0x44
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	799b      	ldrb	r3, [r3, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HCD_HC_IN_IRQHandler+0xc2a>
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	331b      	adds	r3, #27
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d110      	bne.n	80039ea <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	334d      	adds	r3, #77	@ 0x4d
 80039d8:	2204      	movs	r2, #4
 80039da:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 fc23 	bl	8006230 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	331b      	adds	r3, #27
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d129      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	331b      	adds	r3, #27
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a32:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2310      	movs	r3, #16
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	e000      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a68:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f002 fb51 	bl	8006136 <USB_ReadChInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d11b      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2304      	movs	r3, #4
 8003aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	334d      	adds	r3, #77	@ 0x4d
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fbaf 	bl	8006230 <USB_HC_Halt>
 8003ad2:	f000 bc6f 	b.w	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fb29 	bl	8006136 <USB_ReadChInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	f040 8082 	bne.w	8003bf4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	2320      	movs	r3, #32
 8003b00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3319      	adds	r3, #25
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d124      	bne.n	8003b62 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3319      	adds	r3, #25
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	@ 0x4c
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	334d      	adds	r3, #77	@ 0x4d
 8003b50:	2203      	movs	r2, #3
 8003b52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f002 fb67 	bl	8006230 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	331a      	adds	r3, #26
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f040 841d 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	331b      	adds	r3, #27
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 8411 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3326      	adds	r3, #38	@ 0x26
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d009      	beq.n	8003bbc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	331b      	adds	r3, #27
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334d      	adds	r3, #77	@ 0x4d
 8003bcc:	2203      	movs	r2, #3
 8003bce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 fb29 	bl	8006230 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3344      	adds	r3, #68	@ 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e3df      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f002 fa9a 	bl	8006136 <USB_ReadChInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0c:	d111      	bne.n	8003c32 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fb00 	bl	8006230 <USB_HC_Halt>
 8003c30:	e3c0      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 fa7b 	bl	8006136 <USB_ReadChInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d168      	bne.n	8003d1c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3344      	adds	r3, #68	@ 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 fa65 	bl	8006136 <USB_ReadChInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d112      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3319      	adds	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c96:	461a      	mov	r2, r3
 8003c98:	2340      	movs	r3, #64	@ 0x40
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	331b      	adds	r3, #27
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d019      	beq.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	331b      	adds	r3, #27
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334d      	adds	r3, #77	@ 0x4d
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f002 fa8b 	bl	8006230 <USB_HC_Halt>
 8003d1a:	e34b      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f002 fa06 	bl	8006136 <USB_ReadChInterrupts>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b40      	cmp	r3, #64	@ 0x40
 8003d32:	d139      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	334d      	adds	r3, #77	@ 0x4d
 8003d44:	2205      	movs	r2, #5
 8003d46:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	331a      	adds	r3, #26
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3319      	adds	r3, #25
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3344      	adds	r3, #68	@ 0x44
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f002 fa4e 	bl	8006230 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	2340      	movs	r3, #64	@ 0x40
 8003da4:	6093      	str	r3, [r2, #8]
 8003da6:	e305      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f002 f9c0 	bl	8006136 <USB_ReadChInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d11a      	bne.n	8003df6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2308      	movs	r3, #8
 8003dd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	334d      	adds	r3, #77	@ 0x4d
 8003de2:	2206      	movs	r2, #6
 8003de4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 fa1e 	bl	8006230 <USB_HC_Halt>
 8003df4:	e2de      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f002 f999 	bl	8006136 <USB_ReadChInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d144      	bne.n	8003e98 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3344      	adds	r3, #68	@ 0x44
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334d      	adds	r3, #77	@ 0x4d
 8003e32:	2204      	movs	r2, #4
 8003e34:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3319      	adds	r3, #25
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d114      	bne.n	8003e76 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3319      	adds	r3, #25
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f002 f9d6 	bl	8006230 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e90:	461a      	mov	r2, r3
 8003e92:	2310      	movs	r3, #16
 8003e94:	6093      	str	r3, [r2, #8]
 8003e96:	e28d      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 f948 	bl	8006136 <USB_ReadChInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d169      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	799b      	ldrb	r3, [r3, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	@ 0x4d
 8003ec8:	2207      	movs	r2, #7
 8003eca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f002 f9ab 	bl	8006230 <USB_HC_Halt>
 8003eda:	e049      	b.n	8003f70 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3344      	adds	r3, #68	@ 0x44
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4403      	add	r3, r0
 8003efc:	3344      	adds	r3, #68	@ 0x44
 8003efe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3344      	adds	r3, #68	@ 0x44
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d922      	bls.n	8003f5c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3344      	adds	r3, #68	@ 0x44
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334c      	adds	r3, #76	@ 0x4c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	334c      	adds	r3, #76	@ 0x4c
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f002 fbe6 	bl	8006726 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f5a:	e009      	b.n	8003f70 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	334c      	adds	r3, #76	@ 0x4c
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	6093      	str	r3, [r2, #8]
 8003f82:	e217      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 f8d2 	bl	8006136 <USB_ReadChInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9c:	d11b      	bne.n	8003fd6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	334d      	adds	r3, #77	@ 0x4d
 8003fae:	2209      	movs	r2, #9
 8003fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f002 f938 	bl	8006230 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fd2:	6093      	str	r3, [r2, #8]
 8003fd4:	e1ee      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 f8a9 	bl	8006136 <USB_ReadChInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 81df 	bne.w	80043ae <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2302      	movs	r3, #2
 8004000:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 8093 	bne.w	8004140 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	334d      	adds	r3, #77	@ 0x4d
 800402a:	2202      	movs	r2, #2
 800402c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	334c      	adds	r3, #76	@ 0x4c
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	3326      	adds	r3, #38	@ 0x26
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d00b      	beq.n	8004070 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3326      	adds	r3, #38	@ 0x26
 8004068:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800406a:	2b03      	cmp	r3, #3
 800406c:	f040 8190 	bne.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	799b      	ldrb	r3, [r3, #6]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	333d      	adds	r3, #61	@ 0x3d
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2d8      	uxtb	r0, r3
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	333d      	adds	r3, #61	@ 0x3d
 80040a0:	4602      	mov	r2, r0
 80040a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	799b      	ldrb	r3, [r3, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 8171 	bne.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3334      	adds	r3, #52	@ 0x34
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8165 	beq.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3334      	adds	r3, #52	@ 0x34
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	440b      	add	r3, r1
 80040ec:	1e59      	subs	r1, r3, #1
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	3328      	adds	r3, #40	@ 0x28
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	fbb1 f3f3 	udiv	r3, r1, r3
 8004104:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 813f 	beq.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	333d      	adds	r3, #61	@ 0x3d
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	f083 0301 	eor.w	r3, r3, #1
 800412a:	b2d8      	uxtb	r0, r3
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	333d      	adds	r3, #61	@ 0x3d
 800413a:	4602      	mov	r2, r0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e127      	b.n	8004390 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	334d      	adds	r3, #77	@ 0x4d
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d120      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	334d      	adds	r3, #77	@ 0x4d
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	331b      	adds	r3, #27
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 8107 	bne.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	334c      	adds	r3, #76	@ 0x4c
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e0fb      	b.n	8004390 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334d      	adds	r3, #77	@ 0x4d
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d13a      	bne.n	8004224 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334d      	adds	r3, #77	@ 0x4d
 80041be:	2202      	movs	r2, #2
 80041c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	334c      	adds	r3, #76	@ 0x4c
 80041d2:	2202      	movs	r2, #2
 80041d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	331b      	adds	r3, #27
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 80d1 	bne.w	8004390 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	331b      	adds	r3, #27
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	440a      	add	r2, r1
 8004218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800421c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004220:	6053      	str	r3, [r2, #4]
 8004222:	e0b5      	b.n	8004390 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	334d      	adds	r3, #77	@ 0x4d
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d114      	bne.n	8004264 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	334d      	adds	r3, #77	@ 0x4d
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	334c      	adds	r3, #76	@ 0x4c
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e095      	b.n	8004390 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	334d      	adds	r3, #77	@ 0x4d
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d114      	bne.n	80042a4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	334d      	adds	r3, #77	@ 0x4d
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334c      	adds	r3, #76	@ 0x4c
 800429e:	2205      	movs	r2, #5
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e075      	b.n	8004390 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b07      	cmp	r3, #7
 80042b8:	d00a      	beq.n	80042d0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	334d      	adds	r3, #77	@ 0x4d
 80042ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	d170      	bne.n	80043b2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	334d      	adds	r3, #77	@ 0x4d
 80042e0:	2202      	movs	r2, #2
 80042e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3344      	adds	r3, #68	@ 0x44
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4403      	add	r3, r0
 8004304:	3344      	adds	r3, #68	@ 0x44
 8004306:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	3344      	adds	r3, #68	@ 0x44
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d914      	bls.n	8004348 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3344      	adds	r3, #68	@ 0x44
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	334c      	adds	r3, #76	@ 0x4c
 8004342:	2204      	movs	r2, #4
 8004344:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004346:	e022      	b.n	800438e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	334c      	adds	r3, #76	@ 0x4c
 8004358:	2202      	movs	r2, #2
 800435a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004372:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800437a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004388:	461a      	mov	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800438e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334c      	adds	r3, #76	@ 0x4c
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f002 f9bd 	bl	8006726 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043ac:	e002      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80043b2:	bf00      	nop
  }
}
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	@ 0x28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	0c5b      	lsrs	r3, r3, #17
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d004      	beq.n	8004400 <HCD_RXQLVL_IRQHandler+0x46>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	f000 80b6 	beq.w	800456a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043fe:	e0b7      	b.n	8004570 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80b3 	beq.w	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	332c      	adds	r3, #44	@ 0x2c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a7 	beq.w	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3338      	adds	r3, #56	@ 0x38
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	18d1      	adds	r1, r2, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4403      	add	r3, r0
 8004444:	3334      	adds	r3, #52	@ 0x34
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4299      	cmp	r1, r3
 800444a:	f200 8083 	bhi.w	8004554 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	332c      	adds	r3, #44	@ 0x2c
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	b292      	uxth	r2, r2
 8004468:	4619      	mov	r1, r3
 800446a:	f001 fdf9 	bl	8006060 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	332c      	adds	r3, #44	@ 0x2c
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	18d1      	adds	r1, r2, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	332c      	adds	r3, #44	@ 0x2c
 8004494:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	3338      	adds	r3, #56	@ 0x38
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	18d1      	adds	r1, r2, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4403      	add	r3, r0
 80044ba:	3338      	adds	r3, #56	@ 0x38
 80044bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	0cdb      	lsrs	r3, r3, #19
 80044ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d13f      	bne.n	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03c      	beq.n	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800450a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004512:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	333c      	adds	r3, #60	@ 0x3c
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f083 0301 	eor.w	r3, r3, #1
 800453c:	b2d8      	uxtb	r0, r3
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	333c      	adds	r3, #60	@ 0x3c
 800454e:	4602      	mov	r2, r0
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	e00c      	b.n	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	334c      	adds	r3, #76	@ 0x4c
 8004564:	2204      	movs	r2, #4
 8004566:	701a      	strb	r2, [r3, #0]
      break;
 8004568:	e001      	b.n	800456e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800456e:	bf00      	nop
  }
}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80045a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d10b      	bne.n	80045c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f002 f897 	bl	80066ee <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d132      	bne.n	8004638 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d126      	bne.n	8004632 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7a5b      	ldrb	r3, [r3, #9]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d113      	bne.n	8004614 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80045f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045f6:	d106      	bne.n	8004606 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 fdc8 	bl	8006194 <USB_InitFSLSPClkSel>
 8004604:	e011      	b.n	800462a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fdc1 	bl	8006194 <USB_InitFSLSPClkSel>
 8004612:	e00a      	b.n	800462a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	79db      	ldrb	r3, [r3, #7]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004622:	461a      	mov	r2, r3
 8004624:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004628:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f002 f889 	bl	8006742 <HAL_HCD_PortEnabled_Callback>
 8004630:	e002      	b.n	8004638 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f002 f893 	bl	800675e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d103      	bne.n	800464a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f043 0320 	orr.w	r3, r3, #32
 8004648:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004650:	461a      	mov	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6013      	str	r3, [r2, #0]
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e12b      	b.n	80048ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd fd88 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	@ 0x24
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046c4:	f001 fc36 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 80046c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4a81      	ldr	r2, [pc, #516]	@ (80048d4 <HAL_I2C_Init+0x274>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d807      	bhi.n	80046e4 <HAL_I2C_Init+0x84>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a80      	ldr	r2, [pc, #512]	@ (80048d8 <HAL_I2C_Init+0x278>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	bf94      	ite	ls
 80046dc:	2301      	movls	r3, #1
 80046de:	2300      	movhi	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e006      	b.n	80046f2 <HAL_I2C_Init+0x92>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a7d      	ldr	r2, [pc, #500]	@ (80048dc <HAL_I2C_Init+0x27c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	bf94      	ite	ls
 80046ec:	2301      	movls	r3, #1
 80046ee:	2300      	movhi	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0e7      	b.n	80048ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a78      	ldr	r2, [pc, #480]	@ (80048e0 <HAL_I2C_Init+0x280>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0c9b      	lsrs	r3, r3, #18
 8004704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a6a      	ldr	r2, [pc, #424]	@ (80048d4 <HAL_I2C_Init+0x274>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d802      	bhi.n	8004734 <HAL_I2C_Init+0xd4>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3301      	adds	r3, #1
 8004732:	e009      	b.n	8004748 <HAL_I2C_Init+0xe8>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4a69      	ldr	r2, [pc, #420]	@ (80048e4 <HAL_I2C_Init+0x284>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	3301      	adds	r3, #1
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800475a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	495c      	ldr	r1, [pc, #368]	@ (80048d4 <HAL_I2C_Init+0x274>)
 8004764:	428b      	cmp	r3, r1
 8004766:	d819      	bhi.n	800479c <HAL_I2C_Init+0x13c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e59      	subs	r1, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fbb1 f3f3 	udiv	r3, r1, r3
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800477c:	400b      	ands	r3, r1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_I2C_Init+0x138>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e59      	subs	r1, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004790:	3301      	adds	r3, #1
 8004792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004796:	e051      	b.n	800483c <HAL_I2C_Init+0x1dc>
 8004798:	2304      	movs	r3, #4
 800479a:	e04f      	b.n	800483c <HAL_I2C_Init+0x1dc>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <HAL_I2C_Init+0x168>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1e58      	subs	r0, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e012      	b.n	80047ee <HAL_I2C_Init+0x18e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e58      	subs	r0, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	0099      	lsls	r1, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	fbb0 f3f3 	udiv	r3, r0, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Init+0x196>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e022      	b.n	800483c <HAL_I2C_Init+0x1dc>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <HAL_I2C_Init+0x1bc>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1e58      	subs	r0, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	440b      	add	r3, r1
 800480c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481a:	e00f      	b.n	800483c <HAL_I2C_Init+0x1dc>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1e58      	subs	r0, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	0099      	lsls	r1, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	6809      	ldr	r1, [r1, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800486a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6911      	ldr	r1, [r2, #16]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	000186a0 	.word	0x000186a0
 80048d8:	001e847f 	.word	0x001e847f
 80048dc:	003d08ff 	.word	0x003d08ff
 80048e0:	431bde83 	.word	0x431bde83
 80048e4:	10624dd3 	.word	0x10624dd3

080048e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	461a      	mov	r2, r3
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
 80048f8:	4613      	mov	r3, r2
 80048fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7fd fe70 	bl	80025e0 <HAL_GetTick>
 8004900:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b20      	cmp	r3, #32
 800490c:	f040 80e0 	bne.w	8004ad0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2319      	movs	r3, #25
 8004916:	2201      	movs	r2, #1
 8004918:	4970      	ldr	r1, [pc, #448]	@ (8004adc <HAL_I2C_Master_Transmit+0x1f4>)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fc64 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
 8004928:	e0d3      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x50>
 8004934:	2302      	movs	r3, #2
 8004936:	e0cc      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d007      	beq.n	800495e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2221      	movs	r2, #33	@ 0x21
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2210      	movs	r2, #16
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	893a      	ldrh	r2, [r7, #8]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a50      	ldr	r2, [pc, #320]	@ (8004ae0 <HAL_I2C_Master_Transmit+0x1f8>)
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049a0:	8979      	ldrh	r1, [r7, #10]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 face 	bl	8004f48 <I2C_MasterRequestWrite>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e08d      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049cc:	e066      	b.n	8004a9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6a39      	ldr	r1, [r7, #32]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fd22 	bl	800541c <I2C_WaitOnTXEFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d107      	bne.n	80049f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06b      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_I2C_Master_Transmit+0x188>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	6a39      	ldr	r1, [r7, #32]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fd19 	bl	80054ac <I2C_WaitOnBTFFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e01a      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d194      	bne.n	80049ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	00100002 	.word	0x00100002
 8004ae0:	ffff0000 	.word	0xffff0000

08004ae4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	460b      	mov	r3, r1
 8004af2:	817b      	strh	r3, [r7, #10]
 8004af4:	4613      	mov	r3, r2
 8004af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7fd fd72 	bl	80025e0 <HAL_GetTick>
 8004afc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	f040 8217 	bne.w	8004f3a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2319      	movs	r3, #25
 8004b12:	2201      	movs	r2, #1
 8004b14:	497c      	ldr	r1, [pc, #496]	@ (8004d08 <HAL_I2C_Master_Receive+0x224>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fb66 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
 8004b24:	e20a      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2C_Master_Receive+0x50>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e203      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d007      	beq.n	8004b5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2222      	movs	r2, #34	@ 0x22
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2210      	movs	r2, #16
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	893a      	ldrh	r2, [r7, #8]
 8004b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a5c      	ldr	r2, [pc, #368]	@ (8004d0c <HAL_I2C_Master_Receive+0x228>)
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b9c:	8979      	ldrh	r1, [r7, #10]
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fa52 	bl	800504c <I2C_MasterRequestRead>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e1c4      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d113      	bne.n	8004be2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e198      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11b      	bne.n	8004c22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e178      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d11b      	bne.n	8004c62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	e158      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c88:	e144      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	f200 80f1 	bhi.w	8004e76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d123      	bne.n	8004ce4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fc4b 	bl	800553c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e145      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ce2:	e117      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d14e      	bne.n	8004d8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4906      	ldr	r1, [pc, #24]	@ (8004d10 <HAL_I2C_Master_Receive+0x22c>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fa76 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e11a      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
 8004d06:	bf00      	nop
 8004d08:	00100002 	.word	0x00100002
 8004d0c:	ffff0000 	.word	0xffff0000
 8004d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d88:	e0c4      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	496c      	ldr	r1, [pc, #432]	@ (8004f44 <HAL_I2C_Master_Receive+0x460>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fa27 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0cb      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	4955      	ldr	r1, [pc, #340]	@ (8004f44 <HAL_I2C_Master_Receive+0x460>)
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f9f9 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e09d      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e74:	e04e      	b.n	8004f14 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fb5e 	bl	800553c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e058      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d124      	bne.n	8004f14 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f aeb6 	bne.w	8004c8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	@ 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	00010004 	.word	0x00010004

08004f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d006      	beq.n	8004f72 <I2C_MasterRequestWrite+0x2a>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d003      	beq.n	8004f72 <I2C_MasterRequestWrite+0x2a>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f70:	d108      	bne.n	8004f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e00b      	b.n	8004f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	2b12      	cmp	r3, #18
 8004f8a:	d107      	bne.n	8004f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f91d 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc2:	d103      	bne.n	8004fcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e035      	b.n	800503c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd8:	d108      	bne.n	8004fec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe8:	611a      	str	r2, [r3, #16]
 8004fea:	e01b      	b.n	8005024 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fec:	897b      	ldrh	r3, [r7, #10]
 8004fee:	11db      	asrs	r3, r3, #7
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f003 0306 	and.w	r3, r3, #6
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f063 030f 	orn	r3, r3, #15
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	490e      	ldr	r1, [pc, #56]	@ (8005044 <I2C_MasterRequestWrite+0xfc>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f966 	bl	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e010      	b.n	800503c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4907      	ldr	r1, [pc, #28]	@ (8005048 <I2C_MasterRequestWrite+0x100>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f956 	bl	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	00010008 	.word	0x00010008
 8005048:	00010002 	.word	0x00010002

0800504c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005070:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d006      	beq.n	8005086 <I2C_MasterRequestRead+0x3a>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d003      	beq.n	8005086 <I2C_MasterRequestRead+0x3a>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005084:	d108      	bne.n	8005098 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e00b      	b.n	80050b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	2b11      	cmp	r3, #17
 800509e:	d107      	bne.n	80050b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f893 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d6:	d103      	bne.n	80050e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e079      	b.n	80051d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ec:	d108      	bne.n	8005100 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ee:	897b      	ldrh	r3, [r7, #10]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	611a      	str	r2, [r3, #16]
 80050fe:	e05f      	b.n	80051c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005100:	897b      	ldrh	r3, [r7, #10]
 8005102:	11db      	asrs	r3, r3, #7
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 0306 	and.w	r3, r3, #6
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f063 030f 	orn	r3, r3, #15
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4930      	ldr	r1, [pc, #192]	@ (80051e0 <I2C_MasterRequestRead+0x194>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f8dc 	bl	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e054      	b.n	80051d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800512e:	897b      	ldrh	r3, [r7, #10]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4929      	ldr	r1, [pc, #164]	@ (80051e4 <I2C_MasterRequestRead+0x198>)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f8cc 	bl	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e044      	b.n	80051d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005172:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f831 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519a:	d103      	bne.n	80051a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e017      	b.n	80051d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051a8:	897b      	ldrh	r3, [r7, #10]
 80051aa:	11db      	asrs	r3, r3, #7
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0306 	and.w	r3, r3, #6
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f063 030e 	orn	r3, r3, #14
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4907      	ldr	r1, [pc, #28]	@ (80051e4 <I2C_MasterRequestRead+0x198>)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f888 	bl	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	00010008 	.word	0x00010008
 80051e4:	00010002 	.word	0x00010002

080051e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f8:	e048      	b.n	800528c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d044      	beq.n	800528c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fd f9ed 	bl	80025e0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d139      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10d      	bne.n	800523e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	43da      	mvns	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4013      	ands	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	e00c      	b.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x70>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	429a      	cmp	r2, r3
 800525c:	d116      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e023      	b.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10d      	bne.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	43da      	mvns	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	e00c      	b.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d093      	beq.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ea:	e071      	b.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fa:	d123      	bne.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800530a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	f043 0204 	orr.w	r2, r3, #4
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e067      	b.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d041      	beq.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534c:	f7fd f948 	bl	80025e0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d136      	bne.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d10c      	bne.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	43da      	mvns	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf14      	ite	ne
 800537e:	2301      	movne	r3, #1
 8005380:	2300      	moveq	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e00b      	b.n	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	43da      	mvns	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d016      	beq.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e021      	b.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	0c1b      	lsrs	r3, r3, #16
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d10c      	bne.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	43da      	mvns	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e00b      	b.n	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf14      	ite	ne
 8005406:	2301      	movne	r3, #1
 8005408:	2300      	moveq	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	f47f af6d 	bne.w	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005428:	e034      	b.n	8005494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f8e3 	bl	80055f6 <I2C_IsAcknowledgeFailed>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e034      	b.n	80054a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d028      	beq.n	8005494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fd f8cd 	bl	80025e0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11d      	bne.n	8005494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d016      	beq.n	8005494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e007      	b.n	80054a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b80      	cmp	r3, #128	@ 0x80
 80054a0:	d1c3      	bne.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b8:	e034      	b.n	8005524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f89b 	bl	80055f6 <I2C_IsAcknowledgeFailed>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e034      	b.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d028      	beq.n	8005524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fd f885 	bl	80025e0 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11d      	bne.n	8005524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d016      	beq.n	8005524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e007      	b.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d1c3      	bne.n	80054ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005548:	e049      	b.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d119      	bne.n	800558c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0210 	mvn.w	r2, #16
 8005560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e030      	b.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558c:	f7fd f828 	bl	80025e0 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11d      	bne.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ac:	2b40      	cmp	r3, #64	@ 0x40
 80055ae:	d016      	beq.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e007      	b.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d1ae      	bne.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560c:	d11b      	bne.n	8005646 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005616:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f043 0204 	orr.w	r2, r3, #4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e267      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d075      	beq.n	800575e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005672:	4b88      	ldr	r3, [pc, #544]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	2b04      	cmp	r3, #4
 800567c:	d00c      	beq.n	8005698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567e:	4b85      	ldr	r3, [pc, #532]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005686:	2b08      	cmp	r3, #8
 8005688:	d112      	bne.n	80056b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568a:	4b82      	ldr	r3, [pc, #520]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005696:	d10b      	bne.n	80056b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05b      	beq.n	800575c <HAL_RCC_OscConfig+0x108>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d157      	bne.n	800575c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e242      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d106      	bne.n	80056c8 <HAL_RCC_OscConfig+0x74>
 80056ba:	4b76      	ldr	r3, [pc, #472]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a75      	ldr	r2, [pc, #468]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e01d      	b.n	8005704 <HAL_RCC_OscConfig+0xb0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x98>
 80056d2:	4b70      	ldr	r3, [pc, #448]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b6d      	ldr	r3, [pc, #436]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e00b      	b.n	8005704 <HAL_RCC_OscConfig+0xb0>
 80056ec:	4b69      	ldr	r3, [pc, #420]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a68      	ldr	r2, [pc, #416]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4b66      	ldr	r3, [pc, #408]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a65      	ldr	r2, [pc, #404]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80056fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d013      	beq.n	8005734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fc ff68 	bl	80025e0 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005714:	f7fc ff64 	bl	80025e0 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	@ 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e207      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	4b5b      	ldr	r3, [pc, #364]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0xc0>
 8005732:	e014      	b.n	800575e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fc ff54 	bl	80025e0 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800573c:	f7fc ff50 	bl	80025e0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	@ 0x64
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e1f3      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574e:	4b51      	ldr	r3, [pc, #324]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0xe8>
 800575a:	e000      	b.n	800575e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d063      	beq.n	8005832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576a:	4b4a      	ldr	r3, [pc, #296]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005776:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800577e:	2b08      	cmp	r3, #8
 8005780:	d11c      	bne.n	80057bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005782:	4b44      	ldr	r3, [pc, #272]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578e:	4b41      	ldr	r3, [pc, #260]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_RCC_OscConfig+0x152>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d001      	beq.n	80057a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e1c7      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4937      	ldr	r1, [pc, #220]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ba:	e03a      	b.n	8005832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d020      	beq.n	8005806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c4:	4b34      	ldr	r3, [pc, #208]	@ (8005898 <HAL_RCC_OscConfig+0x244>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ca:	f7fc ff09 	bl	80025e0 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d2:	f7fc ff05 	bl	80025e0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1a8      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f0:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	4925      	ldr	r1, [pc, #148]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]
 8005804:	e015      	b.n	8005832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005806:	4b24      	ldr	r3, [pc, #144]	@ (8005898 <HAL_RCC_OscConfig+0x244>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fc fee8 	bl	80025e0 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005814:	f7fc fee4 	bl	80025e0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e187      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005826:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d036      	beq.n	80058ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d016      	beq.n	8005874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005846:	4b15      	ldr	r3, [pc, #84]	@ (800589c <HAL_RCC_OscConfig+0x248>)
 8005848:	2201      	movs	r2, #1
 800584a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fc fec8 	bl	80025e0 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005854:	f7fc fec4 	bl	80025e0 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e167      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005866:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <HAL_RCC_OscConfig+0x240>)
 8005868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0x200>
 8005872:	e01b      	b.n	80058ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005874:	4b09      	ldr	r3, [pc, #36]	@ (800589c <HAL_RCC_OscConfig+0x248>)
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587a:	f7fc feb1 	bl	80025e0 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005880:	e00e      	b.n	80058a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005882:	f7fc fead 	bl	80025e0 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d907      	bls.n	80058a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e150      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
 8005894:	40023800 	.word	0x40023800
 8005898:	42470000 	.word	0x42470000
 800589c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a0:	4b88      	ldr	r3, [pc, #544]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80058a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ea      	bne.n	8005882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8097 	beq.w	80059e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058be:	4b81      	ldr	r3, [pc, #516]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	4b7d      	ldr	r3, [pc, #500]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058da:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ea:	4b77      	ldr	r3, [pc, #476]	@ (8005ac8 <HAL_RCC_OscConfig+0x474>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d118      	bne.n	8005928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f6:	4b74      	ldr	r3, [pc, #464]	@ (8005ac8 <HAL_RCC_OscConfig+0x474>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a73      	ldr	r2, [pc, #460]	@ (8005ac8 <HAL_RCC_OscConfig+0x474>)
 80058fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005902:	f7fc fe6d 	bl	80025e0 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590a:	f7fc fe69 	bl	80025e0 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e10c      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac8 <HAL_RCC_OscConfig+0x474>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d106      	bne.n	800593e <HAL_RCC_OscConfig+0x2ea>
 8005930:	4b64      	ldr	r3, [pc, #400]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	4a63      	ldr	r2, [pc, #396]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6713      	str	r3, [r2, #112]	@ 0x70
 800593c:	e01c      	b.n	8005978 <HAL_RCC_OscConfig+0x324>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b05      	cmp	r3, #5
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x30c>
 8005946:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 800594c:	f043 0304 	orr.w	r3, r3, #4
 8005950:	6713      	str	r3, [r2, #112]	@ 0x70
 8005952:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	4a5b      	ldr	r2, [pc, #364]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6713      	str	r3, [r2, #112]	@ 0x70
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0x324>
 8005960:	4b58      	ldr	r3, [pc, #352]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	4a57      	ldr	r2, [pc, #348]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	6713      	str	r3, [r2, #112]	@ 0x70
 800596c:	4b55      	ldr	r3, [pc, #340]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005970:	4a54      	ldr	r2, [pc, #336]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005972:	f023 0304 	bic.w	r3, r3, #4
 8005976:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d015      	beq.n	80059ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fc fe2e 	bl	80025e0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005986:	e00a      	b.n	800599e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005988:	f7fc fe2a 	bl	80025e0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0cb      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599e:	4b49      	ldr	r3, [pc, #292]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0ee      	beq.n	8005988 <HAL_RCC_OscConfig+0x334>
 80059aa:	e014      	b.n	80059d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fc fe18 	bl	80025e0 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f7fc fe14 	bl	80025e0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e0b5      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ca:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1ee      	bne.n	80059b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059dc:	4b39      	ldr	r3, [pc, #228]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	4a38      	ldr	r2, [pc, #224]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a1 	beq.w	8005b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f2:	4b34      	ldr	r3, [pc, #208]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d05c      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d141      	bne.n	8005a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b31      	ldr	r3, [pc, #196]	@ (8005acc <HAL_RCC_OscConfig+0x478>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fc fde8 	bl	80025e0 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc fde4 	bl	80025e0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e087      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	019b      	lsls	r3, r3, #6
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	491b      	ldr	r1, [pc, #108]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005acc <HAL_RCC_OscConfig+0x478>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fc fdbd 	bl	80025e0 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fc fdb9 	bl	80025e0 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e05c      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x416>
 8005a88:	e054      	b.n	8005b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8a:	4b10      	ldr	r3, [pc, #64]	@ (8005acc <HAL_RCC_OscConfig+0x478>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fc fda6 	bl	80025e0 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a98:	f7fc fda2 	bl	80025e0 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e045      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <HAL_RCC_OscConfig+0x470>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0x444>
 8005ab6:	e03d      	b.n	8005b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e038      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <HAL_RCC_OscConfig+0x4ec>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d028      	beq.n	8005b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d121      	bne.n	8005b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d11a      	bne.n	8005b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d111      	bne.n	8005b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800

08005b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0cc      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b68      	ldr	r3, [pc, #416]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d90c      	bls.n	8005b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b65      	ldr	r3, [pc, #404]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0b8      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b98:	4b59      	ldr	r3, [pc, #356]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a58      	ldr	r2, [pc, #352]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb0:	4b53      	ldr	r3, [pc, #332]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a52      	ldr	r2, [pc, #328]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bbc:	4b50      	ldr	r3, [pc, #320]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	494d      	ldr	r1, [pc, #308]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d044      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d107      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be2:	4b47      	ldr	r3, [pc, #284]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d119      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e07f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c02:	4b3f      	ldr	r3, [pc, #252]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e06f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c12:	4b3b      	ldr	r3, [pc, #236]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e067      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c22:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 0203 	bic.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4934      	ldr	r1, [pc, #208]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c34:	f7fc fcd4 	bl	80025e0 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3c:	f7fc fcd0 	bl	80025e0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e04f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	4b2b      	ldr	r3, [pc, #172]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 020c 	and.w	r2, r3, #12
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d1eb      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c64:	4b25      	ldr	r3, [pc, #148]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d20c      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c72:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e032      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c98:	4b19      	ldr	r3, [pc, #100]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4916      	ldr	r1, [pc, #88]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cb6:	4b12      	ldr	r3, [pc, #72]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	490e      	ldr	r1, [pc, #56]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cca:	f000 f821 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	490a      	ldr	r1, [pc, #40]	@ (8005d04 <HAL_RCC_ClockConfig+0x1c0>)
 8005cdc:	5ccb      	ldrb	r3, [r1, r3]
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ce6:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc fc34 	bl	8002558 <HAL_InitTick>

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023c00 	.word	0x40023c00
 8005d00:	40023800 	.word	0x40023800
 8005d04:	08009638 	.word	0x08009638
 8005d08:	2000000c 	.word	0x2000000c
 8005d0c:	20000010 	.word	0x20000010

08005d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d14:	b094      	sub	sp, #80	@ 0x50
 8005d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d20:	2300      	movs	r3, #0
 8005d22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d28:	4b79      	ldr	r3, [pc, #484]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d00d      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0x40>
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	f200 80e1 	bhi.w	8005efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0x34>
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d003      	beq.n	8005d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d42:	e0db      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d44:	4b73      	ldr	r3, [pc, #460]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005d48:	e0db      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d4a:	4b73      	ldr	r3, [pc, #460]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d4e:	e0d8      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d50:	4b6f      	ldr	r3, [pc, #444]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d063      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d66:	4b6a      	ldr	r3, [pc, #424]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	099b      	lsrs	r3, r3, #6
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	f04f 0000 	mov.w	r0, #0
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	0159      	lsls	r1, r3, #5
 8005d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d94:	0150      	lsls	r0, r2, #5
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	1a51      	subs	r1, r2, r1
 8005d9e:	6139      	str	r1, [r7, #16]
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb63 0301 	sbc.w	r3, r3, r1
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db4:	4659      	mov	r1, fp
 8005db6:	018b      	lsls	r3, r1, #6
 8005db8:	4651      	mov	r1, sl
 8005dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	018a      	lsls	r2, r1, #6
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8005dc8:	4659      	mov	r1, fp
 8005dca:	eb63 0901 	sbc.w	r9, r3, r1
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de2:	4690      	mov	r8, r2
 8005de4:	4699      	mov	r9, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	eb18 0303 	adds.w	r3, r8, r3
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	462b      	mov	r3, r5
 8005df0:	eb49 0303 	adc.w	r3, r9, r3
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e02:	4629      	mov	r1, r5
 8005e04:	024b      	lsls	r3, r1, #9
 8005e06:	4621      	mov	r1, r4
 8005e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	024a      	lsls	r2, r1, #9
 8005e10:	4610      	mov	r0, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e16:	2200      	movs	r2, #0
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e20:	f7fa ff12 	bl	8000c48 <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4613      	mov	r3, r2
 8005e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2c:	e058      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e2e:	4b38      	ldr	r3, [pc, #224]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	099b      	lsrs	r3, r3, #6
 8005e34:	2200      	movs	r2, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	4611      	mov	r1, r2
 8005e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	2300      	movs	r3, #0
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	f04f 0000 	mov.w	r0, #0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	0159      	lsls	r1, r3, #5
 8005e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e5a:	0150      	lsls	r0, r2, #5
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4641      	mov	r1, r8
 8005e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e66:	4649      	mov	r1, r9
 8005e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e80:	ebb2 040a 	subs.w	r4, r2, sl
 8005e84:	eb63 050b 	sbc.w	r5, r3, fp
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	00eb      	lsls	r3, r5, #3
 8005e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e96:	00e2      	lsls	r2, r4, #3
 8005e98:	4614      	mov	r4, r2
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	4643      	mov	r3, r8
 8005e9e:	18e3      	adds	r3, r4, r3
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	eb45 0303 	adc.w	r3, r5, r3
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	028b      	lsls	r3, r1, #10
 8005eba:	4621      	mov	r1, r4
 8005ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	028a      	lsls	r2, r1, #10
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	61fa      	str	r2, [r7, #28]
 8005ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed4:	f7fa feb8 	bl	8000c48 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4613      	mov	r3, r2
 8005ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	3301      	adds	r3, #1
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005efa:	e002      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3750      	adds	r7, #80	@ 0x50
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0e:	bf00      	nop
 8005f10:	40023800 	.word	0x40023800
 8005f14:	00f42400 	.word	0x00f42400
 8005f18:	007a1200 	.word	0x007a1200

08005f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	2000000c 	.word	0x2000000c

08005f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0a9b      	lsrs	r3, r3, #10
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4903      	ldr	r1, [pc, #12]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	08009648 	.word	0x08009648

08005f5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fba:	d901      	bls.n	8005fc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e01b      	b.n	8005ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	daf2      	bge.n	8005fae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe4:	d901      	bls.n	8005fea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d0f0      	beq.n	8005fd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800601c:	d901      	bls.n	8006022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e018      	b.n	8006054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	daf2      	bge.n	8006010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2210      	movs	r2, #16
 8006032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006040:	d901      	bls.n	8006046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e006      	b.n	8006054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b10      	cmp	r3, #16
 8006050:	d0f0      	beq.n	8006034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006060:	b480      	push	{r7}
 8006062:	b08b      	sub	sp, #44	@ 0x2c
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	b29b      	uxth	r3, r3
 800607c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006086:	2300      	movs	r3, #0
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	e014      	b.n	80060b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	601a      	str	r2, [r3, #0]
    pDest++;
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	3301      	adds	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	3301      	adds	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	3301      	adds	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	3301      	adds	r3, #1
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	6a3a      	ldr	r2, [r7, #32]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d3e6      	bcc.n	800608c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060be:	8bfb      	ldrh	r3, [r7, #30]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01e      	beq.n	8006102 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ce:	461a      	mov	r2, r3
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	701a      	strb	r2, [r3, #0]
      i++;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	3301      	adds	r3, #1
 80060ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	3301      	adds	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060fc:	8bfb      	ldrh	r3, [r7, #30]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1ea      	bne.n	80060d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006104:	4618      	mov	r0, r3
 8006106:	372c      	adds	r7, #44	@ 0x2c
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006128:	68fb      	ldr	r3, [r7, #12]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800616a:	68bb      	ldr	r3, [r7, #8]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0301 	and.w	r3, r3, #1
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061dc:	461a      	mov	r2, r3
 80061de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061e2:	6053      	str	r3, [r2, #4]
 80061e4:	e00c      	b.n	8006200 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d107      	bne.n	80061fc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061f2:	461a      	mov	r2, r3
 80061f4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80061f8:	6053      	str	r3, [r2, #4]
 80061fa:	e001      	b.n	8006200 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	b29b      	uxth	r3, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	@ 0x24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	0c9b      	lsrs	r3, r3, #18
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	0fdb      	lsrs	r3, r3, #31
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	0fdb      	lsrs	r3, r3, #31
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b20      	cmp	r3, #32
 8006294:	d10d      	bne.n	80062b2 <USB_HC_Halt+0x82>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <USB_HC_Halt+0x82>
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d002      	beq.n	80062ae <USB_HC_Halt+0x7e>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d101      	bne.n	80062b2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e0d8      	b.n	8006464 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <USB_HC_Halt+0x8e>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d173      	bne.n	80063a6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14a      	bne.n	8006380 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d133      	bne.n	800635e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006314:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006334:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	3301      	adds	r3, #1
 800633a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006342:	d82e      	bhi.n	80063a2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800635a:	d0ec      	beq.n	8006336 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800635c:	e081      	b.n	8006462 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800637c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800637e:	e070      	b.n	8006462 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800639a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800639e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063a0:	e05f      	b.n	8006462 <USB_HC_Halt+0x232>
            break;
 80063a2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063a4:	e05d      	b.n	8006462 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063c4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d133      	bne.n	800643e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	440a      	add	r2, r1
 800640c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006410:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006422:	d81d      	bhi.n	8006460 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800643a:	d0ec      	beq.n	8006416 <USB_HC_Halt+0x1e6>
 800643c:	e011      	b.n	8006462 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006458:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e000      	b.n	8006462 <USB_HC_Halt+0x232>
          break;
 8006460:	bf00      	nop
    }
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3724      	adds	r7, #36	@ 0x24
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fd7a 	bl	8005f7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800648a:	2110      	movs	r1, #16
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fd87 	bl	8005fa0 <USB_FlushTxFifo>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fdb1 	bl	8006004 <USB_FlushRxFifo>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e01f      	b.n	80064f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e6:	461a      	mov	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	3301      	adds	r3, #1
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d9dc      	bls.n	80064b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e034      	b.n	8006568 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006514:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800651c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006524:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006532:	461a      	mov	r2, r3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006544:	d80c      	bhi.n	8006560 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800655c:	d0ec      	beq.n	8006538 <USB_StopHost+0xc8>
 800655e:	e000      	b.n	8006562 <USB_StopHost+0xf2>
        break;
 8006560:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	3301      	adds	r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b0f      	cmp	r3, #15
 800656c:	d9c7      	bls.n	80064fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006574:	461a      	mov	r2, r3
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fce9 	bl	8005f5c <USB_EnableGlobalInt>

  return ret;
 800658a:	7ffb      	ldrb	r3, [r7, #31]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f804 	bl	80065b8 <USBH_HandleSof>
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b0b      	cmp	r3, #11
 80065c8:	d10a      	bne.n	80065e0 <USBH_HandleSof+0x28>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
  }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80065f8:	bf00      	nop
}
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006614:	bf00      	nop
}
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f883 	bl	800677a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	791b      	ldrb	r3, [r3, #4]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f80b 	bl	8006696 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	795b      	ldrb	r3, [r3, #5]
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f805 	bl	8006696 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b0f      	cmp	r3, #15
 80066a6:	d80d      	bhi.n	80066c4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	33e0      	adds	r3, #224	@ 0xe0
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	33e0      	adds	r3, #224	@ 0xe0
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff57 	bl	8006594 <USBH_LL_IncTimer>
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff8f 	bl	8006620 <USBH_LL_Connect>
}
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff ff98 	bl	800664e <USBH_LL_Disconnect>
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
 8006732:	4613      	mov	r3, r2
 8006734:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ff49 	bl	80065e8 <USBH_LL_PortEnabled>
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff ff49 	bl	8006604 <USBH_LL_PortDisabled>
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006790:	4618      	mov	r0, r3
 8006792:	f7fc fae7 	bl	8002d64 <HAL_HCD_Stop>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f807 	bl	80067b0 <USBH_Get_USB_Status>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d817      	bhi.n	80067f4 <USBH_Get_USB_Status+0x44>
 80067c4:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <USBH_Get_USB_Status+0x1c>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067e3 	.word	0x080067e3
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067ef 	.word	0x080067ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
    break;
 80067e0:	e00b      	b.n	80067fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80067e2:	2302      	movs	r3, #2
 80067e4:	73fb      	strb	r3, [r7, #15]
    break;
 80067e6:	e008      	b.n	80067fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
    break;
 80067ec:	e005      	b.n	80067fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80067ee:	2302      	movs	r3, #2
 80067f0:	73fb      	strb	r3, [r7, #15]
    break;
 80067f2:	e002      	b.n	80067fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80067f4:	2302      	movs	r3, #2
 80067f6:	73fb      	strb	r3, [r7, #15]
    break;
 80067f8:	bf00      	nop
  }
  return usb_status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <malloc>:
 8006808:	4b02      	ldr	r3, [pc, #8]	@ (8006814 <malloc+0xc>)
 800680a:	4601      	mov	r1, r0
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f000 b825 	b.w	800685c <_malloc_r>
 8006812:	bf00      	nop
 8006814:	20000024 	.word	0x20000024

08006818 <sbrk_aligned>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4e0f      	ldr	r6, [pc, #60]	@ (8006858 <sbrk_aligned+0x40>)
 800681c:	460c      	mov	r4, r1
 800681e:	6831      	ldr	r1, [r6, #0]
 8006820:	4605      	mov	r5, r0
 8006822:	b911      	cbnz	r1, 800682a <sbrk_aligned+0x12>
 8006824:	f000 fe8a 	bl	800753c <_sbrk_r>
 8006828:	6030      	str	r0, [r6, #0]
 800682a:	4621      	mov	r1, r4
 800682c:	4628      	mov	r0, r5
 800682e:	f000 fe85 	bl	800753c <_sbrk_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d103      	bne.n	800683e <sbrk_aligned+0x26>
 8006836:	f04f 34ff 	mov.w	r4, #4294967295
 800683a:	4620      	mov	r0, r4
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	1cc4      	adds	r4, r0, #3
 8006840:	f024 0403 	bic.w	r4, r4, #3
 8006844:	42a0      	cmp	r0, r4
 8006846:	d0f8      	beq.n	800683a <sbrk_aligned+0x22>
 8006848:	1a21      	subs	r1, r4, r0
 800684a:	4628      	mov	r0, r5
 800684c:	f000 fe76 	bl	800753c <_sbrk_r>
 8006850:	3001      	adds	r0, #1
 8006852:	d1f2      	bne.n	800683a <sbrk_aligned+0x22>
 8006854:	e7ef      	b.n	8006836 <sbrk_aligned+0x1e>
 8006856:	bf00      	nop
 8006858:	20000650 	.word	0x20000650

0800685c <_malloc_r>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	1ccd      	adds	r5, r1, #3
 8006862:	f025 0503 	bic.w	r5, r5, #3
 8006866:	3508      	adds	r5, #8
 8006868:	2d0c      	cmp	r5, #12
 800686a:	bf38      	it	cc
 800686c:	250c      	movcc	r5, #12
 800686e:	2d00      	cmp	r5, #0
 8006870:	4606      	mov	r6, r0
 8006872:	db01      	blt.n	8006878 <_malloc_r+0x1c>
 8006874:	42a9      	cmp	r1, r5
 8006876:	d904      	bls.n	8006882 <_malloc_r+0x26>
 8006878:	230c      	movs	r3, #12
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	2000      	movs	r0, #0
 800687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006958 <_malloc_r+0xfc>
 8006886:	f000 f869 	bl	800695c <__malloc_lock>
 800688a:	f8d8 3000 	ldr.w	r3, [r8]
 800688e:	461c      	mov	r4, r3
 8006890:	bb44      	cbnz	r4, 80068e4 <_malloc_r+0x88>
 8006892:	4629      	mov	r1, r5
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff ffbf 	bl	8006818 <sbrk_aligned>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	4604      	mov	r4, r0
 800689e:	d158      	bne.n	8006952 <_malloc_r+0xf6>
 80068a0:	f8d8 4000 	ldr.w	r4, [r8]
 80068a4:	4627      	mov	r7, r4
 80068a6:	2f00      	cmp	r7, #0
 80068a8:	d143      	bne.n	8006932 <_malloc_r+0xd6>
 80068aa:	2c00      	cmp	r4, #0
 80068ac:	d04b      	beq.n	8006946 <_malloc_r+0xea>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	eb04 0903 	add.w	r9, r4, r3
 80068b8:	f000 fe40 	bl	800753c <_sbrk_r>
 80068bc:	4581      	cmp	r9, r0
 80068be:	d142      	bne.n	8006946 <_malloc_r+0xea>
 80068c0:	6821      	ldr	r1, [r4, #0]
 80068c2:	1a6d      	subs	r5, r5, r1
 80068c4:	4629      	mov	r1, r5
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ffa6 	bl	8006818 <sbrk_aligned>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d03a      	beq.n	8006946 <_malloc_r+0xea>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	442b      	add	r3, r5
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	f8d8 3000 	ldr.w	r3, [r8]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	bb62      	cbnz	r2, 8006938 <_malloc_r+0xdc>
 80068de:	f8c8 7000 	str.w	r7, [r8]
 80068e2:	e00f      	b.n	8006904 <_malloc_r+0xa8>
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	1b52      	subs	r2, r2, r5
 80068e8:	d420      	bmi.n	800692c <_malloc_r+0xd0>
 80068ea:	2a0b      	cmp	r2, #11
 80068ec:	d917      	bls.n	800691e <_malloc_r+0xc2>
 80068ee:	1961      	adds	r1, r4, r5
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	6025      	str	r5, [r4, #0]
 80068f4:	bf18      	it	ne
 80068f6:	6059      	strne	r1, [r3, #4]
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	bf08      	it	eq
 80068fc:	f8c8 1000 	streq.w	r1, [r8]
 8006900:	5162      	str	r2, [r4, r5]
 8006902:	604b      	str	r3, [r1, #4]
 8006904:	4630      	mov	r0, r6
 8006906:	f000 f82f 	bl	8006968 <__malloc_unlock>
 800690a:	f104 000b 	add.w	r0, r4, #11
 800690e:	1d23      	adds	r3, r4, #4
 8006910:	f020 0007 	bic.w	r0, r0, #7
 8006914:	1ac2      	subs	r2, r0, r3
 8006916:	bf1c      	itt	ne
 8006918:	1a1b      	subne	r3, r3, r0
 800691a:	50a3      	strne	r3, [r4, r2]
 800691c:	e7af      	b.n	800687e <_malloc_r+0x22>
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	42a3      	cmp	r3, r4
 8006922:	bf0c      	ite	eq
 8006924:	f8c8 2000 	streq.w	r2, [r8]
 8006928:	605a      	strne	r2, [r3, #4]
 800692a:	e7eb      	b.n	8006904 <_malloc_r+0xa8>
 800692c:	4623      	mov	r3, r4
 800692e:	6864      	ldr	r4, [r4, #4]
 8006930:	e7ae      	b.n	8006890 <_malloc_r+0x34>
 8006932:	463c      	mov	r4, r7
 8006934:	687f      	ldr	r7, [r7, #4]
 8006936:	e7b6      	b.n	80068a6 <_malloc_r+0x4a>
 8006938:	461a      	mov	r2, r3
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	42a3      	cmp	r3, r4
 800693e:	d1fb      	bne.n	8006938 <_malloc_r+0xdc>
 8006940:	2300      	movs	r3, #0
 8006942:	6053      	str	r3, [r2, #4]
 8006944:	e7de      	b.n	8006904 <_malloc_r+0xa8>
 8006946:	230c      	movs	r3, #12
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f80c 	bl	8006968 <__malloc_unlock>
 8006950:	e794      	b.n	800687c <_malloc_r+0x20>
 8006952:	6005      	str	r5, [r0, #0]
 8006954:	e7d6      	b.n	8006904 <_malloc_r+0xa8>
 8006956:	bf00      	nop
 8006958:	20000654 	.word	0x20000654

0800695c <__malloc_lock>:
 800695c:	4801      	ldr	r0, [pc, #4]	@ (8006964 <__malloc_lock+0x8>)
 800695e:	f000 be3a 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 8006962:	bf00      	nop
 8006964:	20000798 	.word	0x20000798

08006968 <__malloc_unlock>:
 8006968:	4801      	ldr	r0, [pc, #4]	@ (8006970 <__malloc_unlock+0x8>)
 800696a:	f000 be35 	b.w	80075d8 <__retarget_lock_release_recursive>
 800696e:	bf00      	nop
 8006970:	20000798 	.word	0x20000798

08006974 <__cvt>:
 8006974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	ec57 6b10 	vmov	r6, r7, d0
 800697c:	2f00      	cmp	r7, #0
 800697e:	460c      	mov	r4, r1
 8006980:	4619      	mov	r1, r3
 8006982:	463b      	mov	r3, r7
 8006984:	bfbb      	ittet	lt
 8006986:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800698a:	461f      	movlt	r7, r3
 800698c:	2300      	movge	r3, #0
 800698e:	232d      	movlt	r3, #45	@ 0x2d
 8006990:	700b      	strb	r3, [r1, #0]
 8006992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006994:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006998:	4691      	mov	r9, r2
 800699a:	f023 0820 	bic.w	r8, r3, #32
 800699e:	bfbc      	itt	lt
 80069a0:	4632      	movlt	r2, r6
 80069a2:	4616      	movlt	r6, r2
 80069a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069a8:	d005      	beq.n	80069b6 <__cvt+0x42>
 80069aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069ae:	d100      	bne.n	80069b2 <__cvt+0x3e>
 80069b0:	3401      	adds	r4, #1
 80069b2:	2102      	movs	r1, #2
 80069b4:	e000      	b.n	80069b8 <__cvt+0x44>
 80069b6:	2103      	movs	r1, #3
 80069b8:	ab03      	add	r3, sp, #12
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	ab02      	add	r3, sp, #8
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	ec47 6b10 	vmov	d0, r6, r7
 80069c4:	4653      	mov	r3, sl
 80069c6:	4622      	mov	r2, r4
 80069c8:	f000 fe9e 	bl	8007708 <_dtoa_r>
 80069cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069d0:	4605      	mov	r5, r0
 80069d2:	d119      	bne.n	8006a08 <__cvt+0x94>
 80069d4:	f019 0f01 	tst.w	r9, #1
 80069d8:	d00e      	beq.n	80069f8 <__cvt+0x84>
 80069da:	eb00 0904 	add.w	r9, r0, r4
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7fa f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ea:	b108      	cbz	r0, 80069f0 <__cvt+0x7c>
 80069ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f0:	2230      	movs	r2, #48	@ 0x30
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	454b      	cmp	r3, r9
 80069f6:	d31e      	bcc.n	8006a36 <__cvt+0xc2>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069fc:	1b5b      	subs	r3, r3, r5
 80069fe:	4628      	mov	r0, r5
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	b004      	add	sp, #16
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a0c:	eb00 0904 	add.w	r9, r0, r4
 8006a10:	d1e5      	bne.n	80069de <__cvt+0x6a>
 8006a12:	7803      	ldrb	r3, [r0, #0]
 8006a14:	2b30      	cmp	r3, #48	@ 0x30
 8006a16:	d10a      	bne.n	8006a2e <__cvt+0xba>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7fa f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a24:	b918      	cbnz	r0, 8006a2e <__cvt+0xba>
 8006a26:	f1c4 0401 	rsb	r4, r4, #1
 8006a2a:	f8ca 4000 	str.w	r4, [sl]
 8006a2e:	f8da 3000 	ldr.w	r3, [sl]
 8006a32:	4499      	add	r9, r3
 8006a34:	e7d3      	b.n	80069de <__cvt+0x6a>
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	9103      	str	r1, [sp, #12]
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e7d9      	b.n	80069f2 <__cvt+0x7e>

08006a3e <__exponent>:
 8006a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a40:	2900      	cmp	r1, #0
 8006a42:	bfba      	itte	lt
 8006a44:	4249      	neglt	r1, r1
 8006a46:	232d      	movlt	r3, #45	@ 0x2d
 8006a48:	232b      	movge	r3, #43	@ 0x2b
 8006a4a:	2909      	cmp	r1, #9
 8006a4c:	7002      	strb	r2, [r0, #0]
 8006a4e:	7043      	strb	r3, [r0, #1]
 8006a50:	dd29      	ble.n	8006aa6 <__exponent+0x68>
 8006a52:	f10d 0307 	add.w	r3, sp, #7
 8006a56:	461d      	mov	r5, r3
 8006a58:	270a      	movs	r7, #10
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a60:	fb07 1416 	mls	r4, r7, r6, r1
 8006a64:	3430      	adds	r4, #48	@ 0x30
 8006a66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	2c63      	cmp	r4, #99	@ 0x63
 8006a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a72:	4631      	mov	r1, r6
 8006a74:	dcf1      	bgt.n	8006a5a <__exponent+0x1c>
 8006a76:	3130      	adds	r1, #48	@ 0x30
 8006a78:	1e94      	subs	r4, r2, #2
 8006a7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a7e:	1c41      	adds	r1, r0, #1
 8006a80:	4623      	mov	r3, r4
 8006a82:	42ab      	cmp	r3, r5
 8006a84:	d30a      	bcc.n	8006a9c <__exponent+0x5e>
 8006a86:	f10d 0309 	add.w	r3, sp, #9
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	42ac      	cmp	r4, r5
 8006a8e:	bf88      	it	hi
 8006a90:	2300      	movhi	r3, #0
 8006a92:	3302      	adds	r3, #2
 8006a94:	4403      	add	r3, r0
 8006a96:	1a18      	subs	r0, r3, r0
 8006a98:	b003      	add	sp, #12
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006aa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006aa4:	e7ed      	b.n	8006a82 <__exponent+0x44>
 8006aa6:	2330      	movs	r3, #48	@ 0x30
 8006aa8:	3130      	adds	r1, #48	@ 0x30
 8006aaa:	7083      	strb	r3, [r0, #2]
 8006aac:	70c1      	strb	r1, [r0, #3]
 8006aae:	1d03      	adds	r3, r0, #4
 8006ab0:	e7f1      	b.n	8006a96 <__exponent+0x58>
	...

08006ab4 <_printf_float>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	b08d      	sub	sp, #52	@ 0x34
 8006aba:	460c      	mov	r4, r1
 8006abc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	f000 fd01 	bl	80074cc <_localeconv_r>
 8006aca:	6803      	ldr	r3, [r0, #0]
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 fbce 	bl	8000270 <strlen>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8006adc:	9005      	str	r0, [sp, #20]
 8006ade:	3307      	adds	r3, #7
 8006ae0:	f023 0307 	bic.w	r3, r3, #7
 8006ae4:	f103 0208 	add.w	r2, r3, #8
 8006ae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006aec:	f8d4 b000 	ldr.w	fp, [r4]
 8006af0:	f8c8 2000 	str.w	r2, [r8]
 8006af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006af8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006afc:	9307      	str	r3, [sp, #28]
 8006afe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8006d7c <_printf_float+0x2c8>)
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	f7fa f80c 	bl	8000b2c <__aeabi_dcmpun>
 8006b14:	bb70      	cbnz	r0, 8006b74 <_printf_float+0xc0>
 8006b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b1a:	4b98      	ldr	r3, [pc, #608]	@ (8006d7c <_printf_float+0x2c8>)
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b20:	f7f9 ffe6 	bl	8000af0 <__aeabi_dcmple>
 8006b24:	bb30      	cbnz	r0, 8006b74 <_printf_float+0xc0>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 ffd5 	bl	8000adc <__aeabi_dcmplt>
 8006b32:	b110      	cbz	r0, 8006b3a <_printf_float+0x86>
 8006b34:	232d      	movs	r3, #45	@ 0x2d
 8006b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b3a:	4a91      	ldr	r2, [pc, #580]	@ (8006d80 <_printf_float+0x2cc>)
 8006b3c:	4b91      	ldr	r3, [pc, #580]	@ (8006d84 <_printf_float+0x2d0>)
 8006b3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b42:	bf94      	ite	ls
 8006b44:	4690      	movls	r8, r2
 8006b46:	4698      	movhi	r8, r3
 8006b48:	2303      	movs	r3, #3
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	f02b 0304 	bic.w	r3, fp, #4
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	f04f 0900 	mov.w	r9, #0
 8006b56:	9700      	str	r7, [sp, #0]
 8006b58:	4633      	mov	r3, r6
 8006b5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f9d2 	bl	8006f08 <_printf_common>
 8006b64:	3001      	adds	r0, #1
 8006b66:	f040 808d 	bne.w	8006c84 <_printf_float+0x1d0>
 8006b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6e:	b00d      	add	sp, #52	@ 0x34
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7f9 ffd6 	bl	8000b2c <__aeabi_dcmpun>
 8006b80:	b140      	cbz	r0, 8006b94 <_printf_float+0xe0>
 8006b82:	464b      	mov	r3, r9
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bfbc      	itt	lt
 8006b88:	232d      	movlt	r3, #45	@ 0x2d
 8006b8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d88 <_printf_float+0x2d4>)
 8006b90:	4b7e      	ldr	r3, [pc, #504]	@ (8006d8c <_printf_float+0x2d8>)
 8006b92:	e7d4      	b.n	8006b3e <_printf_float+0x8a>
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b9a:	9206      	str	r2, [sp, #24]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	d13b      	bne.n	8006c18 <_printf_float+0x164>
 8006ba0:	2306      	movs	r3, #6
 8006ba2:	6063      	str	r3, [r4, #4]
 8006ba4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bb4:	ab09      	add	r3, sp, #36	@ 0x24
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	6861      	ldr	r1, [r4, #4]
 8006bba:	ec49 8b10 	vmov	d0, r8, r9
 8006bbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff fed6 	bl	8006974 <__cvt>
 8006bc8:	9b06      	ldr	r3, [sp, #24]
 8006bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bcc:	2b47      	cmp	r3, #71	@ 0x47
 8006bce:	4680      	mov	r8, r0
 8006bd0:	d129      	bne.n	8006c26 <_printf_float+0x172>
 8006bd2:	1cc8      	adds	r0, r1, #3
 8006bd4:	db02      	blt.n	8006bdc <_printf_float+0x128>
 8006bd6:	6863      	ldr	r3, [r4, #4]
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	dd41      	ble.n	8006c60 <_printf_float+0x1ac>
 8006bdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006be0:	fa5f fa8a 	uxtb.w	sl, sl
 8006be4:	3901      	subs	r1, #1
 8006be6:	4652      	mov	r2, sl
 8006be8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006bec:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bee:	f7ff ff26 	bl	8006a3e <__exponent>
 8006bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bf4:	1813      	adds	r3, r2, r0
 8006bf6:	2a01      	cmp	r2, #1
 8006bf8:	4681      	mov	r9, r0
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	dc02      	bgt.n	8006c04 <_printf_float+0x150>
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	07d2      	lsls	r2, r2, #31
 8006c02:	d501      	bpl.n	8006c08 <_printf_float+0x154>
 8006c04:	3301      	adds	r3, #1
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0a2      	beq.n	8006b56 <_printf_float+0xa2>
 8006c10:	232d      	movs	r3, #45	@ 0x2d
 8006c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c16:	e79e      	b.n	8006b56 <_printf_float+0xa2>
 8006c18:	9a06      	ldr	r2, [sp, #24]
 8006c1a:	2a47      	cmp	r2, #71	@ 0x47
 8006c1c:	d1c2      	bne.n	8006ba4 <_printf_float+0xf0>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1c0      	bne.n	8006ba4 <_printf_float+0xf0>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e7bd      	b.n	8006ba2 <_printf_float+0xee>
 8006c26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c2a:	d9db      	bls.n	8006be4 <_printf_float+0x130>
 8006c2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c30:	d118      	bne.n	8006c64 <_printf_float+0x1b0>
 8006c32:	2900      	cmp	r1, #0
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	dd0b      	ble.n	8006c50 <_printf_float+0x19c>
 8006c38:	6121      	str	r1, [r4, #16]
 8006c3a:	b913      	cbnz	r3, 8006c42 <_printf_float+0x18e>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	07d0      	lsls	r0, r2, #31
 8006c40:	d502      	bpl.n	8006c48 <_printf_float+0x194>
 8006c42:	3301      	adds	r3, #1
 8006c44:	440b      	add	r3, r1
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	e7db      	b.n	8006c08 <_printf_float+0x154>
 8006c50:	b913      	cbnz	r3, 8006c58 <_printf_float+0x1a4>
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	07d2      	lsls	r2, r2, #31
 8006c56:	d501      	bpl.n	8006c5c <_printf_float+0x1a8>
 8006c58:	3302      	adds	r3, #2
 8006c5a:	e7f4      	b.n	8006c46 <_printf_float+0x192>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7f2      	b.n	8006c46 <_printf_float+0x192>
 8006c60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c66:	4299      	cmp	r1, r3
 8006c68:	db05      	blt.n	8006c76 <_printf_float+0x1c2>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	6121      	str	r1, [r4, #16]
 8006c6e:	07d8      	lsls	r0, r3, #31
 8006c70:	d5ea      	bpl.n	8006c48 <_printf_float+0x194>
 8006c72:	1c4b      	adds	r3, r1, #1
 8006c74:	e7e7      	b.n	8006c46 <_printf_float+0x192>
 8006c76:	2900      	cmp	r1, #0
 8006c78:	bfd4      	ite	le
 8006c7a:	f1c1 0202 	rsble	r2, r1, #2
 8006c7e:	2201      	movgt	r2, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	e7e0      	b.n	8006c46 <_printf_float+0x192>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	055a      	lsls	r2, r3, #21
 8006c88:	d407      	bmi.n	8006c9a <_printf_float+0x1e6>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	d12b      	bne.n	8006cf0 <_printf_float+0x23c>
 8006c98:	e767      	b.n	8006b6a <_printf_float+0xb6>
 8006c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c9e:	f240 80dd 	bls.w	8006e5c <_printf_float+0x3a8>
 8006ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f7f9 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d033      	beq.n	8006d1a <_printf_float+0x266>
 8006cb2:	4a37      	ldr	r2, [pc, #220]	@ (8006d90 <_printf_float+0x2dc>)
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f af54 	beq.w	8006b6a <_printf_float+0xb6>
 8006cc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cc6:	4543      	cmp	r3, r8
 8006cc8:	db02      	blt.n	8006cd0 <_printf_float+0x21c>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	07d8      	lsls	r0, r3, #31
 8006cce:	d50f      	bpl.n	8006cf0 <_printf_float+0x23c>
 8006cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f af45 	beq.w	8006b6a <_printf_float+0xb6>
 8006ce0:	f04f 0900 	mov.w	r9, #0
 8006ce4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ce8:	f104 0a1a 	add.w	sl, r4, #26
 8006cec:	45c8      	cmp	r8, r9
 8006cee:	dc09      	bgt.n	8006d04 <_printf_float+0x250>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	079b      	lsls	r3, r3, #30
 8006cf4:	f100 8103 	bmi.w	8006efe <_printf_float+0x44a>
 8006cf8:	68e0      	ldr	r0, [r4, #12]
 8006cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	bfb8      	it	lt
 8006d00:	4618      	movlt	r0, r3
 8006d02:	e734      	b.n	8006b6e <_printf_float+0xba>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4652      	mov	r2, sl
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	47b8      	blx	r7
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f43f af2b 	beq.w	8006b6a <_printf_float+0xb6>
 8006d14:	f109 0901 	add.w	r9, r9, #1
 8006d18:	e7e8      	b.n	8006cec <_printf_float+0x238>
 8006d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dc39      	bgt.n	8006d94 <_printf_float+0x2e0>
 8006d20:	4a1b      	ldr	r2, [pc, #108]	@ (8006d90 <_printf_float+0x2dc>)
 8006d22:	2301      	movs	r3, #1
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b8      	blx	r7
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f43f af1d 	beq.w	8006b6a <_printf_float+0xb6>
 8006d30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d34:	ea59 0303 	orrs.w	r3, r9, r3
 8006d38:	d102      	bne.n	8006d40 <_printf_float+0x28c>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07d9      	lsls	r1, r3, #31
 8006d3e:	d5d7      	bpl.n	8006cf0 <_printf_float+0x23c>
 8006d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af0d 	beq.w	8006b6a <_printf_float+0xb6>
 8006d50:	f04f 0a00 	mov.w	sl, #0
 8006d54:	f104 0b1a 	add.w	fp, r4, #26
 8006d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5a:	425b      	negs	r3, r3
 8006d5c:	4553      	cmp	r3, sl
 8006d5e:	dc01      	bgt.n	8006d64 <_printf_float+0x2b0>
 8006d60:	464b      	mov	r3, r9
 8006d62:	e793      	b.n	8006c8c <_printf_float+0x1d8>
 8006d64:	2301      	movs	r3, #1
 8006d66:	465a      	mov	r2, fp
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f aefb 	beq.w	8006b6a <_printf_float+0xb6>
 8006d74:	f10a 0a01 	add.w	sl, sl, #1
 8006d78:	e7ee      	b.n	8006d58 <_printf_float+0x2a4>
 8006d7a:	bf00      	nop
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	08009650 	.word	0x08009650
 8006d84:	08009654 	.word	0x08009654
 8006d88:	08009658 	.word	0x08009658
 8006d8c:	0800965c 	.word	0x0800965c
 8006d90:	08009660 	.word	0x08009660
 8006d94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d9a:	4553      	cmp	r3, sl
 8006d9c:	bfa8      	it	ge
 8006d9e:	4653      	movge	r3, sl
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	4699      	mov	r9, r3
 8006da4:	dc36      	bgt.n	8006e14 <_printf_float+0x360>
 8006da6:	f04f 0b00 	mov.w	fp, #0
 8006daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dae:	f104 021a 	add.w	r2, r4, #26
 8006db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006db4:	9306      	str	r3, [sp, #24]
 8006db6:	eba3 0309 	sub.w	r3, r3, r9
 8006dba:	455b      	cmp	r3, fp
 8006dbc:	dc31      	bgt.n	8006e22 <_printf_float+0x36e>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc0:	459a      	cmp	sl, r3
 8006dc2:	dc3a      	bgt.n	8006e3a <_printf_float+0x386>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d437      	bmi.n	8006e3a <_printf_float+0x386>
 8006dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dcc:	ebaa 0903 	sub.w	r9, sl, r3
 8006dd0:	9b06      	ldr	r3, [sp, #24]
 8006dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8006dd6:	4599      	cmp	r9, r3
 8006dd8:	bfa8      	it	ge
 8006dda:	4699      	movge	r9, r3
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	dc33      	bgt.n	8006e4a <_printf_float+0x396>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dea:	f104 0b1a 	add.w	fp, r4, #26
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	ebaa 0303 	sub.w	r3, sl, r3
 8006df4:	eba3 0309 	sub.w	r3, r3, r9
 8006df8:	4543      	cmp	r3, r8
 8006dfa:	f77f af79 	ble.w	8006cf0 <_printf_float+0x23c>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	465a      	mov	r2, fp
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f aeae 	beq.w	8006b6a <_printf_float+0xb6>
 8006e0e:	f108 0801 	add.w	r8, r8, #1
 8006e12:	e7ec      	b.n	8006dee <_printf_float+0x33a>
 8006e14:	4642      	mov	r2, r8
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d1c2      	bne.n	8006da6 <_printf_float+0x2f2>
 8006e20:	e6a3      	b.n	8006b6a <_printf_float+0xb6>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	9206      	str	r2, [sp, #24]
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f ae9c 	beq.w	8006b6a <_printf_float+0xb6>
 8006e32:	9a06      	ldr	r2, [sp, #24]
 8006e34:	f10b 0b01 	add.w	fp, fp, #1
 8006e38:	e7bb      	b.n	8006db2 <_printf_float+0x2fe>
 8006e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	d1c0      	bne.n	8006dca <_printf_float+0x316>
 8006e48:	e68f      	b.n	8006b6a <_printf_float+0xb6>
 8006e4a:	9a06      	ldr	r2, [sp, #24]
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	4442      	add	r2, r8
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	d1c3      	bne.n	8006de2 <_printf_float+0x32e>
 8006e5a:	e686      	b.n	8006b6a <_printf_float+0xb6>
 8006e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e60:	f1ba 0f01 	cmp.w	sl, #1
 8006e64:	dc01      	bgt.n	8006e6a <_printf_float+0x3b6>
 8006e66:	07db      	lsls	r3, r3, #31
 8006e68:	d536      	bpl.n	8006ed8 <_printf_float+0x424>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f ae78 	beq.w	8006b6a <_printf_float+0xb6>
 8006e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae70 	beq.w	8006b6a <_printf_float+0xb6>
 8006e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e96:	f7f9 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e9a:	b9c0      	cbnz	r0, 8006ece <_printf_float+0x41a>
 8006e9c:	4653      	mov	r3, sl
 8006e9e:	f108 0201 	add.w	r2, r8, #1
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d10c      	bne.n	8006ec6 <_printf_float+0x412>
 8006eac:	e65d      	b.n	8006b6a <_printf_float+0xb6>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	465a      	mov	r2, fp
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f ae56 	beq.w	8006b6a <_printf_float+0xb6>
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	45d0      	cmp	r8, sl
 8006ec4:	dbf3      	blt.n	8006eae <_printf_float+0x3fa>
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ecc:	e6df      	b.n	8006c8e <_printf_float+0x1da>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	f104 0b1a 	add.w	fp, r4, #26
 8006ed6:	e7f4      	b.n	8006ec2 <_printf_float+0x40e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4642      	mov	r2, r8
 8006edc:	e7e1      	b.n	8006ea2 <_printf_float+0x3ee>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	464a      	mov	r2, r9
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae3e 	beq.w	8006b6a <_printf_float+0xb6>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ef6:	1a5b      	subs	r3, r3, r1
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	dcf0      	bgt.n	8006ede <_printf_float+0x42a>
 8006efc:	e6fc      	b.n	8006cf8 <_printf_float+0x244>
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	f104 0919 	add.w	r9, r4, #25
 8006f06:	e7f4      	b.n	8006ef2 <_printf_float+0x43e>

08006f08 <_printf_common>:
 8006f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	4698      	mov	r8, r3
 8006f10:	688a      	ldr	r2, [r1, #8]
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	bfb8      	it	lt
 8006f1c:	4613      	movlt	r3, r2
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f24:	4607      	mov	r7, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	b10a      	cbz	r2, 8006f2e <_printf_common+0x26>
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	0699      	lsls	r1, r3, #26
 8006f32:	bf42      	ittt	mi
 8006f34:	6833      	ldrmi	r3, [r6, #0]
 8006f36:	3302      	addmi	r3, #2
 8006f38:	6033      	strmi	r3, [r6, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	f015 0506 	ands.w	r5, r5, #6
 8006f40:	d106      	bne.n	8006f50 <_printf_common+0x48>
 8006f42:	f104 0a19 	add.w	sl, r4, #25
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	6832      	ldr	r2, [r6, #0]
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dc26      	bgt.n	8006f9e <_printf_common+0x96>
 8006f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f54:	6822      	ldr	r2, [r4, #0]
 8006f56:	3b00      	subs	r3, #0
 8006f58:	bf18      	it	ne
 8006f5a:	2301      	movne	r3, #1
 8006f5c:	0692      	lsls	r2, r2, #26
 8006f5e:	d42b      	bmi.n	8006fb8 <_printf_common+0xb0>
 8006f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f64:	4641      	mov	r1, r8
 8006f66:	4638      	mov	r0, r7
 8006f68:	47c8      	blx	r9
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d01e      	beq.n	8006fac <_printf_common+0xa4>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	6922      	ldr	r2, [r4, #16]
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	bf02      	ittt	eq
 8006f7a:	68e5      	ldreq	r5, [r4, #12]
 8006f7c:	6833      	ldreq	r3, [r6, #0]
 8006f7e:	1aed      	subeq	r5, r5, r3
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	bf0c      	ite	eq
 8006f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f88:	2500      	movne	r5, #0
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	bfc4      	itt	gt
 8006f8e:	1a9b      	subgt	r3, r3, r2
 8006f90:	18ed      	addgt	r5, r5, r3
 8006f92:	2600      	movs	r6, #0
 8006f94:	341a      	adds	r4, #26
 8006f96:	42b5      	cmp	r5, r6
 8006f98:	d11a      	bne.n	8006fd0 <_printf_common+0xc8>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e008      	b.n	8006fb0 <_printf_common+0xa8>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	47c8      	blx	r9
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d103      	bne.n	8006fb4 <_printf_common+0xac>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	e7c6      	b.n	8006f46 <_printf_common+0x3e>
 8006fb8:	18e1      	adds	r1, r4, r3
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	2030      	movs	r0, #48	@ 0x30
 8006fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fc2:	4422      	add	r2, r4
 8006fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fcc:	3302      	adds	r3, #2
 8006fce:	e7c7      	b.n	8006f60 <_printf_common+0x58>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	47c8      	blx	r9
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d0e6      	beq.n	8006fac <_printf_common+0xa4>
 8006fde:	3601      	adds	r6, #1
 8006fe0:	e7d9      	b.n	8006f96 <_printf_common+0x8e>
	...

08006fe4 <_printf_i>:
 8006fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	7e0f      	ldrb	r7, [r1, #24]
 8006fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fec:	2f78      	cmp	r7, #120	@ 0x78
 8006fee:	4691      	mov	r9, r2
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	469a      	mov	sl, r3
 8006ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ffa:	d807      	bhi.n	800700c <_printf_i+0x28>
 8006ffc:	2f62      	cmp	r7, #98	@ 0x62
 8006ffe:	d80a      	bhi.n	8007016 <_printf_i+0x32>
 8007000:	2f00      	cmp	r7, #0
 8007002:	f000 80d2 	beq.w	80071aa <_printf_i+0x1c6>
 8007006:	2f58      	cmp	r7, #88	@ 0x58
 8007008:	f000 80b9 	beq.w	800717e <_printf_i+0x19a>
 800700c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007014:	e03a      	b.n	800708c <_printf_i+0xa8>
 8007016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800701a:	2b15      	cmp	r3, #21
 800701c:	d8f6      	bhi.n	800700c <_printf_i+0x28>
 800701e:	a101      	add	r1, pc, #4	@ (adr r1, 8007024 <_printf_i+0x40>)
 8007020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007024:	0800707d 	.word	0x0800707d
 8007028:	08007091 	.word	0x08007091
 800702c:	0800700d 	.word	0x0800700d
 8007030:	0800700d 	.word	0x0800700d
 8007034:	0800700d 	.word	0x0800700d
 8007038:	0800700d 	.word	0x0800700d
 800703c:	08007091 	.word	0x08007091
 8007040:	0800700d 	.word	0x0800700d
 8007044:	0800700d 	.word	0x0800700d
 8007048:	0800700d 	.word	0x0800700d
 800704c:	0800700d 	.word	0x0800700d
 8007050:	08007191 	.word	0x08007191
 8007054:	080070bb 	.word	0x080070bb
 8007058:	0800714b 	.word	0x0800714b
 800705c:	0800700d 	.word	0x0800700d
 8007060:	0800700d 	.word	0x0800700d
 8007064:	080071b3 	.word	0x080071b3
 8007068:	0800700d 	.word	0x0800700d
 800706c:	080070bb 	.word	0x080070bb
 8007070:	0800700d 	.word	0x0800700d
 8007074:	0800700d 	.word	0x0800700d
 8007078:	08007153 	.word	0x08007153
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6032      	str	r2, [r6, #0]
 8007084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800708c:	2301      	movs	r3, #1
 800708e:	e09d      	b.n	80071cc <_printf_i+0x1e8>
 8007090:	6833      	ldr	r3, [r6, #0]
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	1d19      	adds	r1, r3, #4
 8007096:	6031      	str	r1, [r6, #0]
 8007098:	0606      	lsls	r6, r0, #24
 800709a:	d501      	bpl.n	80070a0 <_printf_i+0xbc>
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	e003      	b.n	80070a8 <_printf_i+0xc4>
 80070a0:	0645      	lsls	r5, r0, #25
 80070a2:	d5fb      	bpl.n	800709c <_printf_i+0xb8>
 80070a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	da03      	bge.n	80070b4 <_printf_i+0xd0>
 80070ac:	232d      	movs	r3, #45	@ 0x2d
 80070ae:	426d      	negs	r5, r5
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b4:	4859      	ldr	r0, [pc, #356]	@ (800721c <_printf_i+0x238>)
 80070b6:	230a      	movs	r3, #10
 80070b8:	e011      	b.n	80070de <_printf_i+0xfa>
 80070ba:	6821      	ldr	r1, [r4, #0]
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	0608      	lsls	r0, r1, #24
 80070c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80070c4:	d402      	bmi.n	80070cc <_printf_i+0xe8>
 80070c6:	0649      	lsls	r1, r1, #25
 80070c8:	bf48      	it	mi
 80070ca:	b2ad      	uxthmi	r5, r5
 80070cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80070ce:	4853      	ldr	r0, [pc, #332]	@ (800721c <_printf_i+0x238>)
 80070d0:	6033      	str	r3, [r6, #0]
 80070d2:	bf14      	ite	ne
 80070d4:	230a      	movne	r3, #10
 80070d6:	2308      	moveq	r3, #8
 80070d8:	2100      	movs	r1, #0
 80070da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070de:	6866      	ldr	r6, [r4, #4]
 80070e0:	60a6      	str	r6, [r4, #8]
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	bfa2      	ittt	ge
 80070e6:	6821      	ldrge	r1, [r4, #0]
 80070e8:	f021 0104 	bicge.w	r1, r1, #4
 80070ec:	6021      	strge	r1, [r4, #0]
 80070ee:	b90d      	cbnz	r5, 80070f4 <_printf_i+0x110>
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	d04b      	beq.n	800718c <_printf_i+0x1a8>
 80070f4:	4616      	mov	r6, r2
 80070f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070fa:	fb03 5711 	mls	r7, r3, r1, r5
 80070fe:	5dc7      	ldrb	r7, [r0, r7]
 8007100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007104:	462f      	mov	r7, r5
 8007106:	42bb      	cmp	r3, r7
 8007108:	460d      	mov	r5, r1
 800710a:	d9f4      	bls.n	80070f6 <_printf_i+0x112>
 800710c:	2b08      	cmp	r3, #8
 800710e:	d10b      	bne.n	8007128 <_printf_i+0x144>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	07df      	lsls	r7, r3, #31
 8007114:	d508      	bpl.n	8007128 <_printf_i+0x144>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	4299      	cmp	r1, r3
 800711c:	bfde      	ittt	le
 800711e:	2330      	movle	r3, #48	@ 0x30
 8007120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007128:	1b92      	subs	r2, r2, r6
 800712a:	6122      	str	r2, [r4, #16]
 800712c:	f8cd a000 	str.w	sl, [sp]
 8007130:	464b      	mov	r3, r9
 8007132:	aa03      	add	r2, sp, #12
 8007134:	4621      	mov	r1, r4
 8007136:	4640      	mov	r0, r8
 8007138:	f7ff fee6 	bl	8006f08 <_printf_common>
 800713c:	3001      	adds	r0, #1
 800713e:	d14a      	bne.n	80071d6 <_printf_i+0x1f2>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	b004      	add	sp, #16
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	4833      	ldr	r0, [pc, #204]	@ (8007220 <_printf_i+0x23c>)
 8007154:	2778      	movs	r7, #120	@ 0x78
 8007156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6831      	ldr	r1, [r6, #0]
 800715e:	061f      	lsls	r7, r3, #24
 8007160:	f851 5b04 	ldr.w	r5, [r1], #4
 8007164:	d402      	bmi.n	800716c <_printf_i+0x188>
 8007166:	065f      	lsls	r7, r3, #25
 8007168:	bf48      	it	mi
 800716a:	b2ad      	uxthmi	r5, r5
 800716c:	6031      	str	r1, [r6, #0]
 800716e:	07d9      	lsls	r1, r3, #31
 8007170:	bf44      	itt	mi
 8007172:	f043 0320 	orrmi.w	r3, r3, #32
 8007176:	6023      	strmi	r3, [r4, #0]
 8007178:	b11d      	cbz	r5, 8007182 <_printf_i+0x19e>
 800717a:	2310      	movs	r3, #16
 800717c:	e7ac      	b.n	80070d8 <_printf_i+0xf4>
 800717e:	4827      	ldr	r0, [pc, #156]	@ (800721c <_printf_i+0x238>)
 8007180:	e7e9      	b.n	8007156 <_printf_i+0x172>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	f023 0320 	bic.w	r3, r3, #32
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	e7f6      	b.n	800717a <_printf_i+0x196>
 800718c:	4616      	mov	r6, r2
 800718e:	e7bd      	b.n	800710c <_printf_i+0x128>
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	6961      	ldr	r1, [r4, #20]
 8007196:	1d18      	adds	r0, r3, #4
 8007198:	6030      	str	r0, [r6, #0]
 800719a:	062e      	lsls	r6, r5, #24
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0x1c0>
 80071a0:	6019      	str	r1, [r3, #0]
 80071a2:	e002      	b.n	80071aa <_printf_i+0x1c6>
 80071a4:	0668      	lsls	r0, r5, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0x1bc>
 80071a8:	8019      	strh	r1, [r3, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	4616      	mov	r6, r2
 80071b0:	e7bc      	b.n	800712c <_printf_i+0x148>
 80071b2:	6833      	ldr	r3, [r6, #0]
 80071b4:	1d1a      	adds	r2, r3, #4
 80071b6:	6032      	str	r2, [r6, #0]
 80071b8:	681e      	ldr	r6, [r3, #0]
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	2100      	movs	r1, #0
 80071be:	4630      	mov	r0, r6
 80071c0:	f7f9 f806 	bl	80001d0 <memchr>
 80071c4:	b108      	cbz	r0, 80071ca <_printf_i+0x1e6>
 80071c6:	1b80      	subs	r0, r0, r6
 80071c8:	6060      	str	r0, [r4, #4]
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	2300      	movs	r3, #0
 80071d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d4:	e7aa      	b.n	800712c <_printf_i+0x148>
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	4632      	mov	r2, r6
 80071da:	4649      	mov	r1, r9
 80071dc:	4640      	mov	r0, r8
 80071de:	47d0      	blx	sl
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0ad      	beq.n	8007140 <_printf_i+0x15c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	079b      	lsls	r3, r3, #30
 80071e8:	d413      	bmi.n	8007212 <_printf_i+0x22e>
 80071ea:	68e0      	ldr	r0, [r4, #12]
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	4298      	cmp	r0, r3
 80071f0:	bfb8      	it	lt
 80071f2:	4618      	movlt	r0, r3
 80071f4:	e7a6      	b.n	8007144 <_printf_i+0x160>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4632      	mov	r2, r6
 80071fa:	4649      	mov	r1, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	47d0      	blx	sl
 8007200:	3001      	adds	r0, #1
 8007202:	d09d      	beq.n	8007140 <_printf_i+0x15c>
 8007204:	3501      	adds	r5, #1
 8007206:	68e3      	ldr	r3, [r4, #12]
 8007208:	9903      	ldr	r1, [sp, #12]
 800720a:	1a5b      	subs	r3, r3, r1
 800720c:	42ab      	cmp	r3, r5
 800720e:	dcf2      	bgt.n	80071f6 <_printf_i+0x212>
 8007210:	e7eb      	b.n	80071ea <_printf_i+0x206>
 8007212:	2500      	movs	r5, #0
 8007214:	f104 0619 	add.w	r6, r4, #25
 8007218:	e7f5      	b.n	8007206 <_printf_i+0x222>
 800721a:	bf00      	nop
 800721c:	08009662 	.word	0x08009662
 8007220:	08009673 	.word	0x08009673

08007224 <std>:
 8007224:	2300      	movs	r3, #0
 8007226:	b510      	push	{r4, lr}
 8007228:	4604      	mov	r4, r0
 800722a:	e9c0 3300 	strd	r3, r3, [r0]
 800722e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007232:	6083      	str	r3, [r0, #8]
 8007234:	8181      	strh	r1, [r0, #12]
 8007236:	6643      	str	r3, [r0, #100]	@ 0x64
 8007238:	81c2      	strh	r2, [r0, #14]
 800723a:	6183      	str	r3, [r0, #24]
 800723c:	4619      	mov	r1, r3
 800723e:	2208      	movs	r2, #8
 8007240:	305c      	adds	r0, #92	@ 0x5c
 8007242:	f000 f93a 	bl	80074ba <memset>
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <std+0x58>)
 8007248:	6263      	str	r3, [r4, #36]	@ 0x24
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <std+0x5c>)
 800724c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <std+0x60>)
 8007250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007252:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <std+0x64>)
 8007254:	6323      	str	r3, [r4, #48]	@ 0x30
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <std+0x68>)
 8007258:	6224      	str	r4, [r4, #32]
 800725a:	429c      	cmp	r4, r3
 800725c:	d006      	beq.n	800726c <std+0x48>
 800725e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007262:	4294      	cmp	r4, r2
 8007264:	d002      	beq.n	800726c <std+0x48>
 8007266:	33d0      	adds	r3, #208	@ 0xd0
 8007268:	429c      	cmp	r4, r3
 800726a:	d105      	bne.n	8007278 <std+0x54>
 800726c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007274:	f000 b9ae 	b.w	80075d4 <__retarget_lock_init_recursive>
 8007278:	bd10      	pop	{r4, pc}
 800727a:	bf00      	nop
 800727c:	08007435 	.word	0x08007435
 8007280:	08007457 	.word	0x08007457
 8007284:	0800748f 	.word	0x0800748f
 8007288:	080074b3 	.word	0x080074b3
 800728c:	20000658 	.word	0x20000658

08007290 <stdio_exit_handler>:
 8007290:	4a02      	ldr	r2, [pc, #8]	@ (800729c <stdio_exit_handler+0xc>)
 8007292:	4903      	ldr	r1, [pc, #12]	@ (80072a0 <stdio_exit_handler+0x10>)
 8007294:	4803      	ldr	r0, [pc, #12]	@ (80072a4 <stdio_exit_handler+0x14>)
 8007296:	f000 b869 	b.w	800736c <_fwalk_sglue>
 800729a:	bf00      	nop
 800729c:	20000018 	.word	0x20000018
 80072a0:	08009065 	.word	0x08009065
 80072a4:	20000028 	.word	0x20000028

080072a8 <cleanup_stdio>:
 80072a8:	6841      	ldr	r1, [r0, #4]
 80072aa:	4b0c      	ldr	r3, [pc, #48]	@ (80072dc <cleanup_stdio+0x34>)
 80072ac:	4299      	cmp	r1, r3
 80072ae:	b510      	push	{r4, lr}
 80072b0:	4604      	mov	r4, r0
 80072b2:	d001      	beq.n	80072b8 <cleanup_stdio+0x10>
 80072b4:	f001 fed6 	bl	8009064 <_fflush_r>
 80072b8:	68a1      	ldr	r1, [r4, #8]
 80072ba:	4b09      	ldr	r3, [pc, #36]	@ (80072e0 <cleanup_stdio+0x38>)
 80072bc:	4299      	cmp	r1, r3
 80072be:	d002      	beq.n	80072c6 <cleanup_stdio+0x1e>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f001 fecf 	bl	8009064 <_fflush_r>
 80072c6:	68e1      	ldr	r1, [r4, #12]
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <cleanup_stdio+0x3c>)
 80072ca:	4299      	cmp	r1, r3
 80072cc:	d004      	beq.n	80072d8 <cleanup_stdio+0x30>
 80072ce:	4620      	mov	r0, r4
 80072d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d4:	f001 bec6 	b.w	8009064 <_fflush_r>
 80072d8:	bd10      	pop	{r4, pc}
 80072da:	bf00      	nop
 80072dc:	20000658 	.word	0x20000658
 80072e0:	200006c0 	.word	0x200006c0
 80072e4:	20000728 	.word	0x20000728

080072e8 <global_stdio_init.part.0>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <global_stdio_init.part.0+0x30>)
 80072ec:	4c0b      	ldr	r4, [pc, #44]	@ (800731c <global_stdio_init.part.0+0x34>)
 80072ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007320 <global_stdio_init.part.0+0x38>)
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	4620      	mov	r0, r4
 80072f4:	2200      	movs	r2, #0
 80072f6:	2104      	movs	r1, #4
 80072f8:	f7ff ff94 	bl	8007224 <std>
 80072fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007300:	2201      	movs	r2, #1
 8007302:	2109      	movs	r1, #9
 8007304:	f7ff ff8e 	bl	8007224 <std>
 8007308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800730c:	2202      	movs	r2, #2
 800730e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007312:	2112      	movs	r1, #18
 8007314:	f7ff bf86 	b.w	8007224 <std>
 8007318:	20000790 	.word	0x20000790
 800731c:	20000658 	.word	0x20000658
 8007320:	08007291 	.word	0x08007291

08007324 <__sfp_lock_acquire>:
 8007324:	4801      	ldr	r0, [pc, #4]	@ (800732c <__sfp_lock_acquire+0x8>)
 8007326:	f000 b956 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 800732a:	bf00      	nop
 800732c:	20000799 	.word	0x20000799

08007330 <__sfp_lock_release>:
 8007330:	4801      	ldr	r0, [pc, #4]	@ (8007338 <__sfp_lock_release+0x8>)
 8007332:	f000 b951 	b.w	80075d8 <__retarget_lock_release_recursive>
 8007336:	bf00      	nop
 8007338:	20000799 	.word	0x20000799

0800733c <__sinit>:
 800733c:	b510      	push	{r4, lr}
 800733e:	4604      	mov	r4, r0
 8007340:	f7ff fff0 	bl	8007324 <__sfp_lock_acquire>
 8007344:	6a23      	ldr	r3, [r4, #32]
 8007346:	b11b      	cbz	r3, 8007350 <__sinit+0x14>
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f7ff bff0 	b.w	8007330 <__sfp_lock_release>
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <__sinit+0x28>)
 8007352:	6223      	str	r3, [r4, #32]
 8007354:	4b04      	ldr	r3, [pc, #16]	@ (8007368 <__sinit+0x2c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f5      	bne.n	8007348 <__sinit+0xc>
 800735c:	f7ff ffc4 	bl	80072e8 <global_stdio_init.part.0>
 8007360:	e7f2      	b.n	8007348 <__sinit+0xc>
 8007362:	bf00      	nop
 8007364:	080072a9 	.word	0x080072a9
 8007368:	20000790 	.word	0x20000790

0800736c <_fwalk_sglue>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4607      	mov	r7, r0
 8007372:	4688      	mov	r8, r1
 8007374:	4614      	mov	r4, r2
 8007376:	2600      	movs	r6, #0
 8007378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800737c:	f1b9 0901 	subs.w	r9, r9, #1
 8007380:	d505      	bpl.n	800738e <_fwalk_sglue+0x22>
 8007382:	6824      	ldr	r4, [r4, #0]
 8007384:	2c00      	cmp	r4, #0
 8007386:	d1f7      	bne.n	8007378 <_fwalk_sglue+0xc>
 8007388:	4630      	mov	r0, r6
 800738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d907      	bls.n	80073a4 <_fwalk_sglue+0x38>
 8007394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007398:	3301      	adds	r3, #1
 800739a:	d003      	beq.n	80073a4 <_fwalk_sglue+0x38>
 800739c:	4629      	mov	r1, r5
 800739e:	4638      	mov	r0, r7
 80073a0:	47c0      	blx	r8
 80073a2:	4306      	orrs	r6, r0
 80073a4:	3568      	adds	r5, #104	@ 0x68
 80073a6:	e7e9      	b.n	800737c <_fwalk_sglue+0x10>

080073a8 <iprintf>:
 80073a8:	b40f      	push	{r0, r1, r2, r3}
 80073aa:	b507      	push	{r0, r1, r2, lr}
 80073ac:	4906      	ldr	r1, [pc, #24]	@ (80073c8 <iprintf+0x20>)
 80073ae:	ab04      	add	r3, sp, #16
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	6881      	ldr	r1, [r0, #8]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f001 fcb7 	bl	8008d2c <_vfiprintf_r>
 80073be:	b003      	add	sp, #12
 80073c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c4:	b004      	add	sp, #16
 80073c6:	4770      	bx	lr
 80073c8:	20000024 	.word	0x20000024

080073cc <sniprintf>:
 80073cc:	b40c      	push	{r2, r3}
 80073ce:	b530      	push	{r4, r5, lr}
 80073d0:	4b17      	ldr	r3, [pc, #92]	@ (8007430 <sniprintf+0x64>)
 80073d2:	1e0c      	subs	r4, r1, #0
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	b09d      	sub	sp, #116	@ 0x74
 80073d8:	da08      	bge.n	80073ec <sniprintf+0x20>
 80073da:	238b      	movs	r3, #139	@ 0x8b
 80073dc:	602b      	str	r3, [r5, #0]
 80073de:	f04f 30ff 	mov.w	r0, #4294967295
 80073e2:	b01d      	add	sp, #116	@ 0x74
 80073e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e8:	b002      	add	sp, #8
 80073ea:	4770      	bx	lr
 80073ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073f4:	bf14      	ite	ne
 80073f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073fa:	4623      	moveq	r3, r4
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	9307      	str	r3, [sp, #28]
 8007400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	9006      	str	r0, [sp, #24]
 8007408:	f8ad 3016 	strh.w	r3, [sp, #22]
 800740c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800740e:	ab21      	add	r3, sp, #132	@ 0x84
 8007410:	a902      	add	r1, sp, #8
 8007412:	4628      	mov	r0, r5
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	f001 fb63 	bl	8008ae0 <_svfiprintf_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	bfbc      	itt	lt
 800741e:	238b      	movlt	r3, #139	@ 0x8b
 8007420:	602b      	strlt	r3, [r5, #0]
 8007422:	2c00      	cmp	r4, #0
 8007424:	d0dd      	beq.n	80073e2 <sniprintf+0x16>
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e7d9      	b.n	80073e2 <sniprintf+0x16>
 800742e:	bf00      	nop
 8007430:	20000024 	.word	0x20000024

08007434 <__sread>:
 8007434:	b510      	push	{r4, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	f000 f86c 	bl	8007518 <_read_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	bfab      	itete	ge
 8007444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007446:	89a3      	ldrhlt	r3, [r4, #12]
 8007448:	181b      	addge	r3, r3, r0
 800744a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800744e:	bfac      	ite	ge
 8007450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007452:	81a3      	strhlt	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__swrite>:
 8007456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	461f      	mov	r7, r3
 800745c:	898b      	ldrh	r3, [r1, #12]
 800745e:	05db      	lsls	r3, r3, #23
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	4616      	mov	r6, r2
 8007466:	d505      	bpl.n	8007474 <__swrite+0x1e>
 8007468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	f000 f840 	bl	80074f4 <_lseek_r>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	4632      	mov	r2, r6
 8007482:	463b      	mov	r3, r7
 8007484:	4628      	mov	r0, r5
 8007486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748a:	f000 b867 	b.w	800755c <_write_r>

0800748e <__sseek>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 f82d 	bl	80074f4 <_lseek_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	bf15      	itete	ne
 80074a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074aa:	81a3      	strheq	r3, [r4, #12]
 80074ac:	bf18      	it	ne
 80074ae:	81a3      	strhne	r3, [r4, #12]
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <__sclose>:
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 b80d 	b.w	80074d4 <_close_r>

080074ba <memset>:
 80074ba:	4402      	add	r2, r0
 80074bc:	4603      	mov	r3, r0
 80074be:	4293      	cmp	r3, r2
 80074c0:	d100      	bne.n	80074c4 <memset+0xa>
 80074c2:	4770      	bx	lr
 80074c4:	f803 1b01 	strb.w	r1, [r3], #1
 80074c8:	e7f9      	b.n	80074be <memset+0x4>
	...

080074cc <_localeconv_r>:
 80074cc:	4800      	ldr	r0, [pc, #0]	@ (80074d0 <_localeconv_r+0x4>)
 80074ce:	4770      	bx	lr
 80074d0:	20000164 	.word	0x20000164

080074d4 <_close_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d06      	ldr	r5, [pc, #24]	@ (80074f0 <_close_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7fa ff72 	bl	80023c8 <_close>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_close_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_close_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000794 	.word	0x20000794

080074f4 <_lseek_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	@ (8007514 <_lseek_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa ff87 	bl	8002416 <_lseek>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_lseek_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_lseek_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20000794 	.word	0x20000794

08007518 <_read_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	@ (8007538 <_read_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fa ff15 	bl	8002356 <_read>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_read_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_read_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000794 	.word	0x20000794

0800753c <_sbrk_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d06      	ldr	r5, [pc, #24]	@ (8007558 <_sbrk_r+0x1c>)
 8007540:	2300      	movs	r3, #0
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	f7fa ff72 	bl	8002430 <_sbrk>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_sbrk_r+0x1a>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_sbrk_r+0x1a>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	20000794 	.word	0x20000794

0800755c <_write_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	@ (800757c <_write_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7fa ff10 	bl	8002390 <_write>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_write_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_write_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000794 	.word	0x20000794

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	@ (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000024 	.word	0x20000024

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	@ (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	@ (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	@ (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	@ (80075d0 <__libc_init_array+0x44>)
 80075a0:	f001 ffa0 	bl	80094e4 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	080099c8 	.word	0x080099c8
 80075c8:	080099c8 	.word	0x080099c8
 80075cc:	080099c8 	.word	0x080099c8
 80075d0:	080099cc 	.word	0x080099cc

080075d4 <__retarget_lock_init_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_acquire_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <__retarget_lock_release_recursive>:
 80075d8:	4770      	bx	lr

080075da <memcpy>:
 80075da:	440a      	add	r2, r1
 80075dc:	4291      	cmp	r1, r2
 80075de:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xc>
 80075e4:	4770      	bx	lr
 80075e6:	b510      	push	{r4, lr}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f0:	4291      	cmp	r1, r2
 80075f2:	d1f9      	bne.n	80075e8 <memcpy+0xe>
 80075f4:	bd10      	pop	{r4, pc}

080075f6 <quorem>:
 80075f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	6903      	ldr	r3, [r0, #16]
 80075fc:	690c      	ldr	r4, [r1, #16]
 80075fe:	42a3      	cmp	r3, r4
 8007600:	4607      	mov	r7, r0
 8007602:	db7e      	blt.n	8007702 <quorem+0x10c>
 8007604:	3c01      	subs	r4, #1
 8007606:	f101 0814 	add.w	r8, r1, #20
 800760a:	00a3      	lsls	r3, r4, #2
 800760c:	f100 0514 	add.w	r5, r0, #20
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800761c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007620:	3301      	adds	r3, #1
 8007622:	429a      	cmp	r2, r3
 8007624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007628:	fbb2 f6f3 	udiv	r6, r2, r3
 800762c:	d32e      	bcc.n	800768c <quorem+0x96>
 800762e:	f04f 0a00 	mov.w	sl, #0
 8007632:	46c4      	mov	ip, r8
 8007634:	46ae      	mov	lr, r5
 8007636:	46d3      	mov	fp, sl
 8007638:	f85c 3b04 	ldr.w	r3, [ip], #4
 800763c:	b298      	uxth	r0, r3
 800763e:	fb06 a000 	mla	r0, r6, r0, sl
 8007642:	0c02      	lsrs	r2, r0, #16
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	fb06 2303 	mla	r3, r6, r3, r2
 800764a:	f8de 2000 	ldr.w	r2, [lr]
 800764e:	b280      	uxth	r0, r0
 8007650:	b292      	uxth	r2, r2
 8007652:	1a12      	subs	r2, r2, r0
 8007654:	445a      	add	r2, fp
 8007656:	f8de 0000 	ldr.w	r0, [lr]
 800765a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800765e:	b29b      	uxth	r3, r3
 8007660:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007664:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007668:	b292      	uxth	r2, r2
 800766a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800766e:	45e1      	cmp	r9, ip
 8007670:	f84e 2b04 	str.w	r2, [lr], #4
 8007674:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007678:	d2de      	bcs.n	8007638 <quorem+0x42>
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	58eb      	ldr	r3, [r5, r3]
 800767e:	b92b      	cbnz	r3, 800768c <quorem+0x96>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	3b04      	subs	r3, #4
 8007684:	429d      	cmp	r5, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d32f      	bcc.n	80076ea <quorem+0xf4>
 800768a:	613c      	str	r4, [r7, #16]
 800768c:	4638      	mov	r0, r7
 800768e:	f001 f8c3 	bl	8008818 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	db25      	blt.n	80076e2 <quorem+0xec>
 8007696:	4629      	mov	r1, r5
 8007698:	2000      	movs	r0, #0
 800769a:	f858 2b04 	ldr.w	r2, [r8], #4
 800769e:	f8d1 c000 	ldr.w	ip, [r1]
 80076a2:	fa1f fe82 	uxth.w	lr, r2
 80076a6:	fa1f f38c 	uxth.w	r3, ip
 80076aa:	eba3 030e 	sub.w	r3, r3, lr
 80076ae:	4403      	add	r3, r0
 80076b0:	0c12      	lsrs	r2, r2, #16
 80076b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c0:	45c1      	cmp	r9, r8
 80076c2:	f841 3b04 	str.w	r3, [r1], #4
 80076c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076ca:	d2e6      	bcs.n	800769a <quorem+0xa4>
 80076cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d4:	b922      	cbnz	r2, 80076e0 <quorem+0xea>
 80076d6:	3b04      	subs	r3, #4
 80076d8:	429d      	cmp	r5, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	d30b      	bcc.n	80076f6 <quorem+0x100>
 80076de:	613c      	str	r4, [r7, #16]
 80076e0:	3601      	adds	r6, #1
 80076e2:	4630      	mov	r0, r6
 80076e4:	b003      	add	sp, #12
 80076e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1cb      	bne.n	800768a <quorem+0x94>
 80076f2:	3c01      	subs	r4, #1
 80076f4:	e7c6      	b.n	8007684 <quorem+0x8e>
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	d1ef      	bne.n	80076de <quorem+0xe8>
 80076fe:	3c01      	subs	r4, #1
 8007700:	e7ea      	b.n	80076d8 <quorem+0xe2>
 8007702:	2000      	movs	r0, #0
 8007704:	e7ee      	b.n	80076e4 <quorem+0xee>
	...

08007708 <_dtoa_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	69c7      	ldr	r7, [r0, #28]
 800770e:	b099      	sub	sp, #100	@ 0x64
 8007710:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007714:	ec55 4b10 	vmov	r4, r5, d0
 8007718:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800771a:	9109      	str	r1, [sp, #36]	@ 0x24
 800771c:	4683      	mov	fp, r0
 800771e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007720:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007722:	b97f      	cbnz	r7, 8007744 <_dtoa_r+0x3c>
 8007724:	2010      	movs	r0, #16
 8007726:	f7ff f86f 	bl	8006808 <malloc>
 800772a:	4602      	mov	r2, r0
 800772c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007730:	b920      	cbnz	r0, 800773c <_dtoa_r+0x34>
 8007732:	4ba7      	ldr	r3, [pc, #668]	@ (80079d0 <_dtoa_r+0x2c8>)
 8007734:	21ef      	movs	r1, #239	@ 0xef
 8007736:	48a7      	ldr	r0, [pc, #668]	@ (80079d4 <_dtoa_r+0x2cc>)
 8007738:	f001 fd6a 	bl	8009210 <__assert_func>
 800773c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007740:	6007      	str	r7, [r0, #0]
 8007742:	60c7      	str	r7, [r0, #12]
 8007744:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007748:	6819      	ldr	r1, [r3, #0]
 800774a:	b159      	cbz	r1, 8007764 <_dtoa_r+0x5c>
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	604a      	str	r2, [r1, #4]
 8007750:	2301      	movs	r3, #1
 8007752:	4093      	lsls	r3, r2
 8007754:	608b      	str	r3, [r1, #8]
 8007756:	4658      	mov	r0, fp
 8007758:	f000 fe24 	bl	80083a4 <_Bfree>
 800775c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	1e2b      	subs	r3, r5, #0
 8007766:	bfb9      	ittee	lt
 8007768:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800776c:	9303      	strlt	r3, [sp, #12]
 800776e:	2300      	movge	r3, #0
 8007770:	6033      	strge	r3, [r6, #0]
 8007772:	9f03      	ldr	r7, [sp, #12]
 8007774:	4b98      	ldr	r3, [pc, #608]	@ (80079d8 <_dtoa_r+0x2d0>)
 8007776:	bfbc      	itt	lt
 8007778:	2201      	movlt	r2, #1
 800777a:	6032      	strlt	r2, [r6, #0]
 800777c:	43bb      	bics	r3, r7
 800777e:	d112      	bne.n	80077a6 <_dtoa_r+0x9e>
 8007780:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007782:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800778c:	4323      	orrs	r3, r4
 800778e:	f000 854d 	beq.w	800822c <_dtoa_r+0xb24>
 8007792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007794:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80079ec <_dtoa_r+0x2e4>
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 854f 	beq.w	800823c <_dtoa_r+0xb34>
 800779e:	f10a 0303 	add.w	r3, sl, #3
 80077a2:	f000 bd49 	b.w	8008238 <_dtoa_r+0xb30>
 80077a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	ec51 0b17 	vmov	r0, r1, d7
 80077b0:	2300      	movs	r3, #0
 80077b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077b6:	f7f9 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ba:	4680      	mov	r8, r0
 80077bc:	b158      	cbz	r0, 80077d6 <_dtoa_r+0xce>
 80077be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077c0:	2301      	movs	r3, #1
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077c6:	b113      	cbz	r3, 80077ce <_dtoa_r+0xc6>
 80077c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077ca:	4b84      	ldr	r3, [pc, #528]	@ (80079dc <_dtoa_r+0x2d4>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079f0 <_dtoa_r+0x2e8>
 80077d2:	f000 bd33 	b.w	800823c <_dtoa_r+0xb34>
 80077d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077da:	aa16      	add	r2, sp, #88	@ 0x58
 80077dc:	a917      	add	r1, sp, #92	@ 0x5c
 80077de:	4658      	mov	r0, fp
 80077e0:	f001 f8ca 	bl	8008978 <__d2b>
 80077e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077e8:	4681      	mov	r9, r0
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	d077      	beq.n	80078de <_dtoa_r+0x1d6>
 80077ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007800:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007804:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007808:	4619      	mov	r1, r3
 800780a:	2200      	movs	r2, #0
 800780c:	4b74      	ldr	r3, [pc, #464]	@ (80079e0 <_dtoa_r+0x2d8>)
 800780e:	f7f8 fd3b 	bl	8000288 <__aeabi_dsub>
 8007812:	a369      	add	r3, pc, #420	@ (adr r3, 80079b8 <_dtoa_r+0x2b0>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 feee 	bl	80005f8 <__aeabi_dmul>
 800781c:	a368      	add	r3, pc, #416	@ (adr r3, 80079c0 <_dtoa_r+0x2b8>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f8 fd33 	bl	800028c <__adddf3>
 8007826:	4604      	mov	r4, r0
 8007828:	4630      	mov	r0, r6
 800782a:	460d      	mov	r5, r1
 800782c:	f7f8 fe7a 	bl	8000524 <__aeabi_i2d>
 8007830:	a365      	add	r3, pc, #404	@ (adr r3, 80079c8 <_dtoa_r+0x2c0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 fd23 	bl	800028c <__adddf3>
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	f7f9 f985 	bl	8000b58 <__aeabi_d2iz>
 800784e:	2200      	movs	r2, #0
 8007850:	4607      	mov	r7, r0
 8007852:	2300      	movs	r3, #0
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f9 f940 	bl	8000adc <__aeabi_dcmplt>
 800785c:	b140      	cbz	r0, 8007870 <_dtoa_r+0x168>
 800785e:	4638      	mov	r0, r7
 8007860:	f7f8 fe60 	bl	8000524 <__aeabi_i2d>
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f9 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800786c:	b900      	cbnz	r0, 8007870 <_dtoa_r+0x168>
 800786e:	3f01      	subs	r7, #1
 8007870:	2f16      	cmp	r7, #22
 8007872:	d851      	bhi.n	8007918 <_dtoa_r+0x210>
 8007874:	4b5b      	ldr	r3, [pc, #364]	@ (80079e4 <_dtoa_r+0x2dc>)
 8007876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007882:	f7f9 f92b 	bl	8000adc <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	d048      	beq.n	800791c <_dtoa_r+0x214>
 800788a:	3f01      	subs	r7, #1
 800788c:	2300      	movs	r3, #0
 800788e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007890:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007892:	1b9b      	subs	r3, r3, r6
 8007894:	1e5a      	subs	r2, r3, #1
 8007896:	bf44      	itt	mi
 8007898:	f1c3 0801 	rsbmi	r8, r3, #1
 800789c:	2300      	movmi	r3, #0
 800789e:	9208      	str	r2, [sp, #32]
 80078a0:	bf54      	ite	pl
 80078a2:	f04f 0800 	movpl.w	r8, #0
 80078a6:	9308      	strmi	r3, [sp, #32]
 80078a8:	2f00      	cmp	r7, #0
 80078aa:	db39      	blt.n	8007920 <_dtoa_r+0x218>
 80078ac:	9b08      	ldr	r3, [sp, #32]
 80078ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078b0:	443b      	add	r3, r7
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	2300      	movs	r3, #0
 80078b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	d864      	bhi.n	8007988 <_dtoa_r+0x280>
 80078be:	2b05      	cmp	r3, #5
 80078c0:	bfc4      	itt	gt
 80078c2:	3b04      	subgt	r3, #4
 80078c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c8:	f1a3 0302 	sub.w	r3, r3, #2
 80078cc:	bfcc      	ite	gt
 80078ce:	2400      	movgt	r4, #0
 80078d0:	2401      	movle	r4, #1
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d863      	bhi.n	800799e <_dtoa_r+0x296>
 80078d6:	e8df f003 	tbb	[pc, r3]
 80078da:	372a      	.short	0x372a
 80078dc:	5535      	.short	0x5535
 80078de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078e2:	441e      	add	r6, r3
 80078e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	bfc1      	itttt	gt
 80078ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078f0:	409f      	lslgt	r7, r3
 80078f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078fa:	bfd6      	itet	le
 80078fc:	f1c3 0320 	rsble	r3, r3, #32
 8007900:	ea47 0003 	orrgt.w	r0, r7, r3
 8007904:	fa04 f003 	lslle.w	r0, r4, r3
 8007908:	f7f8 fdfc 	bl	8000504 <__aeabi_ui2d>
 800790c:	2201      	movs	r2, #1
 800790e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007912:	3e01      	subs	r6, #1
 8007914:	9214      	str	r2, [sp, #80]	@ 0x50
 8007916:	e777      	b.n	8007808 <_dtoa_r+0x100>
 8007918:	2301      	movs	r3, #1
 800791a:	e7b8      	b.n	800788e <_dtoa_r+0x186>
 800791c:	9012      	str	r0, [sp, #72]	@ 0x48
 800791e:	e7b7      	b.n	8007890 <_dtoa_r+0x188>
 8007920:	427b      	negs	r3, r7
 8007922:	930a      	str	r3, [sp, #40]	@ 0x28
 8007924:	2300      	movs	r3, #0
 8007926:	eba8 0807 	sub.w	r8, r8, r7
 800792a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800792c:	e7c4      	b.n	80078b8 <_dtoa_r+0x1b0>
 800792e:	2300      	movs	r3, #0
 8007930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	dc35      	bgt.n	80079a4 <_dtoa_r+0x29c>
 8007938:	2301      	movs	r3, #1
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	9307      	str	r3, [sp, #28]
 800793e:	461a      	mov	r2, r3
 8007940:	920e      	str	r2, [sp, #56]	@ 0x38
 8007942:	e00b      	b.n	800795c <_dtoa_r+0x254>
 8007944:	2301      	movs	r3, #1
 8007946:	e7f3      	b.n	8007930 <_dtoa_r+0x228>
 8007948:	2300      	movs	r3, #0
 800794a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800794c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	2b01      	cmp	r3, #1
 8007956:	9307      	str	r3, [sp, #28]
 8007958:	bfb8      	it	lt
 800795a:	2301      	movlt	r3, #1
 800795c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007960:	2100      	movs	r1, #0
 8007962:	2204      	movs	r2, #4
 8007964:	f102 0514 	add.w	r5, r2, #20
 8007968:	429d      	cmp	r5, r3
 800796a:	d91f      	bls.n	80079ac <_dtoa_r+0x2a4>
 800796c:	6041      	str	r1, [r0, #4]
 800796e:	4658      	mov	r0, fp
 8007970:	f000 fcd8 	bl	8008324 <_Balloc>
 8007974:	4682      	mov	sl, r0
 8007976:	2800      	cmp	r0, #0
 8007978:	d13c      	bne.n	80079f4 <_dtoa_r+0x2ec>
 800797a:	4b1b      	ldr	r3, [pc, #108]	@ (80079e8 <_dtoa_r+0x2e0>)
 800797c:	4602      	mov	r2, r0
 800797e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007982:	e6d8      	b.n	8007736 <_dtoa_r+0x2e>
 8007984:	2301      	movs	r3, #1
 8007986:	e7e0      	b.n	800794a <_dtoa_r+0x242>
 8007988:	2401      	movs	r4, #1
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	@ 0x24
 800798e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	2200      	movs	r2, #0
 800799a:	2312      	movs	r3, #18
 800799c:	e7d0      	b.n	8007940 <_dtoa_r+0x238>
 800799e:	2301      	movs	r3, #1
 80079a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a2:	e7f5      	b.n	8007990 <_dtoa_r+0x288>
 80079a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	9307      	str	r3, [sp, #28]
 80079aa:	e7d7      	b.n	800795c <_dtoa_r+0x254>
 80079ac:	3101      	adds	r1, #1
 80079ae:	0052      	lsls	r2, r2, #1
 80079b0:	e7d8      	b.n	8007964 <_dtoa_r+0x25c>
 80079b2:	bf00      	nop
 80079b4:	f3af 8000 	nop.w
 80079b8:	636f4361 	.word	0x636f4361
 80079bc:	3fd287a7 	.word	0x3fd287a7
 80079c0:	8b60c8b3 	.word	0x8b60c8b3
 80079c4:	3fc68a28 	.word	0x3fc68a28
 80079c8:	509f79fb 	.word	0x509f79fb
 80079cc:	3fd34413 	.word	0x3fd34413
 80079d0:	08009691 	.word	0x08009691
 80079d4:	080096a8 	.word	0x080096a8
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	08009661 	.word	0x08009661
 80079e0:	3ff80000 	.word	0x3ff80000
 80079e4:	080097a0 	.word	0x080097a0
 80079e8:	08009700 	.word	0x08009700
 80079ec:	0800968d 	.word	0x0800968d
 80079f0:	08009660 	.word	0x08009660
 80079f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079f8:	6018      	str	r0, [r3, #0]
 80079fa:	9b07      	ldr	r3, [sp, #28]
 80079fc:	2b0e      	cmp	r3, #14
 80079fe:	f200 80a4 	bhi.w	8007b4a <_dtoa_r+0x442>
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	f000 80a1 	beq.w	8007b4a <_dtoa_r+0x442>
 8007a08:	2f00      	cmp	r7, #0
 8007a0a:	dd33      	ble.n	8007a74 <_dtoa_r+0x36c>
 8007a0c:	4bad      	ldr	r3, [pc, #692]	@ (8007cc4 <_dtoa_r+0x5bc>)
 8007a0e:	f007 020f 	and.w	r2, r7, #15
 8007a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a16:	ed93 7b00 	vldr	d7, [r3]
 8007a1a:	05f8      	lsls	r0, r7, #23
 8007a1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a24:	d516      	bpl.n	8007a54 <_dtoa_r+0x34c>
 8007a26:	4ba8      	ldr	r3, [pc, #672]	@ (8007cc8 <_dtoa_r+0x5c0>)
 8007a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a30:	f7f8 ff0c 	bl	800084c <__aeabi_ddiv>
 8007a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a38:	f004 040f 	and.w	r4, r4, #15
 8007a3c:	2603      	movs	r6, #3
 8007a3e:	4da2      	ldr	r5, [pc, #648]	@ (8007cc8 <_dtoa_r+0x5c0>)
 8007a40:	b954      	cbnz	r4, 8007a58 <_dtoa_r+0x350>
 8007a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4a:	f7f8 feff 	bl	800084c <__aeabi_ddiv>
 8007a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a52:	e028      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007a54:	2602      	movs	r6, #2
 8007a56:	e7f2      	b.n	8007a3e <_dtoa_r+0x336>
 8007a58:	07e1      	lsls	r1, r4, #31
 8007a5a:	d508      	bpl.n	8007a6e <_dtoa_r+0x366>
 8007a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a64:	f7f8 fdc8 	bl	80005f8 <__aeabi_dmul>
 8007a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	1064      	asrs	r4, r4, #1
 8007a70:	3508      	adds	r5, #8
 8007a72:	e7e5      	b.n	8007a40 <_dtoa_r+0x338>
 8007a74:	f000 80d2 	beq.w	8007c1c <_dtoa_r+0x514>
 8007a78:	427c      	negs	r4, r7
 8007a7a:	4b92      	ldr	r3, [pc, #584]	@ (8007cc4 <_dtoa_r+0x5bc>)
 8007a7c:	4d92      	ldr	r5, [pc, #584]	@ (8007cc8 <_dtoa_r+0x5c0>)
 8007a7e:	f004 020f 	and.w	r2, r4, #15
 8007a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a96:	1124      	asrs	r4, r4, #4
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2602      	movs	r6, #2
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	f040 80b2 	bne.w	8007c06 <_dtoa_r+0x4fe>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d3      	bne.n	8007a4e <_dtoa_r+0x346>
 8007aa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007aa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80b7 	beq.w	8007c20 <_dtoa_r+0x518>
 8007ab2:	4b86      	ldr	r3, [pc, #536]	@ (8007ccc <_dtoa_r+0x5c4>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f9 f80f 	bl	8000adc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f000 80ae 	beq.w	8007c20 <_dtoa_r+0x518>
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 80aa 	beq.w	8007c20 <_dtoa_r+0x518>
 8007acc:	9b00      	ldr	r3, [sp, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd37      	ble.n	8007b42 <_dtoa_r+0x43a>
 8007ad2:	1e7b      	subs	r3, r7, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4b7d      	ldr	r3, [pc, #500]	@ (8007cd0 <_dtoa_r+0x5c8>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	4629      	mov	r1, r5
 8007ade:	f7f8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8007ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae6:	9c00      	ldr	r4, [sp, #0]
 8007ae8:	3601      	adds	r6, #1
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	4b76      	ldr	r3, [pc, #472]	@ (8007cd4 <_dtoa_r+0x5cc>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f7f8 fbc6 	bl	800028c <__adddf3>
 8007b00:	4605      	mov	r5, r0
 8007b02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	f040 808d 	bne.w	8007c26 <_dtoa_r+0x51e>
 8007b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b10:	4b71      	ldr	r3, [pc, #452]	@ (8007cd8 <_dtoa_r+0x5d0>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	f7f8 fbb8 	bl	8000288 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b20:	462a      	mov	r2, r5
 8007b22:	4633      	mov	r3, r6
 8007b24:	f7f8 fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f040 828b 	bne.w	8008044 <_dtoa_r+0x93c>
 8007b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b32:	462a      	mov	r2, r5
 8007b34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b38:	f7f8 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 8128 	bne.w	8007d92 <_dtoa_r+0x68a>
 8007b42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f2c0 815a 	blt.w	8007e06 <_dtoa_r+0x6fe>
 8007b52:	2f0e      	cmp	r7, #14
 8007b54:	f300 8157 	bgt.w	8007e06 <_dtoa_r+0x6fe>
 8007b58:	4b5a      	ldr	r3, [pc, #360]	@ (8007cc4 <_dtoa_r+0x5bc>)
 8007b5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b5e:	ed93 7b00 	vldr	d7, [r3]
 8007b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	ed8d 7b00 	vstr	d7, [sp]
 8007b6a:	da03      	bge.n	8007b74 <_dtoa_r+0x46c>
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f340 8101 	ble.w	8007d76 <_dtoa_r+0x66e>
 8007b74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b78:	4656      	mov	r6, sl
 8007b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 fe63 	bl	800084c <__aeabi_ddiv>
 8007b86:	f7f8 ffe7 	bl	8000b58 <__aeabi_d2iz>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	f7f8 fcca 	bl	8000524 <__aeabi_i2d>
 8007b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b94:	f7f8 fd30 	bl	80005f8 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ba4:	f7f8 fb70 	bl	8000288 <__aeabi_dsub>
 8007ba8:	f806 4b01 	strb.w	r4, [r6], #1
 8007bac:	9d07      	ldr	r5, [sp, #28]
 8007bae:	eba6 040a 	sub.w	r4, r6, sl
 8007bb2:	42a5      	cmp	r5, r4
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	f040 8117 	bne.w	8007dea <_dtoa_r+0x6e2>
 8007bbc:	f7f8 fb66 	bl	800028c <__adddf3>
 8007bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	f7f8 ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f040 80f9 	bne.w	8007dc4 <_dtoa_r+0x6bc>
 8007bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bde:	b118      	cbz	r0, 8007be8 <_dtoa_r+0x4e0>
 8007be0:	f018 0f01 	tst.w	r8, #1
 8007be4:	f040 80ee 	bne.w	8007dc4 <_dtoa_r+0x6bc>
 8007be8:	4649      	mov	r1, r9
 8007bea:	4658      	mov	r0, fp
 8007bec:	f000 fbda 	bl	80083a4 <_Bfree>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	7033      	strb	r3, [r6, #0]
 8007bf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bf6:	3701      	adds	r7, #1
 8007bf8:	601f      	str	r7, [r3, #0]
 8007bfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 831d 	beq.w	800823c <_dtoa_r+0xb34>
 8007c02:	601e      	str	r6, [r3, #0]
 8007c04:	e31a      	b.n	800823c <_dtoa_r+0xb34>
 8007c06:	07e2      	lsls	r2, r4, #31
 8007c08:	d505      	bpl.n	8007c16 <_dtoa_r+0x50e>
 8007c0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c0e:	f7f8 fcf3 	bl	80005f8 <__aeabi_dmul>
 8007c12:	3601      	adds	r6, #1
 8007c14:	2301      	movs	r3, #1
 8007c16:	1064      	asrs	r4, r4, #1
 8007c18:	3508      	adds	r5, #8
 8007c1a:	e73f      	b.n	8007a9c <_dtoa_r+0x394>
 8007c1c:	2602      	movs	r6, #2
 8007c1e:	e742      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007c20:	9c07      	ldr	r4, [sp, #28]
 8007c22:	9704      	str	r7, [sp, #16]
 8007c24:	e761      	b.n	8007aea <_dtoa_r+0x3e2>
 8007c26:	4b27      	ldr	r3, [pc, #156]	@ (8007cc4 <_dtoa_r+0x5bc>)
 8007c28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c32:	4454      	add	r4, sl
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d053      	beq.n	8007ce0 <_dtoa_r+0x5d8>
 8007c38:	4928      	ldr	r1, [pc, #160]	@ (8007cdc <_dtoa_r+0x5d4>)
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f7f8 fe06 	bl	800084c <__aeabi_ddiv>
 8007c40:	4633      	mov	r3, r6
 8007c42:	462a      	mov	r2, r5
 8007c44:	f7f8 fb20 	bl	8000288 <__aeabi_dsub>
 8007c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c4c:	4656      	mov	r6, sl
 8007c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c52:	f7f8 ff81 	bl	8000b58 <__aeabi_d2iz>
 8007c56:	4605      	mov	r5, r0
 8007c58:	f7f8 fc64 	bl	8000524 <__aeabi_i2d>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	3530      	adds	r5, #48	@ 0x30
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c72:	f806 5b01 	strb.w	r5, [r6], #1
 8007c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c7a:	f7f8 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d171      	bne.n	8007d66 <_dtoa_r+0x65e>
 8007c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c86:	4911      	ldr	r1, [pc, #68]	@ (8007ccc <_dtoa_r+0x5c4>)
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f7f8 fafd 	bl	8000288 <__aeabi_dsub>
 8007c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c92:	f7f8 ff23 	bl	8000adc <__aeabi_dcmplt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f040 8095 	bne.w	8007dc6 <_dtoa_r+0x6be>
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	f43f af50 	beq.w	8007b42 <_dtoa_r+0x43a>
 8007ca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <_dtoa_r+0x5c8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f7f8 fca5 	bl	80005f8 <__aeabi_dmul>
 8007cae:	4b08      	ldr	r3, [pc, #32]	@ (8007cd0 <_dtoa_r+0x5c8>)
 8007cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cba:	f7f8 fc9d 	bl	80005f8 <__aeabi_dmul>
 8007cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc2:	e7c4      	b.n	8007c4e <_dtoa_r+0x546>
 8007cc4:	080097a0 	.word	0x080097a0
 8007cc8:	08009778 	.word	0x08009778
 8007ccc:	3ff00000 	.word	0x3ff00000
 8007cd0:	40240000 	.word	0x40240000
 8007cd4:	401c0000 	.word	0x401c0000
 8007cd8:	40140000 	.word	0x40140000
 8007cdc:	3fe00000 	.word	0x3fe00000
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7f8 fc88 	bl	80005f8 <__aeabi_dmul>
 8007ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cec:	9415      	str	r4, [sp, #84]	@ 0x54
 8007cee:	4656      	mov	r6, sl
 8007cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf4:	f7f8 ff30 	bl	8000b58 <__aeabi_d2iz>
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	f7f8 fc13 	bl	8000524 <__aeabi_i2d>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	3530      	adds	r5, #48	@ 0x30
 8007d0c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	d124      	bne.n	8007d6a <_dtoa_r+0x662>
 8007d20:	4bac      	ldr	r3, [pc, #688]	@ (8007fd4 <_dtoa_r+0x8cc>)
 8007d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d26:	f7f8 fab1 	bl	800028c <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d32:	f7f8 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d145      	bne.n	8007dc6 <_dtoa_r+0x6be>
 8007d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d3e:	49a5      	ldr	r1, [pc, #660]	@ (8007fd4 <_dtoa_r+0x8cc>)
 8007d40:	2000      	movs	r0, #0
 8007d42:	f7f8 faa1 	bl	8000288 <__aeabi_dsub>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4e:	f7f8 fec5 	bl	8000adc <__aeabi_dcmplt>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f43f aef5 	beq.w	8007b42 <_dtoa_r+0x43a>
 8007d58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d5a:	1e73      	subs	r3, r6, #1
 8007d5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d62:	2b30      	cmp	r3, #48	@ 0x30
 8007d64:	d0f8      	beq.n	8007d58 <_dtoa_r+0x650>
 8007d66:	9f04      	ldr	r7, [sp, #16]
 8007d68:	e73e      	b.n	8007be8 <_dtoa_r+0x4e0>
 8007d6a:	4b9b      	ldr	r3, [pc, #620]	@ (8007fd8 <_dtoa_r+0x8d0>)
 8007d6c:	f7f8 fc44 	bl	80005f8 <__aeabi_dmul>
 8007d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d74:	e7bc      	b.n	8007cf0 <_dtoa_r+0x5e8>
 8007d76:	d10c      	bne.n	8007d92 <_dtoa_r+0x68a>
 8007d78:	4b98      	ldr	r3, [pc, #608]	@ (8007fdc <_dtoa_r+0x8d4>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d80:	f7f8 fc3a 	bl	80005f8 <__aeabi_dmul>
 8007d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d88:	f7f8 febc 	bl	8000b04 <__aeabi_dcmpge>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f000 8157 	beq.w	8008040 <_dtoa_r+0x938>
 8007d92:	2400      	movs	r4, #0
 8007d94:	4625      	mov	r5, r4
 8007d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	4656      	mov	r6, sl
 8007d9e:	2700      	movs	r7, #0
 8007da0:	4621      	mov	r1, r4
 8007da2:	4658      	mov	r0, fp
 8007da4:	f000 fafe 	bl	80083a4 <_Bfree>
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	d0dc      	beq.n	8007d66 <_dtoa_r+0x65e>
 8007dac:	b12f      	cbz	r7, 8007dba <_dtoa_r+0x6b2>
 8007dae:	42af      	cmp	r7, r5
 8007db0:	d003      	beq.n	8007dba <_dtoa_r+0x6b2>
 8007db2:	4639      	mov	r1, r7
 8007db4:	4658      	mov	r0, fp
 8007db6:	f000 faf5 	bl	80083a4 <_Bfree>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f000 faf1 	bl	80083a4 <_Bfree>
 8007dc2:	e7d0      	b.n	8007d66 <_dtoa_r+0x65e>
 8007dc4:	9704      	str	r7, [sp, #16]
 8007dc6:	4633      	mov	r3, r6
 8007dc8:	461e      	mov	r6, r3
 8007dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dce:	2a39      	cmp	r2, #57	@ 0x39
 8007dd0:	d107      	bne.n	8007de2 <_dtoa_r+0x6da>
 8007dd2:	459a      	cmp	sl, r3
 8007dd4:	d1f8      	bne.n	8007dc8 <_dtoa_r+0x6c0>
 8007dd6:	9a04      	ldr	r2, [sp, #16]
 8007dd8:	3201      	adds	r2, #1
 8007dda:	9204      	str	r2, [sp, #16]
 8007ddc:	2230      	movs	r2, #48	@ 0x30
 8007dde:	f88a 2000 	strb.w	r2, [sl]
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	3201      	adds	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	e7bd      	b.n	8007d66 <_dtoa_r+0x65e>
 8007dea:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd8 <_dtoa_r+0x8d0>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	f7f8 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f aebb 	beq.w	8007b7a <_dtoa_r+0x472>
 8007e04:	e6f0      	b.n	8007be8 <_dtoa_r+0x4e0>
 8007e06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	f000 80db 	beq.w	8007fc4 <_dtoa_r+0x8bc>
 8007e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e10:	2a01      	cmp	r2, #1
 8007e12:	f300 80bf 	bgt.w	8007f94 <_dtoa_r+0x88c>
 8007e16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e18:	2a00      	cmp	r2, #0
 8007e1a:	f000 80b7 	beq.w	8007f8c <_dtoa_r+0x884>
 8007e1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e24:	4646      	mov	r6, r8
 8007e26:	9a08      	ldr	r2, [sp, #32]
 8007e28:	2101      	movs	r1, #1
 8007e2a:	441a      	add	r2, r3
 8007e2c:	4658      	mov	r0, fp
 8007e2e:	4498      	add	r8, r3
 8007e30:	9208      	str	r2, [sp, #32]
 8007e32:	f000 fb6b 	bl	800850c <__i2b>
 8007e36:	4605      	mov	r5, r0
 8007e38:	b15e      	cbz	r6, 8007e52 <_dtoa_r+0x74a>
 8007e3a:	9b08      	ldr	r3, [sp, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dd08      	ble.n	8007e52 <_dtoa_r+0x74a>
 8007e40:	42b3      	cmp	r3, r6
 8007e42:	9a08      	ldr	r2, [sp, #32]
 8007e44:	bfa8      	it	ge
 8007e46:	4633      	movge	r3, r6
 8007e48:	eba8 0803 	sub.w	r8, r8, r3
 8007e4c:	1af6      	subs	r6, r6, r3
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	9308      	str	r3, [sp, #32]
 8007e52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e54:	b1f3      	cbz	r3, 8007e94 <_dtoa_r+0x78c>
 8007e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80b7 	beq.w	8007fcc <_dtoa_r+0x8c4>
 8007e5e:	b18c      	cbz	r4, 8007e84 <_dtoa_r+0x77c>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4622      	mov	r2, r4
 8007e64:	4658      	mov	r0, fp
 8007e66:	f000 fc11 	bl	800868c <__pow5mult>
 8007e6a:	464a      	mov	r2, r9
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	4605      	mov	r5, r0
 8007e70:	4658      	mov	r0, fp
 8007e72:	f000 fb61 	bl	8008538 <__multiply>
 8007e76:	4649      	mov	r1, r9
 8007e78:	9004      	str	r0, [sp, #16]
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f000 fa92 	bl	80083a4 <_Bfree>
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	4699      	mov	r9, r3
 8007e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e86:	1b1a      	subs	r2, r3, r4
 8007e88:	d004      	beq.n	8007e94 <_dtoa_r+0x78c>
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 fbfd 	bl	800868c <__pow5mult>
 8007e92:	4681      	mov	r9, r0
 8007e94:	2101      	movs	r1, #1
 8007e96:	4658      	mov	r0, fp
 8007e98:	f000 fb38 	bl	800850c <__i2b>
 8007e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 81cf 	beq.w	8008244 <_dtoa_r+0xb3c>
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	4658      	mov	r0, fp
 8007eac:	f000 fbee 	bl	800868c <__pow5mult>
 8007eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	f300 8095 	bgt.w	8007fe4 <_dtoa_r+0x8dc>
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 8087 	bne.w	8007fd0 <_dtoa_r+0x8c8>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 8089 	bne.w	8007fe0 <_dtoa_r+0x8d8>
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ed4:	0d1b      	lsrs	r3, r3, #20
 8007ed6:	051b      	lsls	r3, r3, #20
 8007ed8:	b12b      	cbz	r3, 8007ee6 <_dtoa_r+0x7de>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	3301      	adds	r3, #1
 8007ede:	9308      	str	r3, [sp, #32]
 8007ee0:	f108 0801 	add.w	r8, r8, #1
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 81b0 	beq.w	8008250 <_dtoa_r+0xb48>
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ef6:	6918      	ldr	r0, [r3, #16]
 8007ef8:	f000 fabc 	bl	8008474 <__hi0bits>
 8007efc:	f1c0 0020 	rsb	r0, r0, #32
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	4418      	add	r0, r3
 8007f04:	f010 001f 	ands.w	r0, r0, #31
 8007f08:	d077      	beq.n	8007ffa <_dtoa_r+0x8f2>
 8007f0a:	f1c0 0320 	rsb	r3, r0, #32
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	dd6b      	ble.n	8007fea <_dtoa_r+0x8e2>
 8007f12:	9b08      	ldr	r3, [sp, #32]
 8007f14:	f1c0 001c 	rsb	r0, r0, #28
 8007f18:	4403      	add	r3, r0
 8007f1a:	4480      	add	r8, r0
 8007f1c:	4406      	add	r6, r0
 8007f1e:	9308      	str	r3, [sp, #32]
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	dd05      	ble.n	8007f32 <_dtoa_r+0x82a>
 8007f26:	4649      	mov	r1, r9
 8007f28:	4642      	mov	r2, r8
 8007f2a:	4658      	mov	r0, fp
 8007f2c:	f000 fc08 	bl	8008740 <__lshift>
 8007f30:	4681      	mov	r9, r0
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dd05      	ble.n	8007f44 <_dtoa_r+0x83c>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4658      	mov	r0, fp
 8007f3e:	f000 fbff 	bl	8008740 <__lshift>
 8007f42:	4604      	mov	r4, r0
 8007f44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d059      	beq.n	8007ffe <_dtoa_r+0x8f6>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f000 fc63 	bl	8008818 <__mcmp>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	da53      	bge.n	8007ffe <_dtoa_r+0x8f6>
 8007f56:	1e7b      	subs	r3, r7, #1
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	220a      	movs	r2, #10
 8007f60:	4658      	mov	r0, fp
 8007f62:	f000 fa41 	bl	80083e8 <__multadd>
 8007f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f68:	4681      	mov	r9, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8172 	beq.w	8008254 <_dtoa_r+0xb4c>
 8007f70:	2300      	movs	r3, #0
 8007f72:	4629      	mov	r1, r5
 8007f74:	220a      	movs	r2, #10
 8007f76:	4658      	mov	r0, fp
 8007f78:	f000 fa36 	bl	80083e8 <__multadd>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	4605      	mov	r5, r0
 8007f82:	dc67      	bgt.n	8008054 <_dtoa_r+0x94c>
 8007f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	dc41      	bgt.n	800800e <_dtoa_r+0x906>
 8007f8a:	e063      	b.n	8008054 <_dtoa_r+0x94c>
 8007f8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f92:	e746      	b.n	8007e22 <_dtoa_r+0x71a>
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	1e5c      	subs	r4, r3, #1
 8007f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	bfbf      	itttt	lt
 8007f9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fa4:	1ae3      	sublt	r3, r4, r3
 8007fa6:	bfb4      	ite	lt
 8007fa8:	18d2      	addlt	r2, r2, r3
 8007faa:	1b1c      	subge	r4, r3, r4
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	bfbc      	itt	lt
 8007fb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fb2:	2400      	movlt	r4, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfb5      	itete	lt
 8007fb8:	eba8 0603 	sublt.w	r6, r8, r3
 8007fbc:	9b07      	ldrge	r3, [sp, #28]
 8007fbe:	2300      	movlt	r3, #0
 8007fc0:	4646      	movge	r6, r8
 8007fc2:	e730      	b.n	8007e26 <_dtoa_r+0x71e>
 8007fc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fc8:	4646      	mov	r6, r8
 8007fca:	e735      	b.n	8007e38 <_dtoa_r+0x730>
 8007fcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fce:	e75c      	b.n	8007e8a <_dtoa_r+0x782>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e788      	b.n	8007ee6 <_dtoa_r+0x7de>
 8007fd4:	3fe00000 	.word	0x3fe00000
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	40140000 	.word	0x40140000
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	e780      	b.n	8007ee6 <_dtoa_r+0x7de>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe8:	e782      	b.n	8007ef0 <_dtoa_r+0x7e8>
 8007fea:	d099      	beq.n	8007f20 <_dtoa_r+0x818>
 8007fec:	9a08      	ldr	r2, [sp, #32]
 8007fee:	331c      	adds	r3, #28
 8007ff0:	441a      	add	r2, r3
 8007ff2:	4498      	add	r8, r3
 8007ff4:	441e      	add	r6, r3
 8007ff6:	9208      	str	r2, [sp, #32]
 8007ff8:	e792      	b.n	8007f20 <_dtoa_r+0x818>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	e7f6      	b.n	8007fec <_dtoa_r+0x8e4>
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	9704      	str	r7, [sp, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	dc20      	bgt.n	8008048 <_dtoa_r+0x940>
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800a:	2b02      	cmp	r3, #2
 800800c:	dd1e      	ble.n	800804c <_dtoa_r+0x944>
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f47f aec0 	bne.w	8007d96 <_dtoa_r+0x68e>
 8008016:	4621      	mov	r1, r4
 8008018:	2205      	movs	r2, #5
 800801a:	4658      	mov	r0, fp
 800801c:	f000 f9e4 	bl	80083e8 <__multadd>
 8008020:	4601      	mov	r1, r0
 8008022:	4604      	mov	r4, r0
 8008024:	4648      	mov	r0, r9
 8008026:	f000 fbf7 	bl	8008818 <__mcmp>
 800802a:	2800      	cmp	r0, #0
 800802c:	f77f aeb3 	ble.w	8007d96 <_dtoa_r+0x68e>
 8008030:	4656      	mov	r6, sl
 8008032:	2331      	movs	r3, #49	@ 0x31
 8008034:	f806 3b01 	strb.w	r3, [r6], #1
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	3301      	adds	r3, #1
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	e6ae      	b.n	8007d9e <_dtoa_r+0x696>
 8008040:	9c07      	ldr	r4, [sp, #28]
 8008042:	9704      	str	r7, [sp, #16]
 8008044:	4625      	mov	r5, r4
 8008046:	e7f3      	b.n	8008030 <_dtoa_r+0x928>
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8104 	beq.w	800825c <_dtoa_r+0xb54>
 8008054:	2e00      	cmp	r6, #0
 8008056:	dd05      	ble.n	8008064 <_dtoa_r+0x95c>
 8008058:	4629      	mov	r1, r5
 800805a:	4632      	mov	r2, r6
 800805c:	4658      	mov	r0, fp
 800805e:	f000 fb6f 	bl	8008740 <__lshift>
 8008062:	4605      	mov	r5, r0
 8008064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d05a      	beq.n	8008120 <_dtoa_r+0xa18>
 800806a:	6869      	ldr	r1, [r5, #4]
 800806c:	4658      	mov	r0, fp
 800806e:	f000 f959 	bl	8008324 <_Balloc>
 8008072:	4606      	mov	r6, r0
 8008074:	b928      	cbnz	r0, 8008082 <_dtoa_r+0x97a>
 8008076:	4b84      	ldr	r3, [pc, #528]	@ (8008288 <_dtoa_r+0xb80>)
 8008078:	4602      	mov	r2, r0
 800807a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800807e:	f7ff bb5a 	b.w	8007736 <_dtoa_r+0x2e>
 8008082:	692a      	ldr	r2, [r5, #16]
 8008084:	3202      	adds	r2, #2
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	f105 010c 	add.w	r1, r5, #12
 800808c:	300c      	adds	r0, #12
 800808e:	f7ff faa4 	bl	80075da <memcpy>
 8008092:	2201      	movs	r2, #1
 8008094:	4631      	mov	r1, r6
 8008096:	4658      	mov	r0, fp
 8008098:	f000 fb52 	bl	8008740 <__lshift>
 800809c:	f10a 0301 	add.w	r3, sl, #1
 80080a0:	9307      	str	r3, [sp, #28]
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	4453      	add	r3, sl
 80080a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	462f      	mov	r7, r5
 80080b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b2:	4605      	mov	r5, r0
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	4621      	mov	r1, r4
 80080b8:	3b01      	subs	r3, #1
 80080ba:	4648      	mov	r0, r9
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	f7ff fa9a 	bl	80075f6 <quorem>
 80080c2:	4639      	mov	r1, r7
 80080c4:	9002      	str	r0, [sp, #8]
 80080c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080ca:	4648      	mov	r0, r9
 80080cc:	f000 fba4 	bl	8008818 <__mcmp>
 80080d0:	462a      	mov	r2, r5
 80080d2:	9008      	str	r0, [sp, #32]
 80080d4:	4621      	mov	r1, r4
 80080d6:	4658      	mov	r0, fp
 80080d8:	f000 fbba 	bl	8008850 <__mdiff>
 80080dc:	68c2      	ldr	r2, [r0, #12]
 80080de:	4606      	mov	r6, r0
 80080e0:	bb02      	cbnz	r2, 8008124 <_dtoa_r+0xa1c>
 80080e2:	4601      	mov	r1, r0
 80080e4:	4648      	mov	r0, r9
 80080e6:	f000 fb97 	bl	8008818 <__mcmp>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4631      	mov	r1, r6
 80080ee:	4658      	mov	r0, fp
 80080f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080f2:	f000 f957 	bl	80083a4 <_Bfree>
 80080f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080fa:	9e07      	ldr	r6, [sp, #28]
 80080fc:	ea43 0102 	orr.w	r1, r3, r2
 8008100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008102:	4319      	orrs	r1, r3
 8008104:	d110      	bne.n	8008128 <_dtoa_r+0xa20>
 8008106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800810a:	d029      	beq.n	8008160 <_dtoa_r+0xa58>
 800810c:	9b08      	ldr	r3, [sp, #32]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dd02      	ble.n	8008118 <_dtoa_r+0xa10>
 8008112:	9b02      	ldr	r3, [sp, #8]
 8008114:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008118:	9b00      	ldr	r3, [sp, #0]
 800811a:	f883 8000 	strb.w	r8, [r3]
 800811e:	e63f      	b.n	8007da0 <_dtoa_r+0x698>
 8008120:	4628      	mov	r0, r5
 8008122:	e7bb      	b.n	800809c <_dtoa_r+0x994>
 8008124:	2201      	movs	r2, #1
 8008126:	e7e1      	b.n	80080ec <_dtoa_r+0x9e4>
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	db04      	blt.n	8008138 <_dtoa_r+0xa30>
 800812e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008130:	430b      	orrs	r3, r1
 8008132:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008134:	430b      	orrs	r3, r1
 8008136:	d120      	bne.n	800817a <_dtoa_r+0xa72>
 8008138:	2a00      	cmp	r2, #0
 800813a:	dded      	ble.n	8008118 <_dtoa_r+0xa10>
 800813c:	4649      	mov	r1, r9
 800813e:	2201      	movs	r2, #1
 8008140:	4658      	mov	r0, fp
 8008142:	f000 fafd 	bl	8008740 <__lshift>
 8008146:	4621      	mov	r1, r4
 8008148:	4681      	mov	r9, r0
 800814a:	f000 fb65 	bl	8008818 <__mcmp>
 800814e:	2800      	cmp	r0, #0
 8008150:	dc03      	bgt.n	800815a <_dtoa_r+0xa52>
 8008152:	d1e1      	bne.n	8008118 <_dtoa_r+0xa10>
 8008154:	f018 0f01 	tst.w	r8, #1
 8008158:	d0de      	beq.n	8008118 <_dtoa_r+0xa10>
 800815a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800815e:	d1d8      	bne.n	8008112 <_dtoa_r+0xa0a>
 8008160:	9a00      	ldr	r2, [sp, #0]
 8008162:	2339      	movs	r3, #57	@ 0x39
 8008164:	7013      	strb	r3, [r2, #0]
 8008166:	4633      	mov	r3, r6
 8008168:	461e      	mov	r6, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008170:	2a39      	cmp	r2, #57	@ 0x39
 8008172:	d052      	beq.n	800821a <_dtoa_r+0xb12>
 8008174:	3201      	adds	r2, #1
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e612      	b.n	8007da0 <_dtoa_r+0x698>
 800817a:	2a00      	cmp	r2, #0
 800817c:	dd07      	ble.n	800818e <_dtoa_r+0xa86>
 800817e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008182:	d0ed      	beq.n	8008160 <_dtoa_r+0xa58>
 8008184:	9a00      	ldr	r2, [sp, #0]
 8008186:	f108 0301 	add.w	r3, r8, #1
 800818a:	7013      	strb	r3, [r2, #0]
 800818c:	e608      	b.n	8007da0 <_dtoa_r+0x698>
 800818e:	9b07      	ldr	r3, [sp, #28]
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008198:	4293      	cmp	r3, r2
 800819a:	d028      	beq.n	80081ee <_dtoa_r+0xae6>
 800819c:	4649      	mov	r1, r9
 800819e:	2300      	movs	r3, #0
 80081a0:	220a      	movs	r2, #10
 80081a2:	4658      	mov	r0, fp
 80081a4:	f000 f920 	bl	80083e8 <__multadd>
 80081a8:	42af      	cmp	r7, r5
 80081aa:	4681      	mov	r9, r0
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	f04f 020a 	mov.w	r2, #10
 80081b4:	4639      	mov	r1, r7
 80081b6:	4658      	mov	r0, fp
 80081b8:	d107      	bne.n	80081ca <_dtoa_r+0xac2>
 80081ba:	f000 f915 	bl	80083e8 <__multadd>
 80081be:	4607      	mov	r7, r0
 80081c0:	4605      	mov	r5, r0
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	3301      	adds	r3, #1
 80081c6:	9307      	str	r3, [sp, #28]
 80081c8:	e774      	b.n	80080b4 <_dtoa_r+0x9ac>
 80081ca:	f000 f90d 	bl	80083e8 <__multadd>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4607      	mov	r7, r0
 80081d2:	2300      	movs	r3, #0
 80081d4:	220a      	movs	r2, #10
 80081d6:	4658      	mov	r0, fp
 80081d8:	f000 f906 	bl	80083e8 <__multadd>
 80081dc:	4605      	mov	r5, r0
 80081de:	e7f0      	b.n	80081c2 <_dtoa_r+0xaba>
 80081e0:	9b00      	ldr	r3, [sp, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bfcc      	ite	gt
 80081e6:	461e      	movgt	r6, r3
 80081e8:	2601      	movle	r6, #1
 80081ea:	4456      	add	r6, sl
 80081ec:	2700      	movs	r7, #0
 80081ee:	4649      	mov	r1, r9
 80081f0:	2201      	movs	r2, #1
 80081f2:	4658      	mov	r0, fp
 80081f4:	f000 faa4 	bl	8008740 <__lshift>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4681      	mov	r9, r0
 80081fc:	f000 fb0c 	bl	8008818 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dcb0      	bgt.n	8008166 <_dtoa_r+0xa5e>
 8008204:	d102      	bne.n	800820c <_dtoa_r+0xb04>
 8008206:	f018 0f01 	tst.w	r8, #1
 800820a:	d1ac      	bne.n	8008166 <_dtoa_r+0xa5e>
 800820c:	4633      	mov	r3, r6
 800820e:	461e      	mov	r6, r3
 8008210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008214:	2a30      	cmp	r2, #48	@ 0x30
 8008216:	d0fa      	beq.n	800820e <_dtoa_r+0xb06>
 8008218:	e5c2      	b.n	8007da0 <_dtoa_r+0x698>
 800821a:	459a      	cmp	sl, r3
 800821c:	d1a4      	bne.n	8008168 <_dtoa_r+0xa60>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	3301      	adds	r3, #1
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	2331      	movs	r3, #49	@ 0x31
 8008226:	f88a 3000 	strb.w	r3, [sl]
 800822a:	e5b9      	b.n	8007da0 <_dtoa_r+0x698>
 800822c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800822e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800828c <_dtoa_r+0xb84>
 8008232:	b11b      	cbz	r3, 800823c <_dtoa_r+0xb34>
 8008234:	f10a 0308 	add.w	r3, sl, #8
 8008238:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	4650      	mov	r0, sl
 800823e:	b019      	add	sp, #100	@ 0x64
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008246:	2b01      	cmp	r3, #1
 8008248:	f77f ae37 	ble.w	8007eba <_dtoa_r+0x7b2>
 800824c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800824e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008250:	2001      	movs	r0, #1
 8008252:	e655      	b.n	8007f00 <_dtoa_r+0x7f8>
 8008254:	9b00      	ldr	r3, [sp, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f77f aed6 	ble.w	8008008 <_dtoa_r+0x900>
 800825c:	4656      	mov	r6, sl
 800825e:	4621      	mov	r1, r4
 8008260:	4648      	mov	r0, r9
 8008262:	f7ff f9c8 	bl	80075f6 <quorem>
 8008266:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800826a:	f806 8b01 	strb.w	r8, [r6], #1
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	eba6 020a 	sub.w	r2, r6, sl
 8008274:	4293      	cmp	r3, r2
 8008276:	ddb3      	ble.n	80081e0 <_dtoa_r+0xad8>
 8008278:	4649      	mov	r1, r9
 800827a:	2300      	movs	r3, #0
 800827c:	220a      	movs	r2, #10
 800827e:	4658      	mov	r0, fp
 8008280:	f000 f8b2 	bl	80083e8 <__multadd>
 8008284:	4681      	mov	r9, r0
 8008286:	e7ea      	b.n	800825e <_dtoa_r+0xb56>
 8008288:	08009700 	.word	0x08009700
 800828c:	08009684 	.word	0x08009684

08008290 <_free_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4605      	mov	r5, r0
 8008294:	2900      	cmp	r1, #0
 8008296:	d041      	beq.n	800831c <_free_r+0x8c>
 8008298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800829c:	1f0c      	subs	r4, r1, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfb8      	it	lt
 80082a2:	18e4      	addlt	r4, r4, r3
 80082a4:	f7fe fb5a 	bl	800695c <__malloc_lock>
 80082a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008320 <_free_r+0x90>)
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	b933      	cbnz	r3, 80082bc <_free_r+0x2c>
 80082ae:	6063      	str	r3, [r4, #4]
 80082b0:	6014      	str	r4, [r2, #0]
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b8:	f7fe bb56 	b.w	8006968 <__malloc_unlock>
 80082bc:	42a3      	cmp	r3, r4
 80082be:	d908      	bls.n	80082d2 <_free_r+0x42>
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	1821      	adds	r1, r4, r0
 80082c4:	428b      	cmp	r3, r1
 80082c6:	bf01      	itttt	eq
 80082c8:	6819      	ldreq	r1, [r3, #0]
 80082ca:	685b      	ldreq	r3, [r3, #4]
 80082cc:	1809      	addeq	r1, r1, r0
 80082ce:	6021      	streq	r1, [r4, #0]
 80082d0:	e7ed      	b.n	80082ae <_free_r+0x1e>
 80082d2:	461a      	mov	r2, r3
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	b10b      	cbz	r3, 80082dc <_free_r+0x4c>
 80082d8:	42a3      	cmp	r3, r4
 80082da:	d9fa      	bls.n	80082d2 <_free_r+0x42>
 80082dc:	6811      	ldr	r1, [r2, #0]
 80082de:	1850      	adds	r0, r2, r1
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	d10b      	bne.n	80082fc <_free_r+0x6c>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	4401      	add	r1, r0
 80082e8:	1850      	adds	r0, r2, r1
 80082ea:	4283      	cmp	r3, r0
 80082ec:	6011      	str	r1, [r2, #0]
 80082ee:	d1e0      	bne.n	80082b2 <_free_r+0x22>
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	6053      	str	r3, [r2, #4]
 80082f6:	4408      	add	r0, r1
 80082f8:	6010      	str	r0, [r2, #0]
 80082fa:	e7da      	b.n	80082b2 <_free_r+0x22>
 80082fc:	d902      	bls.n	8008304 <_free_r+0x74>
 80082fe:	230c      	movs	r3, #12
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	e7d6      	b.n	80082b2 <_free_r+0x22>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	1821      	adds	r1, r4, r0
 8008308:	428b      	cmp	r3, r1
 800830a:	bf04      	itt	eq
 800830c:	6819      	ldreq	r1, [r3, #0]
 800830e:	685b      	ldreq	r3, [r3, #4]
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	bf04      	itt	eq
 8008314:	1809      	addeq	r1, r1, r0
 8008316:	6021      	streq	r1, [r4, #0]
 8008318:	6054      	str	r4, [r2, #4]
 800831a:	e7ca      	b.n	80082b2 <_free_r+0x22>
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	bf00      	nop
 8008320:	20000654 	.word	0x20000654

08008324 <_Balloc>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	69c6      	ldr	r6, [r0, #28]
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	b976      	cbnz	r6, 800834c <_Balloc+0x28>
 800832e:	2010      	movs	r0, #16
 8008330:	f7fe fa6a 	bl	8006808 <malloc>
 8008334:	4602      	mov	r2, r0
 8008336:	61e0      	str	r0, [r4, #28]
 8008338:	b920      	cbnz	r0, 8008344 <_Balloc+0x20>
 800833a:	4b18      	ldr	r3, [pc, #96]	@ (800839c <_Balloc+0x78>)
 800833c:	4818      	ldr	r0, [pc, #96]	@ (80083a0 <_Balloc+0x7c>)
 800833e:	216b      	movs	r1, #107	@ 0x6b
 8008340:	f000 ff66 	bl	8009210 <__assert_func>
 8008344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008348:	6006      	str	r6, [r0, #0]
 800834a:	60c6      	str	r6, [r0, #12]
 800834c:	69e6      	ldr	r6, [r4, #28]
 800834e:	68f3      	ldr	r3, [r6, #12]
 8008350:	b183      	cbz	r3, 8008374 <_Balloc+0x50>
 8008352:	69e3      	ldr	r3, [r4, #28]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800835a:	b9b8      	cbnz	r0, 800838c <_Balloc+0x68>
 800835c:	2101      	movs	r1, #1
 800835e:	fa01 f605 	lsl.w	r6, r1, r5
 8008362:	1d72      	adds	r2, r6, #5
 8008364:	0092      	lsls	r2, r2, #2
 8008366:	4620      	mov	r0, r4
 8008368:	f000 ff70 	bl	800924c <_calloc_r>
 800836c:	b160      	cbz	r0, 8008388 <_Balloc+0x64>
 800836e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008372:	e00e      	b.n	8008392 <_Balloc+0x6e>
 8008374:	2221      	movs	r2, #33	@ 0x21
 8008376:	2104      	movs	r1, #4
 8008378:	4620      	mov	r0, r4
 800837a:	f000 ff67 	bl	800924c <_calloc_r>
 800837e:	69e3      	ldr	r3, [r4, #28]
 8008380:	60f0      	str	r0, [r6, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e4      	bne.n	8008352 <_Balloc+0x2e>
 8008388:	2000      	movs	r0, #0
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	6802      	ldr	r2, [r0, #0]
 800838e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008392:	2300      	movs	r3, #0
 8008394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008398:	e7f7      	b.n	800838a <_Balloc+0x66>
 800839a:	bf00      	nop
 800839c:	08009691 	.word	0x08009691
 80083a0:	08009711 	.word	0x08009711

080083a4 <_Bfree>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	69c6      	ldr	r6, [r0, #28]
 80083a8:	4605      	mov	r5, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	b976      	cbnz	r6, 80083cc <_Bfree+0x28>
 80083ae:	2010      	movs	r0, #16
 80083b0:	f7fe fa2a 	bl	8006808 <malloc>
 80083b4:	4602      	mov	r2, r0
 80083b6:	61e8      	str	r0, [r5, #28]
 80083b8:	b920      	cbnz	r0, 80083c4 <_Bfree+0x20>
 80083ba:	4b09      	ldr	r3, [pc, #36]	@ (80083e0 <_Bfree+0x3c>)
 80083bc:	4809      	ldr	r0, [pc, #36]	@ (80083e4 <_Bfree+0x40>)
 80083be:	218f      	movs	r1, #143	@ 0x8f
 80083c0:	f000 ff26 	bl	8009210 <__assert_func>
 80083c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c8:	6006      	str	r6, [r0, #0]
 80083ca:	60c6      	str	r6, [r0, #12]
 80083cc:	b13c      	cbz	r4, 80083de <_Bfree+0x3a>
 80083ce:	69eb      	ldr	r3, [r5, #28]
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083d8:	6021      	str	r1, [r4, #0]
 80083da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	08009691 	.word	0x08009691
 80083e4:	08009711 	.word	0x08009711

080083e8 <__multadd>:
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	690d      	ldr	r5, [r1, #16]
 80083ee:	4607      	mov	r7, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	461e      	mov	r6, r3
 80083f4:	f101 0c14 	add.w	ip, r1, #20
 80083f8:	2000      	movs	r0, #0
 80083fa:	f8dc 3000 	ldr.w	r3, [ip]
 80083fe:	b299      	uxth	r1, r3
 8008400:	fb02 6101 	mla	r1, r2, r1, r6
 8008404:	0c1e      	lsrs	r6, r3, #16
 8008406:	0c0b      	lsrs	r3, r1, #16
 8008408:	fb02 3306 	mla	r3, r2, r6, r3
 800840c:	b289      	uxth	r1, r1
 800840e:	3001      	adds	r0, #1
 8008410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008414:	4285      	cmp	r5, r0
 8008416:	f84c 1b04 	str.w	r1, [ip], #4
 800841a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800841e:	dcec      	bgt.n	80083fa <__multadd+0x12>
 8008420:	b30e      	cbz	r6, 8008466 <__multadd+0x7e>
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	42ab      	cmp	r3, r5
 8008426:	dc19      	bgt.n	800845c <__multadd+0x74>
 8008428:	6861      	ldr	r1, [r4, #4]
 800842a:	4638      	mov	r0, r7
 800842c:	3101      	adds	r1, #1
 800842e:	f7ff ff79 	bl	8008324 <_Balloc>
 8008432:	4680      	mov	r8, r0
 8008434:	b928      	cbnz	r0, 8008442 <__multadd+0x5a>
 8008436:	4602      	mov	r2, r0
 8008438:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <__multadd+0x84>)
 800843a:	480d      	ldr	r0, [pc, #52]	@ (8008470 <__multadd+0x88>)
 800843c:	21ba      	movs	r1, #186	@ 0xba
 800843e:	f000 fee7 	bl	8009210 <__assert_func>
 8008442:	6922      	ldr	r2, [r4, #16]
 8008444:	3202      	adds	r2, #2
 8008446:	f104 010c 	add.w	r1, r4, #12
 800844a:	0092      	lsls	r2, r2, #2
 800844c:	300c      	adds	r0, #12
 800844e:	f7ff f8c4 	bl	80075da <memcpy>
 8008452:	4621      	mov	r1, r4
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff ffa5 	bl	80083a4 <_Bfree>
 800845a:	4644      	mov	r4, r8
 800845c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008460:	3501      	adds	r5, #1
 8008462:	615e      	str	r6, [r3, #20]
 8008464:	6125      	str	r5, [r4, #16]
 8008466:	4620      	mov	r0, r4
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846c:	08009700 	.word	0x08009700
 8008470:	08009711 	.word	0x08009711

08008474 <__hi0bits>:
 8008474:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008478:	4603      	mov	r3, r0
 800847a:	bf36      	itet	cc
 800847c:	0403      	lslcc	r3, r0, #16
 800847e:	2000      	movcs	r0, #0
 8008480:	2010      	movcc	r0, #16
 8008482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008486:	bf3c      	itt	cc
 8008488:	021b      	lslcc	r3, r3, #8
 800848a:	3008      	addcc	r0, #8
 800848c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008490:	bf3c      	itt	cc
 8008492:	011b      	lslcc	r3, r3, #4
 8008494:	3004      	addcc	r0, #4
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849a:	bf3c      	itt	cc
 800849c:	009b      	lslcc	r3, r3, #2
 800849e:	3002      	addcc	r0, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db05      	blt.n	80084b0 <__hi0bits+0x3c>
 80084a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084a8:	f100 0001 	add.w	r0, r0, #1
 80084ac:	bf08      	it	eq
 80084ae:	2020      	moveq	r0, #32
 80084b0:	4770      	bx	lr

080084b2 <__lo0bits>:
 80084b2:	6803      	ldr	r3, [r0, #0]
 80084b4:	4602      	mov	r2, r0
 80084b6:	f013 0007 	ands.w	r0, r3, #7
 80084ba:	d00b      	beq.n	80084d4 <__lo0bits+0x22>
 80084bc:	07d9      	lsls	r1, r3, #31
 80084be:	d421      	bmi.n	8008504 <__lo0bits+0x52>
 80084c0:	0798      	lsls	r0, r3, #30
 80084c2:	bf49      	itett	mi
 80084c4:	085b      	lsrmi	r3, r3, #1
 80084c6:	089b      	lsrpl	r3, r3, #2
 80084c8:	2001      	movmi	r0, #1
 80084ca:	6013      	strmi	r3, [r2, #0]
 80084cc:	bf5c      	itt	pl
 80084ce:	6013      	strpl	r3, [r2, #0]
 80084d0:	2002      	movpl	r0, #2
 80084d2:	4770      	bx	lr
 80084d4:	b299      	uxth	r1, r3
 80084d6:	b909      	cbnz	r1, 80084dc <__lo0bits+0x2a>
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	2010      	movs	r0, #16
 80084dc:	b2d9      	uxtb	r1, r3
 80084de:	b909      	cbnz	r1, 80084e4 <__lo0bits+0x32>
 80084e0:	3008      	adds	r0, #8
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	0719      	lsls	r1, r3, #28
 80084e6:	bf04      	itt	eq
 80084e8:	091b      	lsreq	r3, r3, #4
 80084ea:	3004      	addeq	r0, #4
 80084ec:	0799      	lsls	r1, r3, #30
 80084ee:	bf04      	itt	eq
 80084f0:	089b      	lsreq	r3, r3, #2
 80084f2:	3002      	addeq	r0, #2
 80084f4:	07d9      	lsls	r1, r3, #31
 80084f6:	d403      	bmi.n	8008500 <__lo0bits+0x4e>
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	f100 0001 	add.w	r0, r0, #1
 80084fe:	d003      	beq.n	8008508 <__lo0bits+0x56>
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	4770      	bx	lr
 8008504:	2000      	movs	r0, #0
 8008506:	4770      	bx	lr
 8008508:	2020      	movs	r0, #32
 800850a:	4770      	bx	lr

0800850c <__i2b>:
 800850c:	b510      	push	{r4, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	2101      	movs	r1, #1
 8008512:	f7ff ff07 	bl	8008324 <_Balloc>
 8008516:	4602      	mov	r2, r0
 8008518:	b928      	cbnz	r0, 8008526 <__i2b+0x1a>
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <__i2b+0x24>)
 800851c:	4805      	ldr	r0, [pc, #20]	@ (8008534 <__i2b+0x28>)
 800851e:	f240 1145 	movw	r1, #325	@ 0x145
 8008522:	f000 fe75 	bl	8009210 <__assert_func>
 8008526:	2301      	movs	r3, #1
 8008528:	6144      	str	r4, [r0, #20]
 800852a:	6103      	str	r3, [r0, #16]
 800852c:	bd10      	pop	{r4, pc}
 800852e:	bf00      	nop
 8008530:	08009700 	.word	0x08009700
 8008534:	08009711 	.word	0x08009711

08008538 <__multiply>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4614      	mov	r4, r2
 800853e:	690a      	ldr	r2, [r1, #16]
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	429a      	cmp	r2, r3
 8008544:	bfa8      	it	ge
 8008546:	4623      	movge	r3, r4
 8008548:	460f      	mov	r7, r1
 800854a:	bfa4      	itt	ge
 800854c:	460c      	movge	r4, r1
 800854e:	461f      	movge	r7, r3
 8008550:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008554:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	6861      	ldr	r1, [r4, #4]
 800855c:	eb0a 0609 	add.w	r6, sl, r9
 8008560:	42b3      	cmp	r3, r6
 8008562:	b085      	sub	sp, #20
 8008564:	bfb8      	it	lt
 8008566:	3101      	addlt	r1, #1
 8008568:	f7ff fedc 	bl	8008324 <_Balloc>
 800856c:	b930      	cbnz	r0, 800857c <__multiply+0x44>
 800856e:	4602      	mov	r2, r0
 8008570:	4b44      	ldr	r3, [pc, #272]	@ (8008684 <__multiply+0x14c>)
 8008572:	4845      	ldr	r0, [pc, #276]	@ (8008688 <__multiply+0x150>)
 8008574:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008578:	f000 fe4a 	bl	8009210 <__assert_func>
 800857c:	f100 0514 	add.w	r5, r0, #20
 8008580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008584:	462b      	mov	r3, r5
 8008586:	2200      	movs	r2, #0
 8008588:	4543      	cmp	r3, r8
 800858a:	d321      	bcc.n	80085d0 <__multiply+0x98>
 800858c:	f107 0114 	add.w	r1, r7, #20
 8008590:	f104 0214 	add.w	r2, r4, #20
 8008594:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008598:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800859c:	9302      	str	r3, [sp, #8]
 800859e:	1b13      	subs	r3, r2, r4
 80085a0:	3b15      	subs	r3, #21
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	3304      	adds	r3, #4
 80085a8:	f104 0715 	add.w	r7, r4, #21
 80085ac:	42ba      	cmp	r2, r7
 80085ae:	bf38      	it	cc
 80085b0:	2304      	movcc	r3, #4
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	9b02      	ldr	r3, [sp, #8]
 80085b6:	9103      	str	r1, [sp, #12]
 80085b8:	428b      	cmp	r3, r1
 80085ba:	d80c      	bhi.n	80085d6 <__multiply+0x9e>
 80085bc:	2e00      	cmp	r6, #0
 80085be:	dd03      	ble.n	80085c8 <__multiply+0x90>
 80085c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d05b      	beq.n	8008680 <__multiply+0x148>
 80085c8:	6106      	str	r6, [r0, #16]
 80085ca:	b005      	add	sp, #20
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	f843 2b04 	str.w	r2, [r3], #4
 80085d4:	e7d8      	b.n	8008588 <__multiply+0x50>
 80085d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80085da:	f1ba 0f00 	cmp.w	sl, #0
 80085de:	d024      	beq.n	800862a <__multiply+0xf2>
 80085e0:	f104 0e14 	add.w	lr, r4, #20
 80085e4:	46a9      	mov	r9, r5
 80085e6:	f04f 0c00 	mov.w	ip, #0
 80085ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085ee:	f8d9 3000 	ldr.w	r3, [r9]
 80085f2:	fa1f fb87 	uxth.w	fp, r7
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80085fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008600:	f8d9 7000 	ldr.w	r7, [r9]
 8008604:	4463      	add	r3, ip
 8008606:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800860a:	fb0a c70b 	mla	r7, sl, fp, ip
 800860e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008612:	b29b      	uxth	r3, r3
 8008614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008618:	4572      	cmp	r2, lr
 800861a:	f849 3b04 	str.w	r3, [r9], #4
 800861e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008622:	d8e2      	bhi.n	80085ea <__multiply+0xb2>
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	f845 c003 	str.w	ip, [r5, r3]
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008630:	3104      	adds	r1, #4
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	d021      	beq.n	800867c <__multiply+0x144>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	f104 0c14 	add.w	ip, r4, #20
 800863e:	46ae      	mov	lr, r5
 8008640:	f04f 0a00 	mov.w	sl, #0
 8008644:	f8bc b000 	ldrh.w	fp, [ip]
 8008648:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800864c:	fb09 770b 	mla	r7, r9, fp, r7
 8008650:	4457      	add	r7, sl
 8008652:	b29b      	uxth	r3, r3
 8008654:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008658:	f84e 3b04 	str.w	r3, [lr], #4
 800865c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008664:	f8be 3000 	ldrh.w	r3, [lr]
 8008668:	fb09 330a 	mla	r3, r9, sl, r3
 800866c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008670:	4562      	cmp	r2, ip
 8008672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008676:	d8e5      	bhi.n	8008644 <__multiply+0x10c>
 8008678:	9f01      	ldr	r7, [sp, #4]
 800867a:	51eb      	str	r3, [r5, r7]
 800867c:	3504      	adds	r5, #4
 800867e:	e799      	b.n	80085b4 <__multiply+0x7c>
 8008680:	3e01      	subs	r6, #1
 8008682:	e79b      	b.n	80085bc <__multiply+0x84>
 8008684:	08009700 	.word	0x08009700
 8008688:	08009711 	.word	0x08009711

0800868c <__pow5mult>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	4615      	mov	r5, r2
 8008692:	f012 0203 	ands.w	r2, r2, #3
 8008696:	4607      	mov	r7, r0
 8008698:	460e      	mov	r6, r1
 800869a:	d007      	beq.n	80086ac <__pow5mult+0x20>
 800869c:	4c25      	ldr	r4, [pc, #148]	@ (8008734 <__pow5mult+0xa8>)
 800869e:	3a01      	subs	r2, #1
 80086a0:	2300      	movs	r3, #0
 80086a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086a6:	f7ff fe9f 	bl	80083e8 <__multadd>
 80086aa:	4606      	mov	r6, r0
 80086ac:	10ad      	asrs	r5, r5, #2
 80086ae:	d03d      	beq.n	800872c <__pow5mult+0xa0>
 80086b0:	69fc      	ldr	r4, [r7, #28]
 80086b2:	b97c      	cbnz	r4, 80086d4 <__pow5mult+0x48>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f7fe f8a7 	bl	8006808 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	61f8      	str	r0, [r7, #28]
 80086be:	b928      	cbnz	r0, 80086cc <__pow5mult+0x40>
 80086c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008738 <__pow5mult+0xac>)
 80086c2:	481e      	ldr	r0, [pc, #120]	@ (800873c <__pow5mult+0xb0>)
 80086c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086c8:	f000 fda2 	bl	8009210 <__assert_func>
 80086cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086d0:	6004      	str	r4, [r0, #0]
 80086d2:	60c4      	str	r4, [r0, #12]
 80086d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086dc:	b94c      	cbnz	r4, 80086f2 <__pow5mult+0x66>
 80086de:	f240 2171 	movw	r1, #625	@ 0x271
 80086e2:	4638      	mov	r0, r7
 80086e4:	f7ff ff12 	bl	800850c <__i2b>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ee:	4604      	mov	r4, r0
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	07eb      	lsls	r3, r5, #31
 80086f8:	d50a      	bpl.n	8008710 <__pow5mult+0x84>
 80086fa:	4631      	mov	r1, r6
 80086fc:	4622      	mov	r2, r4
 80086fe:	4638      	mov	r0, r7
 8008700:	f7ff ff1a 	bl	8008538 <__multiply>
 8008704:	4631      	mov	r1, r6
 8008706:	4680      	mov	r8, r0
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff fe4b 	bl	80083a4 <_Bfree>
 800870e:	4646      	mov	r6, r8
 8008710:	106d      	asrs	r5, r5, #1
 8008712:	d00b      	beq.n	800872c <__pow5mult+0xa0>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	b938      	cbnz	r0, 8008728 <__pow5mult+0x9c>
 8008718:	4622      	mov	r2, r4
 800871a:	4621      	mov	r1, r4
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff ff0b 	bl	8008538 <__multiply>
 8008722:	6020      	str	r0, [r4, #0]
 8008724:	f8c0 9000 	str.w	r9, [r0]
 8008728:	4604      	mov	r4, r0
 800872a:	e7e4      	b.n	80086f6 <__pow5mult+0x6a>
 800872c:	4630      	mov	r0, r6
 800872e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008732:	bf00      	nop
 8008734:	0800976c 	.word	0x0800976c
 8008738:	08009691 	.word	0x08009691
 800873c:	08009711 	.word	0x08009711

08008740 <__lshift>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	6849      	ldr	r1, [r1, #4]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	4607      	mov	r7, r0
 8008752:	4691      	mov	r9, r2
 8008754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008758:	f108 0601 	add.w	r6, r8, #1
 800875c:	42b3      	cmp	r3, r6
 800875e:	db0b      	blt.n	8008778 <__lshift+0x38>
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff fddf 	bl	8008324 <_Balloc>
 8008766:	4605      	mov	r5, r0
 8008768:	b948      	cbnz	r0, 800877e <__lshift+0x3e>
 800876a:	4602      	mov	r2, r0
 800876c:	4b28      	ldr	r3, [pc, #160]	@ (8008810 <__lshift+0xd0>)
 800876e:	4829      	ldr	r0, [pc, #164]	@ (8008814 <__lshift+0xd4>)
 8008770:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008774:	f000 fd4c 	bl	8009210 <__assert_func>
 8008778:	3101      	adds	r1, #1
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	e7ee      	b.n	800875c <__lshift+0x1c>
 800877e:	2300      	movs	r3, #0
 8008780:	f100 0114 	add.w	r1, r0, #20
 8008784:	f100 0210 	add.w	r2, r0, #16
 8008788:	4618      	mov	r0, r3
 800878a:	4553      	cmp	r3, sl
 800878c:	db33      	blt.n	80087f6 <__lshift+0xb6>
 800878e:	6920      	ldr	r0, [r4, #16]
 8008790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008794:	f104 0314 	add.w	r3, r4, #20
 8008798:	f019 091f 	ands.w	r9, r9, #31
 800879c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087a4:	d02b      	beq.n	80087fe <__lshift+0xbe>
 80087a6:	f1c9 0e20 	rsb	lr, r9, #32
 80087aa:	468a      	mov	sl, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	fa00 f009 	lsl.w	r0, r0, r9
 80087b4:	4310      	orrs	r0, r2
 80087b6:	f84a 0b04 	str.w	r0, [sl], #4
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	459c      	cmp	ip, r3
 80087c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087c4:	d8f3      	bhi.n	80087ae <__lshift+0x6e>
 80087c6:	ebac 0304 	sub.w	r3, ip, r4
 80087ca:	3b15      	subs	r3, #21
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	3304      	adds	r3, #4
 80087d2:	f104 0015 	add.w	r0, r4, #21
 80087d6:	4584      	cmp	ip, r0
 80087d8:	bf38      	it	cc
 80087da:	2304      	movcc	r3, #4
 80087dc:	50ca      	str	r2, [r1, r3]
 80087de:	b10a      	cbz	r2, 80087e4 <__lshift+0xa4>
 80087e0:	f108 0602 	add.w	r6, r8, #2
 80087e4:	3e01      	subs	r6, #1
 80087e6:	4638      	mov	r0, r7
 80087e8:	612e      	str	r6, [r5, #16]
 80087ea:	4621      	mov	r1, r4
 80087ec:	f7ff fdda 	bl	80083a4 <_Bfree>
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fa:	3301      	adds	r3, #1
 80087fc:	e7c5      	b.n	800878a <__lshift+0x4a>
 80087fe:	3904      	subs	r1, #4
 8008800:	f853 2b04 	ldr.w	r2, [r3], #4
 8008804:	f841 2f04 	str.w	r2, [r1, #4]!
 8008808:	459c      	cmp	ip, r3
 800880a:	d8f9      	bhi.n	8008800 <__lshift+0xc0>
 800880c:	e7ea      	b.n	80087e4 <__lshift+0xa4>
 800880e:	bf00      	nop
 8008810:	08009700 	.word	0x08009700
 8008814:	08009711 	.word	0x08009711

08008818 <__mcmp>:
 8008818:	690a      	ldr	r2, [r1, #16]
 800881a:	4603      	mov	r3, r0
 800881c:	6900      	ldr	r0, [r0, #16]
 800881e:	1a80      	subs	r0, r0, r2
 8008820:	b530      	push	{r4, r5, lr}
 8008822:	d10e      	bne.n	8008842 <__mcmp+0x2a>
 8008824:	3314      	adds	r3, #20
 8008826:	3114      	adds	r1, #20
 8008828:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800882c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008830:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008834:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008838:	4295      	cmp	r5, r2
 800883a:	d003      	beq.n	8008844 <__mcmp+0x2c>
 800883c:	d205      	bcs.n	800884a <__mcmp+0x32>
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	bd30      	pop	{r4, r5, pc}
 8008844:	42a3      	cmp	r3, r4
 8008846:	d3f3      	bcc.n	8008830 <__mcmp+0x18>
 8008848:	e7fb      	b.n	8008842 <__mcmp+0x2a>
 800884a:	2001      	movs	r0, #1
 800884c:	e7f9      	b.n	8008842 <__mcmp+0x2a>
	...

08008850 <__mdiff>:
 8008850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	4689      	mov	r9, r1
 8008856:	4606      	mov	r6, r0
 8008858:	4611      	mov	r1, r2
 800885a:	4648      	mov	r0, r9
 800885c:	4614      	mov	r4, r2
 800885e:	f7ff ffdb 	bl	8008818 <__mcmp>
 8008862:	1e05      	subs	r5, r0, #0
 8008864:	d112      	bne.n	800888c <__mdiff+0x3c>
 8008866:	4629      	mov	r1, r5
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff fd5b 	bl	8008324 <_Balloc>
 800886e:	4602      	mov	r2, r0
 8008870:	b928      	cbnz	r0, 800887e <__mdiff+0x2e>
 8008872:	4b3f      	ldr	r3, [pc, #252]	@ (8008970 <__mdiff+0x120>)
 8008874:	f240 2137 	movw	r1, #567	@ 0x237
 8008878:	483e      	ldr	r0, [pc, #248]	@ (8008974 <__mdiff+0x124>)
 800887a:	f000 fcc9 	bl	8009210 <__assert_func>
 800887e:	2301      	movs	r3, #1
 8008880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008884:	4610      	mov	r0, r2
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	bfbc      	itt	lt
 800888e:	464b      	movlt	r3, r9
 8008890:	46a1      	movlt	r9, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008898:	bfba      	itte	lt
 800889a:	461c      	movlt	r4, r3
 800889c:	2501      	movlt	r5, #1
 800889e:	2500      	movge	r5, #0
 80088a0:	f7ff fd40 	bl	8008324 <_Balloc>
 80088a4:	4602      	mov	r2, r0
 80088a6:	b918      	cbnz	r0, 80088b0 <__mdiff+0x60>
 80088a8:	4b31      	ldr	r3, [pc, #196]	@ (8008970 <__mdiff+0x120>)
 80088aa:	f240 2145 	movw	r1, #581	@ 0x245
 80088ae:	e7e3      	b.n	8008878 <__mdiff+0x28>
 80088b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088b4:	6926      	ldr	r6, [r4, #16]
 80088b6:	60c5      	str	r5, [r0, #12]
 80088b8:	f109 0310 	add.w	r3, r9, #16
 80088bc:	f109 0514 	add.w	r5, r9, #20
 80088c0:	f104 0e14 	add.w	lr, r4, #20
 80088c4:	f100 0b14 	add.w	fp, r0, #20
 80088c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	46d9      	mov	r9, fp
 80088d4:	f04f 0c00 	mov.w	ip, #0
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	fa1f f38a 	uxth.w	r3, sl
 80088e8:	4619      	mov	r1, r3
 80088ea:	b283      	uxth	r3, r0
 80088ec:	1acb      	subs	r3, r1, r3
 80088ee:	0c00      	lsrs	r0, r0, #16
 80088f0:	4463      	add	r3, ip
 80088f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008900:	4576      	cmp	r6, lr
 8008902:	f849 3b04 	str.w	r3, [r9], #4
 8008906:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800890a:	d8e5      	bhi.n	80088d8 <__mdiff+0x88>
 800890c:	1b33      	subs	r3, r6, r4
 800890e:	3b15      	subs	r3, #21
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	3415      	adds	r4, #21
 8008916:	3304      	adds	r3, #4
 8008918:	42a6      	cmp	r6, r4
 800891a:	bf38      	it	cc
 800891c:	2304      	movcc	r3, #4
 800891e:	441d      	add	r5, r3
 8008920:	445b      	add	r3, fp
 8008922:	461e      	mov	r6, r3
 8008924:	462c      	mov	r4, r5
 8008926:	4544      	cmp	r4, r8
 8008928:	d30e      	bcc.n	8008948 <__mdiff+0xf8>
 800892a:	f108 0103 	add.w	r1, r8, #3
 800892e:	1b49      	subs	r1, r1, r5
 8008930:	f021 0103 	bic.w	r1, r1, #3
 8008934:	3d03      	subs	r5, #3
 8008936:	45a8      	cmp	r8, r5
 8008938:	bf38      	it	cc
 800893a:	2100      	movcc	r1, #0
 800893c:	440b      	add	r3, r1
 800893e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008942:	b191      	cbz	r1, 800896a <__mdiff+0x11a>
 8008944:	6117      	str	r7, [r2, #16]
 8008946:	e79d      	b.n	8008884 <__mdiff+0x34>
 8008948:	f854 1b04 	ldr.w	r1, [r4], #4
 800894c:	46e6      	mov	lr, ip
 800894e:	0c08      	lsrs	r0, r1, #16
 8008950:	fa1c fc81 	uxtah	ip, ip, r1
 8008954:	4471      	add	r1, lr
 8008956:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800895a:	b289      	uxth	r1, r1
 800895c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008960:	f846 1b04 	str.w	r1, [r6], #4
 8008964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008968:	e7dd      	b.n	8008926 <__mdiff+0xd6>
 800896a:	3f01      	subs	r7, #1
 800896c:	e7e7      	b.n	800893e <__mdiff+0xee>
 800896e:	bf00      	nop
 8008970:	08009700 	.word	0x08009700
 8008974:	08009711 	.word	0x08009711

08008978 <__d2b>:
 8008978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800897c:	460f      	mov	r7, r1
 800897e:	2101      	movs	r1, #1
 8008980:	ec59 8b10 	vmov	r8, r9, d0
 8008984:	4616      	mov	r6, r2
 8008986:	f7ff fccd 	bl	8008324 <_Balloc>
 800898a:	4604      	mov	r4, r0
 800898c:	b930      	cbnz	r0, 800899c <__d2b+0x24>
 800898e:	4602      	mov	r2, r0
 8008990:	4b23      	ldr	r3, [pc, #140]	@ (8008a20 <__d2b+0xa8>)
 8008992:	4824      	ldr	r0, [pc, #144]	@ (8008a24 <__d2b+0xac>)
 8008994:	f240 310f 	movw	r1, #783	@ 0x30f
 8008998:	f000 fc3a 	bl	8009210 <__assert_func>
 800899c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089a4:	b10d      	cbz	r5, 80089aa <__d2b+0x32>
 80089a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	f1b8 0300 	subs.w	r3, r8, #0
 80089b0:	d023      	beq.n	80089fa <__d2b+0x82>
 80089b2:	4668      	mov	r0, sp
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	f7ff fd7c 	bl	80084b2 <__lo0bits>
 80089ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089be:	b1d0      	cbz	r0, 80089f6 <__d2b+0x7e>
 80089c0:	f1c0 0320 	rsb	r3, r0, #32
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	430b      	orrs	r3, r1
 80089ca:	40c2      	lsrs	r2, r0
 80089cc:	6163      	str	r3, [r4, #20]
 80089ce:	9201      	str	r2, [sp, #4]
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	61a3      	str	r3, [r4, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bf0c      	ite	eq
 80089d8:	2201      	moveq	r2, #1
 80089da:	2202      	movne	r2, #2
 80089dc:	6122      	str	r2, [r4, #16]
 80089de:	b1a5      	cbz	r5, 8008a0a <__d2b+0x92>
 80089e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089e4:	4405      	add	r5, r0
 80089e6:	603d      	str	r5, [r7, #0]
 80089e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4620      	mov	r0, r4
 80089f0:	b003      	add	sp, #12
 80089f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089f6:	6161      	str	r1, [r4, #20]
 80089f8:	e7ea      	b.n	80089d0 <__d2b+0x58>
 80089fa:	a801      	add	r0, sp, #4
 80089fc:	f7ff fd59 	bl	80084b2 <__lo0bits>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	3020      	adds	r0, #32
 8008a06:	2201      	movs	r2, #1
 8008a08:	e7e8      	b.n	80089dc <__d2b+0x64>
 8008a0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a12:	6038      	str	r0, [r7, #0]
 8008a14:	6918      	ldr	r0, [r3, #16]
 8008a16:	f7ff fd2d 	bl	8008474 <__hi0bits>
 8008a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a1e:	e7e5      	b.n	80089ec <__d2b+0x74>
 8008a20:	08009700 	.word	0x08009700
 8008a24:	08009711 	.word	0x08009711

08008a28 <__ssputs_r>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	688e      	ldr	r6, [r1, #8]
 8008a2e:	461f      	mov	r7, r3
 8008a30:	42be      	cmp	r6, r7
 8008a32:	680b      	ldr	r3, [r1, #0]
 8008a34:	4682      	mov	sl, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4690      	mov	r8, r2
 8008a3a:	d82d      	bhi.n	8008a98 <__ssputs_r+0x70>
 8008a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a44:	d026      	beq.n	8008a94 <__ssputs_r+0x6c>
 8008a46:	6965      	ldr	r5, [r4, #20]
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a4e:	eba3 0901 	sub.w	r9, r3, r1
 8008a52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a56:	1c7b      	adds	r3, r7, #1
 8008a58:	444b      	add	r3, r9
 8008a5a:	106d      	asrs	r5, r5, #1
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	bf38      	it	cc
 8008a60:	461d      	movcc	r5, r3
 8008a62:	0553      	lsls	r3, r2, #21
 8008a64:	d527      	bpl.n	8008ab6 <__ssputs_r+0x8e>
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7fd fef8 	bl	800685c <_malloc_r>
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	b360      	cbz	r0, 8008aca <__ssputs_r+0xa2>
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	464a      	mov	r2, r9
 8008a74:	f7fe fdb1 	bl	80075da <memcpy>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	6126      	str	r6, [r4, #16]
 8008a86:	6165      	str	r5, [r4, #20]
 8008a88:	444e      	add	r6, r9
 8008a8a:	eba5 0509 	sub.w	r5, r5, r9
 8008a8e:	6026      	str	r6, [r4, #0]
 8008a90:	60a5      	str	r5, [r4, #8]
 8008a92:	463e      	mov	r6, r7
 8008a94:	42be      	cmp	r6, r7
 8008a96:	d900      	bls.n	8008a9a <__ssputs_r+0x72>
 8008a98:	463e      	mov	r6, r7
 8008a9a:	6820      	ldr	r0, [r4, #0]
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	f000 fb9c 	bl	80091dc <memmove>
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	1b9b      	subs	r3, r3, r6
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	4433      	add	r3, r6
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	f000 fbee 	bl	8009298 <_realloc_r>
 8008abc:	4606      	mov	r6, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1e0      	bne.n	8008a84 <__ssputs_r+0x5c>
 8008ac2:	6921      	ldr	r1, [r4, #16]
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	f7ff fbe3 	bl	8008290 <_free_r>
 8008aca:	230c      	movs	r3, #12
 8008acc:	f8ca 3000 	str.w	r3, [sl]
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	e7e9      	b.n	8008ab2 <__ssputs_r+0x8a>
	...

08008ae0 <_svfiprintf_r>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	4698      	mov	r8, r3
 8008ae6:	898b      	ldrh	r3, [r1, #12]
 8008ae8:	061b      	lsls	r3, r3, #24
 8008aea:	b09d      	sub	sp, #116	@ 0x74
 8008aec:	4607      	mov	r7, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	d510      	bpl.n	8008b16 <_svfiprintf_r+0x36>
 8008af4:	690b      	ldr	r3, [r1, #16]
 8008af6:	b973      	cbnz	r3, 8008b16 <_svfiprintf_r+0x36>
 8008af8:	2140      	movs	r1, #64	@ 0x40
 8008afa:	f7fd feaf 	bl	800685c <_malloc_r>
 8008afe:	6028      	str	r0, [r5, #0]
 8008b00:	6128      	str	r0, [r5, #16]
 8008b02:	b930      	cbnz	r0, 8008b12 <_svfiprintf_r+0x32>
 8008b04:	230c      	movs	r3, #12
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	b01d      	add	sp, #116	@ 0x74
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	2340      	movs	r3, #64	@ 0x40
 8008b14:	616b      	str	r3, [r5, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b24:	2330      	movs	r3, #48	@ 0x30
 8008b26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008cc4 <_svfiprintf_r+0x1e4>
 8008b2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b2e:	f04f 0901 	mov.w	r9, #1
 8008b32:	4623      	mov	r3, r4
 8008b34:	469a      	mov	sl, r3
 8008b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3a:	b10a      	cbz	r2, 8008b40 <_svfiprintf_r+0x60>
 8008b3c:	2a25      	cmp	r2, #37	@ 0x25
 8008b3e:	d1f9      	bne.n	8008b34 <_svfiprintf_r+0x54>
 8008b40:	ebba 0b04 	subs.w	fp, sl, r4
 8008b44:	d00b      	beq.n	8008b5e <_svfiprintf_r+0x7e>
 8008b46:	465b      	mov	r3, fp
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff6b 	bl	8008a28 <__ssputs_r>
 8008b52:	3001      	adds	r0, #1
 8008b54:	f000 80a7 	beq.w	8008ca6 <_svfiprintf_r+0x1c6>
 8008b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b5a:	445a      	add	r2, fp
 8008b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 809f 	beq.w	8008ca6 <_svfiprintf_r+0x1c6>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b80:	4654      	mov	r4, sl
 8008b82:	2205      	movs	r2, #5
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	484e      	ldr	r0, [pc, #312]	@ (8008cc4 <_svfiprintf_r+0x1e4>)
 8008b8a:	f7f7 fb21 	bl	80001d0 <memchr>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	b9d8      	cbnz	r0, 8008bca <_svfiprintf_r+0xea>
 8008b92:	06d0      	lsls	r0, r2, #27
 8008b94:	bf44      	itt	mi
 8008b96:	2320      	movmi	r3, #32
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b9c:	0711      	lsls	r1, r2, #28
 8008b9e:	bf44      	itt	mi
 8008ba0:	232b      	movmi	r3, #43	@ 0x2b
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8008baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bac:	d015      	beq.n	8008bda <_svfiprintf_r+0xfa>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbe:	3b30      	subs	r3, #48	@ 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d94b      	bls.n	8008c5c <_svfiprintf_r+0x17c>
 8008bc4:	b1b0      	cbz	r0, 8008bf4 <_svfiprintf_r+0x114>
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	e014      	b.n	8008bf4 <_svfiprintf_r+0x114>
 8008bca:	eba0 0308 	sub.w	r3, r0, r8
 8008bce:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	46a2      	mov	sl, r4
 8008bd8:	e7d2      	b.n	8008b80 <_svfiprintf_r+0xa0>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9103      	str	r1, [sp, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfbb      	ittet	lt
 8008be6:	425b      	neglt	r3, r3
 8008be8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bec:	9307      	strge	r3, [sp, #28]
 8008bee:	9307      	strlt	r3, [sp, #28]
 8008bf0:	bfb8      	it	lt
 8008bf2:	9204      	strlt	r2, [sp, #16]
 8008bf4:	7823      	ldrb	r3, [r4, #0]
 8008bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf8:	d10a      	bne.n	8008c10 <_svfiprintf_r+0x130>
 8008bfa:	7863      	ldrb	r3, [r4, #1]
 8008bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfe:	d132      	bne.n	8008c66 <_svfiprintf_r+0x186>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9203      	str	r2, [sp, #12]
 8008c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c0c:	3402      	adds	r4, #2
 8008c0e:	9305      	str	r3, [sp, #20]
 8008c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008cd4 <_svfiprintf_r+0x1f4>
 8008c14:	7821      	ldrb	r1, [r4, #0]
 8008c16:	2203      	movs	r2, #3
 8008c18:	4650      	mov	r0, sl
 8008c1a:	f7f7 fad9 	bl	80001d0 <memchr>
 8008c1e:	b138      	cbz	r0, 8008c30 <_svfiprintf_r+0x150>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	eba0 000a 	sub.w	r0, r0, sl
 8008c26:	2240      	movs	r2, #64	@ 0x40
 8008c28:	4082      	lsls	r2, r0
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c34:	4824      	ldr	r0, [pc, #144]	@ (8008cc8 <_svfiprintf_r+0x1e8>)
 8008c36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c3a:	2206      	movs	r2, #6
 8008c3c:	f7f7 fac8 	bl	80001d0 <memchr>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d036      	beq.n	8008cb2 <_svfiprintf_r+0x1d2>
 8008c44:	4b21      	ldr	r3, [pc, #132]	@ (8008ccc <_svfiprintf_r+0x1ec>)
 8008c46:	bb1b      	cbnz	r3, 8008c90 <_svfiprintf_r+0x1b0>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	3307      	adds	r3, #7
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c56:	4433      	add	r3, r6
 8008c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5a:	e76a      	b.n	8008b32 <_svfiprintf_r+0x52>
 8008c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c60:	460c      	mov	r4, r1
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7a8      	b.n	8008bb8 <_svfiprintf_r+0xd8>
 8008c66:	2300      	movs	r3, #0
 8008c68:	3401      	adds	r4, #1
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 0c0a 	mov.w	ip, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c78:	3a30      	subs	r2, #48	@ 0x30
 8008c7a:	2a09      	cmp	r2, #9
 8008c7c:	d903      	bls.n	8008c86 <_svfiprintf_r+0x1a6>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0c6      	beq.n	8008c10 <_svfiprintf_r+0x130>
 8008c82:	9105      	str	r1, [sp, #20]
 8008c84:	e7c4      	b.n	8008c10 <_svfiprintf_r+0x130>
 8008c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7f0      	b.n	8008c72 <_svfiprintf_r+0x192>
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	462a      	mov	r2, r5
 8008c96:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd0 <_svfiprintf_r+0x1f0>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f7fd ff0a 	bl	8006ab4 <_printf_float>
 8008ca0:	1c42      	adds	r2, r0, #1
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	d1d6      	bne.n	8008c54 <_svfiprintf_r+0x174>
 8008ca6:	89ab      	ldrh	r3, [r5, #12]
 8008ca8:	065b      	lsls	r3, r3, #25
 8008caa:	f53f af2d 	bmi.w	8008b08 <_svfiprintf_r+0x28>
 8008cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cb0:	e72c      	b.n	8008b0c <_svfiprintf_r+0x2c>
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <_svfiprintf_r+0x1f0>)
 8008cba:	a904      	add	r1, sp, #16
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7fe f991 	bl	8006fe4 <_printf_i>
 8008cc2:	e7ed      	b.n	8008ca0 <_svfiprintf_r+0x1c0>
 8008cc4:	08009868 	.word	0x08009868
 8008cc8:	08009872 	.word	0x08009872
 8008ccc:	08006ab5 	.word	0x08006ab5
 8008cd0:	08008a29 	.word	0x08008a29
 8008cd4:	0800986e 	.word	0x0800986e

08008cd8 <__sfputc_r>:
 8008cd8:	6893      	ldr	r3, [r2, #8]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	b410      	push	{r4}
 8008ce0:	6093      	str	r3, [r2, #8]
 8008ce2:	da08      	bge.n	8008cf6 <__sfputc_r+0x1e>
 8008ce4:	6994      	ldr	r4, [r2, #24]
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	db01      	blt.n	8008cee <__sfputc_r+0x16>
 8008cea:	290a      	cmp	r1, #10
 8008cec:	d103      	bne.n	8008cf6 <__sfputc_r+0x1e>
 8008cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf2:	f000 b9df 	b.w	80090b4 <__swbuf_r>
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	1c58      	adds	r0, r3, #1
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	7019      	strb	r1, [r3, #0]
 8008cfe:	4608      	mov	r0, r1
 8008d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <__sfputs_r>:
 8008d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	18d5      	adds	r5, r2, r3
 8008d10:	42ac      	cmp	r4, r5
 8008d12:	d101      	bne.n	8008d18 <__sfputs_r+0x12>
 8008d14:	2000      	movs	r0, #0
 8008d16:	e007      	b.n	8008d28 <__sfputs_r+0x22>
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ffda 	bl	8008cd8 <__sfputc_r>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d1f3      	bne.n	8008d10 <__sfputs_r+0xa>
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d2c <_vfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	460d      	mov	r5, r1
 8008d32:	b09d      	sub	sp, #116	@ 0x74
 8008d34:	4614      	mov	r4, r2
 8008d36:	4698      	mov	r8, r3
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b118      	cbz	r0, 8008d44 <_vfiprintf_r+0x18>
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	b90b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x18>
 8008d40:	f7fe fafc 	bl	800733c <__sinit>
 8008d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d46:	07d9      	lsls	r1, r3, #31
 8008d48:	d405      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d52:	f7fe fc40 	bl	80075d6 <__retarget_lock_acquire_recursive>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	071b      	lsls	r3, r3, #28
 8008d5a:	d501      	bpl.n	8008d60 <_vfiprintf_r+0x34>
 8008d5c:	692b      	ldr	r3, [r5, #16]
 8008d5e:	b99b      	cbnz	r3, 8008d88 <_vfiprintf_r+0x5c>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f000 f9e4 	bl	8009130 <__swsetup_r>
 8008d68:	b170      	cbz	r0, 8008d88 <_vfiprintf_r+0x5c>
 8008d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6c:	07dc      	lsls	r4, r3, #31
 8008d6e:	d504      	bpl.n	8008d7a <_vfiprintf_r+0x4e>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	b01d      	add	sp, #116	@ 0x74
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	0598      	lsls	r0, r3, #22
 8008d7e:	d4f7      	bmi.n	8008d70 <_vfiprintf_r+0x44>
 8008d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d82:	f7fe fc29 	bl	80075d8 <__retarget_lock_release_recursive>
 8008d86:	e7f3      	b.n	8008d70 <_vfiprintf_r+0x44>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d96:	2330      	movs	r3, #48	@ 0x30
 8008d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f48 <_vfiprintf_r+0x21c>
 8008d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008da0:	f04f 0901 	mov.w	r9, #1
 8008da4:	4623      	mov	r3, r4
 8008da6:	469a      	mov	sl, r3
 8008da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dac:	b10a      	cbz	r2, 8008db2 <_vfiprintf_r+0x86>
 8008dae:	2a25      	cmp	r2, #37	@ 0x25
 8008db0:	d1f9      	bne.n	8008da6 <_vfiprintf_r+0x7a>
 8008db2:	ebba 0b04 	subs.w	fp, sl, r4
 8008db6:	d00b      	beq.n	8008dd0 <_vfiprintf_r+0xa4>
 8008db8:	465b      	mov	r3, fp
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ffa1 	bl	8008d06 <__sfputs_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f000 80a7 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dcc:	445a      	add	r2, fp
 8008dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 809f 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de4:	f10a 0a01 	add.w	sl, sl, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	9307      	str	r3, [sp, #28]
 8008dec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008df2:	4654      	mov	r4, sl
 8008df4:	2205      	movs	r2, #5
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	4853      	ldr	r0, [pc, #332]	@ (8008f48 <_vfiprintf_r+0x21c>)
 8008dfc:	f7f7 f9e8 	bl	80001d0 <memchr>
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	b9d8      	cbnz	r0, 8008e3c <_vfiprintf_r+0x110>
 8008e04:	06d1      	lsls	r1, r2, #27
 8008e06:	bf44      	itt	mi
 8008e08:	2320      	movmi	r3, #32
 8008e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e0e:	0713      	lsls	r3, r2, #28
 8008e10:	bf44      	itt	mi
 8008e12:	232b      	movmi	r3, #43	@ 0x2b
 8008e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e18:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e1e:	d015      	beq.n	8008e4c <_vfiprintf_r+0x120>
 8008e20:	9a07      	ldr	r2, [sp, #28]
 8008e22:	4654      	mov	r4, sl
 8008e24:	2000      	movs	r0, #0
 8008e26:	f04f 0c0a 	mov.w	ip, #10
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e30:	3b30      	subs	r3, #48	@ 0x30
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d94b      	bls.n	8008ece <_vfiprintf_r+0x1a2>
 8008e36:	b1b0      	cbz	r0, 8008e66 <_vfiprintf_r+0x13a>
 8008e38:	9207      	str	r2, [sp, #28]
 8008e3a:	e014      	b.n	8008e66 <_vfiprintf_r+0x13a>
 8008e3c:	eba0 0308 	sub.w	r3, r0, r8
 8008e40:	fa09 f303 	lsl.w	r3, r9, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	46a2      	mov	sl, r4
 8008e4a:	e7d2      	b.n	8008df2 <_vfiprintf_r+0xc6>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d19      	adds	r1, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9103      	str	r1, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfbb      	ittet	lt
 8008e58:	425b      	neglt	r3, r3
 8008e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e5e:	9307      	strge	r3, [sp, #28]
 8008e60:	9307      	strlt	r3, [sp, #28]
 8008e62:	bfb8      	it	lt
 8008e64:	9204      	strlt	r2, [sp, #16]
 8008e66:	7823      	ldrb	r3, [r4, #0]
 8008e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e6a:	d10a      	bne.n	8008e82 <_vfiprintf_r+0x156>
 8008e6c:	7863      	ldrb	r3, [r4, #1]
 8008e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e70:	d132      	bne.n	8008ed8 <_vfiprintf_r+0x1ac>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	9203      	str	r2, [sp, #12]
 8008e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e7e:	3402      	adds	r4, #2
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f58 <_vfiprintf_r+0x22c>
 8008e86:	7821      	ldrb	r1, [r4, #0]
 8008e88:	2203      	movs	r2, #3
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	f7f7 f9a0 	bl	80001d0 <memchr>
 8008e90:	b138      	cbz	r0, 8008ea2 <_vfiprintf_r+0x176>
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	eba0 000a 	sub.w	r0, r0, sl
 8008e98:	2240      	movs	r2, #64	@ 0x40
 8008e9a:	4082      	lsls	r2, r0
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	3401      	adds	r4, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea6:	4829      	ldr	r0, [pc, #164]	@ (8008f4c <_vfiprintf_r+0x220>)
 8008ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eac:	2206      	movs	r2, #6
 8008eae:	f7f7 f98f 	bl	80001d0 <memchr>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d03f      	beq.n	8008f36 <_vfiprintf_r+0x20a>
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <_vfiprintf_r+0x224>)
 8008eb8:	bb1b      	cbnz	r3, 8008f02 <_vfiprintf_r+0x1d6>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	3307      	adds	r3, #7
 8008ebe:	f023 0307 	bic.w	r3, r3, #7
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	443b      	add	r3, r7
 8008eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ecc:	e76a      	b.n	8008da4 <_vfiprintf_r+0x78>
 8008ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e7a8      	b.n	8008e2a <_vfiprintf_r+0xfe>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	3401      	adds	r4, #1
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	f04f 0c0a 	mov.w	ip, #10
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eea:	3a30      	subs	r2, #48	@ 0x30
 8008eec:	2a09      	cmp	r2, #9
 8008eee:	d903      	bls.n	8008ef8 <_vfiprintf_r+0x1cc>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0c6      	beq.n	8008e82 <_vfiprintf_r+0x156>
 8008ef4:	9105      	str	r1, [sp, #20]
 8008ef6:	e7c4      	b.n	8008e82 <_vfiprintf_r+0x156>
 8008ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efc:	4604      	mov	r4, r0
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7f0      	b.n	8008ee4 <_vfiprintf_r+0x1b8>
 8008f02:	ab03      	add	r3, sp, #12
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	462a      	mov	r2, r5
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f0a:	a904      	add	r1, sp, #16
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7fd fdd1 	bl	8006ab4 <_printf_float>
 8008f12:	4607      	mov	r7, r0
 8008f14:	1c78      	adds	r0, r7, #1
 8008f16:	d1d6      	bne.n	8008ec6 <_vfiprintf_r+0x19a>
 8008f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f1a:	07d9      	lsls	r1, r3, #31
 8008f1c:	d405      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d402      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f26:	f7fe fb57 	bl	80075d8 <__retarget_lock_release_recursive>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	065b      	lsls	r3, r3, #25
 8008f2e:	f53f af1f 	bmi.w	8008d70 <_vfiprintf_r+0x44>
 8008f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f34:	e71e      	b.n	8008d74 <_vfiprintf_r+0x48>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7fe f84f 	bl	8006fe4 <_printf_i>
 8008f46:	e7e4      	b.n	8008f12 <_vfiprintf_r+0x1e6>
 8008f48:	08009868 	.word	0x08009868
 8008f4c:	08009872 	.word	0x08009872
 8008f50:	08006ab5 	.word	0x08006ab5
 8008f54:	08008d07 	.word	0x08008d07
 8008f58:	0800986e 	.word	0x0800986e

08008f5c <__sflush_r>:
 8008f5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	0716      	lsls	r6, r2, #28
 8008f66:	4605      	mov	r5, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	d454      	bmi.n	8009016 <__sflush_r+0xba>
 8008f6c:	684b      	ldr	r3, [r1, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dc02      	bgt.n	8008f78 <__sflush_r+0x1c>
 8008f72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	dd48      	ble.n	800900a <__sflush_r+0xae>
 8008f78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d045      	beq.n	800900a <__sflush_r+0xae>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f84:	682f      	ldr	r7, [r5, #0]
 8008f86:	6a21      	ldr	r1, [r4, #32]
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	d030      	beq.n	8008fee <__sflush_r+0x92>
 8008f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	0759      	lsls	r1, r3, #29
 8008f92:	d505      	bpl.n	8008fa0 <__sflush_r+0x44>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	1ad2      	subs	r2, r2, r3
 8008f98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f9a:	b10b      	cbz	r3, 8008fa0 <__sflush_r+0x44>
 8008f9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fa4:	6a21      	ldr	r1, [r4, #32]
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b0      	blx	r6
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	d106      	bne.n	8008fbe <__sflush_r+0x62>
 8008fb0:	6829      	ldr	r1, [r5, #0]
 8008fb2:	291d      	cmp	r1, #29
 8008fb4:	d82b      	bhi.n	800900e <__sflush_r+0xb2>
 8008fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8009060 <__sflush_r+0x104>)
 8008fb8:	410a      	asrs	r2, r1
 8008fba:	07d6      	lsls	r6, r2, #31
 8008fbc:	d427      	bmi.n	800900e <__sflush_r+0xb2>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6062      	str	r2, [r4, #4]
 8008fc2:	04d9      	lsls	r1, r3, #19
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	6022      	str	r2, [r4, #0]
 8008fc8:	d504      	bpl.n	8008fd4 <__sflush_r+0x78>
 8008fca:	1c42      	adds	r2, r0, #1
 8008fcc:	d101      	bne.n	8008fd2 <__sflush_r+0x76>
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	b903      	cbnz	r3, 8008fd4 <__sflush_r+0x78>
 8008fd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fd6:	602f      	str	r7, [r5, #0]
 8008fd8:	b1b9      	cbz	r1, 800900a <__sflush_r+0xae>
 8008fda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	d002      	beq.n	8008fe8 <__sflush_r+0x8c>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f7ff f954 	bl	8008290 <_free_r>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fec:	e00d      	b.n	800900a <__sflush_r+0xae>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	1c50      	adds	r0, r2, #1
 8008ff8:	d1c9      	bne.n	8008f8e <__sflush_r+0x32>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0c6      	beq.n	8008f8e <__sflush_r+0x32>
 8009000:	2b1d      	cmp	r3, #29
 8009002:	d001      	beq.n	8009008 <__sflush_r+0xac>
 8009004:	2b16      	cmp	r3, #22
 8009006:	d11e      	bne.n	8009046 <__sflush_r+0xea>
 8009008:	602f      	str	r7, [r5, #0]
 800900a:	2000      	movs	r0, #0
 800900c:	e022      	b.n	8009054 <__sflush_r+0xf8>
 800900e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009012:	b21b      	sxth	r3, r3
 8009014:	e01b      	b.n	800904e <__sflush_r+0xf2>
 8009016:	690f      	ldr	r7, [r1, #16]
 8009018:	2f00      	cmp	r7, #0
 800901a:	d0f6      	beq.n	800900a <__sflush_r+0xae>
 800901c:	0793      	lsls	r3, r2, #30
 800901e:	680e      	ldr	r6, [r1, #0]
 8009020:	bf08      	it	eq
 8009022:	694b      	ldreq	r3, [r1, #20]
 8009024:	600f      	str	r7, [r1, #0]
 8009026:	bf18      	it	ne
 8009028:	2300      	movne	r3, #0
 800902a:	eba6 0807 	sub.w	r8, r6, r7
 800902e:	608b      	str	r3, [r1, #8]
 8009030:	f1b8 0f00 	cmp.w	r8, #0
 8009034:	dde9      	ble.n	800900a <__sflush_r+0xae>
 8009036:	6a21      	ldr	r1, [r4, #32]
 8009038:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800903a:	4643      	mov	r3, r8
 800903c:	463a      	mov	r2, r7
 800903e:	4628      	mov	r0, r5
 8009040:	47b0      	blx	r6
 8009042:	2800      	cmp	r0, #0
 8009044:	dc08      	bgt.n	8009058 <__sflush_r+0xfc>
 8009046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	4407      	add	r7, r0
 800905a:	eba8 0800 	sub.w	r8, r8, r0
 800905e:	e7e7      	b.n	8009030 <__sflush_r+0xd4>
 8009060:	dfbffffe 	.word	0xdfbffffe

08009064 <_fflush_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	4605      	mov	r5, r0
 800906a:	460c      	mov	r4, r1
 800906c:	b913      	cbnz	r3, 8009074 <_fflush_r+0x10>
 800906e:	2500      	movs	r5, #0
 8009070:	4628      	mov	r0, r5
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	b118      	cbz	r0, 800907e <_fflush_r+0x1a>
 8009076:	6a03      	ldr	r3, [r0, #32]
 8009078:	b90b      	cbnz	r3, 800907e <_fflush_r+0x1a>
 800907a:	f7fe f95f 	bl	800733c <__sinit>
 800907e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0f3      	beq.n	800906e <_fflush_r+0xa>
 8009086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009088:	07d0      	lsls	r0, r2, #31
 800908a:	d404      	bmi.n	8009096 <_fflush_r+0x32>
 800908c:	0599      	lsls	r1, r3, #22
 800908e:	d402      	bmi.n	8009096 <_fflush_r+0x32>
 8009090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009092:	f7fe faa0 	bl	80075d6 <__retarget_lock_acquire_recursive>
 8009096:	4628      	mov	r0, r5
 8009098:	4621      	mov	r1, r4
 800909a:	f7ff ff5f 	bl	8008f5c <__sflush_r>
 800909e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090a0:	07da      	lsls	r2, r3, #31
 80090a2:	4605      	mov	r5, r0
 80090a4:	d4e4      	bmi.n	8009070 <_fflush_r+0xc>
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	059b      	lsls	r3, r3, #22
 80090aa:	d4e1      	bmi.n	8009070 <_fflush_r+0xc>
 80090ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090ae:	f7fe fa93 	bl	80075d8 <__retarget_lock_release_recursive>
 80090b2:	e7dd      	b.n	8009070 <_fflush_r+0xc>

080090b4 <__swbuf_r>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	460e      	mov	r6, r1
 80090b8:	4614      	mov	r4, r2
 80090ba:	4605      	mov	r5, r0
 80090bc:	b118      	cbz	r0, 80090c6 <__swbuf_r+0x12>
 80090be:	6a03      	ldr	r3, [r0, #32]
 80090c0:	b90b      	cbnz	r3, 80090c6 <__swbuf_r+0x12>
 80090c2:	f7fe f93b 	bl	800733c <__sinit>
 80090c6:	69a3      	ldr	r3, [r4, #24]
 80090c8:	60a3      	str	r3, [r4, #8]
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	071a      	lsls	r2, r3, #28
 80090ce:	d501      	bpl.n	80090d4 <__swbuf_r+0x20>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	b943      	cbnz	r3, 80090e6 <__swbuf_r+0x32>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f82a 	bl	8009130 <__swsetup_r>
 80090dc:	b118      	cbz	r0, 80090e6 <__swbuf_r+0x32>
 80090de:	f04f 37ff 	mov.w	r7, #4294967295
 80090e2:	4638      	mov	r0, r7
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	1a98      	subs	r0, r3, r2
 80090ec:	6963      	ldr	r3, [r4, #20]
 80090ee:	b2f6      	uxtb	r6, r6
 80090f0:	4283      	cmp	r3, r0
 80090f2:	4637      	mov	r7, r6
 80090f4:	dc05      	bgt.n	8009102 <__swbuf_r+0x4e>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff ffb3 	bl	8009064 <_fflush_r>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d1ed      	bne.n	80090de <__swbuf_r+0x2a>
 8009102:	68a3      	ldr	r3, [r4, #8]
 8009104:	3b01      	subs	r3, #1
 8009106:	60a3      	str	r3, [r4, #8]
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	6022      	str	r2, [r4, #0]
 800910e:	701e      	strb	r6, [r3, #0]
 8009110:	6962      	ldr	r2, [r4, #20]
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d004      	beq.n	8009122 <__swbuf_r+0x6e>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	07db      	lsls	r3, r3, #31
 800911c:	d5e1      	bpl.n	80090e2 <__swbuf_r+0x2e>
 800911e:	2e0a      	cmp	r6, #10
 8009120:	d1df      	bne.n	80090e2 <__swbuf_r+0x2e>
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f7ff ff9d 	bl	8009064 <_fflush_r>
 800912a:	2800      	cmp	r0, #0
 800912c:	d0d9      	beq.n	80090e2 <__swbuf_r+0x2e>
 800912e:	e7d6      	b.n	80090de <__swbuf_r+0x2a>

08009130 <__swsetup_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4b29      	ldr	r3, [pc, #164]	@ (80091d8 <__swsetup_r+0xa8>)
 8009134:	4605      	mov	r5, r0
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	460c      	mov	r4, r1
 800913a:	b118      	cbz	r0, 8009144 <__swsetup_r+0x14>
 800913c:	6a03      	ldr	r3, [r0, #32]
 800913e:	b90b      	cbnz	r3, 8009144 <__swsetup_r+0x14>
 8009140:	f7fe f8fc 	bl	800733c <__sinit>
 8009144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009148:	0719      	lsls	r1, r3, #28
 800914a:	d422      	bmi.n	8009192 <__swsetup_r+0x62>
 800914c:	06da      	lsls	r2, r3, #27
 800914e:	d407      	bmi.n	8009160 <__swsetup_r+0x30>
 8009150:	2209      	movs	r2, #9
 8009152:	602a      	str	r2, [r5, #0]
 8009154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	e033      	b.n	80091c8 <__swsetup_r+0x98>
 8009160:	0758      	lsls	r0, r3, #29
 8009162:	d512      	bpl.n	800918a <__swsetup_r+0x5a>
 8009164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009166:	b141      	cbz	r1, 800917a <__swsetup_r+0x4a>
 8009168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800916c:	4299      	cmp	r1, r3
 800916e:	d002      	beq.n	8009176 <__swsetup_r+0x46>
 8009170:	4628      	mov	r0, r5
 8009172:	f7ff f88d 	bl	8008290 <_free_r>
 8009176:	2300      	movs	r3, #0
 8009178:	6363      	str	r3, [r4, #52]	@ 0x34
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	2300      	movs	r3, #0
 8009184:	6063      	str	r3, [r4, #4]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f043 0308 	orr.w	r3, r3, #8
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	b94b      	cbnz	r3, 80091aa <__swsetup_r+0x7a>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800919c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a0:	d003      	beq.n	80091aa <__swsetup_r+0x7a>
 80091a2:	4621      	mov	r1, r4
 80091a4:	4628      	mov	r0, r5
 80091a6:	f000 f8eb 	bl	8009380 <__smakebuf_r>
 80091aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ae:	f013 0201 	ands.w	r2, r3, #1
 80091b2:	d00a      	beq.n	80091ca <__swsetup_r+0x9a>
 80091b4:	2200      	movs	r2, #0
 80091b6:	60a2      	str	r2, [r4, #8]
 80091b8:	6962      	ldr	r2, [r4, #20]
 80091ba:	4252      	negs	r2, r2
 80091bc:	61a2      	str	r2, [r4, #24]
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	b942      	cbnz	r2, 80091d4 <__swsetup_r+0xa4>
 80091c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091c6:	d1c5      	bne.n	8009154 <__swsetup_r+0x24>
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	0799      	lsls	r1, r3, #30
 80091cc:	bf58      	it	pl
 80091ce:	6962      	ldrpl	r2, [r4, #20]
 80091d0:	60a2      	str	r2, [r4, #8]
 80091d2:	e7f4      	b.n	80091be <__swsetup_r+0x8e>
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7f7      	b.n	80091c8 <__swsetup_r+0x98>
 80091d8:	20000024 	.word	0x20000024

080091dc <memmove>:
 80091dc:	4288      	cmp	r0, r1
 80091de:	b510      	push	{r4, lr}
 80091e0:	eb01 0402 	add.w	r4, r1, r2
 80091e4:	d902      	bls.n	80091ec <memmove+0x10>
 80091e6:	4284      	cmp	r4, r0
 80091e8:	4623      	mov	r3, r4
 80091ea:	d807      	bhi.n	80091fc <memmove+0x20>
 80091ec:	1e43      	subs	r3, r0, #1
 80091ee:	42a1      	cmp	r1, r4
 80091f0:	d008      	beq.n	8009204 <memmove+0x28>
 80091f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091fa:	e7f8      	b.n	80091ee <memmove+0x12>
 80091fc:	4402      	add	r2, r0
 80091fe:	4601      	mov	r1, r0
 8009200:	428a      	cmp	r2, r1
 8009202:	d100      	bne.n	8009206 <memmove+0x2a>
 8009204:	bd10      	pop	{r4, pc}
 8009206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800920a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920e:	e7f7      	b.n	8009200 <memmove+0x24>

08009210 <__assert_func>:
 8009210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009212:	4614      	mov	r4, r2
 8009214:	461a      	mov	r2, r3
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <__assert_func+0x2c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4605      	mov	r5, r0
 800921c:	68d8      	ldr	r0, [r3, #12]
 800921e:	b954      	cbnz	r4, 8009236 <__assert_func+0x26>
 8009220:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <__assert_func+0x30>)
 8009222:	461c      	mov	r4, r3
 8009224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009228:	9100      	str	r1, [sp, #0]
 800922a:	462b      	mov	r3, r5
 800922c:	4905      	ldr	r1, [pc, #20]	@ (8009244 <__assert_func+0x34>)
 800922e:	f000 f86f 	bl	8009310 <fiprintf>
 8009232:	f000 f903 	bl	800943c <abort>
 8009236:	4b04      	ldr	r3, [pc, #16]	@ (8009248 <__assert_func+0x38>)
 8009238:	e7f4      	b.n	8009224 <__assert_func+0x14>
 800923a:	bf00      	nop
 800923c:	20000024 	.word	0x20000024
 8009240:	080098be 	.word	0x080098be
 8009244:	08009890 	.word	0x08009890
 8009248:	08009883 	.word	0x08009883

0800924c <_calloc_r>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	fba1 5402 	umull	r5, r4, r1, r2
 8009252:	b93c      	cbnz	r4, 8009264 <_calloc_r+0x18>
 8009254:	4629      	mov	r1, r5
 8009256:	f7fd fb01 	bl	800685c <_malloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	b928      	cbnz	r0, 800926a <_calloc_r+0x1e>
 800925e:	2600      	movs	r6, #0
 8009260:	4630      	mov	r0, r6
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	220c      	movs	r2, #12
 8009266:	6002      	str	r2, [r0, #0]
 8009268:	e7f9      	b.n	800925e <_calloc_r+0x12>
 800926a:	462a      	mov	r2, r5
 800926c:	4621      	mov	r1, r4
 800926e:	f7fe f924 	bl	80074ba <memset>
 8009272:	e7f5      	b.n	8009260 <_calloc_r+0x14>

08009274 <__ascii_mbtowc>:
 8009274:	b082      	sub	sp, #8
 8009276:	b901      	cbnz	r1, 800927a <__ascii_mbtowc+0x6>
 8009278:	a901      	add	r1, sp, #4
 800927a:	b142      	cbz	r2, 800928e <__ascii_mbtowc+0x1a>
 800927c:	b14b      	cbz	r3, 8009292 <__ascii_mbtowc+0x1e>
 800927e:	7813      	ldrb	r3, [r2, #0]
 8009280:	600b      	str	r3, [r1, #0]
 8009282:	7812      	ldrb	r2, [r2, #0]
 8009284:	1e10      	subs	r0, r2, #0
 8009286:	bf18      	it	ne
 8009288:	2001      	movne	r0, #1
 800928a:	b002      	add	sp, #8
 800928c:	4770      	bx	lr
 800928e:	4610      	mov	r0, r2
 8009290:	e7fb      	b.n	800928a <__ascii_mbtowc+0x16>
 8009292:	f06f 0001 	mvn.w	r0, #1
 8009296:	e7f8      	b.n	800928a <__ascii_mbtowc+0x16>

08009298 <_realloc_r>:
 8009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929c:	4680      	mov	r8, r0
 800929e:	4615      	mov	r5, r2
 80092a0:	460c      	mov	r4, r1
 80092a2:	b921      	cbnz	r1, 80092ae <_realloc_r+0x16>
 80092a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	4611      	mov	r1, r2
 80092aa:	f7fd bad7 	b.w	800685c <_malloc_r>
 80092ae:	b92a      	cbnz	r2, 80092bc <_realloc_r+0x24>
 80092b0:	f7fe ffee 	bl	8008290 <_free_r>
 80092b4:	2400      	movs	r4, #0
 80092b6:	4620      	mov	r0, r4
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	f000 f8c5 	bl	800944a <_malloc_usable_size_r>
 80092c0:	4285      	cmp	r5, r0
 80092c2:	4606      	mov	r6, r0
 80092c4:	d802      	bhi.n	80092cc <_realloc_r+0x34>
 80092c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092ca:	d8f4      	bhi.n	80092b6 <_realloc_r+0x1e>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7fd fac4 	bl	800685c <_malloc_r>
 80092d4:	4607      	mov	r7, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0ec      	beq.n	80092b4 <_realloc_r+0x1c>
 80092da:	42b5      	cmp	r5, r6
 80092dc:	462a      	mov	r2, r5
 80092de:	4621      	mov	r1, r4
 80092e0:	bf28      	it	cs
 80092e2:	4632      	movcs	r2, r6
 80092e4:	f7fe f979 	bl	80075da <memcpy>
 80092e8:	4621      	mov	r1, r4
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7fe ffd0 	bl	8008290 <_free_r>
 80092f0:	463c      	mov	r4, r7
 80092f2:	e7e0      	b.n	80092b6 <_realloc_r+0x1e>

080092f4 <__ascii_wctomb>:
 80092f4:	4603      	mov	r3, r0
 80092f6:	4608      	mov	r0, r1
 80092f8:	b141      	cbz	r1, 800930c <__ascii_wctomb+0x18>
 80092fa:	2aff      	cmp	r2, #255	@ 0xff
 80092fc:	d904      	bls.n	8009308 <__ascii_wctomb+0x14>
 80092fe:	228a      	movs	r2, #138	@ 0x8a
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f04f 30ff 	mov.w	r0, #4294967295
 8009306:	4770      	bx	lr
 8009308:	700a      	strb	r2, [r1, #0]
 800930a:	2001      	movs	r0, #1
 800930c:	4770      	bx	lr
	...

08009310 <fiprintf>:
 8009310:	b40e      	push	{r1, r2, r3}
 8009312:	b503      	push	{r0, r1, lr}
 8009314:	4601      	mov	r1, r0
 8009316:	ab03      	add	r3, sp, #12
 8009318:	4805      	ldr	r0, [pc, #20]	@ (8009330 <fiprintf+0x20>)
 800931a:	f853 2b04 	ldr.w	r2, [r3], #4
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	f7ff fd03 	bl	8008d2c <_vfiprintf_r>
 8009326:	b002      	add	sp, #8
 8009328:	f85d eb04 	ldr.w	lr, [sp], #4
 800932c:	b003      	add	sp, #12
 800932e:	4770      	bx	lr
 8009330:	20000024 	.word	0x20000024

08009334 <__swhatbuf_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2900      	cmp	r1, #0
 800933e:	b096      	sub	sp, #88	@ 0x58
 8009340:	4615      	mov	r5, r2
 8009342:	461e      	mov	r6, r3
 8009344:	da0d      	bge.n	8009362 <__swhatbuf_r+0x2e>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800934c:	f04f 0100 	mov.w	r1, #0
 8009350:	bf14      	ite	ne
 8009352:	2340      	movne	r3, #64	@ 0x40
 8009354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009358:	2000      	movs	r0, #0
 800935a:	6031      	str	r1, [r6, #0]
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	b016      	add	sp, #88	@ 0x58
 8009360:	bd70      	pop	{r4, r5, r6, pc}
 8009362:	466a      	mov	r2, sp
 8009364:	f000 f848 	bl	80093f8 <_fstat_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	dbec      	blt.n	8009346 <__swhatbuf_r+0x12>
 800936c:	9901      	ldr	r1, [sp, #4]
 800936e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009376:	4259      	negs	r1, r3
 8009378:	4159      	adcs	r1, r3
 800937a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800937e:	e7eb      	b.n	8009358 <__swhatbuf_r+0x24>

08009380 <__smakebuf_r>:
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009384:	079d      	lsls	r5, r3, #30
 8009386:	4606      	mov	r6, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d507      	bpl.n	800939c <__smakebuf_r+0x1c>
 800938c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	2301      	movs	r3, #1
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	b003      	add	sp, #12
 800939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939c:	ab01      	add	r3, sp, #4
 800939e:	466a      	mov	r2, sp
 80093a0:	f7ff ffc8 	bl	8009334 <__swhatbuf_r>
 80093a4:	9f00      	ldr	r7, [sp, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	4639      	mov	r1, r7
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7fd fa56 	bl	800685c <_malloc_r>
 80093b0:	b948      	cbnz	r0, 80093c6 <__smakebuf_r+0x46>
 80093b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b6:	059a      	lsls	r2, r3, #22
 80093b8:	d4ee      	bmi.n	8009398 <__smakebuf_r+0x18>
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	f043 0302 	orr.w	r3, r3, #2
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	e7e2      	b.n	800938c <__smakebuf_r+0xc>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	6020      	str	r0, [r4, #0]
 80093ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093d6:	b15b      	cbz	r3, 80093f0 <__smakebuf_r+0x70>
 80093d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093dc:	4630      	mov	r0, r6
 80093de:	f000 f81d 	bl	800941c <_isatty_r>
 80093e2:	b128      	cbz	r0, 80093f0 <__smakebuf_r+0x70>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	f023 0303 	bic.w	r3, r3, #3
 80093ea:	f043 0301 	orr.w	r3, r3, #1
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	431d      	orrs	r5, r3
 80093f4:	81a5      	strh	r5, [r4, #12]
 80093f6:	e7cf      	b.n	8009398 <__smakebuf_r+0x18>

080093f8 <_fstat_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d07      	ldr	r5, [pc, #28]	@ (8009418 <_fstat_r+0x20>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f7f8 ffeb 	bl	80023e0 <_fstat>
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	d102      	bne.n	8009414 <_fstat_r+0x1c>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b103      	cbz	r3, 8009414 <_fstat_r+0x1c>
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	bf00      	nop
 8009418:	20000794 	.word	0x20000794

0800941c <_isatty_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d06      	ldr	r5, [pc, #24]	@ (8009438 <_isatty_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7f8 ffea 	bl	8002400 <_isatty>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_isatty_r+0x1a>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_isatty_r+0x1a>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20000794 	.word	0x20000794

0800943c <abort>:
 800943c:	b508      	push	{r3, lr}
 800943e:	2006      	movs	r0, #6
 8009440:	f000 f834 	bl	80094ac <raise>
 8009444:	2001      	movs	r0, #1
 8009446:	f7f8 ff7b 	bl	8002340 <_exit>

0800944a <_malloc_usable_size_r>:
 800944a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944e:	1f18      	subs	r0, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfbc      	itt	lt
 8009454:	580b      	ldrlt	r3, [r1, r0]
 8009456:	18c0      	addlt	r0, r0, r3
 8009458:	4770      	bx	lr

0800945a <_raise_r>:
 800945a:	291f      	cmp	r1, #31
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4605      	mov	r5, r0
 8009460:	460c      	mov	r4, r1
 8009462:	d904      	bls.n	800946e <_raise_r+0x14>
 8009464:	2316      	movs	r3, #22
 8009466:	6003      	str	r3, [r0, #0]
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009470:	b112      	cbz	r2, 8009478 <_raise_r+0x1e>
 8009472:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009476:	b94b      	cbnz	r3, 800948c <_raise_r+0x32>
 8009478:	4628      	mov	r0, r5
 800947a:	f000 f831 	bl	80094e0 <_getpid_r>
 800947e:	4622      	mov	r2, r4
 8009480:	4601      	mov	r1, r0
 8009482:	4628      	mov	r0, r5
 8009484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009488:	f000 b818 	b.w	80094bc <_kill_r>
 800948c:	2b01      	cmp	r3, #1
 800948e:	d00a      	beq.n	80094a6 <_raise_r+0x4c>
 8009490:	1c59      	adds	r1, r3, #1
 8009492:	d103      	bne.n	800949c <_raise_r+0x42>
 8009494:	2316      	movs	r3, #22
 8009496:	6003      	str	r3, [r0, #0]
 8009498:	2001      	movs	r0, #1
 800949a:	e7e7      	b.n	800946c <_raise_r+0x12>
 800949c:	2100      	movs	r1, #0
 800949e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094a2:	4620      	mov	r0, r4
 80094a4:	4798      	blx	r3
 80094a6:	2000      	movs	r0, #0
 80094a8:	e7e0      	b.n	800946c <_raise_r+0x12>
	...

080094ac <raise>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	@ (80094b8 <raise+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bfd2 	b.w	800945a <_raise_r>
 80094b6:	bf00      	nop
 80094b8:	20000024 	.word	0x20000024

080094bc <_kill_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_kill_r+0x20>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7f8 ff29 	bl	8002320 <_kill>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_kill_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_kill_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20000794 	.word	0x20000794

080094e0 <_getpid_r>:
 80094e0:	f7f8 bf16 	b.w	8002310 <_getpid>

080094e4 <_init>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr

080094f0 <_fini>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr
